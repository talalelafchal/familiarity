Over the years, Bluetooth has become a popular technology allowing electronic devices to communicate wirelessly. It is basically a method for data communication that uses short-range radio links to replace cables between computers and their connected units.

Needless to say, the Android platform also includes support for the Bluetooth network stack thereby allowing developers access to the Bluetooth functionality through the Android Bluetooth APIs. Here it is important to note that in order to use Bluetooth features in your Android application, you must declare the Bluetooth permission. This permission is required to perform any Bluetooth communication, such as requesting a connection, accepting a connection, and transferring data.

In this tutorial, we will learn how to implement some of the functionalities provided by the Bluetooth API including scanning for other Bluetooth devices, querying the local Bluetooth adapter for paired Bluetooth devices and displaying the list of paired devices.

Pre-requisites: Eclipse IDE, Android SDK

Step 1: Launch Eclipse IDE and create a new Android application project called AndroidBluetoothDemo with package name com.example

Step 2: Detecting and switching Bluetooth on/off

Before we begin implementing the Bluetooth specific functionalities, letâ€™s first learn how to detect and turn the Bluetooth adapter on and off.

Create a new Activity class called MyBluetoothActivity within the same package and add the following code!

MyBluetoothActivity.java

public class MyBluetoothActivity extends Activity {

    private Button bluetoothOn;
    private Button bluetoothOff;
    private Button bluetoothScan;
    private Button bluetoothPaired;
    private BluetoothAdapter myBluetoothAdapter;

       @Override
       protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        bluetoothOn= (Button)findViewById(R.id.btnOn);
        bluetoothOff= (Button)findViewById(R.id.btnOff);

       }

        bluetoothOn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                if (!myBluetoothAdapter.isEnabled()) {
                    Intent turnOn = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                    startActivityForResult(turnOn, 0);
                    Toast.makeText(getApplicationContext(),"Turned on"
                            ,Toast.LENGTH_LONG).show();
                }
                else{
                    Toast.makeText(getApplicationContext(),"Already on",
                            Toast.LENGTH_LONG).show();
                }
            }
        });

        bluetoothOff.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                myBluetoothAdapter.disable();
                Toast.makeText(getApplicationContext(),"Turned off" ,
                        Toast.LENGTH_LONG).show();
            }
        });
}
Step 3: Scanning for other bluetooth devices

In order to receive the list of bluetooth devices, we have to implement a BroadcastReceiver and register it to the corresponding event. The receiver will listen to the action BluetoothDevice.ACTION_FOUND.

MyBluetoothActivity.java

private ArrayAdapter<String> btArrayAdapter;
private ListView listDevicesFound;

listDevicesFound = (ListView)findViewById(R.id.devicesfound);
btArrayAdapter = new ArrayAdapter<String>(MyBluetoothActivity.this, android.R.layout.simple_list_item_1);

listDevicesFound.setAdapter(btArrayAdapter);

registerReceiver(myBluetoothReceiver, new IntentFilter(BluetoothDevice.ACTION_FOUND));

......

bluetoothScan.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                btArrayAdapter.clear();
                myBluetoothAdapter.startDiscovery();
            }
});


......

private final BroadcastReceiver myBluetoothReceiver = new BroadcastReceiver(){

        @Override
        public void onReceive(Context context, Intent intent) {
            // TODO Auto-generated method stub
            String action = intent.getAction();
            if(BluetoothDevice.ACTION_FOUND.equals(action)) {
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                btArrayAdapter.add(device.getName() + "\n" + device.getAddress());
                btArrayAdapter.notifyDataSetChanged();
            }
}};

......

@Override
protected void onDestroy() {
    // TODO Auto-generated method stub
    super.onDestroy();
    unregisterReceiver(myBluetoothReceiver);
}
Step 4: Querying and displaying the list of paired devices

Once you enable the Bluetooth , you can get a list of paired devices by calling getBondedDevices() method. It returns a set of bluetooth devices.

MyBluetoothActivity.java

private Button bluetoothPaired;
private Set<BluetoothDevice>pairedDevices;
private BluetoothAdapter myBluetoothAdapter;

......

bluetoothPaired = (Button)findViewById(R.id.btnPaired);

......
bluetoothPaired.setOnClickListener(new View.OnClickListener() {

            @SuppressWarnings("unchecked")
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                pairedDevices = myBluetoothAdapter.getBondedDevices();

                @SuppressWarnings("rawtypes")
                ArrayList list = new ArrayList();
                for(BluetoothDevice bt : pairedDevices)
                    list.add(bt.getName());

                Toast.makeText(getApplicationContext(),"Showing Paired Devices",
                        Toast.LENGTH_SHORT).show();
                @SuppressWarnings("rawtypes")
                final ArrayAdapter adapter = new ArrayAdapter(MyBluetoothActivity.this,android.R.layout.simple_list_item_1, list);
                listDevicesFound.setAdapter(adapter);
            }
});
Our overall XML layout would be something like this,

activity_main.xml

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".MyBluetoothActivity" >

    <TextView
        android:id="@+id/txt1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world" />

    <Button
        android:id="@+id/btnOn"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/txt1"
        android:text="@string/on" />

    <Button
        android:id="@+id/btnOff"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/btnOn"
        android:text="@string/off" />

    <Button
        android:id="@+id/btnScan"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/btnOff"
        android:text="@string/scan" />

    <Button
        android:id="@+id/btnPaired"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/btnScan"
        android:text="@string/paired" />

    <ListView
        android:id="@+id/devicesfound"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        android:layout_below="@+id/btnPaired" />

</RelativeLayout>
We also need to make changes to the manifest file as follows!

AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example"
    android:versionCode="1"
    android:versionName="1.0" >

    <uses-sdk
        android:minSdkVersion="8"
        android:targetSdkVersion="18" />

    <uses-permission android:name="android.permission.BLUETOOTH"></uses-permission>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"></uses-permission>

    <application
        android:allowBackup="true"
        android:icon="@drawable/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" >
        <activity
            android:name="com.example.MyBluetoothActivity"
            android:label="@string/app_name" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
