How do I get a reference to the app delegate in Swift?
<p>How do I get a reference to the app delegate in Swift?</p> <p>Ultimately, I want to use the reference to access the managed object context.</p>
<p>The other solution is correct in that it will get you a reference to the application's delegate, but this will not allow you to access any methods or variables added by your subclass of UIApplication, like your managed object context. To resolve this, simply downcast to "AppDelegate" or what ever your UIApplication subclass happens to be called. Like so:</p> <h3>Swift 3.x (Introduced with Xcode 8)</h3> <pre><code>let appDelegate = UIApplication.shared.delegate as! AppDelegate let aVariable = appDelegate.someVariable </code></pre> <h3>Swift 1.2 - 2.x (Introduced with Xcode 6.3)</h3> <pre><code>let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate let aVariable = appDelegate.someVariable </code></pre> <h3>Swift &lt; 1.2</h3> <pre><code>let appDelegate = UIApplication.sharedApplication().delegate as AppDelegate let aVariable = appDelegate.someVariable </code></pre>
<p>It's pretty much the same as in Objective-C</p> <pre><code>let del = UIApplication.sharedApplication().delegate </code></pre>
<p>This could be used for OS X</p> <pre><code>let appDelegate = NSApplication.sharedApplication().delegate as AppDelegate var managedObjectContext = appDelegate.managedObjectContext? </code></pre>
<p>In the XCode 6.2, this also works </p> <pre><code>let appDelegate = UIApplication.sharedApplication().delegate! as AppDelegate let aVariable = appDelegate.someVariable </code></pre>
<h2>More Convenience Constructors</h2> <p>Add at the end of AppDelegate Block</p> <pre><code>func appDelegate () -&gt; AppDelegate { return UIApplication.sharedApplication().delegate as! AppDelegate } </code></pre> <p>How to call a method setRootViewController() from appDelegates</p> <pre><code>appDelegate().setRootViewController() </code></pre>
<h1>SWIFT</h1> <p>Create a method in AppDelegate Class for ex</p> <pre><code>func sharedInstance() -&gt; AppDelegate{ return UIApplication.sharedApplication().delegate as! AppDelegate } </code></pre> <p>and call it some where else for ex</p> <pre><code>let appDelegate : AppDelegate = AppDelegate().sharedInstance() </code></pre>
<p>In Swift, easy to access in your VC's</p> <pre><code>extension UIViewController { var appDelegate:AppDelegate { return UIApplication.sharedApplication().delegate as! AppDelegate } } </code></pre>
<p>Here is the Swift 2.0 version:</p> <pre><code>let delegate = UIApplication.sharedApplication().delegate as? AppDelegate </code></pre> <p>And to access the managed object context:</p> <pre><code> if let delegate = UIApplication.sharedApplication().delegate as? AppDelegate { let moc = delegate.managedObjectContext // your code here } </code></pre> <p>or, using guard:</p> <pre><code> guard let delegate = UIApplication.sharedApplication().delegate as? AppDelegate else { return } let moc = delegate.managedObjectContext // your code here </code></pre>
<p>In my case, I was missing <code>import UIKit</code> on top of my <code>NSManagedObject</code> subclass. After importing it, I could remove that error as <code>UIApplication</code> is the part of <code>UIKit</code></p> <p>Hope it helps others !!!</p>
<p>Appart from what is told here, in my case I missed the import UIKit:</p> <pre><code>import UIKit </code></pre>
<p>1) Make sure you <code>import UIKit</code></p> <p>2) <code>let appDelegate = UIApplication.sharedApplication().delegate! as! AppDelegate</code></p>