What is an optional value in Swift?
<p>From <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2">Apple's documentation</a>:</p> <blockquote> <p>You can use <code>if</code> and <code>let</code> together to work with values that might be missing. These values are represented as optionals. An optional value either contains a value or contains <code>nil</code> to indicate that the value is missing. Write a question mark (<code>?</code>) after the type of a value to mark the value as optional.</p> </blockquote> <p>Why would you want to use an optional value?</p>
<p>Let's take the example of an <code>NSError</code>, if there isn't an error being returned you'd want to make it optional to return Nil. There's no point in assigning a value to it if there isn't an error..</p> <pre><code>var error: NSError? = nil </code></pre> <p>This also allows you to have a default value. So you can set a method a default value if the function isn't passed anything</p> <pre><code>func doesntEnterNumber(x: Int? = 5) -&gt; Bool { if (x == 5){ return true } else { return false } } </code></pre>
<p>You can't have a variable that points to <code>nil</code> in Swift — there are no pointers, and no null pointers. But in an API, you often want to be able to indicate either a specific kind of value, or a lack of value — e.g. does my window have a delegate, and if so, who is it? Optionals are Swift's type-safe, memory-safe way to do this.</p>
<p>Optional value allows you to show absence of value. Little bit like NULL in SQL or NSNull in Objective-C. I guess this will be an improvement as you can use this even for "primitive" types.</p> <pre><code>// Reimplement the Swift standard library's optional type enum OptionalValue&lt;T&gt; { case None case Some(T) } var possibleInteger: OptionalValue&lt;Int&gt; = .None possibleInteger = .Some(100)” </code></pre> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/gb/jEUH0.l">https://itun.es/gb/jEUH0.l</a></p>
<p>An optional in Swift is a variable that can hold either a value or no value. Optionals are written by appending a <code>?</code> to the type:</p> <pre><code>var myOptionalString:String? = "Hello" </code></pre> <p>From <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_399">"The Basics" in the Swift Programming Language</a>:</p> <blockquote> <p>Swift also introduces optional types, which handle the absence of a value. Optionals say either “there is a value, and it equals x” or “there isn’t a value at all”. Optionals are similar to using nil with pointers in Objective-C, but they work for any type, not just classes. Optionals are safer and more expressive than nil pointers in Objective-C and are at the heart of many of Swift’s most powerful features.</p> <p>Optionals are an example of the fact that Swift is a type safe language. Swift helps you to be clear about the types of values your code can work with. If part of your code expects a String, type safety prevents you from passing it an Int by mistake. This enables you to catch and fix errors as early as possible in the development process.</p> </blockquote> <p>Some places optionals are useful:</p> <ul> <li>When a property can be there or not there, like <code>middleName</code> or <code>spouse</code> in a <code>Person</code> class</li> <li>When a method can return a value or nothing, like searching for a match in an array</li> <li>When a method can return either a result or get an error and return nothing</li> <li>Delegate properties (which don't always have to be set)</li> <li>For <code>weak</code> properties in classes. The thing they point to can be set to <code>nil</code></li> <li>For a large resource that might have to be released to reclaim memory</li> </ul> <hr> <p><strong>EDIT:</strong> The following paragraphs using optionals as booleans applies to an earlier version of Swift, nowadays you need to use the shorthand given with <code>if let myString = myString</code>. <em>You can not use an optional as a <code>Boolean</code> type any more</em></p> <p>You can use an optional as a <code>Boolean</code> type in an <code>if</code> or <code>while</code> statement. Here's an example of creating an optional, then checking for its existence:</p> <pre><code>var myString:String? = "Hello" if myString { println(myString) } </code></pre> <p>If you try to do this using a non-optional type it will give a compiler error: "Type 'String' does not conform to protocol 'LogicValue'"</p> <pre><code>var myOtherString:String = "Hello" if myOtherString { // Error println(myOtherString) } </code></pre> <p>Also, if you try to set a non-optional to <code>nil</code> you get the error "Could not find an overload for '__conversion' that accepts the supplied arguments":</p> <pre><code>var myOtherString:String = nil // Error </code></pre> <p>If a variable is declared as an optional, it <em>can</em> be <code>nil</code>. In fact all optionals start with a value of <code>nil</code> until they are set to something:</p> <pre><code>var possibleString:String? = "Hello" possibleString = nil if possibleString { println("It's not nil") } </code></pre> <p>Here's one way to use optionals:</p> <pre><code>var nameString:String? = "Zed" // could also be nil if nameString { println("\(nameString)'s alive") } else { println("Zed's dead") } </code></pre> <hr> <p>You can use optionals for checking the existence of a value in a dictionary:</p> <pre><code>let users = [ "sjobs" : "Steve Jobs", "bgates" : "Bill Gates"] let steve: String? = users["sjobs"] if steve { // if steve != nil println("\(steve) is in the dictionary") } </code></pre> <p>There's a shorthand for checking whether a value exists, then doing something with it. You can convert from this style:</p> <pre><code>let possibleName: String? = users["ballmer"] if possibleName { let foundName = possibleName! // Force out value with unwrap operator (!) println("Name: \(foundName)") } </code></pre> <p>...to this shorthand, which says "If <code>possibleName</code> has a value, unwrap it and set its value to <code>foundName</code>.</p> <pre><code>if let foundName = possibleName { println("Name: \(foundName)") } </code></pre> <p>You use an exclamation mark "!" to unwrap the optional. You can't use an optional for much (except checking its nilness) until it's unwrapped. Note that unwrapping an optional that's <code>nil</code> will cause a crash. Always check that a value exists before unwrapping:</p> <pre><code>// Crash: fatal error: Can't unwrap Optional. let name = possibleName! </code></pre> <hr> <p>More from the Swift guide:</p> <blockquote> <p>In an if statement, the conditional must be a Boolean expression—this means that code such as <code>if score { ... }</code> is an error, not an implicit comparison to zero.</p> <p>You can use if and let together to work with values that might be missing. These values are represented as optionals. An optional value either contains a value or contains nil to indicate that the value is missing. Write a question mark (?) after the type of a value to mark the value as optional.</p> </blockquote> <p>It may be helpful to see the same thing in Objective-C:</p> <pre><code>NSString *myString = @"Hello"; if (myString) { NSLog(@"%@", myString); } </code></pre> <p>Objective-C is more lenient about what it will allow to mean "false" (<code>NO</code>, <code>0</code>, <code>nil</code>). Swift is more restrictive and wants a boolean (or something which "unwraps" to a boolean). Using optionals also gets rid of the need for stuff like <code>NSNotFound</code> and using <code>-1</code> to represent false.</p> <hr> <p>More resources:<br> - <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_6">The Swift Programming Guide</a><br> - <a href="https://medium.com/@rrridges/swift-optionals-a10dcfd8aab5">Optionals in Swift (Medium)</a><br> - <a href="https://developer.apple.com/videos/wwdc/2014/">WWDC Session 402 "Introduction to Swift" (starts around 14:15)</a></p> <p>To finish, here's a poem from 1899 about optionals:</p> <p><em>Yesterday upon the stair<br> I met a man who wasn’t there<br> He wasn’t there again today<br> I wish, I wish he’d go away</em><br> <a href="http://en.wikipedia.org/wiki/Antigonish_%28poem%29"><em>Antigonish</em></a></p>
<p>In objective C variables with no value were equal to 'nil'(it was also possible to use 'nil' values same as 0 and false), hence it was possible to use variables in conditional statements (Variables having values are same as 'TRUE' and those with no values were equal to 'FALSE').</p> <p>Swift provides type safety by providing 'optional value'. i.e. It prevents errors formed from assigning variables of different types.</p> <p>So in Swift, only booleans can be provided on conditional statements.</p> <pre><code>var hw = "Hello World" </code></pre> <p>Here, even-though 'hw' is a string, it can't be used in an if statement like in objective C.</p> <pre><code>//This is an error if hw {..} </code></pre> <p>For that it needs to be created as,</p> <pre><code>var nhw : String? = "Hello World" //This is correct if nhw {..} </code></pre>
<p>Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</p> <p>refer below resource to understand deeply.. <a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html" rel="nofollow">https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html</a></p>
<p>I made a short answer, that sums up most of the above, to clean the uncertainty that was in my head as a beginner:</p> <p>Opposed to Objective-C, no variable can contain <strong>nil</strong> in Swift, so the Optional variable type was added (variables suffixed by "?"):</p> <pre><code> var aString = nil //error </code></pre> <p>The big difference is that the Optional variables don't directly store values (as a normal Obj-C variables would) they contain <strong>two states</strong>: "<strong>has a value</strong>" or "<strong>has nil</strong>":</p> <pre><code> var aString: String? = "Hello, World!" aString = nil //correct, now it contains the state "has nil" </code></pre> <p>That being, you can check those variables in different situations:</p> <pre><code>if let myString = aString? { println(myString) } else { println("It's nil") // this will print in our case } </code></pre> <p>By using the "!" suffix, you can also access the values wrapped in them, <strong>only if those exist</strong>. (i.e it is not <strong>nil</strong>):</p> <pre><code>let aString: String? = "Hello, World!" // var anotherString: String = aString //error var anotherString: String = aString! println(anotherString) //it will print "Hello, World!" </code></pre> <p>That's why you need to use "?" and "!" and not use all of them by default. (this was my biggest bewilderment)</p> <p>I also agree with the answer above: <em>Optional type cannot be used as a boolean</em>.</p>
<p>Here is an equivalent optional declaration in Swift:</p> <pre><code>var middleName: String? </code></pre> <p>This declaration creates a variable named middleName of type String. The question mark (?) after the String variable type indicates that the middleName variable can contain a value that can either be a String or nil. Anyone looking at this code immediately knows that middleName can be nil. It's self-documenting!</p> <p>If you don't specify an initial value for an optional constant or variable (as shown above) the value is automatically set to nil for you. If you prefer, you can explicitly set the initial value to nil:</p> <pre><code>var middleName: String? = nil </code></pre> <p>for more detail for optional read below link</p> <p><a href="http://www.iphonelife.com/blog/31369/swift-101-working-swifts-new-optional-values" rel="nofollow">http://www.iphonelife.com/blog/31369/swift-101-working-swifts-new-optional-values</a></p>
<p>An optional means that Swift is not entirely sure if the value corresponds to the type: for example, Int? means that Swift is not entirely sure whether the number is an Int.</p> <blockquote> <p>To remove it, there are three methods you could employ.</p> </blockquote> <p>1) If you are absolutely sure of the type, you can use an exclamation mark to force unwrap it, like this:</p> <pre><code>// Here is an optional variable: var age: Int? // Here is how you would force unwrap it: var unwrappedAge = age! </code></pre> <p>If you do force unwrap an optional and it is equal to nil, you may encounter this crash error:</p> <p><a href="https://i.stack.imgur.com/DmJJn.png" rel="nofollow"><img src="https://i.stack.imgur.com/DmJJn.png" alt="enter image description here"></a></p> <p>This is not necessarily safe, so here's a method that might prevent crashing in case you are not certain of the type and value:</p> <blockquote> <p>Methods 2 and three safeguard against this problem.</p> </blockquote> <p>2) The Implicitly Unwrapped Optional</p> <pre><code> if let unwrappedAge = age { // continue in here } </code></pre> <blockquote> <p>Note that the unwrapped type is now <strong>Int</strong>, rather than <strong>Int?</strong>.</p> </blockquote> <p>3) The guard statement</p> <pre><code> guard let unwrappedAge = age else { // continue in here } </code></pre> <p>From here, you can go ahead and use the unwrapped variable. Make sure only to force unwrap (with an !), if you are sure of the type of the variable.</p> <blockquote> <p>Good luck with your project!</p> </blockquote>