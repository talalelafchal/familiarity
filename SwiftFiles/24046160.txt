How to I import 3rd party frameworks into Xcode Playground?
<p>How do I import 3rd part frameworks into Xcode Playground? </p> <p>Swift Playground obviously has a framework import mechanism because we can import <code>Cocoa</code>, <code>SpriteKit</code>, and in an OSX Playground, <code>XCPlayground</code> (<code>XCPlayground</code> seems missing from iOS, oddly) </p> <p>What I'd really like to do is hide code from my playground and be able to show a minimal example. Any thoughts on how to load a Framework into Swift playground?</p> <p>See also: </p> <ul> <li><a href="http://stackoverflow.com/questions/24045245/how-to-import-own-classes-from-your-own-project-into-a-playground">How to import own classes from your own project into a Playground</a></li> <li><a href="http://stackoverflow.com/questions/24043240/is-it-possible-to-import-objective-c-code-into-a-swift-playground">Is it possible to import third-party Objective-C code into a Swift playground?</a></li> </ul> <p>(This question is different because the request is to use a <em>framework</em> in Playground rather than simply regular <code>swift</code> files)</p>
<p><s>Like using Objective-C classes in Swift code, you can import 3rd-party library/classes into your project and Xcode will ask you if you wanna create a <code>&lt;#YourProjectName&gt;-Bridging-Header</code> header file. Choose yes and import all header files you need in that file. After that, in your playground, you can simply do <code>import &lt;#YourProjectName&gt;-Bridging-Header</code> after <code>import UIKit</code> and you will be able to use the classes you imported to your project.</s></p> <p>Update: this is actually incorrect. Please see my comment below. Sorry for any confusion...</p>
<p><strike>There is currently no supported way to import your own framework or app code into a playground, short of pasting it into the playground editor. We're aware that this is very desirable functionality, but as always we encourage people to "vote with bugreporter" at bugreport.apple.com</strike></p> <p><strike>Right now, if you're just trying to hide code for showing in an example, code folding in the editor might do the trick.</strike></p> <p>It is now possible to import your own frameworks into a playground. This provides a way to share code between your applications and playgrounds, which can both import your frameworks. To do this, your playground must be in the same workspace as the project that produces your framework. You must have already built your framework. If it is an iOS framework, it must be built for a 64-bit run destination (e.g. iPhone 5s). You must have an active scheme which builds at least one target (that target's build location will be used in the framework search path for the playground). Your "Build Location" preference (in advanced "Locations" settings) should not be set to "Legacy". If your framework is not a Swift framework the "Defines Module" build setting must be set to "Yes". Once all these conditions are fulfilled, importing your framework will work in a playground.</p>
<p>Edited: As of Beta5 this is now supported when the playground is part of the workspace that builds the framework as a target. There are more details on the Apple dev forums site, but hopefully @Rick Ballard will add them to his answer here and that should becoke the definitive answer for this question.</p> <p>Don't do the below anymore!</p> <hr> <p>For the short term, while there's no supported solution, if you're producing a Module/Framework you can copy it into the SDKs <code>System/Library/Frameworks</code> directory and then just <code>import &lt;#Module#&gt;</code> the same way as you import system Frameworks.</p> <p>For an OS X Playground: <code>/Applications/Xcode6-Beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/System/Library/Frameworks</code></p> <p>And for iOS: <code>/Applications/Xcode6-Beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/</code></p> <p>But before you do that... go file a radar as @Rick says in his answer.</p>
<p>It's possible since now. Download new XCode Beta 5</p>
<p>I've written a <a href="http://ihunter.svbtle.com/how-to-import-framework-in-playground" rel="nofollow">tutorial</a> covering import of custom frameworks in Beta 6</p> <p>In short, if you've got your playground and framework either in the same project or workspace, and your framework is built for 64 bits (even for iOS), they play very well together.</p>
<p>source: <a href="http://qiita.com/ryokosuge/items/2551cd4faa9dca324342" rel="nofollow">http://qiita.com/ryokosuge/items/2551cd4faa9dca324342</a></p> <p>If there is anyone who still had difficulty understanding how to go about it after reading the accepted answer, this may help.</p> <p>It's not in English though so I will explain here:</p> <p>Using Carthage:</p> <p>1: Setup your Cartfile in the root of the project, add your libraries and run:</p> <p><code>carthage update --platform iOS --use-submodules</code></p> <p>2: Make sure your project is saved as a <code>Workspace</code>. From the Xcode menu bar: <code>File</code> > <code>Save As Workspace</code>. Shutdown Xcode and reopen from the new <code>.xcworkspace</code> file.</p> <p>3: Add your library's <code>.xcodeproj</code> file in your workspace: <code>File</code> > <code>Add files to "your_workspace_name"</code>. Then find it in: <code>${SRCROOT}/Carthage/Checkouts/your_library_name/your_library_name.xcodeproj</code></p> <p>4: Find the <code>Embedded Binaries</code> and <code>Linked Frameworks and Libraries</code> section in your project's general settings. Add your library's <code>.framework</code> file to both.</p> <p>5: Clean(⇧+⌘+K) and build(⌘+B).</p> <p>6: Import your library in the playground.</p>