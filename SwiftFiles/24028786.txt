Swift Class is not constructible
<p>I'm following along with the iBook for swift programming, but I am getting an error when I try to contruct a class with var. Here is a stuct and a class:</p> <pre><code>struct Resolution { var width = 0 var height = 0 } class VideoMode { var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String? } </code></pre> <p>I can create an instance of the Resolution struct just fine, but I can't seem to make one for VideoMode Class.</p> <pre><code> var r = Resolution() println("Width:\(r.width) Height:\(r.height)") r.height = 1234 r.width = 9877 println("Width:\(r.width) Height:\(r.height)") var vm = VideoMode() //Says that 'VideoMode' is not constructible with () let vm = VideoMode() //Apparently this works though.... why? vm.resolution.width = 22222 vm.resolution.height = 1234 vm.name = "Calimari" print(vm) </code></pre> <p>I find this strange can anyone explain?</p> <p>Update: Apparently it works ok in playground. I am not running this in playground. I am running it using the master detail template using swift code. I added the "var vm = VideoMode()" in the viewDidLoad method and I get an error. But it seems to be ok if I change it to "let". No clue why that makes a difference.</p> <p><img src="https://i.stack.imgur.com/MQIGT.png" alt="enter image description here"></p>
<p>Apparently the Question mark at the end of the "name" variable declaration was preventing this from constructing.</p> <pre><code>//Implementation file of VideoMode class VideoMode { var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String = "" //removed the question mark } //.....in another class var vm = VideoMode(); //seems to work after making the above changes to the class declaration </code></pre>
<p>I guess you forget to put <code>: NSObject</code></p> <p>like this:</p> <pre><code>class VideoMode: NSObject { var resolution = Resolution() var interlaced = false var frameRate = 0.0 var name: String? } </code></pre>
<p>If you don't define <strong>default values</strong> for all stored properties then you <strong>must</strong> define <code>init()</code>.</p> <pre><code>var name: String? // There's no default value here. Either set name to `nil` or define init() </code></pre> <p>Exerpt from the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Initialization.html" rel="nofollow">Swift Documentation</a>:</p> <blockquote> <p>Classes and structures <em>must</em> set all of their stored properties to an appropriate initial value by the time an instance of that class or structure is created. Stored properties cannot be left in an indeterminate state.</p> <p>You can set an initial value for a stored property within an initializer, or by assigning a default property value as part of the property’s definition. These actions are described in the following sections.</p> </blockquote> <hr> <h2>Addendum:</h2> <p>As stressed by user @valfer, I've <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html//apple_ref/doc/uid/TP40014097-CH18-XID_315" rel="nofollow">found the following</a>:</p> <blockquote> <h3>Optional Property Types</h3> <p>[...] Properties of optional type are automatically initialized with a value of nil, indicating that the property is deliberately intended to have “no value yet” during initialization.</p> </blockquote> <p>I ignore if the above was present from the get-go or if it was added after the fact as the language is in beta at the time of this writing and is still in flux.</p>