CGBitmapContextCreate error with swift
<p>I am trying to create a CGContext in swift. It compiles but throws an error at runtime.</p> <pre><code>let colorSpace:CGColorSpace = CGColorSpaceCreateDeviceRGB() let context:CGContext = CGBitmapContextCreate(nil, 20, 20, 8, 0, colorSpace, CGBitmapInfo.AlphaInfoMask) CGColorSpaceRelease(colorSpace); .... </code></pre> <p>And the error is:</p> <pre><code>Error: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 32 bits/pixel; 3-component color space; unrecognized; 96 bytes/row. fatal error: Can't unwrap Optional.None </code></pre>
<p>Just in case somebody is running into the same problem. The snippet below finally works.</p> <pre><code>let colorSpace:CGColorSpace = CGColorSpaceCreateDeviceRGB() let bitmapInfo = CGBitmapInfo(CGImageAlphaInfo.PremultipliedLast.rawValue) let context = CGBitmapContextCreate(nil, UInt(rect.size.width), UInt(rect.size.height), 8, 0, colorSpace, bitmapInfo) </code></pre> <p>It generates a 32 bit RGBA context in swift</p>
<p>CGBitmapInfo.AlphaInfoMask is not a valid bitmap info.</p> <p>Try setting CGBitmapInfo.AlphaLast or CGBitmapInfo.AlphaFirst.</p>
<p>I had some issues in Swift 1.2 using <code>UInt</code>, now I'm using <code>Int</code> and it's working. This Example shows how to convert an Image to a grayscale image.</p> <pre><code> let imageRect = self.myImage.frame let colorSpace = CGColorSpaceCreateDeviceGray() let width = imageRect.width let height = imageRect.height let bitmapInfo = CGBitmapInfo(CGImageAlphaInfo.None.rawValue) let context = CGBitmapContextCreate(nil, Int(width), Int(height), 8, 0, colorSpace, bitmapInfo) </code></pre>
<p>In Swift 2.1 one can access the fields properly, and even OR them together:</p> <pre><code>let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.PremultipliedFirst.rawValue | CGBitmapInfo.ByteOrder32Little.rawValue) let context = CGBitmapContextCreate(baseAddress, width, height, 8, bytesPerRow, colorSpace, bitmapInfo.rawValue); </code></pre> <p>Whole lot of 'rawValue' going on :)</p> <p>You don't even need to separate out the bitmapInfo, and can do a one-liner:</p> <pre><code>let context = CGBitmapContextCreate(baseAddress, width, height, 8, bytesPerRow, colorSpace, CGImageAlphaInfo.PremultipliedFirst.rawValue | CGBitmapInfo.ByteOrder32Little.rawValue </code></pre>
<p>In Swift 2.2:</p> <pre><code>let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.PremultipliedLast.rawValue).rawValue let colorSpace = CGColorSpaceCreateDeviceRGB() let context = CGBitmapContextCreate(nil, Int(width), Int(height), 8, 0, colorSpace, bitmapInfo) </code></pre>
<p>Updated for Swift 3:</p> <pre><code> let colorSpace = CGColorSpaceCreateDeviceRGB() let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.premultipliedLast.rawValue) guard let context = CGContext.init(data: nil, width: Int(size.width), height: Int(size.height), bitsPerComponent: Int(bitsPerComponent), bytesPerRow: Int(bytesPerRow), space: colorSpace, bitmapInfo: UInt32(bitmapInfo.rawValue)) else { // cannot create context - handle error } </code></pre>