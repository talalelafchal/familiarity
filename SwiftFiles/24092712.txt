How to remove an element of a given value from an array in Swift
<p>I want to remove all elements of value x from an array that contains x, y and z elements</p> <pre><code>let arr = ['a', 'b', 'c', 'b'] </code></pre> <p>How can I remove all elements of value 'b' from arr?</p>
<p>A filter:</p> <pre><code> let farray = arr.filter() {$0 != "b"} </code></pre>
<p>A general approach is to exploit first class procedures. (However, this approach is <em>much</em> more powerful than what is required for your question.) To illustrate, say you want to avoid <em>"Justin"</em> repeatedly in many collections.</p> <pre><code>let avoidJustin = notEqualTester ("Justin") let arrayOfUsers = // ... arrayOfUsers.filter (avoidJustin) let arrayOfFriends = // ... arrayOfFriends.filter (avoidJustin) </code></pre> <p>With this, you avoid repeatedly creating a closure each time you want to avoid Justin. Here is <code>notEqualTester</code> which, given a <code>that</code>, returns a function of <code>this</code> that returns <code>this != that</code>.</p> <pre><code>func notEqualTester&lt;T: Equatable&gt; (that:T) -&gt; ((this:T) -&gt; Bool) { return { (this:T) -&gt; Bool in return this != that } } </code></pre> <p>The returned closure for <code>this</code> <em>captures</em> the value for <code>that</code> - which can be useful when <code>that</code> is no longer available.</p>
<pre><code>var Array : [String] Array = ["one","two","one"] let itemToRemove = "one" while Array.contains(itemToRemove) { if let itemToRemoveIndex = Array.indexOf(itemToRemove) { Array.removeAtIndex(itemToRemoveIndex) } } print(Array) </code></pre> <p>Works on Swift 2.0.</p>