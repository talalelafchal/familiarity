SourceKitService Terminated
<p>I am having a issue with Xcode where the error "Source Kit Service Terminated" is popping up and all syntax highlighting and code completion is gone in Swift. How can I fix this? </p> <p>Here is an example image:</p> <p><img src="https://i.stack.imgur.com/VGwbS.png" alt="enter image description here"></p>
<p>In order to fix this you may have some weird issue with your Swift code. For instance having multiple defintions of IBOutlets because you were in the middle of copying and pasting. usually it is just a syntax error that couldnt be handled.</p>
<p>Is your project named <code>Swift</code>? With seeing that message, build would be failed too(<code>&lt;unknown&gt;:0: error: module name "Swift" is reserved for the standard library</code>). Try using another project name such as <code>SwiftTest</code>. It would work.</p>
<p>Use other name than Swift for the project. "Swift" is reserved.</p>
<p>I found that by explicitly (statically) typing the variable types, rather than inferring them, solved the issue for me.</p>
<p>Reported to Apple (#17266321) :</p> <p>Details:</p> <p>Summary: If we try to print a dictionary with value as an array a pop-up keeps on popping saying -"SourceKit terminated. Editor functionality temporaly limited". Xcode Freezes and looses context recognition causing text to be blackened.</p> <p>Steps to Reproduce: 1. Create an array as - "var iOSHistoryArray = ["iOS6","iOS7","iOS8",]"</p> <ol> <li><p>Create an dictionary as -"var MacOSYosemiteFeatures:Dictionary = ["Device":iOSHistoryArray]".</p></li> <li><p>Print the dictionary as - "println("Dictionary containing Array value : %@ \n",MacOSYosemiteFeatures)" <strong>(&lt;&lt;- Culprit-->>)</strong></p></li> <li><p>The step 3 causes the issue commenting which makes the Xcode functional again.</p></li> </ol> <p>Expected Results: Xcode should function normally.</p> <p>Actual Results: Xcode becomes nonfunctional, looses context recognition (All font is lost and all text becomes plain black), whole Xcode becomes Inactive.</p> <p>Version: Version 6.0 (6A215l)</p>
<p>When this error starts popping up, just comment out the last/recent piece of code you wrote and wait for a while. The syntax highlighting should reappear. This is how I work around the problem.</p> <pre><code> func someFunc() -&gt; (Int?, Int?, Int?) { var retVal1:Int? = nil var retVal2:Int? = nil var retVal3:Int? = nil //some other code //commenting out the line below helped me //(retVal1, retVal2, retVal3) return (retVal1, retVal2, retVal3) } </code></pre>
<p>I believe I may have found a more general purpose solution. Below are the steps I used to encourage Xcode not to produce the <code>SourceKitService Terminated</code> error.</p> <hr> <h2>The symptoms I was having:</h2> <ul> <li>When I would start up a new playground, I would receive an error about not being able to communicate with the playground (<code>Error running playground: Failed prepare for communication with playground.</code> See <a href="https://twitter.com/rknLA/status/473904257154813953">this image on twitter</a>.</li> <li>When I would switch the playground from <code>OS X</code> to <code>iOS</code>, I would receive another error (unfortunately I did not write that one down).</li> <li>When I would start to type in an iOS based Swift project, attempting to use code completion/intellisense on any UIKit specific class, I would receive the <code>SourceKitService Terminated</code> issue in this thread.</li> </ul> <hr> <h2>Debugging process:</h2> <ul> <li>I started by looking through google for SourceKitService, this got very little.</li> <li>I then started monitoring Console.app while using Xcode. This showed a couple errors: <ul> <li><code>IDEPlaygroundDocument: Error encountered running playground</code></li> <li><code>com.apple.CoreSimulator.CoreSimulatorService[3952]: The runtime for the selected device is not installed.</code></li> </ul></li> </ul> <hr> <h2>What I did to correct this issue.</h2> <p>If you are only having an issue within the context of a Swift project, try this alone first. If that doesn't work, then try all of the steps further below.</p> <ol> <li>Open your project and change the target's deployment target to something &lt;= 7.1.</li> </ol> <p>The more lengthy and involved process. (The first 3 steps are not for sure helpful, but I did them, and so record them here)</p> <ol> <li>Completely delete all copies of Xcode on your system.</li> <li>Restart your computer.</li> <li>Reinstall Xcode6-beta only.</li> <li>Verify that you still have the issue in playground and/or projects.</li> <li>Open iOS Simulator.</li> <li>Hardware -> Device -> Manage Devices</li> <li>Remove all devices.</li> <li>Recreate all devices you want. I appended the iOS version to the end of the name, just because.</li> <li>Restart Xcode and the simulator.</li> <li>Verify that at least playgrounds no longer throw issues when switched from <code>OS X</code> to <code>iOS</code>.</li> <li>Open your project and change the target's deployment target to something &lt;= 7.1.</li> </ol> <hr> <h2>Analysis</h2> <p>It appears the issue is with Xcode6 not being able to properly find, and connect, to the simulator. I have not been able to determine why this is the case, but this has allowed me to continue developing with Swift. This may have to do with the fact the simulator binaries <a href="https://twitter.com/EricShapiro/status/474306615718318080">seem to have moved</a>.</p>
<p>It started happening on my spritekit project after inserting the touchesMoved-function. This function uses forced unwrapping, which seems to cause the problem:</p> <pre><code>override func touchesMoved(touches: NSSet!, withEvent event: UIEvent!) </code></pre> <p>After removing the exclamation marks and thus stopping forced unwrapping, the SourceKitService stopped crashing.</p> <p>Hope this helps!</p>
<p>A program consisting only of these two lines (possibly wrong in terms of Swift syntax) is enough to cause the "SourceKitService Terminated" error here:</p> <pre><code>var x = 42 println("Hello", x) </code></pre> <p>Using <code>let</code> instead of <code>var</code> makes the editor behave normally again. Xcode version 6.0 (6A215l)</p>
<p>Got same issue today, the thing was with <code>println</code>, I just tried the old NSLog style to print a value:</p> <pre><code>// something like this println("value = %@", valueObj) </code></pre> <p>The way how we should compose strings in swift has evolved from printf style to inline style, so now you embed your values right into the format string like this:</p> <pre><code>"Here goes \(YOUR_VARIABLE)" </code></pre> <p>So, for the example above the solution is:</p> <pre><code>println("value =\(valueObj)") </code></pre>
<p>Try It:</p> <blockquote> <p>There is a bug in the Swift compiler / indexer. Some line or lines in your code is giving it difficulty. You will have to edit your code with some other text editor to comment out the offending line(s) before you will be able to open that project with Xcode. If you have no clue what the problem is, comment out all your code. Once you have the project open, you can start bringing back code little by little until the rise in CPU activity tells you that you've found the problem.</p> </blockquote>
<p>I had same issue with Xcode6 beta 3 for a project created in beta 2.</p> <p>It was because of new breaking changes in swift language i.e. array declaration syntax.</p> <p>Check for the effected code due to breaking changes in beta 3.</p> <p><a href="http://adcdownload.apple.com//Developer_Tools/xcode_6_beta_3_lpw27r/xcode_6_beta_3_release_notes__.pdf" rel="nofollow">http://adcdownload.apple.com//Developer_Tools/xcode_6_beta_3_lpw27r/xcode_6_beta_3_release_notes__.pdf</a></p> <p>One of the example in my case was:</p> <p>I had to change:</p> <pre><code>var tabBarController : UITabBarController = self.window?.rootViewController as UITabBarController; </code></pre> <p>to </p> <pre><code>var tabBarController : UITabBarController = self.window!.rootViewController as UITabBarController </code></pre> <p><strong>Conclusion: Looks like if there is an error in source code, in some conditions this error is produced by Xcode.</strong></p> <p><strong>Solution till the bug is fixed: Check for the error manually :)</strong></p> <p>Goodluck!</p>
<p>I found <a href="https://devforums.apple.com/message/1002106#1002106"><strong>a solution</strong></a> on Apple's Developer Forums (which requires login, so I'll explain it here too).</p> <p><strong>TLDR</strong>: Don't import a <code>@protocol</code> in your Objective-C to Swift bridging header that is named the same as an <code>@interface</code>. For example, the Facebook SDK has both a protocol and an interface named "FBGraphObject".</p> <p>Here's the forum post:</p> <blockquote> <p>Adding Facebook SDK causes SourceKitService to crash. If you want to use beta 3 and you need Facebook SDK, one work around that I found and is working for me is refactoring Facebook SDK's @protocol FBGraphObject and renaming it to something like @protocol FBGraphObjectProtocol as an @interface FBGraphObject also exists and apparently SourceKit doesn't like it.</p> <p>It sure is a temporary solution just to keep you functional and you'll have to use Cocoapods or otherwise build Facebook SDK yourself rather than using the framework library.</p> <p>For the time being, you'll need to make sure you don't have conflicting @protocol and @interface declarations and that includes 3rd party libraries you may be using.</p> <p>This cost me today, hope it helps!</p> <hr> <p>Posted by <strong>e.parto</strong> on <strong>July 10, 2014</strong></p> </blockquote>
<p>Problem: </p> <ul> <li>If there is an error in source code, the "SourceKitService Terminated" pop up may appear and code highlighting stops working. It may or may not happen, when it does its under multiple different conditions. </li> </ul> <p>My case: Installed beta 3, OSX only project, one file detected the "half-closed range operator has been changed from .. to ..&lt;" error. The pop up starts appearing and code highlighting starts failing. </p> <p>Solution: </p> <ul> <li>Fix error detected by Xcode</li> <li>Change to a different .swift in Navigator, come back to the original</li> <li>Syntax highlighting reappears and "SourceKitService Terminated" pop up is gone</li> </ul>
<p>I had this problem every few seconds in Xcode 6 Beta 3, and it continued even in completely new projects. I changed the Deployment Target from 8.0 to 7.1 and it has stopped.</p>
<p>In xcode, go to your menu bar >> window >> devices (shift+cmd+2) a new window will pop up, and on the bottom left, add a new simulator, specifically one running on iOS 8.0 to the existing list edit: you might need to restart xcode</p> <p>refrence:<a href="http://www.reddit.com/r/swift/comments/2bznfo/error_running_playground_unable_to_find_suitable/" rel="nofollow">http://www.reddit.com/r/swift/comments/2bznfo/error_running_playground_unable_to_find_suitable/</a></p>
<p>The solution for me happened to be changing the simulator. I was using iPhone 5S for my simulator and when I switched it to iPhone 5, everything worked perfectly. Hopefully a future version will fix it altogether.</p>
<p>In my case I had imported missing files in bridged header. After I deleted wrong imports the error notification gone.</p>
<p>SourceKitService crashes on my system as soon as I type</p> <pre><code>extension foo { </code></pre> <p>I'm using Xcode 6 beta 6 and it does not matter if I type it into an empty file or add it to an existing one. As soon as the source contains one <code>extension</code> block, it will crash. <strong>This happens even on newly created projects.</strong></p> <p>My "solution" is to avoid extension in the sources I'm currently working on. I comment out the end of a class block and the beginning of the extension block. As soon as I have finished my work on the class, I comment them in again:</p> <pre><code>class MyClass { [... my stuff ...] //} // //extension MyClass { } </code></pre>
<p>I had the same error with the nested Objective-C++ project that now includes Framework with Swift code. In order to fix this issue I had to explicitly build the framework. Once I did that issue is gone, and doesn't come back ;)</p>
<p>The answer to mine (Xcode6-Beta7) was simply to delete the Derived Data folder.</p> <p><code>Preferences &gt; Locations &gt; Derived Data &gt; click the arrow to open in Finder &gt; trash it.</code></p> <p>Hope this helps someone. There's obviously many reasons why this crash can occur.</p>
<p>Still happening with xcode 6 Version 6.0 (6A313)</p> <ul> <li>Create a new project</li> <li>Add a Framework &amp; Library </li> <li>Select cocoa touch framework</li> <li>Add a Swift file</li> <li>Add a class to the swift file</li> </ul> <p>Crashes</p> <p>ps: brand new mac mini, no previous xcode installs, nothing exotic. Just a beta product I suppose.</p>
<p><strong>Xcode 6.1 Beta 3:</strong></p> <p>As soon as you define a non-private type alias (e.g. <code>typealias Foo = Int</code>) in one Swift file an type the letter <code>c</code> in another file the SourceKitService crashes. </p> <p>Solution is either resign from using type aliases, wait for the next beta release or wrap your type aliases in class definitions:</p> <pre><code>public class DummyClass { public typealias Foo = String } </code></pre> <p>and use it like this:</p> <pre><code>var myVar:DummyClass.Foo? </code></pre>
<p>Changing the deployment target to iOS 8.0 worked for me. I know someone said moving it to &lt;=7.1 worked, but this problem seems to come in from multiple sources, so this alternative may work.</p>
<p>I found that removing derived data from terminal resolves the issue until next crash. :S</p> <p>It is located at: /Users/{User name}/Library/Developer/Xcode/DerivedData/{Project Name}-{Random char sequence}</p> <p>I hope this helps.</p>
<p>Quit Xcode if it's open. Then from Terminal run:</p> <pre><code>defaults delete com.apple.dt.Xcode </code></pre> <p>This will restore Xcode to the default settings. Open Xcode and everything should work again.</p>
<p>So far the 2 most common causes for me have been: </p> <ul> <li>semicolons at the end of lines</li> <li>importing frameworks that are not referenced in the file</li> </ul>
<p>I think I figured out one (as there are probably many) of the reasons this occurs.</p> <p><strong>In my case, I was importing Objective-C files through the Bridging Header that had one of the following true:</strong></p> <ol> <li>The implementation file (.m) for the Objective-C import, did not have the app target properly set.</li> <li>The Objective-C file only had a header (.h) file and NOT an implementation (.m) file. <em>(Again, I think this is part of the "no proper app target" set, as you can only set targets in the .m files and not the .h files)</em></li> </ol> <p>Fixing the app targets on the Objective-C files OR removing the import of those file(s) in the Bridging Header all together seems to fix the issue.</p> <p>FYI - If you need to set the target of Header (.h) files that have no Implementation (.m) file, you can follow these simple steps: <a href="http://stackoverflow.com/questions/13571080/cant-change-target-membership-visibility-in-xcode-4-5">Can&#39;t change target membership visibility in Xcode 4.5</a></p>
<p>For me (xcode 6.1) reason was that I forgot to adopt my subclass to protocol.</p> <p>For example this is wrong:</p> <pre><code>protocol SomeProtocol { ... } class A :NSObject, SomeProtocol { ... } class B : A { ... } </code></pre> <p>and this is ok:</p> <pre><code>protocol SomeProtocol { ... } class A : NSObject, SomeProtocol { ... } class B : A, SomeProtocol { ... } </code></pre>
<p>You just need to delete the "ModuleCache", this is some kind of cache used by Xcode for Autocompletion.</p> <p>Copy and paste the following line in the Terminal:</p> <p>rm -rf ~/Library/Developer/Xcode/DerivedData/ModuleCache</p>
<p>Just to add one more potential solution here, I had accidentally named a class var the same name as it's type:</p> <pre><code>class var Settings:Settings { get { return classVarWorkAround.settings } } </code></pre> <p>This will crash SourceKit FOR SURE. Stupid syntax error, but in case anyone else makes the same mistake. </p> <p>Edit: also according to @Portland Runner:</p> <p>Similarly, If you set the return type to the func name you'll get the error.</p> <pre><code>func foo() -&gt;foo{} </code></pre>
<p>Move the extension before the principal class.</p> <pre><code>extension SomeType { // new functionality to add </code></pre> <p>}</p>
<p>I've had this coming up almost every day for the past few months. Tried all the above and it only fixes it temporarily.</p> <p>Finally, two weeks ago I changed the location of the DerivedData location to a fresh location and I haven't had the issue once.</p> <p>I note that when I delete my Derived Data folder it regenerates and is about 3GB for some reason. When I created a new folder it didn't regenerate all this data.</p> <p>Hope this helps someone.</p>
<p>Swift tries to figure out what type everything is dynamically rather than statically, but that can take an enormous effort when it's dealing with complex types (like chained filter, map, flatMap calls) or large dictionaries. Sometimes you need to break them up to make it easier for the compiler to analyze. A cousin of this problem is the error "too complex to evaluate in time". Imagine having a few of those that were <em>almost</em> too complex to evaluate in time: together they become a resource hog. </p> <p>Try to find all places where you create dynamic dictionaries or use chains of untyped calls. Try to type more specifically, especially at the declaration of the variable. </p> <h1>Some quick examples:</h1> <h2>Dictionaries</h2> <p>Bad:</p> <pre><code>let myDict = [ /* bunch of different things */ ] </code></pre> <p>Better:</p> <pre><code>let myDict: [String: AnyObject] = [ /* bunch of different things */ ] </code></pre> <p>Best:</p> <pre><code>let myDict: [String: SpecificType] = [ /* bunch of similar things */ ] </code></pre> <h2>Mappings</h2> <p>Bad:</p> <pre><code>let filteredUserIds = users.filter({ user in user.enabled }) .flatMap { user in user.name != nil ? return user.id : return nil } </code></pre> <p>Better:</p> <pre><code>let filteredUserIds: [Int] = users.filter({ user in user.enabled }) .flatMap { user in user.name != nil ? return user.id : return nil } </code></pre> <p>Best:</p> <pre><code>let enabledUsers: [User] = users.filter { user in user.enabled } let filteredUserIds: [Int] = enabledUsers.flatMap { user in user.name != nil ? return user.id : return nil } </code></pre> <p>The benefits also are extra checked code as you will always either get the expected type or a compiler error. The downside is that it starts to look a bit like Java.</p> <p>Of course this problem accumulates first while your project grows. Small Swift projects are always fast. So probably it's a lot of work. Experience tells what expressions are complicated and time intensive. It would be great if you could benchmark these kind of things.</p>