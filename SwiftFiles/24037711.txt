Get the length of a String
<p>How do you get the length of a <code>String</code>? For example I have a variable defined like:</p> <pre><code>var test1: String = "Scott" </code></pre> <p>However I can't seem to find a length method on the string.</p>
<p>Use the count characters method:</p> <pre><code>let unusualMenagerie = "Koala &amp;#128040;, Snail &amp;#128012;, Penguin &amp;#128039;, Dromedary &amp;#128042;" println("unusualMenagerie has \(count(unusualMenagerie)) characters") // prints "unusualMenagerie has 40 characters" </code></pre> <p>right from the Apple Swift Guide</p> <p>(note, for versions of Swift earlier than 1.2, this would be <code>countElements(unusualMenagerie)</code> instead)</p> <p>for your variable, it would be</p> <pre><code>length = count(test1) // was countElements in earlier versions of Swift </code></pre> <p>Or you can use test1.utf16count</p> <p><strong>EDIT:</strong> <strong>With Swift 2, Apple has changed global functions to protocol extensions</strong>, extensions that match any type conforming to a protocol. Thus the new syntax is:</p> <pre><code>test1.characters.count </code></pre> <p>(Thanks to JohnDifool for the heads up)</p>
<p>You could try like this </p> <pre><code> var test1: String = "Scott" var length = test1.bridgeToObjectiveC().length </code></pre>
<h1>TLDR:</h1> <p>Use the <code>test1.characters.count</code>. But, there are a few things you should know. So, read on.</p> <h1>Counting characters in Swift</h1> <p>Before Swift 2.0, <code>count</code> was a global function. As of Swift 2.0, it can be called as a member function.</p> <pre><code>test1.characters.count </code></pre> <p>It will return the actual number of Unicode characters in a <code>String</code>, so it's the most correct alternative in the sense that, if you'd print the string and count characters by hand, you'd get the same result.</p> <p>However, because of the way <code>Strings</code> are implemented in Swift, characters don't always take up the same amount of memory, so be aware that this behaves quite differently than the usual character count methods in other languages. </p> <p>For example, you can also use <code>test1.utf16.count</code></p> <p>But, as noted below, the returned value is not guaranteed to be the same as that of calling <code>count</code> on <code>characters</code>.</p> <p>From the language reference:</p> <blockquote> <p>Extended grapheme clusters can be composed of one or more Unicode scalars. This means that different characters—and different representations of the same character—can require different amounts of memory to store. Because of this, characters in Swift do not each take up the same amount of memory within a string’s representation. As a result, the number of characters in a string cannot be calculated without iterating through the string to determine its extended grapheme cluster boundaries. If you are working with particularly long string values, be aware that the characters property must iterate over the Unicode scalars in the entire string in order to determine the characters for that string.</p> <p>The count of the characters returned by the characters property is not always the same as the length property of an NSString that contains the same characters. The length of an NSString is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode extended grapheme clusters within the string.</p> </blockquote> <p>An example that perfectly illustrates the situation described above is that of checking the length of a string containing a single emoji character, as pointed out by <a href="http://stackoverflow.com/users/397230/n00neimp0rtant">n00neimp0rtant</a> in the comments.</p> <pre><code>var emoji = "" emoji.characters.count //returns 1 emoji.utf16.count //returns 2 </code></pre>
<p>Here's something shorter, and more natural than using a global function:</p> <pre><code>aString.utf16count </code></pre> <p>I don't know if it's available in beta 1, though. But it's definitely there in beta 2.</p>
<p>Updated for Xcode 6 beta 4, change method utf16count --> utf16Count</p> <pre><code> var test1: String = "Scott" var length = test1.utf16Count </code></pre> <p>Or</p> <pre><code> var test1: String = "Scott" var length = test1.lengthOfBytesUsingEncoding(NSUTF16StringEncoding) </code></pre>
<p><strong>tl;dr</strong> If you want the length of a String type in terms of the number of human-readable characters, use <strong>countElements()</strong>. If you want to know the length in terms of the number of <em>extended grapheme clusters</em>, use <strong>endIndex</strong>. Read on for details.</p> <p>The <strong>String</strong> type is implemented as an ordered collection (i.e., sequence) of Unicode characters, and it conforms to the <strong>CollectionType</strong> protocol, which conforms to the <strong>_CollectionType</strong> protocol, which is the input type expected by <strong>countElements()</strong>. Therefore, <strong>countElements()</strong> can be called, passing a <strong>String</strong> type, and it will return the count of characters.</p> <p>However, in conforming to <strong>CollectionType</strong>, which in turn conforms to <strong>_CollectionType</strong>, <strong>String</strong> also implements the <strong>startIndex</strong> and <strong>endIndex</strong> computed properties, which actually represent the position of the index <em>before</em> the first character cluster, and position of the index <em>after</em> the last character cluster, respectively. So, in the string "ABC", the position of the index before A is 0 and after C is 3. Therefore, <strong>endIndex</strong> = 3, which is also the length of the string.</p> <p>So, <strong>endIndex</strong> can be used to get the length of any String type, then, right?</p> <p>Well, not always...Unicode characters are actually <em>extended grapheme clusters</em>, which are sequences of one <em>or more</em> Unicode scalars combined to create a single human-readable character.</p> <pre><code> let circledStar: Character = "\u{2606}\u{20DD}" // ☆⃝ </code></pre> <p><strong>circledStar</strong> is a single character made up of U+2606 (a white star), and U+20DD (a combining enclosing circle). Let's create a <strong>String</strong> from <strong>circledStar</strong> and compare the results of <strong>countElements()</strong> and <strong>endIndex</strong>.</p> <pre><code> let circledStarString = "\(circledStar)" countElements(circledStarString) // 1 circledStarString.endIndex // 2 </code></pre>
<p>If you are just trying to see if a string is empty or not (checking for length of 0), Swift offers a simple boolean test method on <code>String</code></p> <pre><code>myString.isEmpty </code></pre> <p>The other side of this coin was people asking in ObjectiveC how to ask if a string was empty where the answer was to check for a length of 0:</p> <p><a href="http://stackoverflow.com/questions/3436173/nsstring-is-empty">NSString is empty</a></p>
<pre><code>var str = "Hello, playground" var newString = str as NSString countElements(str) </code></pre> <p>This counts the characters in Regular Swift String</p> <pre><code>countElements((newString as String)) </code></pre> <p>This counts the characters in a NSString</p>
<pre><code>let str = "Hello" let count = str.length // returns 5 (Int) extension String { var length: Int { return countElements(self) } // Swift 1.1 } extension String { var length: Int { return count(self) } // Swift 1.2 } extension String { var length: Int { return characters.count } // Swift 2.0 } </code></pre>
<p>If you are looking for a cleaner way to get length of a string checkout this library which has bunch of extensions to the Swift built in classes <a href="http://www.dollarswift.org/#length" rel="nofollow">http://www.dollarswift.org/#length</a></p> <p>Using this library you can just do <code>"Some Str".length</code></p>
<p>As of Swift 1.2 <code>utf16Count</code> has been removed. You should now use the global <code>count()</code> function and pass the UTF16 view of the string. Example below...</p> <pre><code>let string = "Some string" count(string.utf16) </code></pre>
<p>in xcode 6.1.1 </p> <pre><code>extension String { var length : Int { return self.utf16Count } } </code></pre> <p>i think that brainiacs will change this on every minor version.</p>
<p>Best way to count String in Swift is this:</p> <pre><code>var str = "Hello World" var length = count(str.utf16) </code></pre>
<p>another option would be:</p> <pre><code>Array(str).count </code></pre> <p>might not be as performance friendly tho</p>
<p><strike>Swift 1.2 Update: There's no longer a countElements for counting the size of collections. Just use the count function as a replacement: count("Swift")</strike></p> <p>Swift 2.0 Update:</p> <blockquote> <p><strong>let strLength = string.characters.count</strong></p> </blockquote>
<p>In Swift 2.0 <code>count</code> doesn't work anymore. You can use this instead:</p> <pre><code>var testString: String = "Scott" var length = testString.characters.count </code></pre>
<p>String and NSString are toll free bridge so you can use all methods available to NSString with swift String</p> <pre><code>let x = "test" as NSString let y : NSString = "string 2" let lenx = x.count let leny = y.count </code></pre>
<p>Using <strong>Xcode 6.4</strong>, <strong>Swift 1.2</strong> and <strong>iOS 8.4</strong>:</p> <pre><code> //: Playground - noun: a place where people can play import UIKit var str = " He\u{2606} " count(str) // 7 let length = count(str.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())) as Int // 3 println(length == 3) // true </code></pre>
<p>You can add this function to your extention</p> <pre><code>extension NSString { func charLength() -&gt; Int { return count(self as String) } } </code></pre>
<p>Swift 2.0: Get a count: <code>yourString.text.characters.count</code></p> <p>Fun example of how this is useful would be to show a character countdown from some number (150 for example) in a UITextView:</p> <pre><code>func textViewDidChange(textView: UITextView) { yourStringLabel.text = String(150 - yourStringTextView.text.characters.count) } </code></pre>
<p>Objective C:- String.length Swift2.0 :- String.character.count</p>
<p>in Swift 2.x the following is how to find the length of a string</p> <pre><code>let findLength = "This is a string of text" findLength.characters.count </code></pre> <p>returns 24</p>
<p>You could use SwiftString (<a href="https://github.com/amayne/SwiftString" rel="nofollow">https://github.com/amayne/SwiftString</a>) to do this. </p> <p><code>"string".length // 6</code></p> <p>DISCLAIMER: I wrote this extension</p>
<pre><code>test1.characters.count </code></pre> <p>will get you the number of letters/numbers etc in your string.</p> <p>ex:</p> <pre><code>test1 = "StackOverflow" print(test1.characters.count) </code></pre> <p>(<strong>prints</strong> "<strong><em>13</em></strong>")</p>
<p>You can use <code>str.utf8.count</code> and <code>str.utf16.count</code> which, I think, are the best solution</p>
<p>For XCode 7.3 and Swift 2.2.</p> <pre><code>let str = "" </code></pre> <p><strong>1)</strong> If you want the number of visual characters:</p> <pre><code>str.characters.count // 1 </code></pre> <p><strong>2)</strong> If you want the <code>16-bit code units within the string’s UTF-16 representation</code>:</p> <pre><code>str.utf16.count // 2 </code></pre> <hr> <hr> <hr> <p>Most of the time, 1) is what you need.</p> <p>When would you need 2)? I've found a use case for 2):</p> <pre><code>let regex = try! NSRegularExpression(pattern:"", options: NSRegularExpressionOptions.UseUnixLineSeparators) let str = "" let result = regex.stringByReplacingMatchesInString(str, options: NSMatchingOptions.WithTransparentBounds, range: NSMakeRange(0, str.utf16.count), withTemplate: "dog") print(result) // dogdogdogdogdogdog </code></pre> <p>If you use 1), the result is incorrect:</p> <pre><code>let result = regex.stringByReplacingMatchesInString(str, options: NSMatchingOptions.WithTransparentBounds, range: NSMakeRange(0, str.characters.count), withTemplate: "dog") print(result) // dogdogdog </code></pre>
<pre><code>let myString = "Hello this is testing string" let length = myString.utf16.count print("Lenght of the string : \(lenght)") </code></pre> <p>This is one way to get the length of the string in swift. </p>
<p>Apple made it different from other major language. The current way is to call:</p> <p>test1.characters.count</p> <p>However, to be careful, when you say length you mean the count of characters not the count of bytes, because those two can be different when you use non-ascii characters.</p> <p>For example; <code>"你好啊hi".characters.count</code> will give you 5 but this is not the count of the bytes. To get the real count of bytes, you need to do <code>"你好啊hi".lengthOfBytes(using: String.Encoding.utf8)</code>. This will give you 11.</p>
<p>Right now (in Swift 2.3) if you use:</p> <pre><code>myString.characters.count </code></pre> <p>the method will return a "Distance" type, if you need the method to return an Integer you should type cast like so:</p> <pre><code>var count = myString.characters.count as Int </code></pre>