How to add ToolBar Above Keyboard?
<p>I have created a toolBar programmatically and added a <code>UITextField</code> on it. Now, I need that ToolBar to be above keyboard when clicked in another textfield. </p> <pre><code>UIToolbar *toolBar=[[UIToolbar alloc]initWithFrame:CGRectMake(0,400, 320, 60)]; [self.view addSubview:toolBar]; UITextField *txtView=[[UITextField alloc]initWithFrame:CGRectMake(0, 400, 260, 30)]; txtView.backgroundColor =[UIColor grayColor]; txtView.placeholder=@"Address"; UIBarButtonItem *txtfieldItem=[[UIBarButtonItem alloc]initWithCustomView:txtView]; toolBar.items =[NSArray arrayWithObject:txtfieldItem]; </code></pre>
<p>You can use the <code>UITextField</code>s <strong><em>inputAccessaryView</em></strong> property </p> <pre><code> txtField.inputAccessoryView = toolBar; </code></pre>
<pre><code>UIToolbar* numberToolbar = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 50)]; numberToolbar.barStyle = UIBarStyleBlackTranslucent; numberToolbar.items = [NSArray arrayWithObjects: [[UIBarButtonItem alloc]initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:self action:@selector(cancelNumberPad)], [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil], [[UIBarButtonItem alloc]initWithTitle:@"Done" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)], nil]; [numberToolbar sizeToFit]; phonenumberTextField.inputAccessoryView = numberToolbar; </code></pre> <p>Using Swift:</p> <pre><code>let numberToolbar = UIToolbar(frame: CGRectMake(0, 0, self.view.frame.size.width, 50)) numberToolbar.barStyle = UIBarStyle.Default numberToolbar.items = [ UIBarButtonItem(title: "Cancel", style: UIBarButtonItemStyle.Plain, target: self, action: "cancelNumberPad"), UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FlexibleSpace, target: nil, action: nil), UIBarButtonItem(title: "Done", style: UIBarButtonItemStyle.Plain, target: self, action: "doneWithNumberPad")] numberToolbar.sizeToFit() phonenumberTextField.inputAccessoryView = numberToolbar </code></pre>
<p>You Can Use this code it work for me.</p> <pre><code>-(void)viewdidload { UIToolbar* keyboardDoneButtonView = [[UIToolbar alloc] init]; [keyboardDoneButtonView sizeToFit]; UIBarButtonItem* doneButton = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(doneClicked:)]; [keyboardDoneButtonView setItems:[NSArray arrayWithObjects:doneButton, nil]]; textField.inputAccessoryView = keyboardDoneButtonView; } -(void)doneClicked:(id)sender { NSLog(@"Done Clicked."); [self.view endEditing:YES]; } </code></pre>
<p>For swift (1.2):</p> <pre><code>let numberToolbar = UIToolbar(frame: CGRectMake(0, 0, self.view.frame.size.width, 50)) numberToolbar.barStyle = UIBarStyle.Default numberToolbar.items = [ UIBarButtonItem(title: "Cancel", style: UIBarButtonItemStyle.Plain, target: self, action: "keyboardCancelButtonTapped:"), UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FlexibleSpace, target: nil, action: nil), UIBarButtonItem(title: "Done", style: UIBarButtonItemStyle.Plain, target: self, action: "keyboardDoneButtonTapped:")] numberToolbar.sizeToFit() yourTextView.inputAccessoryView = numberToolbar </code></pre>
<pre><code>textField.inputAccessoryView=[weakSelf addToolBar]; [textField setKeyboardType:UIKeyboardTypeNumberPad]; </code></pre> <p>and add a method</p> <pre><code>-(UIToolbar *)addToolBar { UIBarButtonItem *done=[[UIBarButtonItem alloc]initWithTitle:@"DONE" style:UIBarButtonItemStyleDone target:self action:@selector(done:)]; UIToolbar *toolBar=[[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 30)]; NSArray* toolBarItems=[[NSArray alloc]initWithObjects:done, nil]; [toolBar setItems:toolBarItems]; return toolBar; } </code></pre>
<p>Swift 3</p> <pre><code> let toolBar = UIToolbar(frame: CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: 50)) toolBar.barStyle = UIBarStyle.default toolBar.items = [ UIBarButtonItem(title: "Button1", style: UIBarButtonItemStyle.plain, target: self, action: #selector(test2)), UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.flexibleSpace, target: nil, action: nil), UIBarButtonItem(title: "Button2", style: UIBarButtonItemStyle.plain, target: self, action: #selector(test1))] toolBar.sizeToFit() myTextField.inputAccessoryView = toolBar </code></pre>
<p>You do not need to do this in code anymore. </p> <ol> <li>Just simply drag UIView to the top bar of current scene and customize it as you want.</li> </ol> <p><a href="https://i.stack.imgur.com/BAjpA.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/BAjpA.png" alt="enter image description here"></a></p> <ol start="2"> <li><p>In code simply put <code>IBOutlet</code> for both: <code>toolbarView</code> and <code>textView</code> and make connections.</p> <pre><code>@IBOutlet private var toolbarView: UIView! @IBOutlet private var textView: UITextView! </code></pre></li> <li><p>In <code>viewDidLoad</code> setup your toolbarView as accessoryView of your <code>UItextView</code>.</p> <pre><code>override func viewDidLoad() { super.viewDidLoad() textView.inputAccessoryView = toolbarView } </code></pre></li> </ol> <p>The result is following:</p> <p><a href="https://i.stack.imgur.com/cq4v5l.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/cq4v5l.png" alt="enter image description here"></a> <a href="https://i.stack.imgur.com/pzMnNl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/pzMnNl.png" alt="enter image description here"></a></p>