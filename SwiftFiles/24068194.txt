Assigning `nil` value to a generically typed variable in Swift
<p>I think <code>var value: T = nil</code> is causing error below because XCode can't convert <code>nil</code> value to the generic type T.</p> <pre><code>class Node&lt;T&gt; { var value: T = nil var next: Node init(value: T) { self.value = value self.next = Node() } init() { self.next = Node() } } </code></pre> <p>The error message reads</p> <blockquote> <p>Could not find an overload for '_coversion' that accepts the supplied arguments</p> </blockquote> <p>Is there a way to assign <code>nil</code> value to a variable in Swift?</p>
<p>Try using</p> <pre><code>var value: T? = nil </code></pre> <p>The question mark makes the variable an optional, meaning that it can either have a value or be nil.</p>
<p>You need to declare the variable as optional:</p> <pre><code>var value: T? = nil </code></pre> <p>Unfortunately this currently seems to trigger an unimplemented compiler feature:</p> <pre><code>error: unimplemented IR generation feature non-fixed class layout </code></pre> <p>You can work around it by declaring T with a type constraint of NSObject:</p> <pre><code>class Node&lt;T:NSObject&gt; { var value: T? = nil var next: Node init(value: T) { self.value = value self.next = Node() } init() { self.next = Node() } } </code></pre>