Why can I store and retrieve numbers in the Integer Protocol?
<p>I've seen a few people getting confused between <code>Integer</code> (a protocol) and <code>Int</code> (a type) in Swift. I think I understand the difference between them, and I get why you can't add <code>Integer</code>s togetherâ€”it doesn't make sense to add two protocols.</p> <p>However, I'm wondering why this works at all:</p> <pre><code>var x:Integer = 3 println(x) // Prints 3 </code></pre> <p>If <code>Integer</code> is just a protocol, how come it can store and retrieve an integer value? (And wouldn't it lead to less confusion among Swift beginners if it <em>didn't</em> work?) </p>
<p>Since 3 is an <code>Int</code>, and since <code>Int</code> implements the <code>Integer</code> protocol, then var x can very well reference the instance <code>3</code>.</p>
<p>Any variable can use a <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Protocols.html" rel="nofollow">protocol</a> as it's type if all you need is something that conforms to that protocol.</p> <p>So the int value <code>3</code> which you're assigning is being put into a variable where only things (methods, operators, properties, etc) specified in the <code>Integer</code> protocol are available.</p> <p>This is useful for things like delegates where you don't really care what the concrete type of an object is, as long as it supports the functionality you need (as specified in your protocol)</p> <p>This is covered in some depth in the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-XID_352" rel="nofollow">"Protocols as Types" section (Protocols chapter) of the swift book</a></p>
<pre><code> 1&gt; var x:Integer = 3 x: Int = &lt;read memory from 0x7fd3dc465760 failed (0 of 8 bytes read)&gt; 2&gt; var y:Int = 3 y: Int = 3 </code></pre> <p>It's not the same thing. However, since <code>Int</code> implements <code>Integer</code>, you might get results that make sense when used in certain cases (like <code>println</code>). Don't rely on it though!</p>