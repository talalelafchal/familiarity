stringByReplacingOccurrencesOfString is not working?
<p>I am trying to translate this Objective-C code : </p> <pre><code>if ([[self.appStoreCountry stringByReplacingOccurrencesOfString:@"[A-Za-z]{2}" withString:@"" options:NSRegularExpressionSearch range:NSMakeRange(0, 2)] length]) </code></pre> <p>So I tried to wrote this code : </p> <pre><code>if !self.appStoreCountry.stringByReplacingOccurrencesOfString("[A-Za-z]{2}", withString: "", options: NSStringCompareOptions.RegularExpressionSearch, range: Range(start: 0, end: 2)).isEmpty </code></pre> <p>The problem is that the stringByReplacingOccurrencesOfString part does not seem to return a string. I have the error message from xcode : <code>Cannot convert the expression's type 'Bool' to type 'String'.</code></p> <p>I investigated a little more and tried :</p> <pre><code>let replaced = self.appStoreCountry.stringByReplacingOccurrencesOfString("[A-Za-z]{2}", withString: "", options: NSStringCompareOptions.RegularExpressionSearch, range: Range(start: 0, end: 2)) </code></pre> <p>The error message is similar but even more weird : <code>Cannot convert the expression's type 'String' to type 'String'.</code></p> <p>Am I doing something wrong or is there a bug I should submit to Apple?</p>
<p>Open a Playground and add this code, now it's correct:</p> <pre><code>var str = NSString(CString: "en") str = str.stringByReplacingOccurrencesOfString("[A-Za-z]{2}", withString: "", options: NSStringCompareOptions.RegularExpressionSearch, range: NSRange(location: 0, length: 2)) if str == "" { var a = "true" } else { var b = "false" } </code></pre> <p>Your problems were:</p> <ul> <li>.isEmpty is not a method of NSString</li> <li>You were using Range() and not NSRange as required by the method <code>.stringByReplacingOccurrencesOfString</code> of NSString</li> <li>since your replace returns an empty string and not a nil object, you have to test for "" in the if statement</li> </ul>
<p>Keep in mind that Foundation's types are different from Swift's types. A <code>String</code> in Swift is not an <code>NSString</code>, and a <code>Range</code> is not an <code>NSRange</code>. This does work:</p> <pre><code>let country = self.appStoreCountry // if self.appStoreCountry is an NSString let country: NSString = self.appStoreCountry // if self.appStoreCountry is a Swift string let replaced = country.stringByReplacingOccurrencesOfString("[A-Za-z]{2}", withString: "", options: .RegularExpressionSearch, range: NSMakeRange(0, 2)) </code></pre> <p>Also note the short-hand notation for <code>.RegularExpressionSearch</code>, which makes using enums in Swift a bit easier.</p>
<p>Try This code:</p> <pre><code>var originalString="Hello World" var needToReplaceString = "Hello" var replaceString = " Hi" var newString = originalString.stringByReplacingOccurrencesOfString(needToReplaceString, withString: replaceString, options: nil, range: nil) println(newString) </code></pre>
<pre><code>let maskCharSet = NSCharacterSet(charactersInString: " ()-.") let cleanedString = phoneNumber.componentsSeparatedByCharactersInSet(maskCharSet).reduce("", combine: +) </code></pre>
<pre><code>extension String{ func exclude(find:String) -&gt; String { return stringByReplacingOccurrencesOfString(find, withString: "", options: .LiteralSearch, range: nil) } func replaceAll(find:String, with:String) -&gt; String { return stringByReplacingOccurrencesOfString(find, withString: with, options: .LiteralSearch, range: nil) } } "1-2-3-4-5-6-7-8-9-0".exclude("-") // "1234567890" "1-2-3-4-5-6-7-8-9-0".replaceAll("-", with: "+") // "1+2+3+4+5+6+7+8+9+0" </code></pre>