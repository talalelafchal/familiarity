How to call Objective-C code from Swift
<h1>In the new Swift language from Apple, how does one call Objective-C code?</h1> <p>Apple mentioned that they could co-exist in one application, but does this mean that one could technically re-use old classes made in Objective-C whilst building new classes in Swift?</p> <h1>The Reasoning</h1> <p>Objective-C is a platform-independent language, whereas Swift is platform-dependent. Writing non-platform-dependent code (business logic libraries) in Swift would thus not be wise. However, writing platform-dependent code in it (interface related for example) would be perfectly fine. Not to say it would be a good idea, however it is definitely an interest.</p>
<p>See Apple's guide to <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216" rel="nofollow">Using Swift with Cocoa and Objective-C</a>. This guide covers how to use Objective-C and C code from Swift and vice versa and has recommendations for how to convert a project or mix and match Objective-C/C and Swift parts in an existing project.</p> <p>The compiler automatically generates Swift syntax for calling C functions and Objective-C methods. As seen in the documentation, this Objective-C:</p> <pre><code>UITableView *myTableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStyleGrouped]; </code></pre> <p>turns into this Swift code:</p> <pre><code>let myTableView: UITableView = UITableView(frame: CGRectZero, style: .Grouped) </code></pre> <p>Xcode also does this translation on the fly — you can use Open Quickly while editing a Swift file and type an Objective-C class name, and it'll take you to a Swift-ified version of the class header. (You can also get this by cmd-clicking on an API symbol in a Swift file.) And all the API reference documentation in the <a href="https://developer.apple.com/library/prerelease/ios/" rel="nofollow">iOS&nbsp;8</a> and <a href="https://developer.apple.com/library/prerelease/osx/" rel="nofollow">OS&nbsp;X v10.10 (Yosemite)</a> developer libraries is visible in both Objective-C and Swift forms (e.g. <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIView_Class/index.html" rel="nofollow"><code>UIView</code></a>).</p>
<p>Quote from the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216">documentation</a>:</p> <blockquote> <p>Any Objective-C framework (or C library) that’s accessible as a module can be imported directly into Swift. This includes all of the Objective-C system frameworks—such as Foundation, UIKit, and SpriteKit—as well as common C libraries supplied with the system. For example, to import Foundation, simply add this import statement to the top of the Swift file you’re working in:</p> <p><code>import Foundation</code></p> <p>This import makes all of the Foundation APIs—including NSDate, NSURL, NSMutableData, and all of their methods, properties, and categories—directly available in Swift.</p> </blockquote>
<h1> Using Objective-C Classes in Swift </h1> <p>** If you have an existing class that you'd like to use, perform <b>Step 2</b> and then skip to <b>Step 5</b>. (For some cases, I had to add an explicit <code>#import &lt;Foundation/Foundation.h</code> to an older Objective-C File.) **</p> <h3> Step 1: Add Objective-C Implementation -- .m </h3> <p>Add a <code>.m</code> file to your class, and name it <code>CustomObject.m</code>.</p> <h3> Step 2: Add Bridging Header </h3> <p>When adding your <code>.m</code> file, you'll likely be hit with a prompt that looks like this:</p> <p><img src="https://i.stack.imgur.com/nakLZ.png" alt="Enter image description here"></p> <p>Click <b> YES </b>! </p> <p>If you did not see the prompt, or accidentally deleted your bridging header, add a new <code>.h</code> file to your project and name it <code>&lt;#YourProjectName#&gt;-Bridging-Header.h</code>.</p> <p>In some situations, particularly when working with Objective-C frameworks, you don't add an Objective-C class explicitly and Xcode can't find the linker. In this case, create your <code>.h</code> file named as mentioned above, then make sure you link its path in your target's project settings like so:</p> <p><img src="https://i.stack.imgur.com/8LiwF.gif" alt="Enter image description here"></p> <p><b>Note</b></p> <p>It's best practice to link your project using the <code>$(SRCROOT)</code> macro so that if you move your project, or work on it with others using a remote repository, it will still work. <code>$(SRCROOT)</code> can be thought of as the directory that contains your .xcodeproj file. It might look like this:</p> <pre><code>$(SRCROOT)/Folder/Folder/&lt;#YourProjectName#&gt;-Bridging-Header.h </code></pre> <h3> Step 3: Add Objective-C Header -- .h </h3> <p>Add another <code>.h</code> file and name it <code>CustomObject.h</code>.</p> <h3> Step 4: Build your Objective-C Class </h3> <p>In <code>CustomObject.h</code></p> <pre><code>#import &lt;Foundation/Foundation.h&gt; @interface CustomObject : NSObject @property (strong, nonatomic) id someProperty; - (void) someMethod; @end </code></pre> <p>In <code>CustomObject.m</code></p> <pre><code>#import "CustomObject.h" @implementation CustomObject - (void) someMethod { NSLog(@"SomeMethod Ran"); } @end </code></pre> <h3> Step 5: Add Class to Bridging-Header </h3> <p>In <code>YourProject-Bridging-Header.h</code>:</p> <pre><code>#import "CustomObject.h" </code></pre> <h3> Step 6: Use your Object </h3> <p>In <code>SomeSwiftFile.swift</code>:</p> <pre><code>var instanceOfCustomObject: CustomObject = CustomObject() instanceOfCustomObject.someProperty = "Hello World" println(instanceOfCustomObject.someProperty) instanceOfCustomObject.someMethod() </code></pre> <p>There is no need to import explicitly; that's what the bridging header is for. </p> <h1> Using Swift Classes in Objective-C </h1> <h3> Step 1: Create New Swift Class </h3> <p>Add a <code>.swift</code> file to your project, and name it <code>MySwiftObject.swift</code>.</p> <p>In <code>MySwiftObject.swift</code>:</p> <pre><code>import Foundation class MySwiftObject : NSObject { var someProperty: AnyObject = "Some Initializer Val" init() {} func someFunction(someArg:AnyObject) -&gt; String { var returnVal = "You sent me \(someArg)" return returnVal } } </code></pre> <h3> Step 2: Import Swift Files to ObjC Class </h3> <p>In <code>SomeRandomClass.m</code>:</p> <pre><code>#import "&lt;#YourProjectName#&gt;-Swift.h" </code></pre> <p>The file:<code>&lt;#YourProjectName#&gt;-Swift.h</code> should already be created automatically in your project, even if you can not see it.</p> <h3> Step 3: Use your class </h3> <pre><code>MySwiftObject * myOb = [MySwiftObject new]; NSLog(@"MyOb.someProperty: %@", myOb.someProperty); myOb.someProperty = @"Hello World"; NSLog(@"MyOb.someProperty: %@", myOb.someProperty); NSString * retString = [myOb someFunction:@"Arg"]; NSLog(@"RetString: %@", retString); </code></pre> <h2>Note:</h2> <p><b>1.</b> CodeCompletion wasn't behaving as accurately as I'd like it to. On my system, running a quick build with "cmd + r" seemed to help Swift find some of the Objective-C code and vice versa. </p> <p><b>2.</b> If you add a <code>.swift</code> file to an older project and get error: <code>dyld: Library not loaded: @rpath/libswift_stdlib_core.dylib</code>, try completely <a href="http://stackoverflow.com/q/24002836/2611971">restarting Xcode</a>.</p> <p><b>3.</b> While it was originally possible to use pure Swift classes in Objective-C by using the <code>@objc</code> prefix, after Swift 2.0, this is no longer possible. See edit history for original explanation. If this functionality is reenabled in future Swift versions, the answer will be updated accordingly.</p>
<p>You can read the nice post <em><a href="https://medium.com/@stigi/swift-cocoapods-da09d8ba6dd2" rel="nofollow">Swift &amp; Cocoapods</a></em>. Basically, we need to create a bridging header file and put all Objective-C headers there. And then we need to reference it from our build settings. After that, we can use the Objective-C code.</p> <pre><code>let manager = AFHTTPRequestOperationManager() manager.GET( "http://example.com/resources.json", parameters: nil, success: { (operation: AFHTTPRequestOperation!, responseObject: AnyObject!) in println("JSON: " + responseObject.description) }, failure: { (operation: AFHTTPRequestOperation!, error: NSError!) in println("Error: " + error.localizedDescription) }) </code></pre> <p>Also have a look at Apple's document <em><a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/MixandMatch.html" rel="nofollow">Using Swift with Cocoa and Objective-C</a></em> as well.</p>
<p>I wrote a simple Xcode 6 project that shows how to mix C++, Objective-C and Swift code:</p> <p><a href="https://github.com/romitagl/shared/tree/master/C-ObjC-Swift/Performance_Console" rel="nofollow">https://github.com/romitagl/shared/tree/master/C-ObjC-Swift/Performance_Console</a></p> <p>In particular, the example <strong><em>calls an Objective-C and a C++ function from the Swift</em></strong>.</p> <p>The key is to create a shared header, Project-Bridging-Header.h, and put the Objective-C headers there.</p> <p>Please download the project as a complete example.</p>
<p>Here are step-by-step instructions for using Objective-C code (in this case, a framework provided by a third-party) in a Swift project:</p> <ol> <li><strong>Add any Objective-C file to your Swift project</strong> by choosing File -> New -> New File -> Objective-C File. Upon saving, <strong>Xcode will ask if you want to add a bridging header</strong>. Choose '<strong>Yes</strong>'. <img src="http://www.derrrick.com/stackoverflow/1-empty-file.gif" alt="Gif: adding empty file to project and generating bridging header"></li> </ol> <p>In simple steps:</p> <ol> <li><p>A prompt appears, and then click on OK... If it does not appear, then we create it manually like in the following... Create one header file from iOS source and give the name ProjectName-Bridging-Header (example: Test-Bridging-Header), and then go to build setting in the Swift compiler code -> Objective-C bridge add Objective-C bridge name ..(Test/Test-Bridging-Header.h). Yeah, that's complete.</p></li> <li><p>Optionally, delete the Objective-C file you added (named "anything" in the GIF image above). You don't need it any more.</p></li> <li><p><strong>Open the bridging header file</strong> -- the filename is of the form <strong>[YourProject]-Bridging-Header.h</strong>. It includes an Xcode-provided comment. <strong>Add a line of code for the Objective-C file you want to include</strong>, such as a third-party framework. For example, to add Mixpanel to your project, you will need to add the following line of code to the bridging header file:</p> <pre>#import "Mixpanel.h"</pre></li> <li><p>Now in any Swift file you can <strong>use existing Objective-C code, in the Swift syntax</strong> (in the case of this example, and you can call Mixpanel SDK methods, etc.). You need to familiarize yourself with how Xcode translates Objective-C to Swift. <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps" rel="nofollow">Apple's guide</a> is a quick read. Or see this answer for an incomplete summary.</p></li> </ol> <p>Example for Mixpanel:</p> <pre><code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { Mixpanel.sharedInstanceWithToken("your-token") return true } </code></pre> <p>That's it!</p> <p>Note: <strong>If you remove the bridging header file from your project</strong>, be sure to go into Build Settings and remove the value for "<strong>Objective-C Bridging Header</strong>" under "Swift Compiler - Code Generation".</p>
<p>Click on the <em>New</em> file menu, and chose file select language Objective. At that time it automatically generates a "Objective-C Bridging Header" file that is used to define some class name.</p> <p>"Objective-C Bridging Header" under "Swift Compiler - Code Generation".</p>
<h3>One more thing I would like to add here:</h3> <p>I am very thankful to @Logan's answer. It helps a lot to create a bridge file and setups.</p> <p>But after doing all these steps I'm still not getting an Objective-C class in Swift.</p> <p>I used the <code>cocoapods</code> library and integrated it in my project. Which is <code>pod "pop"</code>.</p> <p>So if are using Objective-C pods in Swift then there may be a chance that you can not able to get or <code>import</code> the classes into Swift.</p> <p>The simple thing you have to do is:</p> <ol> <li>Go to <code>&lt;YOUR-PROJECT&gt;-Bridging-Header</code> file and</li> <li>Replace the statement <code>#import &lt;ObjC_Framework&gt;</code> to <code>@import ObjC_Framework</code></li> </ol> <p><strong>For example: (Pop library)</strong></p> <p>Replace</p> <pre><code>#import &lt;pop/POP.h&gt; </code></pre> <p>with</p> <pre><code>@import pop; </code></pre> <p><em>Use <code>clang import</code> when <code>#import</code> is not working.</em></p>
<p>After you created a Bridging header, go to Build Setting => Search for "Objective-C Bridging Header".</p> <p>Just below you will find the ""Objective-C Generated Interface Header Name" file.</p> <p>Import that file in your view controller.</p> <p>Example: In my case: "Dauble-Swift.h"</p> <p><a href="https://i.stack.imgur.com/cEuwx.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/cEuwx.png" alt="eEter image description here"></a></p>
<p>Just a note for whoever is trying to add an Objective-C library to Swift: You should add <strong>-ObjC</strong> in <em>Build Settings</em> -> <em>Linking</em> -> <em>Other Linker Flags</em>.</p>
<p>Any Objective-C framework (or C library) that’s accessible as a module can be imported directly into Swift. This includes all of the Objective-C system frameworks—such as Foundation, UIKit, and SpriteKit—as well as common C libraries supplied with the system. For example, to import Foundation, simply add this import statement to the top of the Swift file you’re working in:</p> <pre><code>import Foundation </code></pre> <p>This import makes all of the Foundation APIs—including NSDate, NSURL, NSMutableData, and all of their methods, properties, and categories—directly available in Swift.</p> <p>I have taken this from Apple's documentation.</p>