How do you use Interface builder with Swift?
<p>When hooking Swift code up to a Storyboard, how do you add the <code>IBAction</code> and <code>IBOutlet</code> tags?</p>
<p>Just use old ctrl + drag technique which was popular in Xcode5 and everything works fine.</p>
<p>Add <code>IBAction</code> and <code>IBOutlet</code> attributes to variables and functions so they can be visible in Interface builder.</p> <pre><code>class ViewController: UIViewController { @IBOutlet var label: UILabel? @IBAction func doTap(x:UIButton) { println("Tapped: \(x)") } } </code></pre>
<p>While creating a project, you should have selected the storyboard, so that you can add your <code>IBOutlet</code>'s directly in the story board.</p> <p>The Below code gives you a idea of how to add <code>IBOutlet</code> to the <code>UILabel</code></p> <pre><code>class ViewController: UIViewController { @IBOutlet var label : UILabel } </code></pre>
<p>Below code shows IBOutlet and IBAction format in Swift :</p> <pre><code>class MyViewController: UIViewController { @IBOutlet weak var btnSomeButton: UIButton? @IBOutlet weak var lblLabelItem: UILabel? @IBAction func btnSomeButtonClicked(sender: UIButton) { ... } } </code></pre> <p>You can bind them same way as done in Objective-C.</p>
<p>I would agree more with <a href="http://stackoverflow.com/users/1753005/jayprakash-dubey">Jayprakash</a> than the upvoted first answer. The only thing I would correct is the marking of the IBOutlets as implicitly unwrapped with the <code>!</code> The first answer used to be correct, but several changes were made in Swift and how it interacts with IB in the latest release. In Swift, IBOutlets no longer have any implicit behavior or magic--they are simply annotations for IB. As of the date of this response, the following code is correct:</p> <pre><code>// How to specify an the equivalent of IBOutletCollection in Swift @IBOutlet var fields: [UITextField]! // How to specify a standard IBOutlet @IBOutlet weak var button: UIButton! // How to specify an IBAction @IBAction func buttonWasPressed(sender: UIButton) { ... } </code></pre>