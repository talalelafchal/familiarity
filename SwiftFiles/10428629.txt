Programatically set the initial view controller using Storyboards
<p>How do I programmatically set the <code>InitialViewController</code> for a Storyboard? I want to open my storyboard to a different view depending on some condition which may vary from launch to launch.</p>
<p>Open mainstoryboard, select the view that you want start first, then open Utilities--> Attributes. Below the "View Controller" you see the "Is initial View Controller" radio button. Just select it.</p> <p>--- To the revised question:</p> <p>May be you can try this: write a method in ViewDidLoad section of your inital view and when the method runs on application launch, method triggers a segue to another view. </p>
<p>Select the view controller which you want to open first and go to attribute inspector. Go to initial scene and check is initial view controller option.</p> <p>Now this will be your initial view controller that will open first when application launch.</p>
<p>I don't think it's possible. Instead you can have one initial controller which will have segues to different view controllers. On startup, you can decide which segue to perform programmatically.</p>
<p><strong>How to <em>without</em> a dummy initial view controller</strong></p> <p>Ensure all initial view controllers have a Storyboard ID.</p> <p>In the storyboard, uncheck the "Is initial View Controller" attribute from the first view controller.</p> <p>If you run your app at this point you'll read:</p> <pre><code>Failed to instantiate the default view controller for UIMainStoryboardFile 'MainStoryboard' - perhaps the designated entry point is not set? </code></pre> <p>And you'll notice that your window property in the app delegate is now nil.</p> <p>In the app's setting, go to your target and the <code>Info</code> tab. There clear the value of <code>Main storyboard file base name</code>. On the <code>General</code> tab, clear the value for <code>Main Interface</code>. This will remove the warning.</p> <p>Create the window and desired initial view controller in the app delegate's <code>application:didFinishLaunchingWithOptions:</code> method:</p> <pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { self.window = [[UIWindow alloc] initWithFrame:UIScreen.mainScreen.bounds]; UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"MainStoryboard" bundle:nil]; UIViewController *viewController = // determine the initial view controller here and instantiate it with [storyboard instantiateViewControllerWithIdentifier:&lt;storyboard id&gt;]; self.window.rootViewController = viewController; [self.window makeKeyAndVisible]; return YES; } </code></pre>
<p>You can programmatically set the key window's rootViewController in <code>(BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code></p> <p>for example:</p> <pre><code>- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions { if (shouldShowAnotherViewControllerAsRoot) { UIStoryboard *storyboard = self.window.rootViewController.storyboard; UIViewController *rootViewController = [storyboard instantiateViewControllerWithIdentifier:@"rootNavigationController"]; self.window.rootViewController = rootViewController; [self.window makeKeyAndVisible]; } return YES; } </code></pre>
<p>A few days ago I've encountered to same situation. A very simple trick solved this problem. I set hidden my initial view controller before launch2. If initial view controller is the right controller it's set to visible in viewDidLoad. Else, a segue is performed to desired view controller. It works perfectly in iOS 6.1 and above. I'm sure it works on earlier versions of iOS.</p>
<p>For all the <em>Swift</em> lovers out there, here is the answer by <strong>@Travis</strong> translated into <em>SWIFT</em>:</p> <p>Do what <strong>@Travis</strong> explained before the Objective C code. Then,</p> <pre><code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { self.window = UIWindow(frame: UIScreen.mainScreen().bounds) let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil) var exampleViewController: ExampleViewController = mainStoryboard.instantiateViewControllerWithIdentifier("ExampleController") as! ExampleViewController self.window?.rootViewController = exampleViewController self.window?.makeKeyAndVisible() return true } </code></pre> <p>The <code>ExampleViewController</code> would be the new initial view controller you would like to show.</p> <p>The steps explained:</p> <ol> <li>Create a new window with the size of the current window and set it as our main window</li> <li>Instantiate a storyboard that we can use to create our new initial view controller</li> <li>Instantiate our new initial view controller based on it's Storyboard ID</li> <li>Set our new window's root view controller as our the new controller we just initiated</li> <li>Make our new window visible</li> </ol> <p>Enjoy and happy programming!</p>
<p>You can set Navigation rootviewcontroller as a main view controller. This idea can use for auto login as per application requirement.</p> <pre><code>UIStoryboard *mainStoryboard = [UIStoryboard storyboardWithName:@"Main" bundle: nil]; UIViewController viewController = (HomeController*)[mainStoryboard instantiateViewControllerWithIdentifier: @"HomeController"]; UINavigationController navController = [[UINavigationController alloc] initWithRootViewController:viewController]; self.window.rootViewController = navController; if (NSFoundationVersionNumber &gt; NSFoundationVersionNumber_iOS_6_1) { // do stuff for iOS 7 and newer navController.navigationBar.barTintColor = [UIColor colorWithRed:88/255.0 green:164/255.0 blue:73/255.0 alpha:1.0]; navController.navigationItem.leftBarButtonItem.tintColor = [UIColor colorWithRed:88/255.0 green:164/255.0 blue:73/255.0 alpha:1.0]; navController.navigationBar.tintColor = [UIColor whiteColor]; navController.navigationItem.titleView.tintColor = [UIColor whiteColor]; NSDictionary *titleAttributes =@{ NSFontAttributeName :[UIFont fontWithName:@"Helvetica-Bold" size:14.0], NSForegroundColorAttributeName : [UIColor whiteColor] }; navController.navigationBar.titleTextAttributes = titleAttributes; [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent]; } else { // do stuff for older versions than iOS 7 navController.navigationBar.tintColor = [UIColor colorWithRed:88/255.0 green:164/255.0 blue:73/255.0 alpha:1.0]; navController.navigationItem.titleView.tintColor = [UIColor whiteColor]; } [self.window makeKeyAndVisible]; </code></pre> <p>For StoryboardSegue Users</p> <pre><code>UIStoryboard *mainStoryboard = [UIStoryboard storyboardWithName:@"Main" bundle: nil]; // Go to Login Screen of story board with Identifier name : LoginViewController_Identifier LoginViewController *loginViewController = (LoginViewController*)[mainStoryboard instantiateViewControllerWithIdentifier:@“LoginViewController_Identifier”]; navigationController = [[UINavigationController alloc] initWithRootViewController:testViewController]; self.window.rootViewController = navigationController; [self.window makeKeyAndVisible]; // Go To Main screen if you are already Logged In Just check your saving credential here if([SavedpreferenceForLogin] &gt; 0){ [loginViewController performSegueWithIdentifier:@"mainview_action" sender:nil]; } </code></pre> <p>Thanks</p>
<p>Thanks modified this as follows in AppDelegate:</p> <pre><code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { //Some code to check value of pins if pins! == "Verified"{ print(pins) self.window = UIWindow(frame: UIScreen.mainScreen().bounds) let mainStoryboard: UIStoryboard = UIStoryboard(name: "HomePage", bundle: nil) let exampleViewController: UINavigationController = mainStoryboard.instantiateViewControllerWithIdentifier("SBHP") as! UINavigationController self.window?.rootViewController = exampleViewController self.window?.makeKeyAndVisible() }else{ print(pins) self.window = UIWindow(frame: UIScreen.mainScreen().bounds) let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil) let exampleViewController: UINavigationController = mainStoryboard.instantiateViewControllerWithIdentifier("SBUser") as! UINavigationController self.window?.rootViewController = exampleViewController self.window?.makeKeyAndVisible() } </code></pre>
<p>You can set <code>initial view controller</code> using Interface Builder as well as programmatically.</p> <p>Below is approach used for programmatically.</p> <p><em>Objective-C :</em></p> <pre><code> self.window = [[UIWindow alloc] initWithFrame:UIScreen.mainScreen.bounds]; UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"MainStoryboard" bundle:nil]; UIViewController *viewController = [storyboard instantiateViewControllerWithIdentifier:@"HomeViewController"]; // &lt;storyboard id&gt; self.window.rootViewController = viewController; [self.window makeKeyAndVisible]; return YES; </code></pre> <p><em>Swift :</em></p> <pre><code> self.window = UIWindow(frame: UIScreen.mainScreen().bounds) let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil) var objMainViewController: MainViewController = mainStoryboard.instantiateViewControllerWithIdentifier("MainController") as! MainViewController self.window?.rootViewController = objMainViewController self.window?.makeKeyAndVisible() return true </code></pre>
<p>Found simple solution - no need to remove "initial view controller check" from storyboard and editing project Info tab and use <code>makeKeyAndVisible</code>, just place </p> <pre><code>self.window.rootViewController = rootVC; </code></pre> <p>in </p> <pre><code>- (BOOL) application:didFinishLaunchingWithOptions: </code></pre>