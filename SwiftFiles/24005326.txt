How does let evaluate a bool value in Swift?
<p>I'm reading <a href="https://itun.es/tr/jEUH0.l" rel="nofollow">Swift</a> Programming Language book to get familiar Swift language as many others. </p> <p>It says that </p> <blockquote> <p>In an if statement, the conditional must be a Boolean expressionâ€”this means that code such as if score { ... } is an error, not an implicit comparison to zero.</p> </blockquote> <p>What i understand that condition must evaluate a bool value. Even if it's a integer value, it will not work. But what i don't understand is </p> <pre><code> if let convertedRank = Rank.fromRaw(3) { let threeDescription = convertedRank.simpleDescription() } </code></pre> <p>How does this evaluate a bool value. Normally, we use let to create a constant. As implicit conversion isn't possible in Swift, how does <code>let convertedRank = Rank.fromRaw(3)</code> evaluate a bool value which is a must for condition ?</p>
<p><code>fromRaw()</code> returns an optional of the type. Because there isn't a Rank for every Int, the function will return either a Rank or nil as a Rank optional. Optionals are the exception to only having Bools in an if condition. If the Optional has a value, it will evaluate as true and if the Optional is nil it will evaluate as false. </p>
<p>In addition to Bools, <code>if</code> statements <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_430">can also take optionals</a>, with the condition evaluating to whether or not the optional has a value. This particular construct is called <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_432">"optional binding"</a>.</p>
<p>The condition in <code>if</code>, <code>where</code>, etc doesn't actually need to be Bool; it can be any type that implements the <code>LogicValue</code> protocol:</p> <pre><code>protocol LogicValue { func getLogicValue() -&gt; Bool } </code></pre> <p>The <code>getLogicValue()</code> method is implicitly called when evaluating the conditional statement.</p> <p>The <code>if-let</code> construct, as mentioned in other answers, is a special case for simultaneously testing an Optionals for nil and (if it isn't) unwrapping it at the same time.</p>