Get integer value from string in swift
<p>So I can do this:</p> <pre><code>var stringNumb: NSString = "1357" var someNumb: CInt = stringNumb.intValue </code></pre> <p>But I can't find the way to do it w/ a <code>String</code>. I'd like to do something like:</p> <pre><code>var stringNumb: String = "1357" var someNumb: Int = Int(stringNumb) </code></pre> <p>This doesn't work either:</p> <pre><code>var someNumbAlt: Int = myString.integerValue </code></pre>
<p>You can bridge from String to NSString and convert from CInt to Int like this:</p> <pre><code>var myint: Int = Int(stringNumb.bridgeToObjectiveC().intValue) </code></pre>
<p>I'd use:</p> <pre><code>var stringNumber = "1234" var numberFromString = stringNumber.toInt() println(numberFromString) </code></pre> <p>Note <code>toInt()</code>:</p> <blockquote> <p>If the string represents an integer that fits into an Int, returns the corresponding integer.</p> </blockquote>
<p>If you are able to use a <code>NSString</code> only.</p> <p>It's pretty similar to objective-c. All the data type are there but require the <code>as NSString</code> addition</p> <pre><code> var x = "400.0" as NSString x.floatValue //string to float x.doubleValue // to double x.boolValue // to bool x.integerValue // to integer x.intValue // to int </code></pre> <p>Also we have an <code>toInt()</code> function added See Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/us/jEUH0.l">https://itun.es/us/jEUH0.l</a> page 49</p> <pre><code>x.toInt() </code></pre>
<p>The method you want is <code>toInt()</code> -- you have to be a little careful, since the <code>toInt()</code> returns an optional Int.</p> <pre><code>let stringNumber = "1234" let numberFromString = stringNumber.toInt() // numberFromString is of type Int? with value 1234 let notANumber = "Uh oh" let wontBeANumber = notANumber.toInt() // wontBeANumber is of type Int? with value nil </code></pre>
<p>A more general solution could be a extension</p> <pre><code>extension String { var toFloat:Float { return Float(self.bridgeToObjectiveC().floatValue) } var toDouble:Double { .... } .... } </code></pre> <p>this for example extends the swift native String object by toFloat</p>
<p>I wrote an extension for that purpose. It always returns an <code>Int</code>. If the string does not fit into an <code>Int</code>, 0 is returned.</p> <pre><code>extension String { func toTypeSafeInt() -&gt; Int { if let safeInt = self.toInt() { return safeInt } else { return 0 } } } </code></pre>
<p><strong>Swift 2.0</strong> you can initialize Integer using constructor</p> <pre><code>var stringNumber = "1234" var numberFromString = Int(stringNumber) </code></pre>
<p>Convert String to Int in Swift 2.0:</p> <pre><code>var str:NSString = Data as! NSString var cont:Int = str.integerValue </code></pre> <p>use <code>.intergerValue or intValue for Int32</code></p>
<p><strong>8:1 Odds</strong>(*)</p> <pre><code>var stringNumb: String = "1357" var someNumb = Int(stringNumb) </code></pre> <p>or</p> <pre><code>var stringNumb: String = "1357" var someNumb:Int? = Int(stringNumb) </code></pre> <p><code>Int(String)</code> returns an optional <code>Int?</code>, not an <code>Int</code>.</p> <hr> <p><strong>Safe use: do not explicitly unwrap</strong></p> <pre><code>let unwrapped:Int = Int(stringNumb) ?? 0 </code></pre> <p>or</p> <pre><code>if let stringNumb:Int = stringNumb { ... } </code></pre> <p>(*) <em>None of the answers actually addressed why <code>var someNumb: Int = Int(stringNumb)</code> was not working.</em></p>
<p><strong>Simple but dirty way</strong></p> <pre><code>// Swift 1.2 if let intValue = "42".toInt() { let number1 = NSNumber(integer:intValue) } // Swift 2.0 let number2 = Int(stringNumber) // Using NSNumber let number3 = NSNumber(float:("42.42" as NSString).floatValue) </code></pre> <p><strong>The extension-way</strong></p> <p>This is better, really, because it'll play nicely with locales and decimals. </p> <pre><code>extension String { var numberValue:NSNumber? { let formatter = NSNumberFormatter() formatter.numberStyle = .DecimalStyle return formatter.numberFromString(self) } } </code></pre> <p>Now you can simply do:</p> <pre><code>let someFloat = "42.42".numberValue let someInt = "42".numberValue </code></pre>
<p>above answer didnt help me as my string value was "700.00"</p> <p>with <strong>Swift 2.2</strong> this works for me</p> <pre><code>let myString = "700.00" let myInt = (myString as NSString).integerValue </code></pre> <p>I passed myInt to NSFormatterClass </p> <pre><code>let formatter = NSNumberFormatter() formatter.numberStyle = .CurrencyStyle formatter.maximumFractionDigits = 0 let priceValue = formatter.stringFromNumber(myInt!)! //Now priceValue is ₹ 700 </code></pre> <p>Thanks to <a href="https://www.hackingwithswift.com/example-code/language/how-to-convert-a-string-to-an-int" rel="nofollow">this</a> blog post.</p>
<p><strong>In Swift 3.0</strong> </p> <p><strong>Type 1: Convert NSString to String</strong></p> <pre><code> let stringNumb:NSString = "1357" let someNumb = Int(stringNumb as String) // 1357 as integer </code></pre> <p><strong>Type 2: If the String has Integer only</strong></p> <pre><code> let stringNumb = "1357" let someNumb = Int(stringNumb) // 1357 as integer </code></pre> <p><strong>Type 3: If the String has Float value</strong></p> <pre><code> let stringNumb = "13.57" let stringToFloat = Float(stringNumb) // 13.57 as Float if stringToFloat != nil { let someNumb = Int(stringToFloat!)// 13 as Integer } else { //do something if the stringNumb not have digit only. (i.e.,) let stringNumb = "13er4" } </code></pre>