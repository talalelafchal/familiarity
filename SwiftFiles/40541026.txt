iOS label does not update text even from main thread
I've spent a fun couple of hours trying all sorts of different combinations to have a label properly update its title after a Firebase async download. It's the same issue raised here and here. Seems like a clear fix, but I'm doing something wrong and would appreciate any help pointing me in the right direction. The basic flow is view loads, data is downloaded from Firebase, some labels are updated accordingly with downloaded data. One representative iteration I have tried is as follows:  // Query Firebase. let detailsRef = self.ref.child("eventDetails") detailsRef.queryOrdered(byChild: "UNIQUE_ID_EVENT_NUMBER").queryEqual(toValue: eventID).observeSingleEvent(of: .value, with: { snapshot in if (snapshot.value is NSNull) { print("error") } else { var tempDict = [NSDictionary]() for child in snapshot.children { let data = child as! FIRDataSnapshot let dict = data.value as! NSDictionary as! [String:Any] tempDict.append(dict as NSDictionary) } self.dictionaryOfRecoDetails = tempDict self.ParseFirebaseData() DispatchQueue.main.async { // This is the function that updates labels and button text in format like self.websiteLabel.titleLabel?.text = "Appropriate String" self.loadDataForView() } } }) func loadDataForView() { // Example of the label update that happens within this function. // Do not show website button if there is no website. if self.recommendation.recommendationWebsiteUrl == "" || self.recommendation.recommendationWebsiteUrl == nil || self.recommendation.recommendationWebsiteUrl == "NA" { self.websiteLabel.titleLabel?.text = "" self.websiteHeight.constant = 0 self.websiteBottom.constant = 0 } else { self.websiteLabel.titleLabel?.text = "Go to Website" } } EDIT UPDATE: The call to the code above is coming from viewDidAppear(). It doesn't update if I call it from viewDidLayoutSubviews() either. From debugging I know the label update is getting called, but nothing is changing. Feels like something simple I'm missing, but I'm stuck. Thanks for your ideas.
I'm pretty sure you don't need the DispatchQueue.main.async bit. Just try calling self.loadDataFromView() and see if that helps.
This ended up being a lesson in mis-labeling causing confusion. The label being changed actually isn't a label, but a button. Shouldn't have been named websiteLabel! Once the title was changed with self.websiteLabel.setTitle("Go to Website", for: .normal) then everything worked as expected.