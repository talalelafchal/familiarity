Custom UITableViewCell delegate pattern in Swift
<p>I have a weird problem in a Swift + Objective-C problem. </p> <p>I'm implementing a UITableView and a custom cell with a delegate in swift, but as soon as my UITableViewController assign my cell delegate to self, it crash both my app and Xcode. Yeah each time I crash my app, Xcode crash too, no matter what, but this is another problem.</p> <p>Here is a part of my cell</p> <pre><code>enum NewsCellActionType: Int { case Vote = 0 case Comments case Time } protocol NewsCellDelegate { func newsCellDidSelectButton(cell: NewsCell, actionType: NewsCellActionType) } class NewsCell: UITableViewCell { var cellDelegate: NewsCellDelegate? func selectedAction(action: NewsCellActionType) { self.cellDelegate?.newsCellDidSelectButton(self, actionType: action) } } </code></pre> <p>And here is where I set the delegate in my UIViewController</p> <pre><code> override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! { var cell = tableView.dequeueReusableCellWithIdentifier(NewsCellsId) as NewsCell if cell == nil { cell = NewsCell(style: UITableViewCellStyle.Default, reuseIdentifier: NewsCellsId) } cell.post = self.posts[indexPath.row] as HNPost cell.cellDelegate = self return cell } </code></pre> <p>It crash at the line cell.cellDelegate = self, I have no idea why. Is it a bug in the current DP, or am I doing it wrong?</p> <p>I tried to use weak on my delegate var + the @objc tag on the protocol, but as I use a pure Swift enum I can't do that. But do I need it?</p> <p>Thanks!</p>
<p>I needed two changes to make your code work</p> <p><del>1. replaced <code>as</code> with <code>as?</code> after <code>tableView.dequeueReusableCellWithIdentifier</code></del></p> <p><del>(see <a href="http://stackoverflow.com/questions/24022763/uitableview-in-swift">UITableView in Swift</a> for more details) </del></p> <p>The first change not needed because the cell can't be <code>nil</code> (storyboard ensures it). I have built the code wrong.</p> <p>2. Added <code>@class_protocol</code> to the <code>NewsCellDelegate</code></p> <pre><code>@class_protocol protocol NewsCellDelegate { </code></pre> <p>I am not really sure why the app crashes without it and I think it's a bug. However, <code>@class_protocol</code> should be used anyway because we should declare the <code>cellDelegate</code> as <code>weak</code> and without <code>@class_protocol</code> we can't do it.</p> <pre><code>weak var cellDelegate: NewsCellDelegate? </code></pre> <p>Unfortunately, adding <code>weak</code> makes the app crash when the delegate is used.</p> <p>There is an enourmous number of memory leaks in your code, starting with the library, which is written with ARC but it is set as MRC.</p> <p>Your closures in <code>NewsCell</code> are capturing <code>self</code>, creating retain cycles (and subsequently leaked cells).</p> <p>I wasn't able to find the reason of the crash but I am pretty sure it's a bug in the compiler/runtime because it is not only crashing the app, but also Xcode and 3 times it even crashed my system.</p>
<p>Here I posted the <a href="http://stackoverflow.com/a/24145675/1091145">answer</a>.</p> <blockquote> <p>Currently you have to explicitly mark your protocols with @objc if the delegate should be an Object of a Objective-C class (Like the UITableViewController):</p> </blockquote> <pre><code>@objc protocol SwiftProtocol </code></pre> <p>This will enable interoperating with Objective-C</p>
<p>protocol NewsCellDelegate:class { func newsCellDidSelectButton(cell: NewsCell, actionType: NewsCellActionType) }</p> <p>you're missing a "class"</p>