How can I change the textual representation displayed for a type in Swift?
<p>How can I modify the textual output that gets displayed in string interpolation?</p> <p>The <code>Printable</code> protocol looks the most obvious but it's ignored in both String Interpolation and when printing the instance, e.g:</p> <pre><code>struct Point : Printable { var x = 0 var y = 0 var description : String { return "(\(x), \(y))" } func toString() -&gt; String { return description } } </code></pre> <p>Likewise the <code>toString()</code> convention has no effect either:</p> <pre><code>var p = Point(x: 10, y: 20) println(p) // V11lldb_expr_05Point (has 2 children) println("\(p)") // V11lldb_expr_05Point (has 2 children) println(p.description) // (10, 20) println("\(p.description)") // (10, 20) </code></pre> <p>The behavior is different again in PlayGround which uses its own String representation for structs, i.e:</p> <pre><code>p // {x 10, y 20} </code></pre> <p>Is there a way I can change how an instance is displayed?</p>
<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/SwiftStandardLibraryReference/Printable.html#//apple_ref/doc/uid/TP40014608-CH11-SW1">Relevant Apple Swift Docs</a></p> <p>Apple provides this example:</p> <pre><code>struct MyType: Printable { var name = "Untitled" var description: String { return "MyType: \(name)" } } let value = MyType() println("Created a \(value)") // prints "Created a MyType: Untitled" </code></pre> <p>If you try this in playground, you will get the same issue that you're getting (<code>V11lldb_expr...</code>). In playground, you get the description on the right hand side when you call the initializer, but the <code>println</code> doesn't return something legible. </p> <p>Out of playground, however, this code behaves as you would expect. Both your code and the sample code from Apple above print the correct <code>description</code> when used in a non-playground context.</p> <p>I don't think you can change this behavior in playground. It could also just be a bug.</p> <p><strong>EDIT</strong>: I'm pretty sure that this is a bug; I submitted a bug report to Apple.</p> <p><strong>UPDATE</strong>: In Swift 2, instead of <code>Printable</code>, use <code>CustomStringConvertible</code> (<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_CustomStringConvertible_Protocol/index.html">relevant doc link</a>).</p> <pre><code>struct MyType: CustomStringConvertible { var name = "Untitled" var description: String { return "MyType: \(name)" } } let value = MyType() println("Created a \(value)") // prints "Created a MyType: Untitled" </code></pre>
<p>This appears to be a bug in the playground. If you actually compile and run the programme normally it prints:</p> <pre><code>(10, 20) (10, 20) (10, 20) (10, 20) </code></pre> <p>as expected.</p> <p>You should report this at <a href="https://bugreport.apple.com" rel="nofollow">https://bugreport.apple.com</a></p>
<p>If you open the console view : View -> Assistant Editor -> Show Assistant Editor you can see expected print lines Checked in xCode 6.3.2 with Yosimite 10.10</p> <p><img src="https://i.stack.imgur.com/optXB.jpg" alt="enter image description here"></p>
<h2>Swift 2 &amp; 3</h2> <p>In Swift 2, <code>Printable</code> became <code>CustomStringConvertible</code>. For example, you can create some structs:</p> <pre><code>struct Animal : CustomStringConvertible { let type : String var description: String { return type } } struct Farm : CustomStringConvertible { let name : String let animals : [Animal] var description: String { return "\(name) is a \(self.dynamicType) with \(animals.count) animal(s)." } } </code></pre> <p>If you initialize them:</p> <pre><code>let oldMajor = Animal(type: "Pig") let boxer = Animal(type: "Horse") let muriel = Animal(type: "Goat") let orwellsFarm = Farm(name: "Animal Farm", animals: [oldMajor, boxer, muriel]) </code></pre> <p>The custom descriptions will appear in your playground:</p> <p><a href="https://i.stack.imgur.com/tcD5q.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/tcD5q.png" alt="enter image description here"></a></p> <p>See also <code>CustomDebugStringConvertible</code>, which you can use for more verbose output during debugging.</p> <hr> <h3>Usage Note</h3> <p>You can initialize a <code>String</code> from any type <em>without</em> implementing this protocol. For example:</p> <p><a href="https://i.stack.imgur.com/alEKV.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/alEKV.png" alt="enter image description here"></a></p> <p>For this reason, the docs say:</p> <blockquote> <p>Using <code>CustomStringConvertible</code> as a generic constraint, or accessing a conforming type's <code>description</code> directly, is therefore discouraged.</p> </blockquote>