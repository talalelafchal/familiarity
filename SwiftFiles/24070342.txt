Type and Invocation of Swift's operators
<p>As per the official documentation, Swift's built-in operators are global functions defined with the <code>@infix</code> attribute.</p> <p>As such, is the only way of invoking such a function to have it between two types for which the operator has been defined? Or is it possible to do something similar to e.g. <code>+(3,3)</code>?</p> <p>What got me thinking is that this is a valid statement:</p> <pre><code>Array(1...10).reduce(0, +) </code></pre> <p>How, exactly, will the <code>+</code> be invoked in the above case? Is there a difference to this piece of code?</p> <pre><code>Array(1...10).reduce(0, {$0 + $1}) </code></pre>
<p>In Swift, functions are just named closures and thus is <code>+</code>. So the two lines are pretty much identical. (The second one just wraps it in an additional invocation.)</p> <p>You cannot do <code>+(3, 3)</code>, because an operator cannot be infix and prefix at the same time. However, you can after referencing it with another name:</p> <pre><code>let function: (Int, Int) -&gt; Int = (+) function(5, 6) // 11 </code></pre> <p>(Writing <code>+</code> without putting it in the single-element tuple seems to confuse the compiler.)</p>