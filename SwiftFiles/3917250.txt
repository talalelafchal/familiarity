Converting NSString to NSDate (and back again)
<p>How would I convert an <code>NSString</code> like "01/02/10" (meaning 1st February 2010) into an <code>NSDate</code>? And how could I turn the <code>NSDate</code> back into a string?</p>
<h2>Objective-C</h2> <p><strong>NSString to NSDate</strong></p> <pre><code>NSString *dateString = @"01-02-2010"; NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init]; // this is imporant - we set our input date format to match our input string // if format doesn't match you'll get nil from your string, so be careful [dateFormatter setDateFormat:@"dd-MM-yyyy"]; NSDate *dateFromString = [[NSDate alloc] init]; // voila! dateFromString = [dateFormatter dateFromString:dateString]; </code></pre> <p><strong>NSDate convert to NSString:</strong></p> <pre><code>NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init]; [dateFormatter setDateFormat:@"dd-MM-yyyy"]; NSString *stringDate = [dateFormatter stringFromDate:[NSDate date]]; NSLog(@"%@", stringDate); </code></pre> <hr> <h2><strong>Swift</strong></h2> <p>Updated: 22nd October 2015</p> <p><strong>String to NSDate</strong></p> <pre><code>var dateString = "01-02-2010" var dateFormatter = NSDateFormatter() // this is imporant - we set our input date format to match our input string dateFormatter.dateFormat = "dd-MM-yyyy" // voila! var dateFromString = dateFormatter.dateFromString(dateString) </code></pre> <p><strong>NSDate to String</strong></p> <pre><code>var formatter = NSDateFormatter() formatter.dateFormat = "dd-MM-yyyy" let stringDate: String = formatter.stringFromDate(NSDate()) println(stringDate) </code></pre>
<p>using "10" for representing a year is not good, because it can be 1910, 1810, etc. You probably should use 4 digits for that.</p> <p>If you can change the date to something like</p> <pre><code>yyyymmdd </code></pre> <p>Then you can use:</p> <pre><code>// Convert string to date object NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init]; [dateFormat setDateFormat:@"yyyyMMdd"]; NSDate *date = [dateFormat dateFromString:dateStr]; // Convert date object to desired output format [dateFormat setDateFormat:@"EEEE MMMM d, YYYY"]; dateStr = [dateFormat stringFromDate:date]; [dateFormat release]; </code></pre>
<p>Why not add a category to NSString?</p> <pre><code>// NSString+Date.h @interface NSString (Date) + (NSDate*)stringDateFromString:(NSString*)string; + (NSString*)stringDateFromDate:(NSDate*)date; @end // NSString+Date.m NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init]; [dateFormatter setDateFormat:@"EEE, dd MMM yyyy HH:mm:ss ZZZ"]; NSDate *date = [dateFormatter dateFromString:stringDate ]; [dateFormatter release]; + (NSDateFormatter*)stringDateFormatter { static NSDateFormatter* formatter = nil; if (formatter == nil) { formatter = [NSDateFormatter alloc] init]; [formatter setDateFormat:@"EEE, dd MMM yyyy HH:mm:ss ZZZ"]; } return formatter; } + (NSDate*)stringDateFromString:(NSString*)string { return [[NSString stringDateFormatter] dateFromString:string]; } + (NSString*)stringDateFromDate:(NSDate*)date { return [[NSString stringDateFormatter] stringFromDate:date]; } // Usage (#import "NSString+Date.h") NSString* string = [NSString stringDateFromDate:[NSDate date]]; NSDate* date = [NSString stringDateFromString:string]; </code></pre>
<pre><code>// Convert string to date NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init]; [dateFormat setDateFormat:@"yyyyMMdd"]; NSDate *date = [dateFormat dateFromString:dateStr]; // Convert Date to string [dateFormat setDateFormat:@"EEEE MMMM d, YYYY"]; dateStr = [dateFormat stringFromDate:date]; [dateFormat release]; </code></pre>
<p>Use this method to convert from <code>NSString</code> to <code>NSdate</code>:</p> <pre><code>-(NSDate *)getDateFromString:(NSString *)pstrDate { NSDateFormatter* myFormatter = [[NSDateFormatter alloc] init]; [myFormatter setDateFormat:@"dd/MM/yyyy"]; NSDate* myDate = [myFormatter dateFromString:pstrDate]; return myDate; } </code></pre>
<p>Made an <strong>NSString extension</strong> for that.</p> <pre><code>// Simple as this. date = dateString.dateValue; </code></pre> <p>Thanks to <a href="https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSDataDetector_Class/Reference/Reference.html">NSDataDetector</a>, it recognizes a whole lot of format.</p> <pre><code>'2014-01-16' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '2014.01.16' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '2014/01/16' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '2014 Jan 16' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '2014 Jan 16th' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '20140116' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '01-16-2014' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '01.16.2014' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '01/16/2014' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '16 January 2014' dateValue is &lt;2014-01-16 11:00:00 +0000&gt; '01-16-2014 17:05:05' dateValue is &lt;2014-01-16 16:05:05 +0000&gt; '01-16-2014 T 17:05:05 UTC' dateValue is &lt;2014-01-16 17:05:05 +0000&gt; '17:05, 1 January 2014 (UTC)' dateValue is &lt;2014-01-01 16:05:00 +0000&gt; </code></pre> <p>Part of <a href="https://github.com/eppz/eppz-kit">eppz!kit</a>, grab the category <a href="https://github.com/eppz/eppz-kit/blob/master/eppz!kit/NSString%2BEPPZKit.h">NSString+EPPZKit.h</a> from GitHub.</p> <hr> <p>ORIGINAL ANSWER: Whether you're not sure (or don't care) about the date format contained in the string, <strong>use NSDataDetector for parsing date</strong>.</p> <pre><code>//Role players. NSString *dateString = @"Wed, 03 Jul 2013 02:16:02 -0700"; __block NSDate *detectedDate; //Detect. NSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingAllTypes error:nil]; [detector enumerateMatchesInString:dateString options:kNilOptions range:NSMakeRange(0, [dateString length]) usingBlock:^(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop) { detectedDate = result.date; }]; </code></pre>
<pre><code>NSString *mystr=@"Your string date"; NSCalendar *cal = [NSCalendar currentCalendar]; NSDate *now = [dateFormatter dateFromString:mystr]; Nslog(@"%@",now); </code></pre> <p>If you want set the format use below code:</p> <pre><code>NSString *dateString = @"01-02-2010"; NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init]; // this is important - we set our input date format to match our input string // if format doesn't match you'll get nil from your string, so be careful [dateFormatter setDateFormat:@"dd-MM-yyyy"]; NSDate *dateFromString = [[NSDate alloc] init]; // voila! dateFromString = [dateFormatter dateFromString:dateString]; Nslog(@"%@",[dateFormatter dateFromString:dateString]); </code></pre>
<pre><code>NSString *dateStr = @"Tue, 25 May 2010 12:53:58 +0000"; // Convert string to date object NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init]; [dateFormat setDateFormat:@"EE, d LLLL yyyy HH:mm:ss Z"]; NSDate *date = [dateFormat dateFromString:dateStr]; [dateFormat release]; </code></pre>
<p>If anyone is interested in doing something like this in Swift these days, I have a start on something, although it's not perfect.</p> <pre><code>func detectDate(dateString: NSString) -&gt; NSDate { var error: NSError? let detector: NSDataDetector = NSDataDetector.dataDetectorWithTypes(NSTextCheckingType.Date.toRaw(), error: &amp;error)! if error == nil { var matches = detector.matchesInString(dateString, options: nil, range: NSMakeRange(0, dateString.length)) let currentLocale = NSLocale.currentLocale() for match in matches { match.resultType == NSTextCheckingType.Date NSLog("Date: \(match.date.description)") return match.date } } return NSDate() } </code></pre>
<p>You can use extensions for this.</p> <pre><code>extension NSDate { //NSString to NSDate convenience init(dateString:String) { let nsDateFormatter = NSDateFormatter() nsDateFormatter.dateFormat = "yyyy-MM-dd hh:mm:ss" // Add the locale if required here let dateObj = nsDateFormatter.dateFromString(dateString) self.init(timeInterval:0, sinceDate:dateObj!) } //NSDate to time string func getTime() -&gt; String { let timeFormatter = NSDateFormatter() timeFormatter.dateFormat = "hh:mm" //Can also set the default styles for date or time using .timeStyle or .dateStyle return timeFormatter.stringFromDate(self) } //NSDate to date string func getDate() -&gt; String { let dateFormatter = NSDateFormatter() dateFormatter.dateFormat = "dd, MMM" return dateFormatter.stringFromDate(self) } //NSDate to String func getString() -&gt; String { let dateFormatter = NSDateFormatter() dateFormatter.dateFormat = "yyyy-MM-dd hh:mm:ss" return dateFormatter.stringFromDate(self) } } </code></pre> <p>So while execution actual code will look like follows</p> <pre><code> var dateObjFromString = NSDate(dateString: cutDateTime) var dateString = dateObjFromString.getDate() var timeString = dateObjFromString.getTime() var stringFromDate = dateObjFromString.getString() </code></pre> <p>There are some defaults methods as well but I guess it might not work for the format you have given from documentation</p> <pre><code> -dateFromString(_:) -stringFromDate(_:) -localizedStringFromDate(_ date: NSDate, dateStyle dateStyle: NSDateFormatterStyle, timeStyle timeStyle: NSDateFormatterStyle) -&gt; String </code></pre>
<p>update: <strong>Xcode 8 beta â€¢ Swift 3.0</strong></p> <pre><code>extension Date { struct Formatters { static let custom: DateFormatter = { let formatter = DateFormatter() return formatter }() static let date:DateFormatter = { let formatter = DateFormatter() formatter.dateFormat = "yyyy-MM-dd" return formatter }() static let time:DateFormatter = { let formatter = DateFormatter() formatter.dateFormat = "HH:mm" return formatter }() static let weekday: DateFormatter = { let formatter = DateFormatter() formatter.dateFormat = "cccc" return formatter }() static let month: DateFormatter = { let formatter = DateFormatter() formatter.dateFormat = "LLLL" return formatter }() } var date: String { return Formatters.date.string(from: self) } var time: String { return Formatters.time.string(from: self) } var weekdayName: String { return Formatters.weekday.string(from: self) } var monthName: String { return Formatters.month.string(from: self) } func formatted(with dateFormat: String) -&gt; String { Formatters.custom.dateFormat = dateFormat return Formatters.custom.string(from: self) } } </code></pre> <hr> <pre><code>extension String { func toDateFormatted(with dateFormat:String)-&gt; Date? { Date.Formatters.custom.dateFormat = dateFormat return Date.Formatters.custom.date(from: self) } } </code></pre> <hr> <p>usage:</p> <pre><code>Date().time // "07:32" Date().date // "2016-06-19" Date().weekdayName // "Sunday" Date().monthName // "June" Date().formatted(with: "EEEE',' MMMM dd',' yyyy 'at' h:mm a '('vvvv')'") // "Sunday, June 19, 2016 at 7:32 AM (Brasilia Time)" if let myDate = "20140812 01:00 pm".toDateFormatted(with: "yyyyMMdd hh:mm a") { print(myDate.description) // "2014-08-12 16:00:00 +0000\n" UTC/GMT TIME print(myDate.description(with: Locale.current())) // "Tuesday, August 12, 2014 at 1:00:00 PM Brasilia Standard Time\n" print(myDate.date) // "2014-08-12\n" print(myDate.time) // "13:00\n" } </code></pre> <hr> <hr> <p><strong>Xcode 7.0.1 â€¢ Swift 2.0</strong></p> <p>The Swift approach is pretty simple, just create a new swift file source at your project and create some read only computed properties to extend NSDate and format it as you like:</p> <pre><code>extension NSDate { struct Date { static let formatterCustom: NSDateFormatter = { let formatter = NSDateFormatter() return formatter }() static let formatterDate:NSDateFormatter = { let formatter = NSDateFormatter() formatter.dateFormat = "yyyy-MM-dd" return formatter }() static let formatterTime:NSDateFormatter = { let formatter = NSDateFormatter() formatter.dateFormat = "HH:mm" return formatter }() static let formatterWeekday:NSDateFormatter = { let formatter = NSDateFormatter() formatter.dateFormat = "EEEE" return formatter }() static let formatterMonth:NSDateFormatter = { let formatter = NSDateFormatter() formatter.dateFormat = "LLLL" return formatter }() } var date: String { return Date.formatterDate.stringFromDate(self) } var time: String { return Date.formatterTime.stringFromDate(self) } var weekdayName: String { return Date.formatterWeekday.stringFromDate(self) } var monthName: String { return Date.formatterMonth.stringFromDate(self) } func formatted(format:String) -&gt; String { Date.formatterCustom.dateFormat = format return Date.formatterCustom.stringFromDate(self) } } </code></pre> <p>usage is pretty simple:</p> <pre><code>NSDate().time // "01:22" NSDate().date // "2015-12-28" NSDate().weekdayName // "Monday" NSDate().monthName // "December" NSDate().formatted("EEEE',' LLLL dd',' yyyy 'at' h:mm a '('vvvv')'") // "Monday, December 28, 2015 at 2:04 AM (Brasilia Time)" </code></pre> <p>inputing time</p> <pre><code>extension String { struct Date { static let formatter = NSDateFormatter() } func toDateFormattedWith(format:String)-&gt; NSDate? { Date.formatter.dateFormat = format return Date.formatter.dateFromString(self) } } if let myDate = "20140812 01:00 pm".toDateFormattedWith("yyyyMMdd hh:mm a") { print(myDate.description) // "2014-08-12 16:00:00 +0000\n" UTC/GMT TIME print(myDate.descriptionWithLocale(NSLocale.currentLocale())) // "Tuesday, August 12, 2014 at 1:00:00 PM Brasilia Standard Time\n" print(myDate.date) // "2014-08-12\n" print(myDate.time) // "13:00\n" } </code></pre> <p>Here it is all elements you can use to customize it as necessary:</p> <p><img src="https://i.stack.imgur.com/lkYVY.png" alt="enter image description here"></p>
<p>Date to NSString</p> <pre><code>NSString *dateString = [NSString stringWithFormat:@"%@",[NSDate date]]; NSLog(@"string: %@",dateString ); //2015-03-24 12:28:49 +0000 </code></pre> <p>NSString to NSDate</p> <pre><code>NSDateFormatter *formatter = [[NSDateFormatter alloc] init]; [formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss Z"]; NSDate *date = [formatter dateFromString:dateString]; NSLog(@"date: %@", date); //015-03-24 12:28:49 +0000 </code></pre>
<p>Best practice is to build yourself a general class where you put all your general use methods, methods useful in almost all projects and there add the code suggested by @Pavan as:</p> <pre><code>+ (NSDate *)getDateOutOfString:(NSString *)passedString andDateFormat:(NSString *)dateFormat{ NSString *dateString = passedString; NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init]; [dateFormatter setDateFormat:dateFormat]; NSDate *dateFromString = [[NSDate alloc] init]; dateFromString = [dateFormatter dateFromString:dateString]; return dateFromString; } </code></pre> <p>.. and so on for all other useful methods </p> <p>By doing so you start building a clean reusable code for you app. Cheers!</p>
<p><strong>As per Swift 2.2</strong></p> <p>You can get easily NSDate from String and String from NSDate. e.g.</p> <p>First set date formatter</p> <pre><code>let formatter = NSDateFormatter(); formatter.dateStyle = NSDateFormatterStyle.MediumStyle formatter.timeStyle = .NoStyle formatter.dateFormat = "MM/dd/yyyy" </code></pre> <p>Now get date from string and vice versa.</p> <pre><code>let strDate = formatter.stringFromDate(NSDate()) print(strDate) let dateFromStr = formatter.dateFromString(strDate) print(dateFromStr) </code></pre> <p>Now enjoy.</p>