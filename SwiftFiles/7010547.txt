UITextField text change event
<p>How can I detect any text changes in a textField? The delegate method <code>shouldChangeCharactersInRange</code> works for something, but it did not fulfill my need exactly. Since until it returns YES, the textField texts are not available to other observer methods. </p> <p>e.g. in my code <code>calculateAndUpdateTextFields</code> did not get the updated text, the user has typed. </p> <p>Is their any way to get something like <code>textChanged</code> Java event handler. </p> <pre><code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string { if (textField.tag == kTextFieldTagSubtotal || textField.tag == kTextFieldTagSubtotalDecimal || textField.tag == kTextFieldTagShipping || textField.tag == kTextFieldTagShippingDecimal) { [self calculateAndUpdateTextFields]; } return YES; } </code></pre>
<p>From <a href="http://www.iphonedevsdk.com/forum/iphone-sdk-development/4541-what-proper-way-do-uitextfield-text-change-call-back.html">proper way do uitextfield text change call back</a>:</p> <blockquote> <p>I catch the characters sent to a UITextField control something like this:</p> </blockquote> <pre><code>// Add a "textFieldDidChange" notification method to the text field control. [textField addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged]; </code></pre> <blockquote> <p>Then in the textFieldDidChange: method you can examine the contents of the textField, and reload your table view as needed.</p> </blockquote> <p>You could use that and put <strong>calculateAndUpdateTextFields</strong> as your <code>selector</code>.</p>
<p>XenElement's answer is spot on. </p> <p>The above can be done in interface builder too by right-clicking on the UITextField and dragging the "Editing Changed" send event to your subclass unit. </p> <p><img src="https://i.stack.imgur.com/KSXM5.png" alt="UITextField Change Event"></p>
<p>As stated here: <a href="http://stackoverflow.com/questions/7010547/uitextfield-text-change-event#comment19243817_7010765">UITextField text change event</a>, it seems that <strong>as of iOS 6</strong> (iOS 6.0 and 6.1 checked) it is not possible to fully detect changes in <code>UITextField</code> objects just by observing the <code>UITextFieldTextDidChangeNotification</code>. </p> <p>It seems that only those changes made directly by the built-in iOS keyboard are tracked now. This means that if you change your <code>UITextField</code> object just by invoking something like this: <code>myUITextField.text = @"any_text"</code>, you won't be notified about any changes at all.</p> <p>I don't know if this is a bug or it is intended. Seems like a bug since I haven't found any reasonable explanation in documentation. This is also stated here: <a href="http://stackoverflow.com/questions/7010547/uitextfield-text-change-event#comment20149070_7010765">UITextField text change event</a>.</p> <p>My "solution" to this is to actually post a notification by myself for every change I make to my <code>UITextField</code> (if that change is done without using the built-in iOS keyboard). Something like this:</p> <pre><code>myUITextField.text = @"I'm_updating_my_UITextField_directly_in_code"; NSNotification *myTextFieldUpdateNotification = [NSNotification notificationWithName:UITextFieldTextDidChangeNotification object:myUITextField]; [NSNotificationCenter.defaultCenter postNotification:myTextFieldUpdateNotification]; </code></pre> <p>This way you are 100% confident that you'll receive the same notification when you change the <code>.text</code> property of your <code>UITextField</code> object, either when you update it "manually" in your code or through the built-in iOS keyboard.</p> <p>It is important to consider that, since this is not a documented behavior, this approach may lead to 2 notifications received for the same change in your <code>UITextField</code> object. Depending on your needs (what you actually do when your <code>UITextField.text</code> changes) this could be an inconvenience for you.</p> <p>A slightly different approach would be to post a custom notification (this is, with a custom name other than <code>UITextFieldTextDidChangeNotification</code>) if you actually need to know whether the notification was yours or "iOS-made". </p> <p><strong>EDIT:</strong></p> <p>I've just found a different approach which I think could be better:</p> <p>This involves the <strong><em>Key-Value Observing (KVO)</em></strong> feature of Objective-C (<a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA">http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA</a>).</p> <p>Basically, you register yourself as an observer of a property and if this property changes you get notified about it. The "principle" is quite similar to how <code>NSNotificationCenter</code> works, being the main advantage that this approach works automatically also as of iOS 6 (without any special tweak like having to manually post notifications).</p> <p>For our <code>UITextField</code>-scenario this works just fine if you add this code to, for example, your <code>UIViewController</code> that contains the text field:</p> <pre><code>static void *myContext = &amp;myContext; - (void)viewDidLoad { [super viewDidLoad]; //Observing changes to myUITextField.text: [myUITextField addObserver:self forKeyPath:@"text" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:myContext]; } - (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context { if(context == myContext) { //Here you get notified every time myUITextField's "text" property is updated NSLog(@"New value: %@ - Old value: %@", [change objectForKey:NSKeyValueChangeNewKey], [change objectForKey:NSKeyValueChangeOldKey]); } else [super observeValueForKeyPath:keyPath ofObject:object change:change context:context]; } </code></pre> <p>Credit to this answer regarding "context" management: <a href="http://stackoverflow.com/a/12097161/2078512">http://stackoverflow.com/a/12097161/2078512</a></p> <p>Note: Seems like while you are <em>in the process of</em> editing a <code>UITextField</code> with the built-in iOS keyboard, the "text" property of the text field is not updated with every new letter typed/removed. Instead, the text field object gets updated "as a whole" after you resign the first responder status of the text field.</p>
<p>to set the event listener:</p> <pre><code>[textField addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged]; </code></pre> <p>to actually listen:</p> <pre><code>-(void)textFieldDidChange :(UITextField *)theTextField{ NSLog( @"text changed: %@", theTextField.text); } </code></pre>
<p>I resolved the issue changing the behavior of shouldChangeChractersInRange. If you return NO the changes won't be applied by iOS internally, instead you have the opportunity to change it manually and perform any actions after the changes.</p> <pre><code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string { //Replace the string manually in the textbox textField.text = [textField.text stringByReplacingCharactersInRange:range withString:string]; //perform any logic here now that you are sure the textbox text has changed [self didChangeTextInTextField:textField]; return NO; //this make iOS not to perform any action } </code></pre>
<p>Here in swift version for same.</p> <pre><code>textField.addTarget(self, action: "textFieldDidChange:", forControlEvents: UIControlEvents.EditingChanged) func textFieldDidChange(textField: UITextField) { } </code></pre> <p>Thanks</p>
<pre><code>[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didChangeTextViewText:) name:UITextFieldTextDidChangeNotification object:nil]; - (void) didChangeTextViewText { //do something } </code></pre>
<p><strong>Swift:</strong></p> <pre><code>yourTextfield.addTarget(self, action: #selector(self.textFieldDidChange(_:)), forControlEvents: .EditingChanged) </code></pre> <p>Then, implement the callback function:</p> <pre><code>func textFieldDidChange(textField: UITextField){ print("Text changed") } </code></pre>
<p><strong>Swift Version tested:</strong></p> <pre><code>//Somewhere in your UIViewController, like viewDidLoad(){ ... } self.textField.addTarget( self, action: #selector(SearchViewController.textFieldDidChange(_:)), forControlEvents: UIControlEvents.EditingChanged ) </code></pre> <p><strong>Parameters explained:</strong></p> <pre><code>self.textField //-&gt; A UITextField defined somewhere in your UIViewController self //-&gt; UIViewController .textFieldDidChange(_:) //-&gt; Can be named anyway you like, as long as it is defined in your UIViewController </code></pre> <p><strong>Then add the method you created above in your <code>UIViewController</code>:</strong></p> <pre><code>//Gets called everytime the text changes in the textfield. func textFieldDidChange(textField: UITextField){ print("Text changed: " + textField.text!) } </code></pre>
<p>You should use the notification to solve this problem,because the other method will listen to the input box not the actually input,especially when you use the Chinese input method. In viewDidload</p> <pre><code>[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textFiledEditChanged:) name:@"UITextFieldTextDidChangeNotification" object:youTarget]; </code></pre> <p>then </p> <pre><code>- (void)textFiledEditChanged:(NSNotification *)obj { UITextField *textField = (UITextField *)obj.object; NSString *toBestring = textField.text; NSArray *currentar = [UITextInputMode activeInputModes]; UITextInputMode *currentMode = [currentar firstObject]; if ([currentMode.primaryLanguage isEqualToString:@"zh-Hans"]) { UITextRange *selectedRange = [textField markedTextRange]; UITextPosition *position = [textField positionFromPosition:selectedRange.start offset:0]; if (!position) { if (toBestring.length &gt; kMaxLength) textField.text = toBestring; } </code></pre> <p>}</p> <p>finally,you run,will done.</p>
<p>We can easily configure that from <code>Storyboard</code>, CTRL drag the <code>@IBAction</code> and change event as following:</p> <p><a href="https://i.stack.imgur.com/86zp5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/86zp5.png" alt="enter image description here"></a></p>
<p>For Swift 3.0:</p> <pre><code>let textField = UITextField() textField.addTarget( nil, action: #selector(MyClass.textChanged(_:)), for: UIControlEvents.editingChanged ) </code></pre> <p>using class like:</p> <pre><code>class MyClass { func textChanged(sender: Any!) { } } </code></pre>