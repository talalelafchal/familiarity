null / nil in swift language
<p>How would we define the following in swift programming language :</p> <ul> <li>null </li> <li>nil</li> <li>Nil</li> <li>[NSNull null]</li> </ul> <p>In other words, what would be the swift equivalent of each of these objective c terms. Besides, would also like to know whether any specific use cases exist for non objective c types like structs and enums. Thanks in advance. </p>
<p>Regarding equivalents:</p> <ul> <li><code>NULL</code> has no equivalent in Swift. </li> <li><code>nil</code> is also called <code>nil</code> in Swift</li> <li><code>Nil</code> has no equivalent in Swift</li> <li><code>[NSNull null]</code> can be accessed in Swift as NSNull()</li> </ul> <p>Note: These are my guesses based on reading and play. Corrections welcome.</p> <p>But nil/NULL handling in Swift is very different from Objective C. It looks designed to enforce safety and care. Read up on <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1011">optionals in the manual</a>. Generally speaking a variable can't be NULL at all and when you need to represent the "absence of a value" you do so declaratively.</p>
<p><code>nil</code> means "no value" but is completely distinct in every other sense from Objective-C's <code>nil</code>.</p> <p>It is assignable only to optional variables. It works with both literals and structs (i.e. it works with stack-based items, not just heap-based items).</p> <p>Non-optional variables cannot be assigned <code>nil</code> even if they're classes (i.e. they live on the heap).</p> <p>So it's explicitly not a <code>NULL</code> pointer and not similar to one. It shares the name because it is intended to be used for the same semantic reason.</p>
<p>Swift’s <code>nil</code> is not the same as <code>nil</code> in Objective-C.<br> In Objective-C, <code>nil</code> is a pointer to a non-existent object. In Swift, <code>nil</code> is not a pointer—it is the absence of a value of a certain type. Optionals of any type can be set to <code>nil</code>, not just object types.</p> <p><code>NULL</code> has no equivalent in Swift.</p> <p><code>nil</code> is also called nil in Swift</p> <p><code>Nil</code> has no equivalent in Swift</p> <p><code>[NSNull null]</code> can be accessed in Swift as <code>NSNull()</code></p>
<p>If you need to use a NULL at low level pointer operations, use the following:</p> <p>UnsafePointer&lt;Int8>.null()</p>
<p>The concept of Null in Swift resumes to the Optional enum. The enum is defined like this</p> <pre><code>enum Optional&lt;T&gt; { case Some(T) case None } </code></pre> <p>What this means is that you cannot have an uninitialised variable/constant in Swift.. If you try to do this, you will get a compiler error saying that the variable/constant cannot be uninitialised. You will need to wrap it in the Optional enum.. </p> <p>This is the only Null concept you will find in Swift</p>