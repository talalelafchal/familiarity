How to find index of list item in Swift?
<p>I am trying to find an item index by searching a list. Does anybody know how to do that? </p> <p>I see there is list.StartIndex and list.EndIndex bu I want something like python's list.index("text")</p>
<p>In Swift 2 (currently in beta with the Xcode 7 beta), <code>Array</code> includes an <a href="https://developer.apple.com/library/prerelease/ios//documentation/Swift/Reference/Swift_CollectionType_Protocol/index.html%23//apple_ref/swift/intfm/CollectionType/s:FPSs14CollectionType7indexOfuRq_S_qqq_Ss12SequenceType9GeneratorSs13GeneratorType7ElementSs9Equatable_Fq_Fqqq_S0_9GeneratorS1_7ElementGSqqq_Ss23_CollectionDefaultsType5Index_"><code>indexOf</code></a> method provided by the <code>CollectionType</code> protocol. (Actually, two <code>indexOf</code> methodsâ€”one that uses equality to match an argument, and another that uses a closure.)</p> <p>Prior to Swift 2, there wasn't a way for generic types like collections to provide methods for the concrete types derived from them (like arrays). So, in Swift 1.x, "index of" is a global function... And it got renamed, too, so in Swift 1.x, that global function is called <code>find</code>.</p> <p>It's also possible (but not necessary) to use the <code>indexOfObject</code> method from <code>NSArray</code>... or any of the other, more sophisticated search meth dis from Foundation that don't have equivalents in the Swift standard library. Just <code>import Foundation</code> (or another module that transitively imports Foundation), cast your <code>Array</code> to <code>NSArray</code>, and you can use the many search methods on <code>NSArray</code>.</p>
<p>You can <code>filter</code> an array with a closure:</p> <pre><code>var myList = [1, 2, 3, 4] var filtered = myList.filter { $0 == 3 } // &lt;= returns [3] </code></pre> <p>And you can count an array:</p> <pre><code>filtered.count // &lt;= returns 1 </code></pre> <p>So you can determine <em>if</em> an array includes your element by combining these:</p> <pre><code>myList.filter { $0 == 3 }.count &gt; 0 // &lt;= returns true if the array includes 3 </code></pre> <p>If you want to find the position, I don't see fancy way, but you can certainly do it like this:</p> <pre><code>var found: Int? // &lt;= will hold the index if it was found, or else will be nil for i in (0..x.count) { if x[i] == 3 { found = i } } </code></pre> <p><strong>EDIT</strong></p> <p>While we're at it, for a fun exercise let's extend <code>Array</code> to have a <code>find</code> method:</p> <pre><code>extension Array { func find(includedElement: T -&gt; Bool) -&gt; Int? { for (idx, element) in enumerate(self) { if includedElement(element) { return idx } } return nil } } </code></pre> <p>Now we can do this:</p> <pre><code>myList.find { $0 == 3 } // returns the index position of 3 or nil if not found </code></pre>
<p>As swift is in some regards more functional than object-oriented (and Arrays are structs, not objects), use the function "find" to operate on the array, which returns an optional value, so be prepared to handle a nil value:</p> <pre><code>let arr:Array = ["a","b","c"] find(arr, "c")! // 2 find(arr, "d") // nil </code></pre> <p><strong>Update for Swift 2.0:</strong></p> <p><em>The old <code>find</code> function is not supported any more with Swift 2.0!</em></p> <p>With Swift 2.0, <code>Array</code> gains the ability to find the index of an element using a function defined in an extension of <code>CollectionType</code> (which <code>Array</code> implements):</p> <pre><code>let arr = ["a","b","c"] let indexOfA = arr.indexOf("a") // 0 let indexOfB = arr.indexOf("b") // 1 let indexOfD = arr.indexOf("d") // nil </code></pre> <p>Additionally, finding the first element in an array fulfilling a predicate is supported by another extension of <code>CollectionType</code>:</p> <pre><code>let arr2 = [1,2,3,4,5,6,7,8,9,10] let indexOfFirstGreaterThanFive = arr2.indexOf({$0 &gt; 5}) // 5 let indexOfFirstGreaterThanOneHundred = arr2.indexOf({$0 &gt; 100}) // nil </code></pre> <p>Note that these two functions return optional values, as <code>find</code> did before.</p> <p><strong>Update for Swift 3.0:</strong></p> <p>Note the syntax of indexOf has changed. Now use:</p> <pre><code>let indexOfA = arr.index(of: "a") </code></pre>
<p>You can also use the functional library Dollar to do an indexOf on an array as such <a href="http://www.dollarswift.org/#indexof-indexof" rel="nofollow">http://www.dollarswift.org/#indexof-indexof</a></p> <pre><code>$.indexOf([1, 2, 3, 1, 2, 3], value: 2) =&gt; 1 </code></pre>
<p><strong>Update for Swift 2:</strong></p> <blockquote> <p><strong>sequence.contains(element)</strong>: Returns true if a given sequence (such as an array) contains the specified element.</p> </blockquote> <p><strong>Swift 1:</strong></p> <p>If you're looking just to check if an element is contained inside an array, that is, just get a boolean indicator, use <code>contains(sequence, element)</code> instead of <code>find(array, element)</code>: </p> <blockquote> <p><strong>contains(sequence, element)</strong>: Returns true if a given sequence (such as an array) contains the specified element.</p> </blockquote> <p>See example below: </p> <pre><code>var languages = ["Swift", "Objective-C"] contains(languages, "Swift") == true contains(languages, "Java") == false contains([29, 85, 42, 96, 75], 42) == true if (contains(languages, "Swift")) { // Use contains in these cases, instead of find. } </code></pre>
<p>If you are still working in Swift 1.x</p> <p>then try,</p> <pre><code>let testArray = ["A","B","C"] let indexOfA = find(testArray, "A") let indexOfB = find(testArray, "B") let indexOfC = find(testArray, "C") </code></pre>
<p>I think it's worth mentioning that with reference types (e.g. <code>class</code>, as opposed to <code>struct</code>/<code>enum</code>)*, you just need to use the <code>===</code> identity operator with the predicate closure:</p> <p><br></p> <p>Swift 3:</p> <pre><code>let person1 = Person(name: "John") let person2 = Person(name: "Sue") let person3 = Person(name: "Maria") let person4 = Person(name: "Loner") let people = [person1, person2, person3] let indexOfPerson1 = people.index{$0 === person1} // 0 let indexOfPerson2 = people.index{$0 === person2} // 1 let indexOfPerson3 = people.index{$0 === person3} // 2 let indexOfPerson4 = people.index{$0 === person4} // nil </code></pre> <p>Notice that the above syntax uses trailing closures syntax, and is equivalent to:</p> <pre><code>let indexOfPerson1 = people.index(where: {$0 === person1}) </code></pre> <p><br></p> <p>Swift 2 - the <code>index</code> function syntax used to be:</p> <pre><code>let indexOfPerson1 = people.indexOf{$0 === person1} </code></pre> <p><br></p> <p>* Please also note the relevant and useful <a href="http://stackoverflow.com/questions/24028860/how-to-find-index-of-list-item-in-swift/32923407#comment60202729_32923407">comment</a> by <a href="http://stackoverflow.com/users/481742/paulbailey">paulbailey</a> about <code>class</code> types that implement <code>Equatable</code>, where none of the above is needed.</p>
<p><strong>Swift 2.1</strong> compatible: </p> <pre><code>var array = ["0","1","2","3"] if let index = array.indexOf("1") { array.removeAtIndex(index) } print(array) // ["0","2","3"] </code></pre>
<p>For custom class, you need to implement the Equatable protocol.</p> <pre><code>import Foundation func ==(l: MyClass, r: MyClass) -&gt; Bool { return l.id == r.id } class MyClass: Equtable { init(id: String) { self.msgID = id } let msgID: String } let item = MyClass(3) let itemList = [MyClass(1), MyClass(2), item] let idx = itemList.indexOf(item) printl(idx) </code></pre>
<p>While <code>indexOf()</code> works perfectly, <strong>it only returns one index.</strong></p> <p>I was looking for an elegant way to get an array of indexes for elements which satisfy some condition.</p> <p>Here is how it can be done:</p> <p><strong>Swift 3:</strong></p> <pre><code>let array = ["apple", "dog", "log"] let indexes = array.enumerated().filter { $0.element.contains("og") }.map{$0.offset} print(indexes) </code></pre> <p><strong>Swift 2:</strong></p> <pre><code>let array = ["apple", "dog", "log"] let indexes = array.enumerate().filter { $0.element.containsString("og") }.map{$0.index} print(indexes) </code></pre>