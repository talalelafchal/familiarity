swift for loop: for index, element in array?
<p>Is there a function that I can use to iterate over an array with a for having both index and element, like python's enumerate?</p> <pre><code>for index, element in enumerate(list): ... </code></pre>
<p>Yes. As of Swift 3.0, if you need the index for each element along with its value, you can use the <a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-XID_177"><code>enumerated()</code> method</a> to iterate over the array. It returns a tuple composed of the index and the value for each item in the array. For example:</p> <pre><code>for (index, element) in list.enumerated() { print("Item \(index): \(element)") } </code></pre> <p>Before Swift 3.0 and after Swift 2.0, the function was called <code>enumerate()</code>:</p> <pre><code>for (index, element) in list.enumerate() { print("Item \(index): \(element)") } </code></pre> <p>Prior to Swift 2.0, <code>enumerate</code> was a global function.</p> <pre><code>for (index, element) in enumerate(list) { println("Item \(index): \(element)") } </code></pre>
<p>I found this answer while looking for a way to do that with a <strong>Dictionary</strong>, and it turns out it's quite easy to adapt it, just pass a tuple for the element.</p> <pre><code>// Swift 2 var list = ["a": 1, "b": 2] for (index, (letter, value)) in list.enumerate() { print("Item \(index): \(letter) \(value)") } </code></pre>
<p>Starting with Swift 2, the enumerate function needs to be called on the collection like so:</p> <pre><code>for (index, element) in list.enumerate() { print("Item \(index): \(element)") } </code></pre>
<p>Swift 2 provides a method called <code>enumerate()</code> for types that conform to <code>SequenceType</code> protocol and, by extension, <code>CollectionType</code> protocol (including <code>Array</code>, <code>Set</code>, <code>String.CharacterView</code>, <code>Range</code> or any custom sequence/collection that you may need to create).</p> <p><code>enumerate()</code> has the following declaration:</p> <pre><code>@warn_unused_result func enumerate() -&gt; EnumerateSequence&lt;Self&gt; </code></pre> <p>Apple states about <code>enumerate()</code> in <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_SequenceType_Protocol/index.html#//apple_ref/swift/intfm/SequenceType/s:FeRq_Ss12SequenceType_SsS_9enumerateuRq_S__Fq_FT_GVSs17EnumerateSequenceq__" rel="nofollow">Swift Standard Library Reference</a>:</p> <blockquote> <p>Return a lazy <code>SequenceType</code> containing pairs <em>(n, x)</em>, where <code>n</code>s are consecutive <code>Int</code>s starting at zero, and <code>x</code>s are the elements of <code>base</code>.</p> </blockquote> <hr> <p><strong>In the simplest cases, you may use <code>enumerate()</code> with a for loop.</strong></p> <p>For example:</p> <pre><code>let list = ["Car", "Bike", "Plane", "Boat"] for (index, element) in list.enumerate() { print(index, ":", element) } /* prints: 0 : Car 1 : Bike 2 : Plane 3 : Boat */ </code></pre> <pre><code>for (index, character) in "Iterate".characters.enumerate() where index &lt; 3 { print(index, ":", character) } /* prints: 0 : I 1 : t 2 : e */ </code></pre> <hr> <p><strong>Note however that you're not limited to use <code>enumerate()</code> with a for loop.</strong></p> <p>In fact, if you plan to use <code>enumerate()</code> with a for loop for something similar to the following code, you're doing it wrong:</p> <pre><code>let list = [Int](1...5) var arrayOfTuples = [(Int, Int)]() for (index, element) in list.enumerate() { arrayOfTuples += [(index, element)] } print(arrayOfTuples) // prints [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)] </code></pre> <p>The correct way to do this is:</p> <pre><code>let list = [Int](1...5) let arrayOfTuples = Array(list.enumerate()) print(arrayOfTuples) // prints [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)] </code></pre> <hr> <p>As an alternative, you may also use <code>enumerate()</code> with <code>map</code>:</p> <pre><code>let list = [Int](1...5) let arrayOfDictionaries = list.enumerate().map { (a, b) in return [a : b] } print(arrayOfDictionaries) // prints [[0: 1], [1: 2], [2: 3], [3: 4], [4: 5]] </code></pre> <hr> <p>Moreover, although it has some <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_SequenceType_Protocol/#//apple_ref/swift/intfm/SequenceType/s:FPSs12SequenceType7forEachuRq_S__Fq_FzFzqqq_S_9GeneratorSs13GeneratorType7ElementT_T_" rel="nofollow">limitations</a>, <code>forEach</code> can be a good replacement to a for loop:</p> <pre><code>let list = [Int](1...5) list.reverse().enumerate().forEach { print($0, ":", $1) } /* prints: 0 : 5 1 : 4 2 : 3 3 : 2 4 : 1 */ </code></pre> <hr> <p><strong>By using <code>enumerate()</code> and <code>generate()</code>, you can even iterate manually on your sequence/collection.</strong></p> <p>For example:</p> <pre><code>import UIKit class ViewController: UIViewController { var generator = ["Car", "Bike", "Plane", "Boat"].enumerate().generate() // Link this IBAction to a UIButton or a UIBarButtonItem in your storyboard @IBAction func iterate(sender: AnyObject) { let tuple: (index: Int, element: String)? = generator.next() print(tuple) } } /* Will print the following lines for 6 `touch up inside`: Optional((0, "Car")) Optional((1, "Bike")) Optional((2, "Plane")) Optional((3, "Boat")) nil nil */ </code></pre>
<p>This is the Formula of loop of Enumeration:</p> <pre><code>for (index, value) in shoppingList.enumerate() { print("Item \(index + 1): \(value)") } </code></pre> <p>for more detail you can check <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-ID105">Here</a>.</p>
<h3>Basic enumerate</h3> <pre><code>for (index, element) in arrayOfValues.enumerate() { // do something useful } </code></pre> <h3>Enumerate, Filter and Map</h3> <p>However, I most often use enumerate in combination with map or filter. For example with operating on a couple of arrays.</p> <p>In this array I wanted to filter odd or even indexed elements and convert them from Ints to Doubles. So <code>enumerate()</code> gets you index and the element, then filter checks the index, and finally to get rid of the resulting tuple I map it to just the element.</p> <pre><code>let evens = arrayOfValues.enumerate().filter({ (index: Int, element: Int) -&gt; Bool in return index % 2 == 0 }).map({ (_: Int, element: Int) -&gt; Double in return Double(element) }) let odds = arrayOfValues.enumerate().filter({ (index: Int, element: Int) -&gt; Bool in return index % 2 != 0 }).map({ (_: Int, element: Int) -&gt; Double in return Double(element) }) </code></pre>
<p>Using <code>.enumerate()</code> works, but it does not provide the true index of the element; it only provides an Int beginning with 0 and incrementing by 1 for each successive element. This is usually irrelevant, but there is the potential for unexpected behavior when used with the <code>ArraySlice</code> type. Take the following code:</p> <pre><code>let a = ["a", "b", "c", "d", "e"] a.indices //=&gt; 0..&lt;5 let aSlice = a[1..&lt;4] //=&gt; ArraySlice with ["b", "c", "d"] aSlice.indices //=&gt; 1..&lt;4 var test = [Int: String]() for (index, element) in aSlice.enumerate() { test[index] = element } test //=&gt; [0: "b", 1: "c", 2: "d"] // indices presented as 0..&lt;3, but they are actually 1..&lt;4 test[0] == aSlice[0] // ERROR: out of bounds </code></pre> <p>It's a somewhat contrived example, and it's not a common issue in practice but still I think it's worth knowing this can happen.</p>
<p>Starting with Swift 3, it is </p> <pre><code>for (index, element) in list.enumerated() { print("Item \(index): \(element)") } </code></pre>
<p>Xcode 8 and Swift 3: Array can be enumerated using <strong>tempArray.enumerate()</strong></p> <p>Example:</p> <pre><code>var someStrs = [String]() someStrs.append("Apple") someStrs.append("Amazon") someStrs += ["Google"] for (index, item ) in someStrs.enumerated() { print("Value at index = \(index) is \(item)"). } </code></pre> <p>console:</p> <pre><code>Value at index = 0 is Apple Value at index = 1 is Amazon Value at index = 2 is Google </code></pre>