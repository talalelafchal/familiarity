UIDevice currentDevice model possible values
<p>What are all the possible values returned by <code>[[UIDevice currentDevice] model];</code>? It isn't <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html">documented</a>.</p>
<p>The possible vales are <code>iPod touch</code>, <code>iPhone</code>, <code>iPhone Simulator</code>, <code>iPad</code>, <code>iPad Simulator</code> <br></p> <p>If you want to know which hardware <code>iOS</code> is ruining on like <code>iPhone3</code>, <code>iPhone4</code>, <code>iPhone5</code> etc below is the code for that</p> <hr> <p><strong>NOTE:</strong> The below code may not contain all device's string, I'm with other guys are maintaining the same code on <strong>GitHub</strong> so please take the latest code from there</p> <p>Objective-C : <a href="https://github.com/InderKumarRathore/DeviceUtil">GitHub/DeviceUtil</a></p> <p>Swift : <a href="https://github.com/InderKumarRathore/DeviceGuru">GitHub/DeviceGuru</a></p> <hr> <pre><code>#include &lt;sys/types.h&gt; #include &lt;sys/sysctl.h&gt; - (NSString*)hardwareDescription { NSString *hardware = [self hardwareString]; if ([hardware isEqualToString:@"iPhone1,1"]) return @"iPhone 2G"; if ([hardware isEqualToString:@"iPhone1,2"]) return @"iPhone 3G"; if ([hardware isEqualToString:@"iPhone3,1"]) return @"iPhone 4"; if ([hardware isEqualToString:@"iPhone4,1"]) return @"iPhone 4S"; if ([hardware isEqualToString:@"iPhone5,1"]) return @"iPhone 5"; if ([hardware isEqualToString:@"iPod1,1"]) return @"iPodTouch 1G"; if ([hardware isEqualToString:@"iPod2,1"]) return @"iPodTouch 2G"; if ([hardware isEqualToString:@"iPad1,1"]) return @"iPad"; if ([hardware isEqualToString:@"iPad2,6"]) return @"iPad Mini"; if ([hardware isEqualToString:@"iPad4,1"]) return @"iPad Air WIFI"; //there are lots of other strings too, checkout the github repo //link is given at the top of this answer if ([hardware isEqualToString:@"i386"]) return @"Simulator"; if ([hardware isEqualToString:@"x86_64"]) return @"Simulator"; return nil; } - (NSString*)hardwareString { size_t size = 100; char *hw_machine = malloc(size); int name[] = {CTL_HW,HW_MACHINE}; sysctl(name, 2, hw_machine, &amp;size, NULL, 0); NSString *hardware = [NSString stringWithUTF8String:hw_machine]; free(hw_machine); return hardware; } </code></pre>
<p>I just did a test on iPod Touch, iPhone, Phone Retina, iPhone 5, iPad, iPad Retina and iPad Mini. So this is my conclusion:</p> <pre><code>iPod touch iPhone iPad </code></pre> <p>On simulators - this could be useful if you're a developer working on features that sometimes do not work at all on simulators - you'll get these values:</p> <pre><code>iPhone Simulator iPad Simulator </code></pre>
<p>I believe the best answer to explain(something which wasn't written here) Is to say that the value itself is a String value. and the possible answers are string e.g: "iPhone","iPad" and etc..</p>