How to call C from Swift?
<p>Is there a way to call C routines from Swift? </p> <p>A lot of iOS / Apple libraries are C only and I'd still like to be able to call those.</p> <p>For example, I'd like to be able to call the objc runtime libraries from swift.</p> <p>In particular, how do you bridge iOS C headers?</p>
<p>Yes, you can of course interact with Apples C libraries. <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_13">Here</a> is explained how. <br /> Basically, the C types, C pointers, etc are translated into Swift objects, for example a C <code>int</code> in Swift is a <code>CInt</code>.</p> <p>I've build a tiny example, for another question, which can be used as a little explanation, on how to bridge between C and Swift:</p> <p><strong>main.swift</strong></p> <pre><code>import Foundation var output: CInt = 0 getInput(&amp;output) println(output) </code></pre> <p><br /> <strong>UserInput.c</strong></p> <pre><code>#include &lt;stdio.h&gt; void getInput(int *output) { scanf("%i", output); } </code></pre> <p><br /> <strong>cliinput-Bridging-Header.h</strong></p> <pre><code>void getInput(int *output); </code></pre> <p><a href="http://stackoverflow.com/a/24005033/1070117">Here</a> is the original answer.</p>
<p>The compiler converts C API to Swift just like it does for Objective-C.</p> <pre><code>import Cocoa let frame = CGRect(x: 10, y: 10, width: 100, height: 100) import Darwin for _ in 1..10 { println(rand() % 100) } </code></pre> <p>See <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_13">Interacting with Objective-C APIs</a> in the docs.</p>
<p>Just in case you're as new to XCode as me and want to try the snippets posted in <a href="http://stackoverflow.com/a/24004765/3008308">Leandro's answer</a>: </p> <ol> <li>File->New->Project</li> <li>choose Command Line Tool as a project preset and name the project "cliinput"</li> <li>right-click in the project navigator (the blue panel on the left) and choose "New File..."</li> <li>In the drop down dialog name the file "UserInput". Uncheck the box "Also create a header file". Once you click "Next" you will be asked if XCode should create the Bridging-Header.h file for you. Choose "Yes".</li> <li>Copy &amp; paste the code from Leandro's answer above. Once you click on the play button it should compile and run in the terminal, which in xcode is built-in in the bottom panel. If you enter a number in the terminal, a number will be returned.</li> </ol>
<p><a href="http://stackoverflow.com/a/29189873">This post</a> also has a good explanation regarding how to do this using clang's <a href="http://clang.llvm.org/docs/Modules.html" rel="nofollow">module support</a>.</p> <p>It's framed in terms of how to do this for the CommonCrypto project, but in general it should work for any other C library you want to use from within Swift.</p> <p>I briefly experimented with doing this for zlib. I created a new iOS framework project and created a directory zlib, containing a module.modulemap file with the following:</p> <pre><code>module zlib [system] [extern_c] { header "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/include/zlib.h" export * } </code></pre> <p>Then under Targets -> Link Binary With Libraries I selected add items and added libz.tbd.</p> <p>You may want to build at this point.</p> <p>I was then able to write the following code:</p> <pre><code>import zlib public class Zlib { public class func zlibCompileFlags() -&gt; UInt { return zlib.zlibCompileFlags() } } </code></pre> <p>You don't <em>have</em> to put the zlib library name in front, except in the above case I named the Swift class func the same as the C function, and without the qualification the Swift func ends up being called repeatedly until the application halts.</p>