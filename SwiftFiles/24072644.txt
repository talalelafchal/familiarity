Is it good to use AnyObject for accepting an array of elements of any type in Swift
<p>I want to create a method uniq which takes an array but element type can be different for example [1, "Hello", true, 234.3] or all element types can be same [1, 2, 3, 4]</p> <pre><code>func uniq(array: AnyObject[]) -&gt; AnyObject[] { ... } </code></pre> <p>Is it best practice to use AnyObject and return AnyObject array? </p> <p>Also can I compare two AnyObjects using an == equality sign and it will compare them regardless of them being the same type?</p>
<p>You can use generics to create typed functions that can accept any type without resorting to upcasting to <code>AnyObject</code>, i.e:</p> <pre><code>func uniq&lt;T&gt;(array: T[]) -&gt; T[] { ... } </code></pre> <p>To be able to be able to compare the items you can add a generic constraint to ensure all types that call this method conforms to the <code>Equatable</code> protocol, which will allow you to use <code>==</code> against the items, i.e:</p> <pre><code>func uniq&lt;T : Equatable&gt;(array: T[]) -&gt; T[] { ... } </code></pre>
<p>Combining both of your questions, use</p> <pre><code>func uniq (array: Equatable[]) -&gt; Equatable[] { ... } </code></pre> <p>Detail: You can't compare objects of type <code>AnyObject</code> with <code>==</code> because <code>==</code> requires objects to conform to the <code>Equatable</code> protocol; not all objects do.</p> <p>As @mythz said, you could use:</p> <pre><code>func uniq&lt;T&gt; (array: T[]) -&gt; T[] { ... } </code></pre> <p>but then every time you use <code>uniq</code> on an array of arbitrary objects you would need to call the method with:</p> <pre><code>uniq&lt;AnyObject&gt; (someArray) </code></pre> <p>You may be fine with that, especially if you sometimes want to use <code>uniq()</code> with uniformly typed objects (Int, Double, ..., Equatable). If you just want a function that works for any types, any time, then your suggestion of:</p> <pre><code>func uniq (array: AnyObject[]) -&gt; AnyObject[]) { ... } </code></pre> <p>is fine.</p>
<p>In a statically typed language, it's not a best practice to use a type like <code>AnyObject</code>: it indicates that you're throwing type safety out the window. If your design is relying on <code>AnyObject</code>, you may want to rethink the design.</p> <p><code>Any</code> and <code>AnyObject</code> should be thought of as a necessary evil: the need to interoperate with dynamically-typed Objective-C frameworks. To be forward-looking, the aim should be to avoid their use as much as possible.</p> <p>For the second part of your question, GoZoner's answer is excellent.</p>