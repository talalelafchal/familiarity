iOS detect if user is on an iPad
<p>I have an app that runs on the iPhone and iPod Touch, it can run on the Retina iPad and everything but there needs to be one adjustment. I need to detect if the current device is an iPad. What code can I use to detect if the user is using an iPad in my <code>ViewController</code> and then change something accordingly?</p>
<p>There are quite a few ways to check if a device is an iPad. This is my favorite way to check wether the device is in fact an iPad:</p> <pre><code>if ( UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad ) { return YES; /* Device is iPad */ } </code></pre> <h2>The way I use it</h2> <pre><code>#define IDIOM UI_USER_INTERFACE_IDIOM() #define IPAD UIUserInterfaceIdiomPad if ( IDIOM == IPAD ) { /* do something specifically for iPad. */ } else { /* do something specifically for iPhone or iPod touch. */ } </code></pre> <h2>Other Examples</h2> <pre><code>if ( [(NSString*)[UIDevice currentDevice].model hasPrefix:@"iPad"] ) { return YES; /* Device is iPad */ } #define IPAD UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad if ( IPAD ) return YES; </code></pre> <p>For a Swift solution see this answer: <a href="http://stackoverflow.com/a/27517536/2057171">http://stackoverflow.com/a/27517536/2057171</a></p>
<p>I found that this didn't work for me in the Simulator within Xcode 4.5</p> <pre><code>NSString *deviceModel = (NSString*)[UIDevice currentDevice].model; if ([[deviceModel substringWithRange:NSMakeRange(0, 4)] isEqualToString:@"iPad"]) { DebugLog(@"iPad"); } else { DebugLog(@"iPhone or iPod Touch"); } </code></pre> <p>Also in the 'Other Examples' in Xcode the device model comes back as 'iPad Simulator' so the above tweak should sort that out.</p>
<p>This is part of UIDevice as of iOS 3.2, e.g.:</p> <pre><code>[UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad </code></pre>
<p>You can also use this</p> <pre><code>#define IPAD UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad ... if (IPAD) { // iPad } else { // iPhone / iPod Touch } </code></pre>
<p>UI_USER_INTERFACE_IDIOM() only returns iPad if the app is for iPad or Universal. If its an iPhone app being ran on an iPad then it won't. So you should instead check the model.</p>
<p>You can check the rangeOfString to see of the word iPad exists like this.</p> <pre><code>NSString *deviceModel = (NSString*)[UIDevice currentDevice].model; if ([deviceModel rangeOfString:@"iPad"].location != NSNotFound) { NSLog(@"I am an iPad"); } else { NSLog(@"I am not an iPad"); } </code></pre>
<p>In <strong>Swift 2</strong> you can use the following equalities to determine the <strong>kind of device</strong>:</p> <pre><code>UIDevice.currentDevice().userInterfaceIdiom == .Phone // or UIDevice.currentDevice().userInterfaceIdiom == .Pad </code></pre> <p>In <strong>Swift 3</strong> it looks slightly different:</p> <pre><code>UIDevice.current.userInterfaceIdiom == .phone // or UIDevice.current.userInterfaceIdiom == .pad </code></pre> <p><strong>Usage</strong> would then be something like:</p> <pre><code>if UIDevice.current.userInterfaceIdiom == .pad { // Available Idioms - .pad, .phone, .tv, .carPlay, .unspecified // Implement your logic here } </code></pre>
<p>Many ways to do that in <strong>Swift</strong>:</p> <p>We check the model below (we can only do a case sensitive search here):</p> <pre><code>class func isUserUsingAnIpad() -&gt; Bool { let deviceModel = UIDevice.currentDevice().model let result: Bool = NSString(string: deviceModel).containsString("iPad") return result } </code></pre> <p>We check the model below (we can do a case sensitive/insensitive search here):</p> <pre><code> class func isUserUsingAnIpad() -&gt; Bool { let deviceModel = UIDevice.currentDevice().model let deviceModelNumberOfCharacters: Int = count(deviceModel) if deviceModel.rangeOfString("iPad", options: NSStringCompareOptions.LiteralSearch, range: Range&lt;String.Index&gt;(start: deviceModel.startIndex, end: advance(deviceModel.startIndex, deviceModelNumberOfCharacters)), locale: nil) != nil { return true } else { return false } } </code></pre> <p><code>UIDevice.currentDevice().userInterfaceIdiom</code> below only returns iPad if the app is for iPad or Universal. If it is an iPhone app being ran on an iPad then it won't. So you should instead check the model. :</p> <pre><code> class func isUserUsingAnIpad() -&gt; Bool { if UIDevice.currentDevice().userInterfaceIdiom == UIUserInterfaceIdiom.Pad { return true } else { return false } } </code></pre> <p>This snippet below does not compile if the class does not inherit of an <code>UIViewController</code>, otherwise it works just fine. Regardless <code>UI_USER_INTERFACE_IDIOM()</code> only returns iPad if the app is for iPad or Universal. If it is an iPhone app being ran on an iPad then it won't. So you should instead check the model. :</p> <pre><code>class func isUserUsingAnIpad() -&gt; Bool { if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiom.Pad) { return true } else { return false } } </code></pre>
<p>Be Careful: If your app is targeting iPhone device only, iPad running with iphone compatible mode will return false for below statement:</p> <pre><code>#define IPAD UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad </code></pre> <p>The right way to detect physical iPad device is:</p> <pre><code>#define IS_IPAD_DEVICE ([(NSString *)[UIDevice currentDevice].model hasPrefix:@"iPad"]) </code></pre>
<p>Yet another Swifty way:</p> <pre><code>//MARK: - Device Check let iPad = UIUserInterfaceIdiom.Pad let iPhone = UIUserInterfaceIdiom.Phone @available(iOS 9.0, *) /* AppleTV check is iOS9+ */ let TV = UIUserInterfaceIdiom.TV extension UIDevice { static var type: UIUserInterfaceIdiom { return UIDevice.currentDevice().userInterfaceIdiom } } </code></pre> <p>Usage:</p> <pre><code>if UIDevice.type == iPhone { //it's an iPhone! } if UIDevice.type == iPad { //it's an iPad! } if UIDevice.type == TV { //it's an ï£¿TV! } </code></pre>
<p>*</p> <blockquote> <p><strong>In swift 3.0</strong></p> </blockquote> <p>*</p> <pre><code> if UIDevice.current.userInterfaceIdiom == .pad { //pad } else if UIDevice.current.userInterfaceIdiom == .phone { //phone } else if UIDevice.current.userInterfaceIdiom == .tv { //tv } else if UIDevice.current.userInterfaceIdiom == .carPlay { //CarDisplay } else { //unspecified } </code></pre>