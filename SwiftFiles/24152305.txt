Issue with returning a Directory Enumerator from NSFileManager using enumeratorAtUrl in Swift
<p>I am attempting to return a NSDirectoryEnumerator object from the NSFileManager method enumeratorAtUrl. This results in a <strong>compiler error</strong>: <code>Cannot convert the expressions type 'NSDirectoryEnumerator!' to type 'NSDirectoryEnumeratorOptions'</code></p> <pre><code>let url:NSURL = NSURL(fileURLWithPath: "/") var keys:Array&lt;AnyObject&gt; = [NSURLNameKey, NSURLIsDirectoryKey] var manager:NSFileManager = NSFileManager.defaultManager() let enumerator:NSDirectoryEnumerator = manager.enumeratorAtURL(url,includingPropertiesForKeys: keys, options: 0, errorHandler: nil) </code></pre> <p>This works in Obj-C but not Swift.. Has anyone else encountered this issue?</p>
<p>Try this:</p> <pre><code>let enumerator:NSDirectoryEnumerator = manager.enumeratorAtURL(url, includingPropertiesForKeys: keys, options: NSDirectoryEnumerationOptions(), errorHandler: nil) </code></pre> <p>Or in short, pass in <code>NSDirectoryEnumerationOptions()</code> instead of "<code>0</code>".</p> <p>"0" is not really a member of the enumeration it is looking for.</p>
<p>@Kendall's answer is perfect for most cases, but if you need to adjust the behavior of the enumerator, here are some examples.</p> <p>Configure the enumerator to skip hidden files:</p> <pre><code>let enumerator = manager.enumeratorAtURL(url, includingPropertiesForKeys: keys, options: .SkipsHiddenFiles, errorHandler: nil) </code></pre> <p>If you need to set multiple options, you "or" them together:</p> <pre><code>let options: NSDirectoryEnumerationOptions = .SkipsHiddenFiles | .SkipsPackageDescendants let enumerator = manager.enumeratorAtURL(url, includingPropertiesForKeys: keys, options: options, errorHandler: nil) </code></pre>
<p><strong>For Swift 2.0:</strong></p> <p>No options:</p> <pre><code>let enumerator = manager.enumeratorAtURL(url, includingPropertiesForKeys: keys, options: [], errorHandler: nil) </code></pre> <p>Only one option:</p> <pre><code>let enumerator = manager.enumeratorAtURL(url, includingPropertiesForKeys: keys, options: .SkipsHiddenFiles, errorHandler: nil) </code></pre> <p>Multiple options:</p> <pre><code>let options: NSDirectoryEnumerationOptions = [.SkipsHiddenFiles, .SkipsPackageDescendants] let enumerator = manager.enumeratorAtURL(url, includingPropertiesForKeys: keys, options: options, errorHandler: nil) </code></pre>