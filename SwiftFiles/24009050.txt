How do I access program arguments in Swift?
<p>C and derivatives have <code>argc</code> and <code>argv</code> (and <code>envp</code>) parameters to their entry point functions, but Swift doesn't have one proper: top-level code is just code and it doesn't have parameters.</p> <p>How can one access the equivalent of <code>argc</code> and <code>argv</code> in a Swift program?</p>
<pre><code> import Foundation println(C_ARGC) //CInt println(C_ARGV) // CString </code></pre> <p>As in the above code, you can use C_ARGC to get number of arguments. C_ARGV to get this arguments.</p>
<p>As soon as your app is up I'd use the process info:</p> <pre><code>let args = NSProcessInfo.processInfo().arguments print(args) </code></pre> <p>Nothing unsafe there, very convenient.</p> <p>Note that you have to <code>import Foundation</code> (or <code>Cocoa</code> / <code>UIKit</code>).</p>
<p><code>Process.arguments</code> is your friend!</p> <p>Fortunately this is much easier, and built in: no importing anything, no getting your hands dirty with C, objective or otherwise.</p> <p>Consider this, let's call it <code>args.swift</code>:</p> <p><strong>Swift 2</strong> version:</p> <pre><code>var c = 0; for arg in Process.arguments { println("argument \(c) is: \(arg)") c++ } </code></pre> <p><strong>Swift 3</strong> version:</p> <pre><code>var c = 0; for arg in CommandLine.arguments { print("argument \(c) is: \(arg)") c += 1 } </code></pre> <p>We can compile and run it like this:</p> <pre><code>$ swift -o args args.swift &amp;&amp; ./args fee fi fo fum argument 0 is: ./args argument 1 is: fee argument 2 is: fi argument 3 is: fo argument 4 is: fum </code></pre> <p>Note that the first argument is the program name, as you might expect.</p> <p>It seems every argument is a String, as you might also expect.</p> <p>I hope very much that <code>Process</code> becomes more useful as Swift matures, but right now it seems to only give you the arguments. Which is a lot, if you're trying to write a pure-Swift program.</p>
<p>For reference (since Swift 3.0 August 4 snapshot):<br> <strong>Process</strong> was just renamed into <strong>CommandLine</strong></p> <pre><code>let arguments = CommandLine.arguments </code></pre> <p>(for some reason this wasn't mentioned on the <a href="https://github.com/apple/swift/blob/swift-DEVELOPMENT-SNAPSHOT-2016-08-04-a/CHANGELOG.md">changelog</a>)</p>
<p>For <strong>Swift 3</strong> you can use this code:</p> <pre><code>let argc = CommandLine.argc let argv = UnsafeMutableRawPointer(CommandLine.unsafeArgv).bindMemory(to: UnsafeMutablePointer&lt;Int8&gt;.self, capacity: Int(CommandLine.argc)) </code></pre> <p>which is equivalent of <code>argc</code> and <code>argv</code> parameters used in Objective-C main function:</p> <pre><code>int main(int argc, char *argv[]) </code></pre> <p>For older versions of Swift, you can use <code>Process.argc</code> and <code>Process.unsafeArgv</code> or <code>C_ARGC</code> and <code>C_ARGV</code>. </p> <p>You can pass this variables to <code>UIApplicationMain</code> function in iOS app:</p> <p>Swift 3:</p> <pre><code>let argc = CommandLine.argc let argv = UnsafeMutableRawPointer(CommandLine.unsafeArgv).bindMemory(to: UnsafeMutablePointer&lt;Int8&gt;.self, capacity: Int(CommandLine.argc)) UIApplicationMain(argc, argv, nil, NSStringFromClass(AppDelegate.self)) </code></pre> <p>previous Swift versions:</p> <pre><code>UIApplicationMain(Process.argc, Process.unsafeArgv, nil, NSStringFromClass(AppDelegate.self)) </code></pre> <p>or:</p> <pre><code>UIApplicationMain(C_ARGC, C_ARGC, nil, NSStringFromClass(AppDelegate.self)) </code></pre> <p>Objective-C:</p> <pre><code>int main(int argc, char *argv[]) { @autoreleasepool { return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class])); } } </code></pre>