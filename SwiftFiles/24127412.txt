Optionals in swift
<p>I'm watching all the swift tutorials from Apple, but I'm having problems with one of the examples:</p> <pre><code>class Person { var residence: Residence? } class Residence { var address: Address? } class Address { var buildingNumber: String? = "234" var streetName: String? = "Main St." var appartmentNumber: String? } let paul = Person() var addressNumber: Int? addressNumber = paul.residence?.address?.buildingNumber?.toInt() if let number = addressNumber { "correct" } else { "fault" } </code></pre> <p>It's always printing out "fault". Is there something painfully obvious I'm missing?</p>
<p>You never initialize anything except <code>Person()</code>, so the <code>residence</code> property on <code>paul</code> is <code>nil</code>.</p> <p>So, in the following optional chain:</p> <pre><code>addressNumber = paul.residence?.address?.buildingNumber?.toInt() ^ you get nil here and don't continue </code></pre> <p>This means that <code>addressNumber</code> is <code>nil</code>.</p>
<pre><code>let paul = Person() </code></pre> <p>You do nothing else to <code>paul</code> including setting his optional residence variable. So in the next line of code, you are accessing <code>paul</code>'s residence which is <code>nil</code>.</p> <pre><code>addressNumber = paul.residence?.address?.buildingNumber?.toInt() ^ failing right here, residence? returns nil </code></pre> <p>So with optional chaining, this entire expression returns <code>nil</code>, so when compared in your next <code>if let</code> statement, it is false. This is why the <code>else</code> clause is being executed.</p>
<p>Think it through, one step at a time. Particularly, your optional chaining:</p> <p><code>addressNumber = paul.residence?.address?.buildingNumber?.toInt()</code></p> <p>Ask yourself:</p> <ol> <li><p>What is <code>paul</code>?</p></li> <li><p>What is <code>paul</code>'s <code>residence</code> property set to?</p></li> <li><p>What is the <code>address</code> of <code>paul</code>'s <code>residence</code>?</p></li> </ol> <p><em>Hint: You shouldn't make it past step 2.</em></p>
<p>Well you are never actually creating a valid <code>Residence</code> or <code>Address</code>, if you change your code to:</p> <pre><code>class Person { // actually create a residence object var residence: Residence? = Residence() } class Residence { // actually create a address object var address: Address? = Address() } class Address { // ... } let paul = Person() var addressNumber: Int? // Before Paul was never assigned a valid residence, now one will be created addressNumber = paul.residence?.address?.buildingNumber?.toInt() if let number = addressNumber { "correct" } else { "fault" } // gives you `correct` </code></pre> <p>then it should work great!</p>