Send SMS Message with Twilio on iOS
<p>How can I send an SMS message programatically from an iPhone app? I'm using Twilio right now, and can correctly set up a HTTP Request, authenticate with the server, and get a response.</p> <p>There must be some misconfiguration of the HTTP Headers as I can get a response from the Twilio servers but never passes the right data through.</p> <p>My current code is in a method that's called by a simple button press.</p> <pre><code>- (IBAction)sendButtonPressed:(id)sender { NSLog(@"Button pressed."); NSString *kYourTwillioSID = @"AC8c3...f6da3"; NSString *urlString = [NSString stringWithFormat:@"https://AC8c3...6da3:bf...0b7@api.twilio.com/2010-04-01/Accounts/%@/SMS/Messages", kYourTwillioSID]; NSURL *url = [NSURL URLWithString:urlString]; NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init]; [request setURL:url]; [request setValue:@"+18584334333" forHTTPHeaderField:@"From"]; [request setValue:@"+13063707780" forHTTPHeaderField:@"To"]; [request setValue:@"Hello\n" forHTTPHeaderField:@"Body"]; NSError *error; NSURLResponse *response; NSData *urlData=[NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:&amp;error]; if (!error) { NSString *response_details = [[NSString alloc]initWithData:urlData encoding:NSUTF8StringEncoding]; NSLog(@"%@",response_details); } NSLog(@"Request finished %@", error); </code></pre>
<p>If you are just looking to send an SMS message in iOS you can use the <code>MFMessageComposeViewController</code> inside of the <code>MessageUI.framework</code>. As you know though, this requires user-interaction.</p> <p>As you had requested, you can use Twilio to send SMS directly using almost any platform. For iOS you can use the following Swift code to hit the Twilio API and send any text messages you'd like:</p> <pre><code>func tappedSendButton() { print("Tapped button") // Use your own details here let twilioSID = "AC8c3...6da3" let twilioSecret = "bf2...b0b7" let fromNumber = "4152226666" let toNumber = "4153338888" let message = "Hey" // Build the request let request = NSMutableURLRequest(URL: NSURL(string:"https://\(twilioSID):\(twilioSecret)@api.twilio.com/2010-04-01/Accounts/\(twilioSID)/SMS/Messages")!) request.HTTPMethod = "POST" request.HTTPBody = "From=\(fromNumber)&amp;To=\(toNumber)&amp;Body=\(message)".dataUsingEncoding(NSUTF8StringEncoding) // Build the completion block and send the request NSURLSession.sharedSession().dataTaskWithRequest(request, completionHandler: { (data, response, error) in print("Finished") if let data = data, responseDetails = NSString(data: data, encoding: NSUTF8StringEncoding) { // Success print("Response: \(responseDetails)") } else { // Failure print("Error: \(error)") } }).resume() </code></pre> <p>For any further API interaction you can check out the official docs: <a href="https://www.twilio.com/docs/api/rest">https://www.twilio.com/docs/api/rest</a></p>
<p>Ok, I think I was right about the headers. </p> <p>I found this answer which seems to confirm it: <a href="http://stackoverflow.com/questions/5537297/ios-how-to-perform-a-http-post-request">iOS: how to perform a HTTP POST request?</a></p> <p>You have to send the POST data in the body of the request, not in headers. Twilio is getting your HTTP call but the POST data is empty.</p> <p>Let me know if that works.</p>
<p>Take a look at <a href="http://allseeing-i.com/ASIHTTPRequest/" rel="nofollow">ASIHttpRequest</a>. It's much nicer than using NSURLRequests directly. It lets you do it asynchronously also. </p> <p>I wrote a simple class that'll do SMS posting with Twilio. <a href="http://fredandrandall.com/blog/2011/10/05/how-to-send-text-messages-using-the-twilio-api-on-mac-os-x-and-iphone/" rel="nofollow">Check it out</a>. It uses ASIHTTPRequest.</p>
<p>It could be this:</p> <p>The number +YOURNUMBER is unverified. Trial accounts cannot send messages to unverified numbers; verify +YOURNUMBER at <a href="https://www.twilio.com/user/account/phone-numbers/verified" rel="nofollow">twilio.com/user/account/phone-numbers/verified</a>, or purchase a Twilio number to send messages to unverified numbers.</p>
<p>Use AFNetworking to send request.</p> <pre><code>NSString *kTwilioSID = @"AC73bb270.......4d418cb8"; NSString *kTwilioSecret = @"335199.....9"; NSString *kFromNumber = @"+1......1"; NSString *kToNumber = @"+91.......8"; NSString *kMessage = @"Hi"; NSString *urlString = [NSString stringWithFormat:@"https://%@:%@@api.twilio.com/2010-04-01/Accounts/%@/SMS/Messages/", kTwilioSID, kTwilioSecret,kTwilioSID]; NSDictionary* dic=@{@"From":kFromNumber,@"To":kToNumber,@"Body":kMessage}; __block NSArray* jsonArray; AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager]; manager.responseSerializer=[AFHTTPResponseSerializer serializer]; manager.responseSerializer.acceptableContentTypes=[NSSet setWithObject:@"application/xml"]; [manager POST:urlString parameters:para success:^(AFHTTPRequestOperation *operation, id responseObject) { NSError* err; NSLog(@"success %@",[[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding]); jsonArray=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingAllowFragments error:&amp;err]; [_del getJsonResponsePOST:jsonArray]; } failure:^(AFHTTPRequestOperation *operation, NSError *error) { [_del getError:[NSString stringWithFormat:@"%@",error]]; }]; </code></pre>
<p>Twilio with <strong>Swift 2.2+</strong>, <strong>Alamofire</strong>, <strong>SwiftyJSON</strong> -> answer:</p> <pre><code>import Alamofire import SwiftyJSON ........ ........ //twillio config private static let TWILIO_ACCOUNT_SID = "A...7" private static let TWILIO_AUTH_TOKEN = "6...5" //end url string is .json,to get response as JSON static let URL_TWILIO_SMS = "https://\(TWILIO_ACCOUNT_SID):\(TWILIO_AUTH_TOKEN)@api.twilio.com/2010-04-01/Accounts/\(TWILIO_ACCOUNT_SID)/SMS/Messages.json" Alamofire.request(.POST, URL_TWILIO_SMS, parameters: ["To":"+880....6","From":"+1...9","Body":"Hellow Rafsun"]) .responseJSON { response in if let jso = response.result.value { let json = JSON(jso) //Twilio response if let twStatus = json["status"].string,twSentMessage = json["body"].string where twStatus == "queued"{ //Twilio message sent }else{ //Twilio message not sent } }else if let error = response.result.error?.localizedDescription{ //parse error } } </code></pre>
<p>An example (updated) for Xcode 8 and <strong>Swift 3</strong>.</p> <p><a href="https://www.twilio.com/blog/2016/11/how-to-send-an-sms-from-ios-in-swift.html" rel="nofollow noreferrer">https://www.twilio.com/blog/2016/11/how-to-send-an-sms-from-ios-in-swift.html</a></p> <p>We don't recommend storing your credentials client side and so the post shows you how to avoid a potential vulnerability using a server-side language of your choosing and <strong>Alamofire</strong> for HTTP requests:</p> <pre><code>@IBAction func sendData(sender: AnyObject) { let headers = [ "Content-Type": "application/x-www-form-urlencoded" ] let parameters: Parameters = [ "To": phoneNumberField.text ?? "", "Body": messageField.text ?? "" ] Alamofire.request("YOUR_NGROK_URL/sms", method: .post, parameters: parameters, headers: headers).response { response in print(response) } } </code></pre>