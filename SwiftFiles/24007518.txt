How can I use NSTimer in Swift?
<p>I tried</p> <pre><code>var timer = NSTimer() timer(timeInterval: 0.01, target: self, selector: update, userInfo: nil, repeats: false) </code></pre> <p>But, I got an error saying</p> <pre><code>'(timeInterval: $T1, target: ViewController, selector: () -&gt; (), userInfo: NilType, repeats: Bool) -&gt; $T6' is not identical to 'NSTimer' </code></pre>
<p>Check with:</p> <pre><code>var timer = NSTimer.scheduledTimerWithTimeInterval(0.01, target: self, selector: Selector("update"), userInfo: nil, repeats: true); </code></pre>
<p>This will work: </p> <pre><code>override func viewDidLoad() { super.viewDidLoad() //Swift 3 selector syntax var timer = Timer.scheduledTimer(timeInterval: 0.4, target: self, selector: #selector(self.update), userInfo: nil, repeats: true); //Swift 2.2 selector syntax var timer = NSTimer.scheduledTimerWithTimeInterval(0.4, target: self, selector: #selector(MyClass.update), userInfo: nil, repeats: true) //Swift &lt;2.2 selector syntax var timer = NSTimer.scheduledTimerWithTimeInterval(0.4, target: self, selector: "update", userInfo: nil, repeats: true) } // must be internal or public. func update() { // Something cool } </code></pre> <p><strong>Note <a href="http://stackoverflow.com/questions/24007650/selector-in-swift/24007769#24007769">this</a></strong> when working with Selectors on Swift.</p>
<p>Here are some somewhat fuller examples updated for <strong>Swift 3</strong>.</p> <h1>Repeated event</h1> <p>You can use a timer to do an action multiple times, as seen in the following example. The timer calls a method to update a label every half second.</p> <p><a href="https://i.stack.imgur.com/V6RIV.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/V6RIV.gif" alt="enter image description here"></a></p> <p>Here is the code for that:</p> <pre><code>import UIKit class ViewController: UIViewController { var counter = 0 var timer = Timer() @IBOutlet weak var label: UILabel! // start timer @IBAction func startTimerButtonTapped(sender: UIButton) { timer.invalidate() // just in case this button is tapped multiple times // start the timer timer = Timer.scheduledTimer(timeInterval: 0.5, target: self, selector: #selector(timerAction), userInfo: nil, repeats: true) } // stop timer @IBAction func cancelTimerButtonTapped(sender: UIButton) { timer.invalidate() } // called every time interval from the timer func timerAction() { counter += 1 label.text = "\(counter)" } } </code></pre> <h1>Delayed event</h1> <p>You can also use a timer to schedule a one time event for some time in the future. The main difference from the above example is that you use <code>repeats: false</code> instead of <code>true</code>.</p> <pre><code>timer = Timer.scheduledTimer(timeInterval: 2.0, target: self, selector: #selector(delayedAction), userInfo: nil, repeats: false) </code></pre> <p>The above example calls a method named <code>delayedAction</code> two seconds after the timer is set. It is not repeated, but you can still call <code>timer.invalidate()</code> if you need to cancel the event before it ever happens.</p> <h1>Notes</h1> <ul> <li>The code above has been updated for Swift 2.2. See the edit history if you are still using Xcode 7.2 or before. Or better yet, update your Xcode.</li> <li>If there is any chance of starting your timer instance multiple times, be sure that you invalidate the old timer instance first. Otherwise you lose the reference to the timer and you can't stop it anymore. (see <a href="http://stackoverflow.com/questions/34087873/how-to-invalidate-an-nstimer-that-was-started-multiple-times">this Q&amp;A</a>)</li> <li>Don't use timers when they aren't needed. See the timers section of the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Performance/Conceptual/EnergyGuide-iOS/MinimizeTimerUse.html" rel="nofollow noreferrer">Energy Efficiency Guide for iOS Apps</a>.</li> </ul> <h1>Related</h1> <ul> <li><a href="http://stackoverflow.com/a/33343958/3681880">How to work with dates and time in Swift</a></li> </ul>
<p>Nobody needs userInfo?</p> <pre><code>var timer: NSTimer? startTimer() { timer = NSTimer.scheduledTimerWithTimeInterval(5, target: self, selector: "event:", userInfo: ["custom":"data"], repeats: true) } } func event(timer: NSTimer!) { let info = timer.userInfo print(info) } </code></pre>
<p>You will need to use <a href="https://developer.apple.com/reference/foundation/timer" rel="nofollow">Timer</a> instead of NSTimer in Swift 3.</p> <p>Here is an example:</p> <pre><code>Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(YourController.update), userInfo: nil, repeats: true) func update() { // do what should happen when timer triggers an event } </code></pre>
<p>As of iOS 10 there is also a new block based Timer factory method which is cleaner than using the selector:</p> <pre><code> _ = Timer.scheduledTimer(withTimeInterval: 5, repeats: false) { timer in label.isHidden = true } </code></pre>