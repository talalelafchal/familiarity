How to create local scopes in Swift?
<p>I'm regularly using local scopes in Objective-C to make naming clearer.</p> <pre><code>{ UILabel *label = [[UILabel alloc] init]; [self addSubview:label]; self.titleLabel = label; } </code></pre> <p>I am trying to rewrite this code in Swift like this:</p> <pre><code>{ let label = UILabel() self.addSubview(label) self.titleLabel = label } </code></pre> <p>This gives me get the following error:</p> <p><code>Error: Braced block of statements is an unused closure.</code></p> <p>So how can I create a local scope in Swift?</p>
<p>I don't think it is possible.</p> <p>At least a grammar that is in the book that is available in iBooks store does not mention it.</p> <p>You could do this,</p> <pre><code>if (true) { let a = 4 } </code></pre> <p>but I think, it is a bad practice.</p>
<p><strong>Update:</strong> In Swift 2.0, you just use the <code>do</code> keyword:</p> <pre><code>do { let label = UILabel() self.addSubview(label) self.titleLabel = label } </code></pre> <hr> <p><strong><em>This was true for Swift pre-2.0:</em></strong></p> <p>You can define something similar to this:</p> <pre><code>func locally(@noescape work: () -&gt; ()) { work() } </code></pre> <p>And then use such a <code>locally</code> block as follows:</p> <pre><code>locally { let g = 42 println(g) } </code></pre> <p><em>(Inspired by <code>locally</code> in Scala's <strong><a href="http://www.scala-lang.org/api/current/#scala.Predef$">Predef</a></strong> object.)</em></p>
<p><a href="http://stackoverflow.com/a/24012525/957768">Jean-Philippe Pellet's answer</a> offers one good solution. Another way to do it — without defining a new function — is to (explicitly) throw away the result of an immediately-executed closure:</p> <pre><code> _ = { print("foo") }() </code></pre> <p>If you want a more concise syntax, you might consider <a href="http://bugreport.apple.com" rel="nofollow">filing a bug</a> to request such. </p> <hr> <p>As noted in comments, however, anonymous nested scopes in C are often a sign that you could be writing better code. For example, you could instead make the label construction in your question like so:</p> <pre><code>self.titleLabel = { let label = UILabel() label.text = "some text" // ... set other properties ... self.addSubview(label) return label }() </code></pre> <p>This not only keeps <code>label</code> as a nice short name that's scoped only to the chunk of code that creates and configures one, but keeps that chunk of code associated with the property it's creating a value for.</p> <p>If you find yourself doing this frequently, you could try making a generic function that lets you cut your construction code down to this:</p> <pre><code>self.titleLabel = makeSubview(UILabel()) { label in label.text = "some text" // other label properties } </code></pre> <p>But I'll leave that as an exercise for the reader. ;)</p>
<p>What I do is define an anonymous function and execute it.</p> <pre><code>// ... preceding code ... // ... might need semicolon here; { () -&gt; () in // ... this is a local scope ... }() // ... following code ... </code></pre> <p>You might have to put a semicolon at the end of the previous line so Swift doesn't think think this is a "trailing closure". You can even place that semicolon in the same line just before the opening curly brace. So, implementing the OP's original code:</p> <pre><code>;{ () -&gt; () in let label = UILabel() self.addSubview(label) self.titleLabel = label }() </code></pre> <p><strong>EDIT</strong> Subsequently I have found myself falling back on <code>if true {...}</code> instead. As Martin points out, though, in Swift 2, <code>do {...}</code> will be allowed as the official way of defining an arbitrary scope, thus solving the problem nicely.</p>
<p>As of <strong>Swift 2</strong>, you can create a local scope with the <code>do</code>-statement:</p> <pre><code>do { let x = 7 print(x) } print(x) // error: use of unresolved identifier 'x' </code></pre> <p>The main use-case however seems to be error-handling with do-try-catch, as documented in <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html" rel="nofollow">"Error Handling"</a> in <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html" rel="nofollow">"The Swift Programming Language"</a>, for example:</p> <pre><code>do { let jsonObj = try NSJSONSerialization.JSONObjectWithData(jsonData, options: []) // success, do something with `jsonObj`... } catch let error as NSError { // failure print("Invalid JSON data: \(error.localizedDescription)") } </code></pre>