Protocol vs Interface
<p>I've been reading the swift documentation, and working through the playground. I have to admit I have zero knowledge of Objective-C/iOS development (outside of Xamarin at least). To my eyes, a protocol seemed identical to the C# interface.</p> <p>However, I noticed whilst looking around on the web that Objective-C has a concept of both a protocol (<a href="http://stackoverflow.com/questions/1679145/interface-and-protocol-explanation">source</a>) <em>and</em> an interface (although I'm not really sure what the difference is). Swift doesn't seem to have both - just protocols.</p> <p>Could someone explain, for swift, what the difference/relationship between a Protocol and a C# interface is?</p> <p><em>Update:</em> I appreciate that the answer might be functionally the same as the duplicates listed, but I think that, given that this is asking about a <em>different language</em>, that the question still has merit in it's own right. After all, new developers to swift might have no knowledge of Java (beyond Javascript, I have none). Placing an expectation on someone to have knowledge of a totally different language system in order to have the answer to their question is a bit much, isn't it!? <a href="http://meta.stackoverflow.com/questions/258363/old-question-new-technology-new-answer?cb=1">This</a> discussion on meta is also discussing this issue.</p>
<p>Objective C protocols serve basically the same purpose as interfaces in Java/ C#. Objective C interface files are different. Like C, Objective C has interface files that publicly declare the methods and properties of a class, that are then implemented in an implementation file. For example you may have an interface file of a class that looks something like this:</p> <pre><code>@interface -(void)myMethod; @end </code></pre> <p>then in your implementation file you actually implement the method:</p> <pre><code>-(void)myMethod{ //code } </code></pre> <p>Swift does away with separate interface and implementation files. So it only has protocols.</p>