Xcode 6 Storyboard Unwind Segue with Swift Not Connecting to Exit
<p>When trying to connect a Navigation Bar Button to the Exit item of a ViewController in Xcode 6 (not really sure if it's an Xcode 6 problem but worth mentioning as it is in beta) it does not find the Swift function in the custom class.</p> <p><img src="https://i.stack.imgur.com/x2CBT.png" alt="Button to Exit with whip"></p> <p>The function it should be finding:</p> <pre><code>@IBAction func unwindToList(segue: UIStoryboardSegue) { } </code></pre> <p>I made another button on the view just to make sure I could get an IBAction working with Swift and that I was writing it correctly. This works fine:</p> <pre><code>@IBAction func test(sender: AnyObject) { NSLog("Test") } </code></pre> <p>I have seen <a href="https://stackoverflow.com/questions/12792573/cannot-connect-storyboard-unwind-segue">this question</a> that seems like the same issue but according to the answers there this should be working.</p> <p>Xcode 6 is in beta and, of course, Swift is very new, but wanted to see if anyone has come across this before considering it a potential bug. </p>
<p>This is a known issue with Xcode 6:</p> <blockquote> <p>Unwind segue actions declared in Swift classes are not recognized by Interface Builder</p> </blockquote> <p>In order to get around it you need to:</p> <ol> <li>Change <code>class MyViewController</code> to <code>@objc(MyViewController) class MyViewController</code></li> <li><p>Create an Objective-C header file with a category for MyViewController that redeclares the segue action.</p> <pre><code>@interface MyViewController (Workaround) - (IBAction)unwindToMyViewController: (UIStoryboardSegue *)segue; @end </code></pre></li> <li><p>In the storyboard, select the instance of MyViewController,Â clear its custom class, then set it back to MyViewController.</p></li> </ol> <p>After these steps you are able to connect buttons to the exit item again.</p> <p><a href="https://developer.apple.com/library/prerelease/ios/releasenotes/DeveloperTools/RN-Xcode/xc6_release_notes/xc6_release_notes.html#//apple_ref/doc/uid/TP40001051-CH4-SW1">Xcode 6 Release Notes</a> <em>PDF, Page 10</em></p>
<p>I was able to finally get it to work; the xcode6 IB is really fragile right now (crashes a lot too). I had to restart the IDE before I could connect the nav bar button item to the exit item. I ended up re-creating my test project and following the above suggestion (Xcode 6 Release Notes PDF, Page 10) to get it to work. In addition, when adding the .h file, I made sure to select my project target, which was unchecked by default. I also created my controller swift stub via the Cocoa Touch Class template (vs empty swift file). I used a modal segue in my nav controller. </p> <p>ListTableViewController.h</p> <pre><code>#import &lt;UIKit/UIKit.h&gt; @interface ListTableViewController - (IBAction)unwindToList: (UIStoryboardSegue *)segue; @end </code></pre> <p>ListTableViewController.swift</p> <pre><code>import UIKit @objc(ListTableViewController) class ListTableViewController: UITableViewController { @IBAction func unwindToList(s:UIStoryboardSegue) { println("hello world"); } } </code></pre> <p>hope that helps </p>
<p>In Xcode 6 Beta 4 which is available for download, unwind segues and interface builder is supported. I have tested it by myself in a little project.</p>
<p>Instead of using the Objective-C workaround, Xcode 6 Beta 4, which can now be installed, supports the connection of unwind segues in the Interface Builder. You can update now from the iOS Dev center. Control-click and drag from the UI item you want to trigger the segue to the exit icon, and select the function unwindToSegue after having put the following code in the destination view controller. </p> <pre><code>@IBAction func unwindToSegue (segue : UIStoryboardSegue) {} </code></pre>
<p>I had the same problem, also with Xcode Beta 4 at the beginning.. till I found out, that I simply forgot to add the @IBOutlet for the Cancel and Save Buttons in the respective controller. After this, I could connect the buttons with the Exit-Icon :))</p>
<p>It appears that Xcode 6.1 has fixed this issue. You can now set up unwind segues in Swift with the following code:</p> <pre><code>@IBAction func unwindToList(segue: UIStoryboardSegue) { // Nothing needed here, maybe a log statement // print("\(segue)") } </code></pre> <p>This method - which can remain empty - needs to have a method signature with the UIStoryboardSegue type and not AnyObject or Interface Builder will not see it.</p> <p>For more detail check the <a href="https://developer.apple.com/library/ios/technotes/tn2298/_index.html" rel="nofollow">TechNote 2298</a></p>
<p>If it's always the same presenting view controller that you'd like to unwind to, you can always just do: </p> <pre><code>self.navigationController?.popViewControllerAnimated(true) </code></pre>
<p>The answers above rely on ObjC to fix the issue, I have found a pure Swift solution. While adding the segue handler in Swift allowed me to create the unwind segue in Interface Builder (Xcode 6.3), the handler was not being called.</p> <pre><code>@IBAction func unwindToParent(sender: UIStoryboardSegue) { dismissViewControllerAnimated(true, completion: nil) } </code></pre> <p>So after digging in, the <code>canPerformUnwindSegueAction:fromViewController:withSender</code> from the super class returns <code>false</code>. So I've overridden the implementation, and it works:</p> <pre><code>override func canPerformUnwindSegueAction(action: Selector, fromViewController: UIViewController, withSender sender: AnyObject) -&gt; Bool { return action == Selector("unwindToParent:") } </code></pre> <p><strong>Update</strong><br> The code above is incorrect, as I resolved the issue without overriding <code>canPerformUnwindSegueAction:fromViewController:withSender</code>. The fundamental error was to make the distinction between the <em>presenting</em> viewcontroller and the <em>presented</em> viewcontroller.</p> <blockquote> <p>When an unwind segue is initiated, it must first locate the nearest view controller in the navigation hierarchy which implements the unwind action specified when the unwind segue was created. This view controller becomes the destination of the unwind segue. If no suitable view controller is found, the unwind segue is aborted.<br> <em>source: <a href="https://developer.apple.com/library/ios/technotes/tn2298/_index.html#//apple_ref/doc/uid/DTS40013591-CH1-UNWINDPROC" rel="nofollow">Technical Note TN2298</a></em></p> </blockquote> <p>So, define the <code>@IBAction</code> on the presenting viewcontroller, not on the presented view controller. That way the segue will have meaningful values for the properties <code>destinationViewController</code> and <code>sourceViewController</code> as well, being respectively the presenting and presented viewcontroller.</p>
<p>You may want to verify that the original controller destination that you're trying to unwind to is not embedded inside a Container object. Xcode 6 ain't having that. </p>
<p>Xcode --version 6.4 Swift 1.2</p> <p>@IBAction func backButton(sender: AnyObject) { dismissViewControllerAnimated(true, completion: nil) }</p>
<p>In Swift 2.3 I found the external name of the parameter must be "withUnwindSegue":</p> <pre><code>@IBAction func unwindToThisView(withUnwindSegue unwindSegue: UIStoryboardSegue) { ... } </code></pre>