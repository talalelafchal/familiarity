How to initialise a string from NSData in Swift
<p>I have been trying to initialise a string from NSData in Swift.</p> <p>In the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/#//apple_ref/occ/instm/NSString/initWithData:encoding:">NSString Cocoa Documentation</a> Apple is saying you have to use this:</p> <pre><code> init(data data: NSData!, encoding encoding: UInt) </code></pre> <p>however Apple did not include any example for usage or where to put the "init" </p> <p>I am trying to convert the following code from obj-c to swift</p> <pre><code>NSString *string; string = [[NSString alloc] initWithData: data encoding: NSUTF8StringEncoding]; </code></pre> <p>I have been trying a lot of possible syntaxes such as the following (of course it did not work):</p> <pre><code>var string:NSString! string = init(data: fooData,encoding: NSUTF8StringEncoding) </code></pre>
<pre><code>import Foundation var string = NSString(data: NSData?, encoding: UInt) </code></pre>
<p>This is how you should initialize the <code>NSString</code>:</p> <pre><code>let datastring = NSString(data: fooData, encoding: NSUTF8StringEncoding) </code></pre> <p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-XID_266" rel="nofollow noreferrer">This doc</a> explains the syntax.</p>
<p>This is the implemented code needed:</p> <h2><strong>in Swift 1.0:</strong></h2> <pre><code>var dataString = NSString(data: fooData, encoding:NSUTF8StringEncoding) </code></pre> <h2><strong>in Swift 2.0:</strong></h2> <pre><code>import Foundation var dataString = String(data: fooData, encoding: NSUTF8StringEncoding) </code></pre> <hr> <h2><strong>in Swift 3.0:</strong></h2> <pre><code>var dataString = String(data: fooData, encoding: String.Encoding.utf8) </code></pre> <p>or just</p> <pre><code>var dataString = String(data: fooData, encoding: .utf8) </code></pre>
<h2>Swift 2.0</h2> <p>It seems that Swift 2.0 has actually introduced the <code>String(data:encoding:)</code> as an String extension when you import <code>Foundation</code>. I haven't found any place where this is documented, weirdly enough.</p> <h2>(pre Swift 2.0) Lightweight extension</h2> <p>Here's a copy-pasteable little extension without using <code>NSString</code>, let's cut the middle-man.</p> <pre><code>import Foundation extension NSData { var byteBuffer : UnsafeBufferPointer&lt;UInt8&gt; { get { return UnsafeBufferPointer&lt;UInt8&gt;(start: UnsafeMutablePointer&lt;UInt8&gt;(self.bytes), count: self.length) }} } extension String { init?(data : NSData, encoding : NSStringEncoding) { self.init(bytes: data.byteBuffer, encoding: encoding) } } // Playground test let original = "Nymphs blitz quick vex dwarf jog" let encoding = NSASCIIStringEncoding if let data = original.dataUsingEncoding(encoding) { String(data: data, encoding: encoding) } </code></pre> <p>This also give you access to <code>data.byteBuffer</code> which is a sequence type, so all those cool operations you can do with sequences also work, like doing a <code>reduce { $0 &amp;+ $1 }</code> for a checksum.</p> <h2>Notes</h2> <p>In my previous edit, I used this method:</p> <pre><code>var buffer = Array&lt;UInt8&gt;(count: data.length, repeatedValue: 0x00) data.getBytes(&amp;buffer, length: data.length) self.init(bytes: buffer, encoding: encoding) </code></pre> <p>The problem with this approach, is that I'm creating a copy of the information into a new array, thus, I'm duplicating the amount of bytes (specifically: <code>encoding size * data.length</code>)</p>
<p>Objective - C</p> <pre><code>NSData *myStringData = [@"My String" dataUsingEncoding:NSUTF8StringEncoding]; NSString *myStringFromData = [[NSString alloc] initWithData:myStringData encoding:NSUTF8StringEncoding]; NSLog(@"My string value: %@",myStringFromData); </code></pre> <p>Swift</p> <pre><code>//This your data containing the string let myStringData = "My String".dataUsingEncoding(NSUTF8StringEncoding) //Use this method to convert the data into String let myStringFromData = String(data:myStringData!, encoding: NSUTF8StringEncoding) print("My string value:" + myStringFromData!) </code></pre> <p><a href="http://objectivec2swift.blogspot.in/2016/03/coverting-nsdata-to-nsstring-or-convert.html" rel="nofollow">http://objectivec2swift.blogspot.in/2016/03/coverting-nsdata-to-nsstring-or-convert.html</a></p>
<p>Another answer based on extensions (boy do I miss this in Java):</p> <pre><code>extension NSData { func toUtf8() -&gt; String? { return String(data: self, encoding: NSUTF8StringEncoding) } } </code></pre> <p>Then you can use it:</p> <pre><code>let data : NSData = getDataFromEpicServer() let string : String? = data.toUtf8() </code></pre> <p>Note that the string is optional, the initial <code>NSData</code> may be unconvertible to Utf8.</p>