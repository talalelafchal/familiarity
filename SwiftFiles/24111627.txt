Iterating Through a Dictionary in Swift
<p>I am a little confused on the answer that Xcode is giving me to this experiment in the Swift Programming Language Guide:</p> <pre><code>// Use a for-in to iterate through a dictionary (experiment) let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25] ] var largest = 0 for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { largest = number } } } largest </code></pre> <p>I understand that as the dictionary is being transversed, the largest number is being set to the variable, <code>largest</code>. However, I am confused as to why Xcode is saying that <code>largest</code> is being set 5 times, or 1 time, or 3 times, depending on each test. </p> <p>When looking through the code, I see that it should be set 6 times in "Prime" alone (2, 3, 5, 7, 11, 13). Then it should skip over any numbers in "Fibonacci" since those are all less than the largest, which is currently set to 13 from "Prime". Then, it should be set to 16, and finally 25 in "Square", yielding a total of 8 times. </p> <p>Am I missing something entirely obvious? </p>
<p>Dictionaries in Swift (and other languages) are not ordered. When you iterate through the dictionary, there's no guarentee that the order will match the initialization order. In this example, Swift processes the "Square" key before the others. You can see this by adding a print statement to the loop. 25 is the 5th element of Square so largest would be set 5 times for the 5 elements in Square and then would stay at 25.</p> <pre><code>let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25] ] var largest = 0 for (kind, numbers) in interestingNumbers { println("kind: \(kind)") for number in numbers { if number &gt; largest { largest = number } } } largest </code></pre> <p>This prints:</p> <blockquote> <pre><code>kind: Square kind: Prime kind: Fibonacci </code></pre> </blockquote>
<p>Arrays are ordered collections but dictionaries and sets are unordered collections. Thus you can't predict the order of iteration in a dictionary or a set.</p> <p>Read this article to know more about <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html" rel="nofollow">Collection Types: Swift Programming Language</a></p>
<p>Here is an alternative for that experiment (Swift 3.0). This tells you exactly which kind of number was the largest.</p> <pre><code>let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25], ] var largest = 0 var whichKind: String? = nil for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { whichKind = kind largest = number } } } print(whichKind) print(largest) OUTPUT: Optional("Square") 25 </code></pre>