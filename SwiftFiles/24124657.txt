Compile time key path checking in Swift
<p>When I'm implementing NSCoding protocol in Objective-C, I'd like to use <code>NSStringFromSelector(@selector(name))</code> to get the key path of a property, like below</p> <pre><code>- (void)encodeWithCoder:(NSCoder *)aCoder { [aCoder encodeObject:self.accountName forKey:NSStringFromSelector(@selector(accountName))]; [aCoder encodeObject:self.userId forKey:NSStringFromSelector(@selector(userId))]; } - (id)initWithCoder:(NSCoder *)aDecoder { self = [super init]; if (self) { _accountName = [aDecoder decodeObjectForKey:forKey:NSStringFromSelector(@selector(accountName))]; _userId = [aDecoder decodeObjectForKey:forKey:NSStringFromSelector(@selector(userId))]; } return self; } </code></pre> <p>I like this way because it prevents from mistyping without the need to define lots of string constants, and I will get warnings if I renamed those properties. But I couldn't find a way to do this in Swift, any ideas?</p>
<p>In Swift, selectors <em>are</em> strings. (Well, there's the <code>Selector</code> type, but that transparently converts to and from <code>String</code>.) So you can omit <code>NSStringFromSelector</code> and <code>@selector</code> and just use a string literal.</p> <p>If you're looking to introspect the names of your properties... it's a bit tougher. Using <code>reflect()</code> on an instance of your class returns an object of type <code>Mirror</code>. (Paste one of those symbols in your playground and cmd-click to get the declarations in the standard library "header".) You can use that to walk the class's list of properties.</p> <p>This would make your "encode everything" method look something like this:</p> <pre><code>func encodeWithCoder(coder: NSCoder!) { let mirror = reflect(self) let (accountNameKey, _) = mirror[0] let (userIdKey, _) = mirror[1] coder.encodeObject(accountName, forKey: accountNameKey) coder.encodeObject(userId, forKey: userIdKey) } </code></pre> <p>It's not ideal, since you have to know the order of the properties' definitions. But it might be improved upon...</p>