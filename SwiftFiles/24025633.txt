Why does filters in Swift iterate the collection twice?
<p>The following code in Swift's playground or Console App:</p> <pre><code>let letters = ["A", "B", "C"] letters.filter({ (x : String) -&gt; Bool in println("PRINT: \(x)") return true }) </code></pre> <p>Prints out:</p> <pre><code>PRINT: A PRINT: B PRINT: C PRINT: A PRINT: B PRINT: C </code></pre> <p>Why does it iterate over the collection twice?</p>
<p><code>filter</code> returns an array which is being printed out by the playground.</p> <pre><code>/// Return a Array containing the elements `x` of `self` for which /// `includeElement(x)` is `true` func filter(includeElement: (T) -&gt; Bool) -&gt; T[] </code></pre> <p>I believe the <code>(6 times)</code> is incorrect because if you look below it <code>true</code> only gets returned 3 times.</p> <p>EDIT: The above is <strong>incorrect</strong>.</p> <p>From playing around with it more, I can only say that this is simply the behaviour of the <code>filter</code> function.</p> <pre><code>letters.reverse().filter({ (x : String) -&gt; Bool in println("PRINT: \(x)") return true }) </code></pre> <p>This prints <code>CBACBA</code> so its simply always traversing the array in order, twice.</p> <pre><code>letters.filter({ (x : String) -&gt; Bool in println("PRINT: \(x)") if (x == "A") { return true } return false }) </code></pre> <p>This still prints <code>ABCABC</code>, so go figure..</p> <p>I'll go ask a Swift engineer in a bit and get back to you on why this is! (If they know :p)</p>
<p>Most probably <code>filter</code> is implemented to first count the number of elements it needs to store and then, after using that number to size the allocation of storage for a new array, looping again to copy the ones he needs to keep.</p> <p>The fact that it loops only once if you always return <code>false</code> means that it optimizes away the second cycle iff the result is empty.</p> <p>You may want to radar this as a bug but it probably is "working as designed": arrays are not lists, after all.</p>
<p>It is modified in beta 5. It is now traveling only once now, printing <code>ABC</code> instead of <code>ABCABC</code></p>