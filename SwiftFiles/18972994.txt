iOS 7 parallax effect in my view controller
<p>I'm developing an app for iOS 7 in Objective-C. I've got a screen in my app with a few buttons and a pretty background image. (It's a simple xib with <code>UIButtons</code> on top of a <code>UIImageView</code>.)</p> <p>I was thinking that it'd be cool if those buttons had the parallax effect that the iOS 7 home screen has, so if you tilt the phone you could see the background.</p> <p>How can I implement that effect in my own app?</p>
<p>UIMotionEffect provides a free parallax implementation on iOS 7. </p> <p><a href="http://www.teehanlax.com/blog/introduction-to-uimotioneffect/" rel="nofollow">http://www.teehanlax.com/blog/introduction-to-uimotioneffect/</a></p> <p><a href="https://github.com/michaeljbishop/NGAParallaxMotion" rel="nofollow">https://github.com/michaeljbishop/NGAParallaxMotion</a> lets you just set the parallax intensity.</p>
<p>With iOS 7, Apple introduced <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMotionEffect_class/Reference/Reference.html#//apple_ref/occ/cl/UIMotionEffect"><code>UIMotionEffect</code></a> to add Motion effects that are related to the orientation of the userâ€™s device. For example, to emulate the parallax effect on the home screen, you can use the subclass <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIInterpolatingMotionEffect_class/Reference/Reference.html"><code>UIInterpolationMotionEffect</code></a>, as explained <a href="http://www.teehanlax.com/blog/introduction-to-uimotioneffect/">here</a> and <a href="http://kevinyavno.com/blog/?p=127">here</a>, just with a few lines of code.</p> <p><strong>Objective-C</strong>:</p> <pre><code>// Set vertical effect UIInterpolatingMotionEffect *verticalMotionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@"center.y" type:UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis]; verticalMotionEffect.minimumRelativeValue = @(-10); verticalMotionEffect.maximumRelativeValue = @(10); // Set horizontal effect UIInterpolatingMotionEffect *horizontalMotionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@"center.x" type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis]; horizontalMotionEffect.minimumRelativeValue = @(-10); horizontalMotionEffect.maximumRelativeValue = @(10); // Create group to combine both UIMotionEffectGroup *group = [UIMotionEffectGroup new]; group.motionEffects = @[horizontalMotionEffect, verticalMotionEffect]; // Add both effects to your view [myBackgroundView addMotionEffect:group]; </code></pre> <p><strong>Swift</strong> (Thanks to @Lucas):</p> <pre><code>// Set vertical effect let verticalMotionEffect = UIInterpolatingMotionEffect(keyPath: "center.y", type: .TiltAlongVerticalAxis) verticalMotionEffect.minimumRelativeValue = -10 verticalMotionEffect.maximumRelativeValue = 10 // Set horizontal effect let horizontalMotionEffect = UIInterpolatingMotionEffect(keyPath: "center.x", type: .TiltAlongHorizontalAxis) horizontalMotionEffect.minimumRelativeValue = -10 horizontalMotionEffect.maximumRelativeValue = 10 // Create group to combine both let group = UIMotionEffectGroup() group.motionEffects = [horizontalMotionEffect, verticalMotionEffect] // Add both effects to your view myBackgroundView.addMotionEffect(group) </code></pre> <p>Also, you can find a bunch of libraries to do this easier or to add this functionality to older iOS versions:</p> <ul> <li><a href="https://github.com/michaeljbishop/NGAParallaxMotion">NGAParallaxMotion</a> (requires <strong>iOS 7</strong>).</li> <li><a href="https://github.com/denivip/DVParallaxView">DVParallaxView</a> (requires <strong>iOS 5.0</strong> or higher and <strong>ARC</strong>).</li> <li><a href="https://github.com/Morgan-Kennedy/MKParallaxView">MKParallaxView</a> (tested with <strong>iOS 6.0</strong>, requires <strong>ARC</strong>).</li> <li><a href="https://github.com/Przytua/UIView-MWParallax">UIView-MWParallax</a> (tested with <strong>iOS 6.1</strong>, requires <strong>ARC</strong>).</li> </ul>
<p>Here is an easy category to integrate the effect on iOs7+ :</p> <pre><code>NSString *const centerX = @"center.x"; NSString *const centerY = @"center.y"; //#define IS_OS_7_OR_LATER ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) @implementation UIView (TLMotionEffect) - (void)addCenterMotionEffectsXYWithOffset:(CGFloat)offset { // if(!IS_OS_7_OR_LATER) return; if(floor(NSFoundationVersionNumber) &lt;= NSFoundationVersionNumber_iOS_6_1) return; UIInterpolatingMotionEffect *xAxis; UIInterpolatingMotionEffect *yAxis; xAxis = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:centerX type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis]; xAxis.maximumRelativeValue = @(offset); xAxis.minimumRelativeValue = @(-offset); yAxis = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:centerY type:UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis]; yAxis.minimumRelativeValue = @(-offset); yAxis.maximumRelativeValue = @(offset); UIMotionEffectGroup *group = [[UIMotionEffectGroup alloc] init]; group.motionEffects = @[xAxis, yAxis]; [self addMotionEffect:group]; } @end </code></pre> <p><a href="https://github.com/jvenegas/TLMotionEffect" rel="nofollow">https://github.com/jvenegas/TLMotionEffect</a></p>
<pre><code>const static CGFloat kCustomIOS7MotionEffectExtent = 10.0; - (void)applyMotionEffects:(UIView *YOUR_VIEW) { if (NSClassFromString(@"UIInterpolatingMotionEffect")) { UIInterpolatingMotionEffect *horizontalEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@"center.x" type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis]; horizontalEffect.minimumRelativeValue = @(-kCustomIOS7MotionEffectExtent); horizontalEffect.maximumRelativeValue = @( kCustomIOS7MotionEffectExtent); UIInterpolatingMotionEffect *verticalEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@"center.y" type:UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis]; verticalEffect.minimumRelativeValue = @(-kCustomIOS7MotionEffectExtent); verticalEffect.maximumRelativeValue = @( kCustomIOS7MotionEffectExtent); UIMotionEffectGroup *motionEffectGroup = [[UIMotionEffectGroup alloc] init]; motionEffectGroup.motionEffects = @[horizontalEffect, verticalEffect]; [YOUR_VIEW addMotionEffect:motionEffectGroup]; } } </code></pre>
<p>@veducm's solution can be a little shorter. The UIMotionEffectGroup for its x and y motion is obsolete if you add the the x and y-axis motionEffects separately.</p> <pre><code>UIInterpolatingMotionEffect *motionEffect; motionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@"center.x" type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis]; motionEffect.minimumRelativeValue = @(-25); motionEffect.maximumRelativeValue = @(25); [bgView addMotionEffect:motionEffect]; motionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@"center.y" type:UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis]; motionEffect.minimumRelativeValue = @(-25); motionEffect.maximumRelativeValue = @(25); [bgView addMotionEffect:motionEffect]; </code></pre>
<p>Swift translation:</p> <pre><code>// Set vertical effect let verticalMotionEffect = UIInterpolatingMotionEffect(keyPath: "center.y", type: .TiltAlongVerticalAxis) verticalMotionEffect.minimumRelativeValue = -value verticalMotionEffect.maximumRelativeValue = value // Set vertical effect let horizontalMotionEffect = UIInterpolatingMotionEffect(keyPath: "center.x", type: .TiltAlongHorizontalAxis) verticalMotionEffect.minimumRelativeValue = -value verticalMotionEffect.maximumRelativeValue = value let group = UIMotionEffectGroup() group.motionEffects = [horizontalMotionEffect, verticalMotionEffect] self.motionEffect = group self.addMotionEffect(group) </code></pre>
<p>Translated to swift in case anyone is lazy. Please vote @veducm <a href="http://stackoverflow.com/a/19067717/676822">answer</a> up if you found this useful</p> <pre><code>@IBOutlet var background : UIImageView! func parallaxEffectOnBackground() { let relativeMotionValue = 50 var verticalMotionEffect : UIInterpolatingMotionEffect = UIInterpolatingMotionEffect(keyPath: "center.y", type: .TiltAlongVerticalAxis) verticalMotionEffect.minimumRelativeValue = -relativeMotionValue verticalMotionEffect.maximumRelativeValue = relativeMotionValue var horizontalMotionEffect : UIInterpolatingMotionEffect = UIInterpolatingMotionEffect(keyPath: "center.x", type: .TiltAlongHorizontalAxis) horizontalMotionEffect.minimumRelativeValue = -relativeMotionValue horizontalMotionEffect.maximumRelativeValue = relativeMotionValue var group : UIMotionEffectGroup = UIMotionEffectGroup() group.motionEffects = [horizontalMotionEffect, verticalMotionEffect] self.background.addMotionEffect(group) } </code></pre>
<p><strong>This will help someone who is looking to implement parallax for tableView or collectionView.</strong></p> <blockquote> <ul> <li><p>first of all create the cell for the tableview and put the image view in it. </p></li> <li><p>set the image height slightly more than the cell height. if cell height = 160 let the image height be 200 (to make the parallax effect and you can change it accordingly)</p></li> <li><p>put this two variable in your viewController or any class where your tableView delegate is extended</p></li> </ul> </blockquote> <pre><code>let imageHeight:CGFloat = 150.0 let OffsetSpeed: CGFloat = 25.0 </code></pre> <blockquote> <ul> <li>add the following code in the same class </li> </ul> </blockquote> <pre><code> func scrollViewDidScroll(scrollView: UIScrollView) { // print("inside scroll") if let visibleCells = seriesTabelView.visibleCells as? [SeriesTableViewCell] { for parallaxCell in visibleCells { var yOffset = ((seriesTabelView.contentOffset.y - parallaxCell.frame.origin.y) / imageHeight) * OffsetSpeedTwo parallaxCell.offset(CGPointMake(0.0, yOffset)) } } } </code></pre> <blockquote> <ul> <li><p>where seriesTabelView is my UItableview </p></li> <li><p>and now lets goto the cell of this tableView and add the following code </p></li> </ul> </blockquote> <pre><code>func offset(offset: CGPoint) { posterImage.frame = CGRectOffset(self.posterImage.bounds, offset.x, offset.y) } </code></pre> <blockquote> <ul> <li>were posterImage is my UIImageView</li> </ul> </blockquote> <p><strong>If you want to implement this to collectionView just change the tableView vairable to your collectionView variable</strong></p> <p>and thats it. i am not sure if this is the best way. but it works for me. hope it works for you too. and let me know if there is any problem</p>