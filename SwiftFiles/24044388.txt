Why is Swift creating optional parameter without '?'
<p>While trying to implement the "experiment" on page 35 of the Swift programming guide I get a very strange error in the Xcode playground. In the <code>pokerDeck</code> method, on the line beginning with <code>let card...</code> in the innermost loop, I get the error <code>Value of optional type 'Rank?' not unwrapped</code>. How/why is <code>Rank</code> optional?</p> <pre><code>struct Card { var rank : Rank var suit : Suit init(rank : Rank, suit : Suit) { self.rank = rank self.suit = suit } func pokerDeck() -&gt; Card[] { let suits = [Suit.Spades, Suit.Clubs, Suit.Hearts, Suit.Diamonds] var deck = Card[]() for suit in suits { for r in 1 ... 13 { let card = Card(rank: Rank.fromRaw(r), suit: suit) // ERROR deck += card } } return deck } } </code></pre> <p>The suggested fix by Xcode is to add a <code>!</code></p> <pre><code>let card = Card(rank: Rank.fromRaw(r)!, suit: suit) </code></pre> <p>Which makes the problem even murkier.</p>
<p>Your problem is that fromRaw returns an optional value. The suggested fix is correct if you're sure all raw values you pass will have an enum value.</p>
<p>the fromRaw() method of an enum returns an optional of the type because there is no guarantee that there is a value for every raw value.</p>
<p>The <code>fromRaw()</code> method of an Enum doesn't know what you will pass to it – it can't know if it will succeed on every call – so they designed that method with a return type of <code>Rank?</code> (the return type is an optional)</p> <p>the <code>!</code> operator (known as <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-XID_312">forced unwrapping</a>) forces an optional to be converted into an Enum (and will cause an error if it is <code>nil</code>)</p>
<p>In swift, certain functions return optional wrapped types. In this case, the fromRaw() function returns an optional wrapped enum. </p> <p>When you know that the type will always be present, declare the var with an exclamation mark (!). This will automatically unwrap the optional to either be used as desired or <em>a runtime error</em> if nil. </p>