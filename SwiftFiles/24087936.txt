How do I make class methods / properties in Swift?
<p>Class (or static) methods in Objective-C were accomplished using <code>+</code> in declarations.</p> <pre><code>@interface MyClass : NSObject + (void)aClassMethod; - (void)anInstanceMethod; @end </code></pre> <p>How can this be achieved in Swift?</p>
<p>Prepend the declaration with <code>class</code> if it's a class, or with <code>static</code> if it's a structure.</p> <pre><code>class MyClass : { class func aClassMethod() { ... } func anInstanceMethod() { ... } } </code></pre>
<p>They are called <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-XID_396"><strong>type properties</strong></a> and <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Methods.html#//apple_ref/doc/uid/TP40014097-CH15-XID_307"><strong>type methods</strong></a> and you use the <code>class</code> or <code>static</code> keywords.</p> <pre><code>class Foo { var name: String? // instance property static var all = [Foo]() // static type property class var comp: Int { // computed type property return 42 } class func alert() { // type method print("There are \(all.count) foos") } } Foo.alert() // There are 0 foos let f = Foo() Foo.all.append(f) Foo.alert() // There are 1 foos </code></pre>
<p>They are called type properties and type methods in Swift and you use the class keyword.<br> Declaring a class method or Type method in swift : </p> <pre><code>class SomeClass { class func someTypeMethod() { // type method implementation goes here } } </code></pre> <p>Accessing that method :</p> <pre><code>SomeClass.someTypeMethod() </code></pre> <p>or you can refer <a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/Methods.html">Methods in swift</a></p>
<p>Swift 1.1 doesn't have stored class properties. You can implement it using a closure class property that fetches an associated object tied to the class object. (Only works in classes derived from NSObject.)</p> <pre><code>private var fooPropertyKey: Int = 0 // value is unimportant; we use var's address class YourClass: SomeSubclassOfNSObject { class var foo: FooType? { // Swift 1.1 doesn't have stored class properties; change when supported get { return objc_getAssociatedObject(self, &amp;fooPropertyKey) as FooType? } set { objc_setAssociatedObject(self, &amp;fooPropertyKey, newValue, objc_AssociationPolicy(OBJC_ASSOCIATION_RETAIN_NONATOMIC)) } } .... } </code></pre>
<p>Prepend the declaration with class or static if it's a function, or with static if it's a property.</p> <pre><code>class MyClass { class func aClassMethod() { ... } static func anInstanceMethod() { ... } static var myArray : [String] = [] } </code></pre>