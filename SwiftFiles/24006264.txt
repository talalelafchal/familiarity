How to call an Objective-C category method in Swift
<p>How would you call an Objective-C category method like this in Swift?</p> <pre><code>+(UIColor*)colorWithHexString:(NSString*)hex alpha:(float)alpha; </code></pre>
<p>The compiler automatically looks for common ObjC naming patterns and substitutes Swift patterns in their place. An ObjC class method that returns an instance of the class (and is named a certain way, it looks like) gets turned into a Swift convenience initializer.</p> <p>If you have the ObjC method (defined by a custom category):</p> <pre><code> + (UIColor *)colorWithHexString:(NSString *)hex alpha:(float)alpha; </code></pre> <p>The compiler generates the Swift declaration:</p> <pre><code>convenience init(hexString: String?, alpha: CFloat) </code></pre> <p>And you call it like this:</p> <pre><code>let color = UIColor(hexString: "#ffffff", alpha: 1.0) </code></pre> <hr> <p>And in Swift 2.0 or later, you can use the <code>NS_SWIFT_NAME</code> macro to make ObjC factory methods that don't match the naming pattern import to Swift as initializers. e.g.:</p> <pre><code>@interface UIColor(Hex) + (UIColor *)hexColorWithString:(NSString *)string NS_SWIFT_NAME(init(hexString:)); @end // imports as extension UIColor { init(hexString: String) } </code></pre>