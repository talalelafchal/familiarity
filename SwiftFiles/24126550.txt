Delegate Methods in Swift for UIPickerView
<p>Just getting started in Swift and having trouble calling the delegate methods for a UIPickerView</p> <p>So far I have added the UIPickerViewDelegate to my class like so:</p> <pre><code>class ExampleClass: UIViewController, UIPickerViewDelegate </code></pre> <p>I have also created my UIPickerView and set the delegate for it:</p> <pre><code>@IBOutlet var year: UIPickerView year.delegate = self </code></pre> <p>Now I am just having trouble turning the following into Swift code:</p> <pre><code>- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView </code></pre> <p>Any help would be appreciated</p>
<p>The delegate isn't responsible for calling that method. Instead it is called by the UIPickerView's data source. These are the two functions called by the UIPickerView data source that you need to implement:</p> <pre><code>// returns the number of 'columns' to display. func numberOfComponentsInPickerView(pickerView: UIPickerView!) -&gt; Int // returns the # of rows in each component.. func pickerView(pickerView: UIPickerView!, numberOfRowsInComponent component: Int) -&gt; Int </code></pre> <p>To ensure these functions get called, your class should also implement the data source protocol:</p> <pre><code>class ExampleClass: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource </code></pre> <p>And your picker's data source should be set:</p> <pre><code>year.dataSource = self </code></pre>
<p>That's actually a method in the <code>UIPickerViewDataSource</code> protocol, so you'll want to make sure you set your picker view's <code>dataSource</code> property as well: <code>year.dataSource = self</code>. The Swift-native way seems to be to implement protocols in class extensions, like this:</p> <pre><code>class ExampleClass: UIViewController { // properties and methods, etc. } extension ExampleClass: UIPickerViewDataSource { // two required methods func numberOfComponentsInPickerView(pickerView: UIPickerView!) -&gt; Int { return 1 } func pickerView(pickerView: UIPickerView!, numberOfRowsInComponent component: Int) -&gt; Int { return 5 } } extension ExampleClass: UIPickerViewDelegate { // several optional methods: // func pickerView(pickerView: UIPickerView!, widthForComponent component: Int) -&gt; CGFloat // func pickerView(pickerView: UIPickerView!, rowHeightForComponent component: Int) -&gt; CGFloat // func pickerView(pickerView: UIPickerView!, titleForRow row: Int, forComponent component: Int) -&gt; String! // func pickerView(pickerView: UIPickerView!, attributedTitleForRow row: Int, forComponent component: Int) -&gt; NSAttributedString! // func pickerView(pickerView: UIPickerView!, viewForRow row: Int, forComponent component: Int, reusingView view: UIView!) -&gt; UIView! // func pickerView(pickerView: UIPickerView!, didSelectRow row: Int, inComponent component: Int) } </code></pre>