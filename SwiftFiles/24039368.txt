Objective-C asking for alloc on swift class
<p>Some small steps to begin wrapping my head around Swift. I've basically ported an old class that simply finds the matching icon for a name and return the appropriate UIImage. The Swift part of things seems to be up and running, and looks (almost) like this:</p> <pre><code>@objc class ImageHandler{ func iconForData(data: MyData) -&gt; UIImage{ let imagesAndNames = [ "1": "tree.png", "2": "car.png", "3": "house.png", "7": "boat.png", ] var imageName: String? = imagesAndNames[data.imageName] if !imageName{ imageName = "placeholder.png" } let icon = UIImage(named: imageName) return icon } } </code></pre> <p>There are no warnings on the above. My old Objective-C class is however asking for an alloc method on the swift class. </p> <pre><code>ImageHandler *imageHandler = [ImageHandler alloc] init]; </code></pre> <p>Returns the error "No known class method for selector 'alloc' which is true enough I guess, but how do I escape this? Will I <em>have</em> to base my swift-class of NSObject to avoid this?</p>
<p>You declare your <code>ImageHandler</code> class as a root class. It doesn't have <code>alloc</code> method itself. You need to inherit from <code>NSObject</code>:</p> <pre><code>@objc class ImageHandler : NSObject { ... } </code></pre> <p>Referenced from <a href="https://devforums.apple.com/message/973806">this ADF thread</a>.</p>
<p>Just wanted to comment here that if you don't want to subclass <code>NSObject</code> or any other ObjC object, you can declare a class level initializer:</p> <pre><code>@objc class ImageHandler{ class func newInstance() -&gt; ImageHandler { return ImageHandler() } func iconForData(data: MyData) -&gt; UIImage{ let imagesAndNames = [ "1": "tree.png", "2": "car.png", "3": "house.png", "7": "boat.png", ] var imageName: String? = imagesAndNames[data.imageName] if !imageName{ imageName = "placeholder.png" } let icon = UIImage(named: imageName) return icon } } </code></pre> <p>Then in ObjC</p> <pre><code>ImageHandler * imageHandler = [ImageHandler newInstance]; </code></pre> <p>This way, you don't have to be dependent on ObjC Class inheritance unless you want to.</p>
<p>This answer is if you want to keep using pure swift objects, and do not want to inherit from NSObject. If you don't care about using pure swift objects then use akashivskyy's answer above.</p> <p>I came across this same issue. I took Logan's answer and modified it so that the Objective-C caller does not have to change behavior. This is especially important if you are doing like I am and building a framework that could be consumed by Objective-C or Swift projects.</p> <pre><code>@objc public class TestClass { public init(){} public class func alloc() -&gt; TestClass {return TestClass()} } </code></pre> <p>The Objective-C implementation gets to stay familiar.</p> <pre><code>TestClass *testClass = [[TestClass alloc] init]; </code></pre> <p>Swift implementation stays the same as well.</p> <pre><code>let testClass = TestClass() </code></pre> <p>Edit: Furthermore I went on to implement this into an class that can be subclassed by other pure swift objects.</p> <pre><code>@objc public class ObjectiveCCompatibleObject { required public init(){} public class func alloc() -&gt; Self {return self()} } </code></pre>
<p>You could do this:</p> <pre><code>ImageHandler *imageHandler = [[NSClassFromString(@"YourProjectName.ImageHandler") alloc] init]; </code></pre> <p>(or, if you had done <code>@objc(ImageHandler) class ImageHandler</code> in Swift, you would do <code>[[NSClassFromString(@"ImageHandler") alloc] init]</code>)</p> <hr> <p>Alternately, you can declare (but not implement) a dummy category containing the <code>alloc</code> method at the top of your Objective-C file:</p> <pre><code>@interface ImageHandler (Dummy) + (instancetype)alloc; @end </code></pre> <p>And then you can directly use it in your code:</p> <pre><code>ImageHandler *imageHandler = [[ImageHandler alloc] init]; </code></pre>
<p>If we want to import swift file in Objective C, Should do </p> <h1>import "productname-Swift.h" or use angular brackets &lt;></h1> <p>in Objective C file. Then can access alloc, init for specific imported swift class in Objective C.</p>