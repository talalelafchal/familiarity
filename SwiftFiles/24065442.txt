Why do I need to declare an optional value as nil explicitly in Struct - Swift
<p>Here's a quote from the docs:</p> <blockquote> <p>If your custom type has a stored property that is logically allowed to have “no value”—perhaps because its value cannot be set during initialization, or because it is allowed to have “no value” at some later point—declare the property with an optional type. Properties of optional type are automatically initialized with a value of nil, indicating that the property is deliberately intended to have “no value yet” during initialization.</p> </blockquote> <p>If I do this with a class it works fine:</p> <pre><code>class MyClass { var someProperty: String? } var myClass = MyClass() myClass.someProperty // Shows nil </code></pre> <p>However, if I do this with a struct type, I get an error on initialization:</p> <pre><code>struct MyStruct { var someProperty: String? } // ERROR var myStruct = MyStruct() </code></pre> <p>Error:</p> <blockquote> <p>Missing argument for parameter 'someProperty'</p> </blockquote> <p>I can remedy this by declaring it nil explicitly like so:</p> <pre><code>struct MyStruct { var someProperty: String? = nil } // Valid var myStruct = MyStruct() </code></pre> <h3> Question </h3> <p>Given the documentation, I would expect properties on any type that are set as optionals to be defaulted to nil. Is there a reason I have to declare it explicitly on a struct?</p> <p>Why?</p> <p>No good reason, like many of you, I'm just experimenting.</p>
<p>I think this is an deliberate difference between structs and classes, which makes a bit of sense. For example when you have a struct, say a 3d point with three floats for XYZ. It doesn't make much sense to have a nil value for x or y or z. With a class on the other hand this is a very important feature. If you think about a downloader class, for example, that goes and downloads a text file and stores it in a property. It makes more sense for that property to be nil when the class is first initialized. Since apple has changed structs to be much more closely related to classes I think this is an important distinction. It's my opinion that setting the optional explicitly to nil is a bug.</p> <hr> <p>My reasoning for this: </p> <p>In the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-XID_312" rel="nofollow">optional documentation</a> all of the example are on classes. </p>
<p>Both Classes and Structs need to have all property values set when they are initialized. This can be done either through explicit default values or by setting a value in the designated initializer.</p> <p>However, Structs differ in the fact that they have an automatically generated memberwise initializer.</p> <p>When you don't define a value for <code>someProperty</code> explicitly, your struct has one initializer only: the automatically generated memberwise one. </p> <p>If you do provide a default value, you get two: one that takes no arguments, and one that takes a value for <code>someProperty</code> as an argument</p> <p>From the docs:</p> <blockquote> <p>All structures have an automatically-generated memberwise initializer, which you can use to initialize the member properties of new structure instances. Initial values for the properties of the new instance can be passed to the memberwise initializer by name:</p> </blockquote> <pre><code>let vga = Resolution(width: 640, height: 480) </code></pre> <blockquote> <p>Unlike structures, class instances do not receive a default memberwise initializer. Initializers are described in more detail in Initialization.</p> </blockquote>
<p>I agree this is rather quirky (unless I'm also missing something). For structures with <strong>only</strong> optionals, it might be worth suggesting (via Apple bugreport) that in such cases, a default parameterless initialiser is also added by default?</p> <p>Another remedy is</p> <pre><code>var myStruct = MyStruct(someProperty:nil) </code></pre> <p>However, if you had a lot of optional members, this becomes clumbsy.</p>