isEqualToString in swift?
<p>I am trying to run the code below:</p> <pre><code>import UIKit class LoginViewController: UIViewController { @IBOutlet var username : UITextField = UITextField() @IBOutlet var password : UITextField = UITextField() @IBAction func loginButton(sender : AnyObject) { if username .isEqual("") || password.isEqual("")) { println("Sign in failed. Empty character") } } </code></pre> <p>My previous code was in objective C which was working fine:</p> <pre><code> if([[self.username text] isEqualToString: @""] || [[self.password text] isEqualToString: @""] ) { </code></pre> <p>I assume I cannot use isEqualToString in swift. Any help would be appreciated. Thank you.</p>
<p>In Swift, the == operator is equivalent to Objective C's isEqual: method (it calls the isEqual method instead of just comparing pointers, and there's a new === method for testing that the pointers are the same), so you can just write this as:</p> <pre><code>if username == "" || password == "" { println("Sign in failed. Empty character") } </code></pre>
<p>With Swift you don't need anymore to check the equality with <code>isEqualToString</code></p> <p>You can now use <code>==</code></p> <p>Example: </p> <pre><code>let x = "hello" let y = "hello" let isEqual = (x == y) </code></pre> <p>now isEqual is <code>true</code>.</p> <p>To check the <strike>equality</strike> identity (Thanks Bryan for the fix) between objects, use the new operator <code>===</code>. In this case, <code>x === y</code> is <code>false</code>, because x and y are not the same variable.</p>
<p>Use <strong>==</strong> operator instead of <code>isEqual</code></p> <h1>Comparing Strings</h1> <p>Swift provides three ways to compare String values: string equality, prefix equality, and suffix equality.</p> <p><strong>String Equality</strong></p> <p>Two String values are considered equal if they contain exactly the same characters in the same order:</p> <pre><code>let quotation = "We're a lot alike, you and I." let sameQuotation = "We're a lot alike, you and I." if quotation == sameQuotation { println("These two strings are considered equal") } // prints "These two strings are considered equal" . . . </code></pre> <p>For more read <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/StringsAndCharacters.html">official documentation of Swift <em>(search Comparing Strings)</em>.</a></p>
<p>I addition to <code>@JJSaccolo</code> answer, you can create custom <code>equals</code> method as new String extension like:</p> <pre><code>extension String { func isEqualToString(find: String) -&gt; Bool { return String(format: self) == find } } </code></pre> <p>And usage:</p> <pre><code>let a = "abc" let b = "abc" if a.isEqualToString(b) { println("Equals") } </code></pre> <p>For sure original operator <code>==</code> might be better (works like in Javascript) but for me <code>isEqual</code> method gives some code clearness that we compare Strings</p> <p>Hope it will help to someone,</p>
<p>In Swift the <code>isEmpty</code> function it will check if the string is empty.</p> <pre><code> if username.isEmpty || password.isEmpty { println("Sign in failed. Empty character") } </code></pre>
<p>Actually, it feels like swift is trying to promote strings to be treated less like objects and more like values. However this doesn't mean under the hood swift doesn't treat strings as objects, as am sure you all noticed that you can still invoke methods on strings and use their properties. </p> <p>For example:-</p> <pre><code>//example of calling method (String to Int conversion) let intValue = ("12".toInt()) println("This is a intValue now \(intValue)") //example of using properties (fetching uppercase value of string) let caUpperValue = "ca".uppercaseString println("This is the uppercase of ca \(caUpperValue)") </code></pre> <p>In objectC you could pass the reference to a string object through a variable, on top of calling methods on it, which pretty much establishes the fact that strings are pure objects. </p> <p>Here is the catch when you try to look at String as objects, in swift you cannot pass a string object by reference through a variable. Swift will always pass a brand new copy of the string. Hence, strings are more commonly known as value types in swift. In fact, two string literals will not be identical (===). They are treated as two different copies.</p> <pre><code>let curious = ("ca" === "ca") println("This will be false.. and the answer is..\(curious)") </code></pre> <p>As you can see we are starting to break aways from the conventional way of thinking of strings as objects and treating them more like values. Hence .isEqualToString which was treated as an identity operator for string objects is no more a valid as you can never get two identical string objects in Swift. You can only compare its value, or in other words check for equality(==).</p> <pre><code> let NotSoCuriousAnyMore = ("ca" == "ca") println("This will be true.. and the answer is..\(NotSoCuriousAnyMore)") </code></pre> <p>This gets more interesting when you look at the mutability of string objects in swift. But thats for another question, another day. Something you should probably look into, cause its really interesting. :) Hope that clears up some confusion. Cheers!</p>
<p>For the UITextField text comparison I am using below code and working fine for me, let me know if you find any error. </p> <pre><code>if(txtUsername.text.isEmpty || txtPassword.text.isEmpty) { //Do some stuff } else if(txtUsername.text == "****" &amp;&amp; txtPassword.text == "****") { //Do some stuff } </code></pre>