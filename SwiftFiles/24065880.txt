Swift Can't Import Sqlite3 iOS
<p>I added <code>libsqlite3.0.dylib</code> to my project, and then I tried to import using the following code:</p> <pre><code>import UIKit import sqlite3 class Dataware: NSObject { } </code></pre> <p>But it's giving me this error:</p> <p><strong>No Such Module 'sqlite3'</strong></p>
<p>Add it to your Bridging-Header.h file:</p> <pre><code>#import &lt;sqlite3.h&gt; </code></pre> <p>This is the primary mechanism for importing any C-language libraries.</p> <p>If you don't yet have a Bridging-Header.h file:</p> <ol> <li>Add a file Bridging-Header.h (or more typically (ProjectName)-Bridging-Header.h</li> <li>Go to the build settings tab for your project</li> <li>Find "Objective-C Bridging Header". The easiest way is to search for bridging.</li> <li>Enter the name and path for the file you created in step one. It's probably (ProjectName)/(ProjectName)-Bridging-Header.h</li> </ol>
<p>when one want to add sqlite to <strong>framework</strong> target, module.map is needed<br> since sqlite is not mapped, and to do so just:<br> 1. create file in your project 'module/module.map'<br> 2. create the module from the umbrella header:</p> <pre><code> module sqlite3 [system] { header "/Applications/Xcode6-Beta5.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.0.sdk/usr/include/sqlite3.h" link "sqlite3" export * } </code></pre> <p>*change the Xcode6-Beta5.app in the path to right one<br> 3. connect the map file to you project, search for 'import paths' in 'Build Settings'and put the full path to the module file</p>
<p>We need to import the header files for SQLite3 into the view controller so that the compiler can see the function and other definitions that make up the API. </p> <p>There is no way to directly import the header file into Swift code, because the SQLite3 library is not packaged as a module. </p> <p>The easiest way to deal with this is to add a bridging header to the project. Once you have a <strong>bridging header</strong>, you can add other header files to it, and those header files will be read by the Swift compiler. There are a couple of ways to add a bridging file. We’ll use the simpler of the two, which is to temporarily add an Objective-C class to the project. Let’s do that now.</p> <p><strong>File ➤ New ➤ File....</strong> In the iOS section of the dialog, choose <strong>Cocoa Touch Class</strong> and press Next. Name the class Temporary, make it a subclass of <strong>NSObject</strong>, change the language to Objective-C, and press <strong>Next</strong>. In the next screen, press the <strong>Create</strong> button. When you do this, Xcode will pop up a window asking whether you want to create a bridging header. Press <strong>Yes</strong>. Now, in the Project Navigator, you’ll see the files for the new class (<strong>Temporary.m</strong> and <strong>Temporary.h</strong>) and the bridging header, which is called SQLite <strong>Persistence-Bridging-Header.h</strong>. Delete the Temporary.m and Temporary.h files—you don’t need them anymore. Select the <strong>bridging header</strong> to open it in the editor, and then add the following line to it:</p> <p><strong>#import &lt; sqlite3.h></strong></p> <p>Now that the compiler can see the SQLite3 library and header files, we can write some more code in <strong>ViewController.swift</strong></p> <p>That's it!</p>