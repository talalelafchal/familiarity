Import Extension file in Swift
<p>I create an extension for UIView in Swift. Anyone knows how to import that file to my UIViewController?</p> <p>I want to import the extension file in the controller file, in that way I can reuse the extension file. For example an structure like this:</p> <p>UIViewExtension.swift</p> <pre><code>import UIKit extension UIView { var myVar : Float { get { return myVar } set (newMyVar) { myVar = newMyVar } } } </code></pre> <p>ViewController.swift</p> <pre><code>import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. var squareView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 200)) squareView.myVar = 50 self.view.addSubview(squareView) println("Offset: \(squareView.myVar)") } } </code></pre> <p>This is the error given by the compiler:</p> <p><code>Command /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift failed with exit code 254</code></p>
<p>After selecting the file in Xcode in the Project navigator on the left, make sure you check the app and test in the Target Membership section in the Inspector view on the right. </p> <p>If it is not checked then it won't be included in the project and hence you will get the compile error.</p> <p><img src="https://i.stack.imgur.com/uBoqv.png" alt="enter image description here"></p>
<p>There several things going on here.</p> <ol> <li>There is no need to import extensions as you have to for Objective-C, as everything in the same module is automatically available to you in Swift. This means that your extension is actually successfully visible to the compiler in your view controller.</li> <li><p>You can only add computed properties to an extension. This means that you do not actually have a myVar to assign to or read from. So when you access <code>myVar</code> you are actually recursing infinitely. That is actually what the warning is alluding to (albeit in vague way):</p> <pre><code>warning: attempting to access 'myVar' within its own getter return myVar ^ </code></pre></li> <li><p>As far as I know, there is no way to add non-computed properties to a type using an extension. This is also true of Objective-C where the only way to actually store a property added to a class using a class extension is to use Objective-C object association via <code>objc_getAssociatedObject</code> and <code>objc_setAssociatedObject</code> from <code>objc/runtime.h</code>.</p></li> <li><p>Finally there is definitely a bug in the compiler if your extension's computed property has a setter. The minimum working example to reproduce the bug, which does not include recursion (by eliminating the access to myVar) and just ignore the value is:</p> <pre><code>import UIKit extension UIView { var myVar : Float { get { return 0 } set { } } } </code></pre></li> </ol>
<p>I encountered this issue as well. It appears that it is a compiler bug. The compiler seems to crash if you have computed properties in a standalone extension file. The workaround I have found is to create the extension in non-standalone file. So in this case you could move your extension into your ViewController.swift file. Like so:</p> <pre><code>import UIKit extension UIView { var myVar : Float { get { return myVar } set (newMyVar) { myVar = newMyVar } } } class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. var squareView: UIView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 200)) squareView.myVar = 50 self.view.addSubview(squareView) println("Offset: \(squareView.myVar)") } } </code></pre>
<p>Using <strong>static</strong> in front of the property declaration seems to do the trick.</p> <pre><code>extension UIView { static var myVar : Float { get { return myVar } set (newMyVar) { myVar = newMyVar } } } </code></pre> <p>Hope it helps!</p>