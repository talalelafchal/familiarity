Cocoa Bindings and Checking for String content
<p>OK, here's what I want to do :</p> <ul> <li>Let's say I have an item, e.g. an <code>NSTextField</code></li> <li>Let's also say we want to bind its <code>hidden</code> value to a <code>BOOL</code> variable - that's easy.</li> </ul> <p>Now, here's the twist :</p> <ul> <li>I want to bind the <code>hidden</code> property to a check in the fashion of (<code>someStringVariable == "Some String"</code>)</li> <li>In a few words : set the element to hidden when <code>someStringVariable</code> is equal to some string.</li> </ul> <p>How can I do that from within the IB? Is it doable?</p>
<p>You mean someting like this?</p> <pre><code>string1=string2 ? hidden=true : hidden=false </code></pre>
<p>Well, this is basically a duplicate of <a href="https://stackoverflow.com/questions/26419637/bindings-and-conditionally-set-hidden">this question</a> which I <a href="https://stackoverflow.com/a/26420405/1312143">answered</a>. But somebody other than the questioner has put a bounty on this one, so:</p> <p>Entirely within IB? No.</p> <p>You can bind to a string-typed property and then use a custom value transformer to convert that string to a boolean according to its equality to the desired value.</p> <p>However, it's probably just easier to add a property to the class that has the string-typed property:</p> <pre><code>// Assumed to exist: @property (copy) NSString* someStringProperty; + (NSSet*) keyPathsForValuesAffectingShouldBeHidden { return [NSSet setWithObject:@"someStringProperty"]; } - (BOOL) shouldBeHidden { return [self.someStringProperty isEqualToString:@"desired string"]; } </code></pre> <p>Since this property is really part of the UI rather than the model, you may wish to define it in a category on the model class. The category itself would be declared and defined in the controller code.</p> <p>Once it's defined, you can bind to the <code>shouldBeHidden</code> property.</p>