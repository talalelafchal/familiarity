How Do I Take a Screen Shot of a UIView?
<p>I am wondering how my iPhone app can take a screen shot of a specific UIView as a UIImage.</p> <p>I tried this code but all I get is a blank image.</p> <pre><code>UIGraphicsBeginImageContext(CGSizeMake(320,480)); CGContextRef context = UIGraphicsGetCurrentContext(); [myUIView.layer drawInContext:context]; UIImage *screenShot = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); </code></pre> <p><code>myUIView</code> has dimensions 320x480 an it has some sub-views. What is the correct way to do this?</p>
<pre><code>CGImageRef UIGetScreenImage(); </code></pre> <p>Apple now allows us to use it in a public application, even though it's a private API</p>
<p>I think you may want <code>renderInContext</code>, not <code>drawInContext</code>. drawInContext is more a method you would override...</p> <p>Note that it may not work in all views, specifically a year or so ago when I tried to use this with the live camera view it did not work.</p>
<pre><code>- (void)drawRect:(CGRect)rect { UIGraphicsBeginImageContext(self.bounds.size); [self.view.layer renderInContext:UIGraphicsGetCurrentContext()]; UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); UIImageWriteToSavedPhotosAlbum(viewImage, nil, nil, nil); } </code></pre> <p>This method may put in your Controller class.</p>
<p>Apple does not allow:</p> <blockquote> <p><code>CGImageRef UIGetScreenImage();</code></p> </blockquote> <p>Applications should take a screenshot using the <code>drawRect</code> method as specified in: <a href="http://developer.apple.com/library/ios/#qa/qa2010/qa1703.html" rel="nofollow">http://developer.apple.com/library/ios/#qa/qa2010/qa1703.html</a></p>
<p>You need to capture the <strong>key window</strong> for a screenshot or a UIView. You can do it in <strong>Retina Resolution</strong> using UIGraphicsBeginImageContextWithOptions and set its scale parameter 0.0f. It always captures in native resolution (retina for iPhone 4 and later).</p> <p>This one does a full screen screenshot (key window)</p> <pre><code>UIWindow *keyWindow = [[UIApplication sharedApplication] keyWindow]; CGRect rect = [keyWindow bounds]; UIGraphicsBeginImageContextWithOptions(rect.size,YES,0.0f); CGContextRef context = UIGraphicsGetCurrentContext(); [keyWindow.layer renderInContext:context]; UIImage *capturedScreen = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); </code></pre> <p>This code capture a UIView in native resolution</p> <pre><code>CGRect rect = [captureView bounds]; UIGraphicsBeginImageContextWithOptions(rect.size,YES,0.0f); CGContextRef context = UIGraphicsGetCurrentContext(); [captureView.layer renderInContext:context]; UIImage *capturedImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); </code></pre> <p>This saves the UIImage in jpg format with 95% quality in the app's document folder if you need to do that.</p> <pre><code>NSString *imagePath = [NSHomeDirectory() stringByAppendingPathComponent:[NSString stringWithFormat:@"Documents/capturedImage.jpg"]]; [UIImageJPEGRepresentation(capturedImage, 0.95) writeToFile:imagePath atomically:YES]; </code></pre>
<p>iOS 7 has a new method that allows you to draw a view hierarchy into the current graphics context. This can be used to get an UIImage very fast. </p> <p>I implemented a category method on <code>UIView</code> to get the view as an <code>UIImage</code>:</p> <pre><code>- (UIImage *)pb_takeSnapshot { UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale); [self drawViewHierarchyInRect:self.bounds afterScreenUpdates:YES]; // old style [self.layer renderInContext:UIGraphicsGetCurrentContext()]; UIImage *image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return image; } </code></pre> <p>It is considerably faster then the existing <code>renderInContext:</code> method.</p> <p>Reference : <a href="https://developer.apple.com/library/ios/qa/qa1817/_index.html" rel="nofollow noreferrer">https://developer.apple.com/library/ios/qa/qa1817/_index.html</a></p> <p><strong>UPDATE FOR SWIFT</strong>: An extension that does the same:</p> <pre><code>extension UIView { func pb_takeSnapshot() -&gt; UIImage { UIGraphicsBeginImageContextWithOptions(bounds.size, false, UIScreen.mainScreen().scale) drawViewHierarchyInRect(self.bounds, afterScreenUpdates: true) // old style: layer.renderInContext(UIGraphicsGetCurrentContext()) let image = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() return image } } </code></pre> <p><strong>UPDATE FOR SWIFT 3</strong></p> <pre><code> UIGraphicsBeginImageContextWithOptions(bounds.size, false, UIScreen.main.scale) drawHierarchy(in: self.bounds, afterScreenUpdates: true) let image = UIGraphicsGetImageFromCurrentImageContext()! UIGraphicsEndImageContext() return image </code></pre>
<p>iOS7 onwards, we have below default methods :</p> <pre><code>- (UIView *)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates </code></pre> <p>Calling above method is faster than trying to render the contents of the current view into a bitmap image yourself.</p> <p>If you want to apply a graphical effect, such as blur, to a snapshot, use the <code>drawViewHierarchyInRect:afterScreenUpdates:</code> method instead.</p> <p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/uiview/uiview.html">https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/uiview/uiview.html</a></p>
<pre><code>-(UIImage *)convertViewToImage { UIGraphicsBeginImageContext(self.bounds.size); [self drawViewHierarchyInRect:self.bounds afterScreenUpdates:YES]; UIImage *image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return image; } </code></pre>
<p>The following snippet is used to take screenshot :</p> <pre><code>UIGraphicsBeginImageContext(self.muUIView.bounds.size); [myUIView.layer renderInContext:UIGraphicsGetCurrentContext()]; UIImage *screenShot = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); </code></pre> <p><strong>Use <code>renderInContext:</code> method instead of <code>drawInContext:</code> method</strong></p> <p><code>renderInContext:</code> method renders the receiver and its sublayers into current context. This method renders directly from the layer tree. </p>
<p>I have created usable extension for UIView to take screenshot in Swift:</p> <pre><code>extension UIView{ var screenshot: UIImage{ UIGraphicsBeginImageContext(self.bounds.size); let context = UIGraphicsGetCurrentContext(); self.layer.renderInContext(context) let screenShot = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return screenShot } } </code></pre> <p>To use it just type:</p> <pre><code>let screenshot = view.screenshot </code></pre>
<p>To capture with a button:</p> <p>We create a button and we link the code, within the button, we have a method to save the captured image:</p> <pre><code>- (IBAction)save:(UIButton *)sender { UIImageWriteToSavedPhotosAlbum([self captureView:self.view], nil, nil, nil); } </code></pre> <p>This is the method for making the screenshot:</p> <pre><code>- (UIImage*)captureView:(UIView *)view { CGRect rect = [[UIScreen mainScreen] bounds]; UIGraphicsBeginImageContext(rect.size); CGContextRef context = UIGraphicsGetCurrentContext(); [view.layer renderInContext:context]; UIImage *img = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return img; } </code></pre>
<p>I created this <strong>extension for save a screen shot</strong> from UIView</p> <pre><code>extension UIView { func saveImageFromView(path path:String) { UIGraphicsBeginImageContextWithOptions(bounds.size, false, UIScreen.mainScreen().scale) drawViewHierarchyInRect(bounds, afterScreenUpdates: true) let image = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() UIImageJPEGRepresentation(image, 0.4)?.writeToFile(path, atomically: true) }} </code></pre> <p><strong>call</strong>:</p> <pre><code>let pathDocuments = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true).first! let pathImage = "\(pathDocuments)/\(user!.usuarioID.integerValue).jpg" reportView.saveImageFromView(path: pathImage) </code></pre> <p>If you want to create a png must change:</p> <pre><code>UIImageJPEGRepresentation(image, 0.4)?.writeToFile(path, atomically: true) </code></pre> <p>by</p> <pre><code>UIImagePNGRepresentation(image)?.writeToFile(path, atomically: true) </code></pre>
<p>you can use following UIView category - </p> <pre><code>@implementation UIView (SnapShot) - (UIImage *)snapshotImage { UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale); [self drawViewHierarchyInRect:self.bounds afterScreenUpdates:NO]; // old style [self.layer renderInContext:UIGraphicsGetCurrentContext()]; UIImage *image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return image; } @end </code></pre>