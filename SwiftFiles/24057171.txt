What the meaning of question mark '?' in swift?
<p>In swift programming i found some question marks with objects.</p> <pre><code>var window: UIWindow? </code></pre> <p>Can anybody will explain the use of it?</p>
<p>Question marks after a type refer to <code>Optionals</code>, a way in Swift which lets you indicate the possibility that a value might be absent for any type at all, without the need for special constants. </p> <p>It's used in the same situations you'd explicitly <code>return nil</code> in Objective-C, when there is no object to be returned, or for values that are not objects, constants such as <code>NSNotFound</code>. Optionals provide a consistent way of achieving this across all data types.</p> <p>From the Apple provided iBook</p> <blockquote> <p>You use optionals in situations where a value may be absent. An optional says:</p> <ul> <li>There is a value, and it equals x</li> </ul> <p>or</p> <ul> <li>There isn’t a value at all</li> </ul> <p>Here’s an example. Swift’s String type has a method called toInt, which tries to convert a String value into an Int value. However, not every string can be converted into an integer. The string "123" can be converted into the numeric value 123, but the string "hello, world" does not have an obvious numeric value to convert to.</p> </blockquote> <pre><code>let possibleNumber = "123" let convertedNumber = possibleNumber.toInt() // convertedNumber is inferred to be of type "Int?", or "optional Int" </code></pre> <blockquote> <p>Because the toInt method might fail, it returns an optional Int, rather than an Int. An optional Int is written as Int?, not Int. The question mark indicates that the value it contains is optional, meaning that it might contain some Int value, or it might contain no value at all. (It can’t contain anything else, such as a Bool value or a String value. It’s either an Int, or it’s nothing at all.)</p> </blockquote> <p>There is a whole section on the language reference iBook on Optionals, and they are mentioned several times throughout the book. You should have a thorough look at it, since it's a fundamental concept of Swift programming, and one that is not prevalent in many other languages.</p>
<p>the optional Value of the type .</p> <p>For Ex : the optional version of the type casting operator : <code>as?</code> ,mean <code>as</code> use for the type casting with might be optional to cast . </p>
<blockquote> <p>You can use <code>if</code> and <code>let</code> together to work with values that might be missing. These values are represented as <code>optionals</code>. An <code>optional</code> value either contains a value or contains <code>nil</code> to indicate that the value is missing. Write a question mark (?) after the type of a value to mark the value as <code>optional</code>.</p> <p>If the optional value is <code>nil</code>, the conditional is <code>false</code> and the code in braces is skipped. Otherwise, the optional value is unwrapped and assigned to the constant after <code>let</code>, which makes the unwrapped value available inside the block of code.</p> </blockquote> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/pk/jEUH0.l">https://itun.es/pk/jEUH0.l</a></p> <p>For Example:</p> <pre><code>var optionalString: String? = "Hello" optionalString == nil var optionalName: String? = "John Appleseed" var greeting = "Hello!" if let name = optionalName { greeting = "Hello, \(name)" } </code></pre> <p>In this code, the output would be <code>Hello! John Appleseed</code>. And if we set the value of <code>optionalName</code> as <code>nil</code>. The <code>if</code> conditional result would be <code>false</code> and code inside that <code>if</code> would get skipped.</p>