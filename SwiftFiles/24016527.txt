Strong and weak references in Swift
<p>In Objective C you can define a property as having a strong or weak reference like so:</p> <pre><code>@property(strong)... @property(weak)... </code></pre> <p>How is this done in swift?</p>
<p>Properties are strong by default, but if you want a weak property you can:</p> <pre><code> weak var tenant: Person? </code></pre> <p>Source: <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html">https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html</a></p>
<p>A var is strong by default. You can add the weak keyword before a var to make it weak.</p>
<p>Straight from the <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-ID48">Swift Language guide</a>:</p> <pre><code>class Person { let name: String init(name: String) { self.name = name } var apartment: Apartment? deinit { println("\(name) is being deinitialized") } } class Apartment { let number: Int init(number: Int) { self.number = number } weak var tenant: Person? deinit { println("Apartment #\(number) is being deinitialized") } } </code></pre> <p>properties are strong by default. But look at the tenant property of the class "Apartment", it is declared as weak. You can also use the unowned keyword, which translates to unsafe_unretained from Objective-C</p> <p><a href="https://itunes.apple.com/tr/book/swift-programming-language/id881256329?mt=11">https://itunes.apple.com/tr/book/swift-programming-language/id881256329?mt=11</a></p>
<p>Just wanted you to know that a var is strong by default but by adding "weak" in front of it you make it weak. In case you missed it </p>