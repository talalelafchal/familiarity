Swift Objective-C runtime class naming
<p>I've noticed that a Swift Class is renamed in objective-c runtime. So if I had a class in swift named <code>ViewController</code> and the name of my app was <code>TestRuntime</code> when I perform <code>object_getClass(self)</code>, <em>self</em> being <code>ViewController</code>, I would get this: <code>_TtC11TestRuntime14ViewController</code>. I've noticed this pattern or format: <code>_TtC$$AppName$$ClassName</code>, <strong>$</strong> being a random number. I can't figure out where these numbers are coming from. If someone could shed some light on how swift names its classes in the runtime that would really help me.</p>
<p>They're not random. They're the length of the following value. This is similar to common C++ name mangling and supports identifiers that may have fairly arbitrary characters in them without needing some new separator character. It also can make them easier to parse, especially in C.</p> <p>In this particular case, it's <code>_TtC</code> then "an eleven character module name" then the module name and then "a fourteen character class name" and the class name. I assume <code>C</code> is class. Not sure about <code>Tt</code> (maybe "type").</p>
<p>The description is build up in the following 3 sections</p> <ol> <li>The description starts with _Tt which stands for target (bundle / app name)</li> <li>After that you will have one or more letters like C P F which stands for Class, Protocol or Function. These are in reverse order according to the nesting</li> <li>Then you will get series of numbers plus a name where the number is the length of the name. each of these are for the target, Class, Protocol or Function as specified in the beginning of the description.</li> </ol> <p>Functions are a special case here. The description will also has some information about the function signature.</p> <p>For example you could have a _TtCFCC5MyApp7MyClass10MySubClass6myFuncFS0_FT_T_L_11MySubSubClass</p> <p>This would be the description of the MySubSubClass in the following code:</p> <pre><code>class MyClass { class MySubClass { func myFunc() { class MySubSubClass { } } } } </code></pre> <p>Here you can find some <a href="https://github.com/evermeer/EVReflection/blob/68edace301602dd43181075c604a1f987185be3f/EVReflection/pod/EVObjectDescription.swift#L14-14" rel="nofollow">sample code</a> that will parse that description into easy to use properties and arrays.</p> <p>Update: Demangle is now converted to swift. You can find it here: <a href="https://github.com/mattgallagher/CwlDemangle/blob/master/CwlDemangle/CwlDemangle.swift" rel="nofollow">https://github.com/mattgallagher/CwlDemangle/blob/master/CwlDemangle/CwlDemangle.swift</a></p>