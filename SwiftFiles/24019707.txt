Using isKindOfClass with Swift
<p>I'm trying to pick up a bit of Swift lang and I'm wondering how to convert the following Objective-C into Swift:</p> <pre><code>- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { [super touchesBegan:touches withEvent:event]; UITouch *touch = [touches anyObject]; if ([touch.view isKindOfClass: UIPickerView.class]) { //your touch was in a uipickerview ... do whatever you have to do } } </code></pre> <p>More specifically I need to know how to use <code>isKindOfClass</code> in the new syntax.</p> <pre><code>override func touchesBegan(touches: NSSet, withEvent event: UIEvent) { ??? if ??? { // your touch was in a uipickerview ... } } </code></pre>
<pre><code>override func touchesBegan(touches: NSSet, withEvent event: UIEvent) { super.touchesBegan(touches, withEvent: event) let touch : UITouch = touches.anyObject() as UITouch if touch.view.isKindOfClass(UIPickerView) { } } </code></pre> <p><strong>Edit</strong></p> <p>As pointed out in <a href="http://stackoverflow.com/questions/24019707/using-iskindofclass-with-swift#24020124">@Kevin's answer</a>, the correct way would be to use optional type cast operator <code>as?</code>. You can read more about it on the section <code>Optional Chaining</code> sub section <code>Downcasting</code>.</p> <p><strong>Edit 2</strong></p> <p>As pointed on the <a href="http://stackoverflow.com/questions/24019707/using-iskindofclass-with-swift#24220444">other answer by user @KPM</a>, using the <code>is</code> operator is the right way to do it.</p>
<p>You can combine the check and cast into one statement:</p> <pre><code>let touch = object.anyObject() as UITouch if let picker = touch.view as? UIPickerView { ... } </code></pre> <p>Then you can use <code>picker</code> within the <code>if</code> block.</p>
<p>The proper Swift operator is <code>is</code>: </p> <pre><code>if touch.view is UIPickerView { // touch.view is of type UIPickerView } </code></pre> <p>Of course, if you also need to assign the view to a new constant, then the <code>if let ... as? ...</code> syntax is your boy, as Kevin mentioned. But if you don't need the value and only need to check the type, then you should use the <code>is</code> operator. </p>
<p>Another approach using the new Swift 2 syntax is to use guard and nest it all in one conditional.</p> <pre><code>guard let touch = object.AnyObject() as? UITouch, let picker = touch.view as? UIPickerView else { return //Do Nothing } //Do something with picker </code></pre>
<p>I would use:</p> <pre><code>override func touchesBegan(touches: NSSet, withEvent event: UIEvent) { super.touchesBegan(touches, withEvent: event) let touch : UITouch = touches.anyObject() as UITouch if let touchView = touch.view as? UIPickerView { } } </code></pre>