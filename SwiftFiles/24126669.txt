Using SceneKit in Swift Playground
<p>I've looked everywhere for this but I'm coming up blank. How do you replicate what Chris Lattner was demonstrating with Playgrounds and SceneKit at WWDC? I want to have a SceneKit scene, animating, in Playgrounds.</p> <p>I tried cutting and pasting the setup code from the SceneKit project template, thinking it would magically start rendering, but it does not.</p> <p>I tried watching the keynote and pausing and zooming on on Lattner's screen looking for hints at the source code, but he appeared to be importing all his code from elsewhere in his project, so it gave me no clues. There does not seem to be anything in the documentation, or I'm missing it.</p>
<p>Expanding on Moshe's response.</p> <p>If that keyboard combination doesn't work for you, try going to the the menu bar and select View > Assistant Editor > Show Assistant.</p>
<p>Since Swift doesn't have source compatibility between versions, the code in this answer might not work in either future or previous versions of Swift. Currently is has been updated to work in Xcode 7.0 Playgrounds with Swift 2.0. </p> <hr> <p>The <code>XCPlayground</code> framework is what you need, and <a href="https://developer.apple.com/library/prerelease/ios/recipes/xcode_help-source_editor/ExploringandEvaluatingSwiftCodeinaPlayground/ExploringandEvaluatingSwiftCodeinaPlayground.html" rel="nofollow noreferrer">it is documented here</a>.</p> <p>Here is a very simple scene to get you started with Scene Kit in Swift:</p> <pre><code>import Cocoa // (or UIKit for iOS) import SceneKit import QuartzCore // for the basic animation import XCPlayground // for the live preview // create a scene view with an empty scene var sceneView = SCNView(frame: CGRect(x: 0, y: 0, width: 300, height: 300)) var scene = SCNScene() sceneView.scene = scene // start a live preview of that view XCPShowView("The Scene View", view: sceneView) // default lighting sceneView.autoenablesDefaultLighting = true // a camera var cameraNode = SCNNode() cameraNode.camera = SCNCamera() cameraNode.position = SCNVector3(x: 0, y: 0, z: 3) scene.rootNode.addChildNode(cameraNode) // a geometry object var torus = SCNTorus(ringRadius: 1, pipeRadius: 0.35) var torusNode = SCNNode(geometry: torus) scene.rootNode.addChildNode(torusNode) // configure the geometry object torus.firstMaterial?.diffuse.contents = NSColor.redColor() // (or UIColor on iOS) torus.firstMaterial?.specular.contents = NSColor.whiteColor() // (or UIColor on iOS) // set a rotation axis (no angle) to be able to // use a nicer keypath below and avoid needing // to wrap it in an NSValue torusNode.rotation = SCNVector4(x: 1.0, y: 1.0, z: 0.0, w: 0.0) // animate the rotation of the torus var spin = CABasicAnimation(keyPath: "rotation.w") // only animate the angle spin.toValue = 2.0*M_PI spin.duration = 3 spin.repeatCount = HUGE // for infinity torusNode.addAnimation(spin, forKey: "spin around") </code></pre> <p>When I run it, it looks like this:</p> <p><img src="https://i.stack.imgur.com/oJiuq.png" alt="enter image description here"></p> <hr> <p>Note that to run Scene Kit in an <em>iOS</em> playground, you need to check the "Run in Full Simulator" checkbox.</p> <p><img src="https://i.stack.imgur.com/adJ4u.png" alt="enter image description here"></p> <p>You find the Playground Setting in the Utilities Pane (<kbd>⌥</kbd><kbd>⌘</kbd><kbd>0</kbd> to hide or show)</p>
<p>If the playground is complaining with 'int is not convertible to CGFloat' then you can use this line of code: </p> <pre><code>spin.toValue = NSValue(SCNVector4: SCNVector4(x: 1, y: 1, z: 0, w: CGFloat(2.0*M_PI))) </code></pre> <p>Implicit typecasts seem not to be defined in swift.</p>
<p>To get the playground running with iOS as target, and using the latest Xcode 8.1, I got it working with the following modifications to David Rönnqvist's original code.</p> <pre><code>import UIKit import SceneKit import QuartzCore // for the basic animation import PlaygroundSupport // create a scene view with an empty scene var sceneView = SCNView(frame: CGRect(x: 0, y: 0, width: 300, height: 300)) var scene = SCNScene() sceneView.scene = scene PlaygroundPage.current.liveView = sceneView // default lighting sceneView.autoenablesDefaultLighting = true // a camera var cameraNode = SCNNode() cameraNode.camera = SCNCamera() cameraNode.position = SCNVector3(x: 0, y: 0, z: 3) scene.rootNode.addChildNode(cameraNode) // a geometry object var torus = SCNTorus(ringRadius: 1, pipeRadius: 0.35) var torusNode = SCNNode(geometry: torus) scene.rootNode.addChildNode(torusNode) // configure the geometry object torus.firstMaterial?.diffuse.contents = UIColor.red torus.firstMaterial?.specular.contents = UIColor.white // set a rotation axis (no angle) to be able to // use a nicer keypath below and avoid needing // to wrap it in an NSValue torusNode.rotation = SCNVector4(x: 1.0, y: 1.0, z: 0.0, w: 0.0) // animate the rotation of the torus var spin = CABasicAnimation(keyPath: "rotation.w") // only animate the angle spin.toValue = 2.0*M_PI spin.duration = 3 spin.repeatCount = HUGE // for infinity torusNode.addAnimation(spin, forKey: "spin around") </code></pre> <p>The main things you have to do different are: </p> <ul> <li>to assign to the playground's <code>liveView</code> and,</li> <li>also open up Xcode's Assistant Editor (The two intersecting circles icon on the toolbar)</li> </ul>