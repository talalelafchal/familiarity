#pragma mark in Swift?
<p>In Objective C, I can use <code>#pragma mark</code> to mark sections of my code in the symbol navigator. Since this is a C preprocessor command, it's not available in Swift. Is there a stand-in for this in Swift, or do I have to use ugly comments?</p>
<p>In Objective-C code Xcode detects comments like <code>// MARK: - foo</code> which is a bit more portable than <code>#pragma</code>. But these do not seem to be picked up, too (yet?).</p> <p>Edit: Fixed in Xcode 6 beta 4.</p>
<p>Apple states in the latest version of <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/BuildingCocoaApps.pdf" rel="nofollow"><em>Building Cocoa Apps</em></a>, </p> <blockquote> <p>The Swift compiler does not include a preprocessor. Instead, it takes advantage of compile-time attributes, build configurations, and language features to accomplish the same functionality. For this reason, preprocessor directives are not imported in Swift.</p> </blockquote> <p>The # character appears to still be how you work with various build configurations and things like that, but it looks like they're trying to cut back on your need for most preprocessing in the vein of pragma and forward you to other language features altogether. Perhaps this is to aid in the operation of the Playgrounds and the REPL behaving as close as possible to the fully compiled code.</p>
<p>You can use <code>// MARK:</code></p> <hr> <p><strong>Historical, Prior to Xcode 6 Beta 4</strong></p> <p>Just talked to an Engineer here at WWDC, and the current beta of Xcode doesn't implement the </p> <p><code>// MARK:</code> </p> <p>style yet, but I'm told future versions will. </p> <p>It was also suggested that making liberal use of class extensions might be a better practice anyway. Since extensions can implement protocols, you can e.g. put all of your table view delegate methods in an extension and group your code at a more semantic level than <code>#pragma mark</code> is capable of. </p>
<p>For those who are interested in using extensions vs pragma marks (as mentioned in the first comment), here is how to implement it from a Swift Engineer: </p> <pre><code>import UIKit class SwiftTableViewController: UITableViewController { init(coder aDecoder: NSCoder!) { super.init(coder: aDecoder) } override func viewDidLoad() { super.viewDidLoad() } } extension SwiftTableViewController { override func numberOfSectionsInTableView(tableView: UITableView?) -&gt; Int { return 1 } override func tableView(tableView: UITableView?, numberOfRowsInSection section: Int) -&gt; Int { return 5 } override func tableView(tableView: UITableView?, cellForRowAtIndexPath indexPath: NSIndexPath?) -&gt; UITableViewCell? { let cell = tableView?.dequeueReusableCellWithIdentifier("myCell", forIndexPath: indexPath) as UITableViewCell; cell.textLabel.text = "Hello World" return cell } } </code></pre> <p>It's also not necessarily the best practice, but this is how you do it if you like. </p>
<p>Confirmed with an Apple Engineer in the Swift lab this morning at WWDC that there currently aren't any #pragma or equivalent at the moment, they consider this a bug, and it will arrive soon, so I am guessing beta 2, I hope.</p> <p>Anyway, it's on it's way. </p> <hr> <p>Xcode now supports //MARK:, //TODO: and //FIXME landmarks to annotate your code and lists them in the jump bar</p>
<p>I think <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html#//apple_ref/doc/uid/TP40014097-CH24-XID_189"><code>Extensions</code></a> is a better way instead of <code>#pragma mark</code>.</p> <p>The Code before using <code>Extensions</code>:</p> <pre><code>class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate { ... func collectionView(collectionView: UICollectionView!, numberOfItemsInSection section: Int) -&gt; Int { ... } func collectionView(collectionView: UICollectionView!, cellForItemAtIndexPath indexPath: NSIndexPath!) -&gt; UICollectionViewCell! { ... } func collectionView(collectionView: UICollectionView!, didSelectItemAtIndexPath indexPath: NSIndexPath!) { ... } } </code></pre> <p>The code after using <code>Extensions</code>:</p> <pre><code>class ViewController: UIViewController { ... } extension ViewController: UICollectionViewDataSource { func collectionView(collectionView: UICollectionView!, numberOfItemsInSection section: Int) -&gt; Int { ... } func collectionView(collectionView: UICollectionView!, cellForItemAtIndexPath indexPath: NSIndexPath!) -&gt; UICollectionViewCell! { ... } } extension ViewController: UICollectionViewDelegate { func collectionView(collectionView: UICollectionView!, didSelectItemAtIndexPath indexPath: NSIndexPath!) { ... } } </code></pre>
<p>Up to Xcode 5 the preprocessor directive <code>#pragma mark</code> existed.</p> <p>From Xcode 6 on, you have to use <code>// MARK:</code></p> <p>These preprocessor features allow to bring some structure to the function drop down box of the source code editor.</p> <p>some examples :</p> <pre><code>// MARK: </code></pre> <p>-> will be preceded by a horizontal divider</p> <pre><code>// MARK: your text goes here </code></pre> <p>-> puts 'your text goes here' in bold in the drop down list</p> <pre><code>// MARK: - your text goes here </code></pre> <p>-> puts 'your text goes here' in bold in the drop down list, preceded by a horizontal divider</p> <p>update : added screenshot 'cause some people still seem to have issues with this :</p> <p><img src="https://i.stack.imgur.com/w27aK.png" alt="enter image description here"></p>
<p><code>//MARK:</code> does not <strong><em>seem</em></strong> to work for me in Xcode 6.3.2. However, this is what I did to <strong><em>get it to work</em></strong>:</p> <p>1) Code:</p> <pre><code>import Cocoa class MainWindowController: NSWindowController { //MARK: - My cool methods func fly() { } func turnInvisible() { } } </code></pre> <p>2) In the <code>jump bar</code> nothing appears to change when adding the <code>//MARK</code>: comment. However, if I click on the rightmost name in the jump bar, in my case it says <code>MainWindowController(with a leading C icon)</code>, then a popup window will display showing the effects of the //MARK: comment, namely a heading that says "My cool methods":</p> <p><img src="https://i.stack.imgur.com/os9sk.jpg" alt="enter image description here"></p> <p>3) I also notice that if I click on one of the methods in my code, then the method becomes the rightmost entry in the jump bar. In order to get <code>MainWindowController(with a leading C icon)</code> to be the rightmost entry in the jump bar, I have to click on the whitespace above my methods.</p>
<p><code>Pragma mark - [SOME TEXT HERE]</code> was used in <em>Objective-C to group several function together</em> by line separating.</p> <p>In <em>Swift</em> you can achieve this using <code>MARK, TODO OR FIXME</code></p> <p>i. <em>MARK :</em> <code>//MARK: viewDidLoad</code> </p> <p>This will create a <em>horizontal line</em> with functions grouped under viewDidLoad(shown in screenshot 1)</p> <p><a href="https://i.stack.imgur.com/etMuG.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/etMuG.png" alt="Screenshot 1"></a></p> <p>ii. <em>TODO :</em> <code>//TODO: - viewDidLoad</code></p> <p>This will group function under <em>TODO: - viewDidLoad</em> category (shown in screenshot 2)</p> <p><a href="https://i.stack.imgur.com/ltmSl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ltmSl.png" alt="Screenshot 2"></a></p> <p>iii. <em>FIXME :</em> <code>//FIXME - viewDidLoad</code> </p> <p>This will group function under <em>FIXME: - viewDidLoad</em> category (shown in screenshot 3)</p> <p><a href="https://i.stack.imgur.com/1oLFC.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/1oLFC.png" alt="Screenshot 3"></a></p>
<pre><code>//# MARK: - Spinner Class Methods </code></pre> <p>Add a line between the colon and your description to insert a separator line. This helps to organize your code even more. The code and screenshot above make use of the MARK comment with a line included.</p> <ol> <li>//# MARK: â€“ Text Methods (LINE) </li> <li>//# MARK: Text Methods (NO LINE)</li> </ol> <p>This only works with the MARK comment.</p> <p><a href="https://i.stack.imgur.com/k6qsi.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/k6qsi.png" alt="enter image description here"></a></p>
<p>Xcode 8 now handles it as followed and shows up like this in the method dropdown:</p> <p><a href="https://i.stack.imgur.com/nnCOM.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/nnCOM.jpg" alt="enter image description here"></a></p>
<p>Use</p> <pre><code>//MARK: SectionName </code></pre> <p>or</p> <pre><code>//MARK: - SectionName </code></pre> <p>This will give a line above pragma mark, making it more readable.</p> <p>For ease just add </p> <pre><code>//MARK: - &lt;#label#&gt; </code></pre> <p>to your code snippets.</p>