Syntax of Block in Swift
<p>I am trying to rewrite from objective C - to Swift, I cannot work out the syntax or understand the docs</p> <p>Here is a simplified example in Objective C I write</p> <pre><code>[UIView animateWithDuration:10.0 animations:^{self.navigationController.toolbar.frame = CGRectMake(0,10,0,10);}]; </code></pre> <p>How do I write this in Swift - This is the template autocomplete gives</p> <pre><code>UIView.animateWithDuration(duration: NSTimeInterval, animations: (() -&gt; Void)) </code></pre>
<p>Since the expected argument types and return type to the animations argument are known the compiler can infer them without a problem. This should work (though I don't have the playground available right at the moment:</p> <pre><code>UIView.animateWithDuration(10.0, animations: { self.navigationController.toolbar.frame = CGRect(x:0.0, y:10.0, width:10.0, height:0.0) }) </code></pre> <p>for more info about closures see the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html">chapter in the swift docs</a></p> <p>note about <code>CGRect()</code> - the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/interactingwithobjective-capis.html">developer docs</a> show <code>CGRect()</code> being used in swift code. Perhaps it requires an import?</p> <p>update for comments: you can also use a trailing closure like so:</p> <pre><code>UIView.animateWithDuration(10.0) { self.navigationController.toolbar.frame = CGRect(x:0.0, y:10.0, width:10.0, height:0.0) } </code></pre>
<p>This is the swift closure format:</p> <pre><code>{(parameter:type, parameter: type, ...) -&gt; returntype in //do stuff } </code></pre> <p>This is what you should do:</p> <pre><code>//The animation closure will take no parameters and return void (nothing). UIView.animateWithDuration(duration: NSTimeInterval, animations: {() -&gt; Void in //Animate anything. }) </code></pre> <p>Here is the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-XID_117" rel="nofollow">documentation</a> for closures.</p>
<p>Following code can guide to write your own block.</p> <pre><code>class func testFunc(completion: ((list : NSArray!) -&gt; Void)?) { //--- block code. if completion! != nil { completion! (list: NSArray()) } } </code></pre> <p>and you can call it like - </p> <pre><code>className.testFunc { (list: NSArray!) -&gt; Void in } </code></pre>
<p>You can basically write it in 3 identical ways:</p> <p>write what to do right in the closure/code block: </p> <pre><code>UIView.animateWithDuration(10.0) { self.navigationController.toolbar.frame = CGRect(x:0.0, y:10.0, width:10.0, height:0.0) } </code></pre> <p>This is also known as <strong>trailing closure</strong> ( You can only do trailing closure if the closure parameter is the <em>last</em> parameter)</p> <p>This doesn't mean the parameter 'animations' is no longer written. It is written but just as in the format of above. </p> <hr> <p>write exactly within the lines, most devs avoid such, because it makes the intent clear and is a little buggy to write with all the parenthesis and braces.</p> <pre><code>UIView.animateWithDuration(10.0, animations: { self.navigationController.toolbar.frame = CGRect(x:0.0, y:10.0, width:10.0, height:0.0) }) </code></pre> <p>(Contrary to trailing closure you wrote name ie 'animations') This is known as <strong>inline closure</strong></p> <hr> <p>Write in a more modular sense</p> <pre><code>UIView.animateWithDuration(duration: NSTimeInterval, animations: animatingFunc) func animatingFunc() { self.navigationController.toolbar.frame = CGRect(x:0.0, y:10.0, width:10.0, height:0.0) } </code></pre> <p>Remember the type of the parameter 'animations' was <code>() -&gt; Void</code></p> <p>Exactly as what we are doing, animatingFunc takes no parameters ie '()' and returns nothing ie 'void'</p> <p>(In Swift, functions are types and can be passed in as parameters) Some might say this is more readable some might say trailing closure is...</p> <hr> <p><strong>Side note<sup>1</sup></strong> You can also do nothing ( which really doesn't make sense but in many other handlers/animations/completion handlers you may not want to do anything)</p> <pre><code>UIView.animateWithDuration(duration: NSTimeInterval, animations: nil) </code></pre> <hr> <p><strong>Side note<sup>2</sup></strong> </p> <p>Closures becomes more interesting when you have to capture a value. See <a href="http://stackoverflow.com/a/40897540/5175709">this</a> simple demonstration. For more information about Swift closures see <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html" rel="nofollow noreferrer">Apple's Documentation</a></p>