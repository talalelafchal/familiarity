button clicked at index in UIAlertViewDelegate not getting called
<p>Earlier in Objective-C we were using delegate:self in <code>UIAlertView</code> so that we were able to call methods like buttonclicked at index....but now in swift where do I set that delegate? because my buttonclicked at index method is not getting called..</p> <pre><code>import UIKit class ViewController:UIViewController,UITableViewDelegate,UITableViewDataSource,UIAlertViewDelegate{ override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell!{ let cell :UITableViewCell = UITableViewCell(style: UITableViewCellStyle.Subtitle, reuseIdentifier: nil) cell.text = "HI \(indexPath.row)" cell.detailTextLabel.text = "SWIFT" return cell } func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -&gt; Int { return 5 } func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) { var alert = UIAlertController(title: "Demo", message: "You have selected row number\(indexPath.row)", preferredStyle: UIAlertControllerStyle.Alert) alert.addAction(UIAlertAction(title: "Ok", style: UIAlertActionStyle.Default, handler: nil)) alert.addAction(UIAlertAction(title: "KILL", style: UIAlertActionStyle.Destructive, handler: nil)) alert.addAction(UIAlertAction(title: "PUNE", style: UIAlertActionStyle.Default, handler: nil)) alert.addAction(UIAlertAction(title: "Mumbai", style: UIAlertActionStyle.Default, handler: nil)) alert.addAction(UIAlertAction(title: "Kolkata", style: UIAlertActionStyle.Default, handler: nil)) alert.addAction(UIAlertAction(title: "Chennai", style: UIAlertActionStyle.Default, handler: nil)) self.presentViewController(alert, animated: true, completion: nil) } func demoFunction (myName:NSString) { NSLog("%@", "swapnil") } func alertView(alertView: UIAlertView!, clickedButtonAtIndex buttonIndex: Int) { NSLog("%@", "YOU PRESSED OK" ) switch (buttonIndex) { case 0:NSLog("%@", "YOU PRESSED OK" ) case 1:NSLog("%@", "YOU PRESSED KILLER" ) case 2:NSLog("%@", "YOU PRESSED PUNE" ) case 3:NSLog("%@", "YOU PRESSED MUMBAI" ) case 4:NSLog("%@", "YOU PRESSED KOLKATA" ) case 5:NSLog("%@", "YOU PRESSED Chennai" ) default :NSLog("%@", "You have pressed default") } } } </code></pre>
<p><code>UIAlertController</code> does not implement a delegate property. It uses the handler parameter of <code>-addAction:</code> to handle a tap on a button. Here is an example of how this is done:</p> <pre><code>alert.addAction(UIAlertAction(title: "RandomTitle", style: UIAlertActionStyle.Default, handler:{(alert :UIAlertAction!) -&gt; void in //Handle action here. //You can also use the alert title property to differentiate between //UIAlertActions and hand the same closure in to each one. E.i. if(action.title == "first option"){ //handle when the user taps the "first option" button. } })) </code></pre>
<p>You shouldn't use delegate method, in fact <code>UIAlertController</code> doesn't provide delegation.</p> <p>In your case, your Alert Action should be like this:</p> <pre><code>alert.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.Default, handler: {(alert :UIAlertAction!) in println("YOU PRESSED OK") })) </code></pre> <p>and so on for every action!</p>