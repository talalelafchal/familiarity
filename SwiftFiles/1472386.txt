Number of days in given year using iPhone SDK?
<p>I'm trying to get the number of days in a current year.</p> <p>When I try the solution on <a href="http://stackoverflow.com/questions/1179945/number-of-days-in-the-current-month-using-iphone-sdk">Number of days in the current month using iPhone SDK?</a>, and replace NSMonthCalendarUnit by NSYearCalendarUnit, I still get the number of days for that month.</p> <p>Does anyone know how I should do this?</p> <p>Thanks in advance for your help.</p>
<p>If you're only going to use the Gregorian Calender, you can calculate it manually.</p> <p><a href="http://en.wikipedia.org/wiki/Leap_year#Algorithm" rel="nofollow noreferrer">http://en.wikipedia.org/wiki/Leap_year#Algorithm</a></p> <pre><code>if year modulo 400 is 0 then leap else if year modulo 100 is 0 then no_leap else if year modulo 4 is 0 then leap else no_leap </code></pre>
<p>I finally came up with a solution that works. What I do is first calculate the number of months in the year and then for each month calculate the number of days for that month.</p> <p>The code looks like this:</p> <pre><code>NSUInteger days = 0; NSCalendar *calendar = [NSCalendar currentCalendar]; NSDate *today = [NSDate date]; NSDateComponents *components = [calendar components:NSYearCalendarUnit fromDate:today]; NSUInteger months = [calendar rangeOfUnit:NSMonthCalendarUnit inUnit:NSYearCalendarUnit forDate:today].length; for (int i = 1; i &lt;= months; i++) { components.month = i; NSDate *month = [calendar dateFromComponents:components]; days += [calendar rangeOfUnit:NSDayCalendarUnit inUnit:NSMonthCalendarUnit forDate:month].length; } return days; </code></pre> <p>It is not as neat as I would have hoped for but it will work for any calendar such as the ordinary gregorian one or the islamic one.</p>
<p>Use the <code>NSCalendar</code> and <code>NSDateComponent</code> classes, like this:</p> <pre><code>long GetDaysInYear(int year) { NSDateComponents* c = [[NSDateComponents alloc] init]; c.year = year; NSCalendar* cal = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar]; NSDate* startDate = [cal dateFromComponents:c]; c.year += 1; NSDate* endDate = [cal dateFromComponents:c]; return [cal components:NSDayCalendarUnit fromDate:startDate toDate:endDate options:0].day; } </code></pre>
<p>As example:</p> <pre><code>func daysInYear(year: Int) -&gt; Int { var calendar = NSCalendar(calendarIdentifier: NSGregorianCalendar) var b = NSDate.dateWithNaturalLanguageString("01.01.\(year)", locale: NSLocale.currentLocale()) as! NSDate var e = NSDate.dateWithNaturalLanguageString("12.31.\(year)", locale: NSLocale.currentLocale()) as! NSDate return calendar!.components(NSCalendarUnit.CalendarUnitDay, fromDate: b, toDate: e, options: nil).day + 1 } </code></pre> <p>But default days return 355 and 354 this caused (may be) that counting begin from zero :)</p>
<p>Here's a super accurate <code>NSCalendar</code> extension in Swift 2:</p> <pre><code>extension NSCalendar { func daysInYear(date: NSDate = NSDate()) -&gt; Int? { let year = components([NSCalendarUnit.Year], fromDate: date).year return daysInYear(year) } func daysInYear(year: Int) -&gt; Int? { guard let begin = lastDayOfYear(year - 1), end = lastDayOfYear(year) else { return nil } return components([NSCalendarUnit.Day], fromDate: begin, toDate: end, options: []).day } func lastDayOfYear(year: Int) -&gt; NSDate? { let components = NSDateComponents() components.year = year guard let years = dateFromComponents(components) else { return nil } components.month = rangeOfUnit(NSCalendarUnit.Month, inUnit: NSCalendarUnit.Year, forDate: years).length guard let months = dateFromComponents(components) else { return nil } components.day = rangeOfUnit(NSCalendarUnit.Day, inUnit: NSCalendarUnit.Month, forDate: months).length return dateFromComponents(components) } } </code></pre> <p>You can use it like this:</p> <pre><code>let calendar = NSCalendar.currentCalendar() // I'm using the Gregorian calendar calendar.daysInYear() // 365 (since it's currently 2015) calendar.daysInYear(2016) // 366 (leap year!) </code></pre> <p>This is super flexible since we don't assume anything about the length of the calendar:</p> <pre><code>let hebrew = NSCalendar(calendarIdentifier: NSCalendarIdentifierHebrew) hebrew?.daysInYear(-7) // 354 hebrew?.daysInYear(-100) // 384 </code></pre> <p>Enjoy.</p>