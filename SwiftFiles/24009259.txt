How to convert COpaquePointer in swift to some type (CGContext? in particular)
<p>I have the following code in swift which doesn't compile:</p> <pre><code>class CustomView: NSView { override func drawRect(dirtyRect: NSRect) { var contextPointer: COpaquePointer = NSGraphicsContext.currentContext()!.graphicsPort() var context: CGContext? = contextPointer as? CGContext CGContextSetRGBFillColor(context, 1, 0, 0, 1) CGContextFillRect(context, CGRectMake(0, 0, 100, 100)) CGContextFlush(context) } } </code></pre> <p>How do I convert COpaquePointer to CGContext?</p>
<p>This is kind of ugly; it would be better if the graphicsPort() method was updated to return a CGContextRef directly (like <code>UIGraphicsGetCurrentContext()</code>), rather than a void*. I added this extension to <code>NSGraphicsContext</code> to sweep it under the rug for now:</p> <pre><code>extension NSGraphicsContext { var cgcontext: CGContext { return Unmanaged&lt;CGContext&gt;.fromOpaque(self.graphicsPort()).takeUnretainedValue() } } </code></pre> <p>Just call <code>NSGraphicsContext.currentContext().cgcontext</code> anywhere you need a CGContext.</p>
<p>This seems to be compiling:</p> <pre><code>var contextPointer = NSGraphicsContext.currentContext()!.graphicsPort() let context = UnsafePointer&lt;CGContext&gt;(contextPointer).memory </code></pre>
<p>You are almost near. Try this code </p> <pre><code>class CustomView: NSView { override func drawRect(dirtyRect: NSRect) { var contextPointer = NSGraphicsContext.currentContext()!.graphicsPort() var context = UnsafePointer&lt;CGContext&gt;(contextPointer).memory CGContextSetRGBFillColor(context, 1.0, 0.0, 0.0, 1.0) CGContextFillRect(context, CGRectMake(0, 0, 100, 100)) CGContextFlush(context) } } </code></pre>
<p>As of Developer Preview 5, <code>NSGraphicsContext</code> now has a <code>CGContext</code> property. It's not documented yet but it's in the header file:</p> <pre><code>@property (readonly) CGContextRef CGContext NS_RETURNS_INNER_POINTER NS_AVAILABLE_MAC(10_10); </code></pre>
<p>In Xcode 6.3 / Swift 1.2, <code>NSGraphicsContext.currentContext()!.graphicsPort</code> returns <code>UnsafeMutablePointer&lt;Void&gt;</code> and you can cast it into <code>CGContextRef</code> using <code>unsafeBitCast</code> because it's just a C pointer. This just reinterpret the pointer value, so should work exactly same with C forced point cast.</p> <pre><code> let p1 = NSGraphicsContext.currentContext()!.graphicsPort let ctx = unsafeBitCast(p1, CGContextRef.self) </code></pre> <p>Please take care that such reinterpreting-cast is always very dangerous and used only when you're sure on what you're doing.</p>