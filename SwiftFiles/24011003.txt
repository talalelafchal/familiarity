What is meaning of &quot;where&quot; keyword?
<p>I couldn't understand exact meaning of this statement. </p> <pre><code>let x where x.hasSuffix("pepper") </code></pre> <p>What is meaning of that? </p> <p><strong>Note:</strong> There is no need of <code>let</code> use? It makes me confusing.. Is this enough <code>x where x.hasSuffix("pepper")</code>? because, <code>let x</code> should be already get assigned.?</p> <p><strong>Update:</strong> From @Jacky comment here, it could be meaning same as below.</p> <pre><code>let x = vegetable if (x.hasSuffix("pepper") ...... </code></pre>
<p>The <code>where</code> in that context is used as <a href="http://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a>. From the example:</p> <pre><code>case let x where x.hasSuffix("pepper"): </code></pre> <p>When the suffix of <code>x</code> matches <code>"pepper"</code> it will set the constant <code>vegetableComment</code>:</p> <pre><code>let vegetableComment = "Is it a spicy \(x)?" </code></pre> <p>You can see as well that <code>x</code> can´t be "celery", "cucumber" or "watercress", otherwise it would give you a different outcome:</p> <pre><code>case "celery": let vegetableComment = "Add some raisins and make ants on a log." case "cucumber", "watercress": let vegetableComment = "That would make a good tea sandwich." </code></pre> <p>Because those cases are before <code>case let x where x.hasSuffix("pepper"):</code>. You can try changing the order of them and pass the value "celery" to see a different outcome. </p> <p><strong>Edit:</strong></p> <p>From my understanding it creates a constant <code>x</code> <strong>if</strong> <code>x</code>'s suffix is "pepper". The goal of creating this constant, is for you to use it after that:</p> <pre><code>let vegetableComment = "Is it a spicy \(x)?" </code></pre> <p><strong>Edit 2:</strong></p> <p>After a bit more research, that's called value binding and it's described as:</p> <blockquote> <p>switch case can bind the value or values it matches to temporary constants or variables, for use in the body of the case. This is known as value binding, because the values are “bound” to temporary constants or variables within the case’s body.</p> </blockquote> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/gb/jEUH0.l">https://itun.es/gb/jEUH0.l</a></p>
<p>This is a larger view of the code:</p> <pre><code>switch vegetable { ... omissis ... case let x where x.hasSuffix("pepper"): let vegetableComment = "Is it a spicy \(x)?" default: let vegetableComment = "Everything tastes good in soup." } </code></pre> <p>What it does is match the value of <code>vegetable</code> assigning it to <code>x</code> and testing if it has suffix <code>"pepper"</code>. If the match succeeds it executes the case block <code>let vegetableComment = "Is it a spicy \(x)?"</code> otherwise it continues with the next test (which in this case is a <code>default:</code>).</p> <p>Note that the <code>let</code> is necessary. It means that you are binding a new variable <code>x</code>.</p> <p>Also note that it's not the same as </p> <pre><code>case let x: if (x.hasSuffix("pepper") ... </code></pre> <p>as this always succeeds and enters the case block, while using the <code>where</code> clause means that if the condition is not satisfied the match fails and the next <code>case</code> (or <code>default</code>) shall be tried.</p>
<pre><code>case let x where x.hasSuffix("pepper") </code></pre> <p>The simple explanation is that you cannot match a case, that is of type <code>String</code>, with <code>.hasSuffix()</code> because it returns a <code>Bool</code>. So, they give you this <code>where</code> pattern matching keyword to use. It works like this: </p> <ol> <li><code>let x</code> copies the String value you are passing into the switch to the constant x. </li> <li><code>where</code> is a boolean evaluation that will only let the case complete the match if it is given a true bool, just like an <code>if</code> block.</li> <li><code>hasSuffix()</code> returns the bool required by <code>where</code>.</li> </ol> <p>If your string variable passed into the switch is <code>var foo</code>. You can literally do this instead:</p> <pre><code>case foo where foo.hasSuffix("pepper") </code></pre> <p>You can pass a true bool to where like this and it would work, uselessly:</p> <pre><code>case foo where true </code></pre>