Function taking a variable number of arguments
<p>In this document: <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1">https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1</a></p> <p>It mentions that when creating <code>for</code> loops we can use the shorthand of <code>0..3</code> and <code>0...3</code> to replace <code>i = 0; i &lt; 3; ++i</code> and <code>i = 0; i &lt;= 3; ++i</code> respectively.</p> <p>All very nice.</p> <p>Further down the document in the Functions and Closures section it says that functions can have a variable number of arguments passed via an array.</p> <p>However, in the code example we see the <code>...</code> again.</p> <pre><code>func sumOf(numbers: Int...) -&gt; Int { var sum = 0 for number in numbers { sum += number } return sum } </code></pre> <p>Is this a mistake? It seems to me that a more intuitive syntax would be <code>numbers: Int[]</code>.</p> <p>A few examples down we see another code sample which has exactly that:</p> <pre><code>func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool { </code></pre>
<p>In case of all arguments are Int numbers: Int[] would be intuitive. But if you have code like this:</p> <pre><code>func foo(args:AnyObject...) { for arg: AnyObject in args { println(arg) } } foo(5, "bar", NSView()) </code></pre> <p>output: </p> <pre><code>5 bar &lt;NSView: 0x7fc5c1f0b450&gt; </code></pre>
<p>The type of parameter in sumOf are known as 'variadic' parameter. The parameters passed are accepted just as a group of elements and is then converted into array before using it within that function.</p> <p>A great example would be this post.</p> <p><a href="http://stackoverflow.com/questions/24008547/passing-lists-from-one-function-to-another-in-swift?rq=1">Passing lists from one function to another in Swift</a></p>