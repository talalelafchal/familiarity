Detect current device with UI_USER_INTERFACE_IDIOM() in Swift
<p>What is the equivalent of <code>UI_USER_INTERFACE_IDIOM()</code> in Swift to detect between iPhone and iPad?</p> <p>I get an <code>Use of unresolved identifier</code> error when compiling in Swift.</p>
<p>When working with Swift, you can use the <code>enum</code> <code>UIUserInterfaceIdiom</code>, defined as:</p> <pre><code>enum UIUserInterfaceIdiom : Int { case Unspecified case Phone // iPhone and iPod touch style UI case Pad // iPad style UI } </code></pre> <p>So you can use it as:</p> <pre><code>UIDevice.currentDevice().userInterfaceIdiom == .Pad UIDevice.currentDevice().userInterfaceIdiom == .Phone UIDevice.currentDevice().userInterfaceIdiom == .Unspecified </code></pre> <p>Or with a Switch statement:</p> <pre><code> switch UIDevice.currentDevice().userInterfaceIdiom { case .Phone: // It's an iPhone case .Pad: // It's an iPad case .Unspecified: // Uh, oh! What could it be? } </code></pre> <p><code>UI_USER_INTERFACE_IDIOM()</code> is an Objective-C macro, which is defined as:</p> <pre><code>#define UI_USER_INTERFACE_IDIOM() \ ([[UIDevice currentDevice] respondsToSelector:@selector(userInterfaceIdiom)] ? \ [[UIDevice currentDevice] userInterfaceIdiom] : \ UIUserInterfaceIdiomPhone) </code></pre> <p>Also, note that even when working with Objective-C, the <code>UI_USER_INTERFACE_IDIOM()</code> macro is only required when targeting iOS 3.2 and below. When deploying to iOS 3.2 and up, you can use <code>[UIDevice userInterfaceIdiom]</code> directly.</p>
<p>if/else case:</p> <pre><code> if (UIDevice.currentDevice().userInterfaceIdiom == UIUserInterfaceIdiom.Pad) { // Ipad } else { // Iphone } </code></pre>
<p><strong>for the strict definition of the device can be used this code</strong> </p> <pre><code>enum UIUserInterfaceIdiom : Int { case Unspecified case Phone case Pad } struct ScreenSize { static let SCREEN_WIDTH = UIScreen.mainScreen().bounds.size.width static let SCREEN_HEIGHT = UIScreen.mainScreen().bounds.size.height static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT) static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT) } struct DeviceType { static let IS_IPHONE_4_OR_LESS = UIDevice.currentDevice().userInterfaceIdiom == .Phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH &lt; 568.0 static let IS_IPHONE_5 = UIDevice.currentDevice().userInterfaceIdiom == .Phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 568.0 static let IS_IPHONE_6 = UIDevice.currentDevice().userInterfaceIdiom == .Phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 667.0 static let IS_IPHONE_6P = UIDevice.currentDevice().userInterfaceIdiom == .Phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 736.0 static let IS_IPAD = UIDevice.currentDevice().userInterfaceIdiom == .Pad &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 1024.0 static let IS_IPAD_PRO = UIDevice.currentDevice().userInterfaceIdiom == .Pad &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 1366.0 } </code></pre> <blockquote> <p><strong>how to use</strong></p> </blockquote> <pre><code>if DeviceType.IS_IPHONE_6P { print("IS_IPHONE_6P") } </code></pre> <blockquote> <p><strong>to detect iOS version</strong></p> </blockquote> <pre><code>struct Version{ static let SYS_VERSION_FLOAT = (UIDevice.currentDevice().systemVersion as NSString).floatValue static let iOS7 = (Version.SYS_VERSION_FLOAT &lt; 8.0 &amp;&amp; Version.SYS_VERSION_FLOAT &gt;= 7.0) static let iOS8 = (Version.SYS_VERSION_FLOAT &gt;= 8.0 &amp;&amp; Version.SYS_VERSION_FLOAT &lt; 9.0) static let iOS9 = (Version.SYS_VERSION_FLOAT &gt;= 9.0 &amp;&amp; Version.SYS_VERSION_FLOAT &lt; 10.0) } </code></pre> <blockquote> <p><strong>how to use</strong></p> </blockquote> <pre><code>if Version.iOS8 { print("iOS8") } </code></pre>
<p>I do in that way:</p> <pre><code>UIDevice.currentDevice().model </code></pre> <p>It show the name of the device.</p> <p>To check if is iPad or iPhone:</p> <pre><code>if (UIDevice.currentDevice().model.rangeOfString("iPad") != nil) { println("I AM IPAD!") } else { println("I AM IPHONE") } </code></pre>
<p>FYI, I have used <code>UI_USER_INTERFACE_IDIOM()</code> for my app written in Swift. The app can be compiled well with XCode 6.3.1 without any warning on that command, runs well on Simulator (with any selected devices) and on all my real devices (iPhone, iPad) with iOS versions from 7.1 to 8.3.</p> <p>However, the app crashed on Apple reviewers' devices (and was refused). That took me few days to detect the problem with few more re-uploads to iTunes Connect.</p> <p>Now I use <code>UIDevice.currentDevice().userInterfaceIdiom</code> instead and my app can survive from such crashes.</p>
<p>I came up with a more device independent solution, at least in terms of the naming scheme, since the only thing that's important for UI is the screen diagonal.</p> <pre><code>enum ScreenDiagonalSize { case iPhonePortraitInches(Float) case iPadPortrait case iPadLandscape case UnknownSize init() { switch UIScreen.mainScreen().bounds.height { case 480: self = .iPhonePortraitInches(3.5) case 568: self = .iPhonePortraitInches(4) case 667: self = .iPhonePortraitInches(4.7) case 736: self = .iPhonePortraitInches(5.5) case 1024: self = .iPadPortrait case 768: self = .iPadLandscape default: self = .UnknownSize } } } func ==(left: ScreenDiagonalSize, right: ScreenDiagonalSize) -&gt; Bool { switch (left, right) { case (.UnknownSize, .UnknownSize): return true case (.iPadPortrait, .iPadPortrait): return true case (.iPadLandscape, .iPadLandscape): return true case (.iPhonePortraitInches(let sizeLeft), . iPhonePortraitInches(let sizeRight)) where sizeLeft == sizeRight: return true default: return false } } </code></pre> <p>Here's a simple test, you could put this inside your <code>viewDidLoad</code> method to test for the different screen sizes.</p> <pre><code>print(ScreenDiagonalSize() == .iPhonePortraitInches(3.5)) print(ScreenDiagonalSize() == .iPhonePortraitInches(4)) print(ScreenDiagonalSize() == .iPhonePortraitInches(4.7)) print(ScreenDiagonalSize() == .iPhonePortraitInches(5.5)) print(ScreenDiagonalSize() == .iPadPortrait) </code></pre>
<p><strong>Swift 2.0 &amp; iOS 9 &amp; Xcode 7.1</strong> </p> <pre><code>// 1. request an UITraitCollection instance let deviceIdiom = UIScreen.mainScreen().traitCollection.userInterfaceIdiom // 2. check the idiom switch (deviceIdiom) { case .Pad: print("iPad style UI") case .Phone: print("iPhone and iPod touch style UI") case .TV: print("tvOS style UI") default: print("Unspecified UI idiom") } </code></pre> <p><strong>Swift 3.0</strong> </p> <pre><code>// 1. request an UITraitCollection instance let deviceIdiom = UIScreen.main.traitCollection.userInterfaceIdiom // 2. check the idiom switch (deviceIdiom) { case .pad: print("iPad style UI") case .phone: print("iPhone and iPod touch style UI") case .tv: print("tvOS style UI") default: print("Unspecified UI idiom") } </code></pre> <p>Use UITraitCollection. The iOS trait environment is exposed though the <strong>traitCollection</strong> property of the UITraitEnvironment protocol. This protocol is adopted by the following classes: </p> <ul> <li><strong>UIScreen</strong></li> <li><strong>UIWindow</strong></li> <li><strong>UIViewController</strong></li> <li><strong>UIPresentationController</strong></li> <li><strong>UIView</strong></li> </ul>
<p><strong>Swift 2.0 &amp; iOS 7+ / iOS 8+ / iOS 9+</strong></p> <pre><code>public class Helper { public class var isIpad:Bool { if #available(iOS 8.0, *) { return UIScreen.mainScreen().traitCollection.userInterfaceIdiom == .Pad } else { return UIDevice.currentDevice().userInterfaceIdiom == .Pad } } public class var isIphone:Bool { if #available(iOS 8.0, *) { return UIScreen.mainScreen().traitCollection.userInterfaceIdiom == .Phone } else { return UIDevice.currentDevice().userInterfaceIdiom == .Phone } } } </code></pre> <p><strong>Use :</strong></p> <pre><code>if Helper.isIpad { } </code></pre> <p>OR</p> <pre><code>guard Helper.isIpad else { return } </code></pre> <p>Thanks @user3378170 </p>
<p><strong>Swift 2.x:</strong></p> <p>Adding to <a href="http://stackoverflow.com/a/29622324/1894067">Beslav Turalov answer's</a> the new entry iPad Pro can easily be find with this line</p> <blockquote> <p><strong>to detect iPad Pro</strong></p> </blockquote> <pre><code>struct DeviceType { ... static let IS_IPAD_PRO = UIDevice.currentDevice().userInterfaceIdiom == .Pad &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 1366.0 } </code></pre> <h2>Swift 3:</h2> <pre><code>struct ScreenSize { static let SCREEN_WIDTH = UIScreen.main.bounds.size.width static let SCREEN_HEIGHT = UIScreen.main.bounds.size.height static let SCREEN_MAX_LENGTH = max(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT) static let SCREEN_MIN_LENGTH = min(ScreenSize.SCREEN_WIDTH, ScreenSize.SCREEN_HEIGHT) } struct DeviceType { static let IS_IPHONE = UIDevice.current.userInterfaceIdiom == .phone static let IS_IPHONE_4_OR_LESS = UIDevice.current.userInterfaceIdiom == .phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH &lt; 568.0 static let IS_IPHONE_5 = UIDevice.current.userInterfaceIdiom == .phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 568.0 static let IS_IPHONE_6 = UIDevice.current.userInterfaceIdiom == .phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 667.0 static let IS_IPHONE_6P = UIDevice.current.userInterfaceIdiom == .phone &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 736.0 static let IS_IPHONE_7 = IS_IPHONE_6 static let IS_IPHONE_7P = IS_IPHONE_6P static let IS_IPAD = UIDevice.current.userInterfaceIdiom == .pad &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 1024.0 static let IS_IPAD_PRO_9_7 = IS_IPAD static let IS_IPAD_PRO_12_9 = UIDevice.current.userInterfaceIdiom == .pad &amp;&amp; ScreenSize.SCREEN_MAX_LENGTH == 1366.0 } struct Version{ static let SYS_VERSION_FLOAT = (UIDevice.current.systemVersion as NSString).floatValue static let iOS7 = (Version.SYS_VERSION_FLOAT &lt; 8.0 &amp;&amp; Version.SYS_VERSION_FLOAT &gt;= 7.0) static let iOS8 = (Version.SYS_VERSION_FLOAT &gt;= 8.0 &amp;&amp; Version.SYS_VERSION_FLOAT &lt; 9.0) static let iOS9 = (Version.SYS_VERSION_FLOAT &gt;= 9.0 &amp;&amp; Version.SYS_VERSION_FLOAT &lt; 10.0) static let iOS10 = (Version.SYS_VERSION_FLOAT &gt;= 10.0 &amp;&amp; Version.SYS_VERSION_FLOAT &lt; 11.0) } </code></pre>
<p>If you want to check the current device whether its iPad or iPhone then you can use these line of code :</p> <pre><code> if(UIDevice.currentDevice().userInterfaceIdiom == .Pad){ }else if(UIDevice.currentDevice().userInterfaceIdiom == .Phone){ } </code></pre>
<p>Try adding an extension like this:</p> <pre><code> public extension UIDevice { var modelName: String { var systemInfo = utsname() uname(&amp;systemInfo) let machineMirror = Mirror(reflecting: systemInfo.machine) let identifier = machineMirror.children.reduce("") { identifier, element in guard let value = element.value as? Int8 where value != 0 else { return identifier } return identifier + String(UnicodeScalar(UInt8(value))) } switch identifier { case "iPod5,1": return "iPod Touch 5" case "iPod7,1": return "iPod Touch 6" case "iPhone3,1", "iPhone3,2", "iPhone3,3": return "iPhone 4" case "iPhone4,1": return "iPhone 4s" case "iPhone5,1", "iPhone5,2": return "iPhone 5" case "iPhone5,3", "iPhone5,4": return "iPhone 5c" case "iPhone6,1", "iPhone6,2": return "iPhone 5s" case "iPhone7,2": return "iPhone 6" case "iPhone7,1": return "iPhone 6 Plus" case "iPhone8,1": return "iPhone 6s" case "iPhone8,2": return "iPhone 6s Plus" case "iPhone9,1", "iPhone9,3": return "iPhone 7" case "iPhone9,2", "iPhone9,4": return "iPhone 7 Plus" case "iPhone8,4": return "iPhone SE" case "iPad2,1", "iPad2,2", "iPad2,3", "iPad2,4":return "iPad 2" case "iPad3,1", "iPad3,2", "iPad3,3": return "iPad 3" case "iPad3,4", "iPad3,5", "iPad3,6": return "iPad 4" case "iPad4,1", "iPad4,2", "iPad4,3": return "iPad Air" case "iPad5,3", "iPad5,4": return "iPad Air 2" case "iPad2,5", "iPad2,6", "iPad2,7": return "iPad Mini" case "iPad4,4", "iPad4,5", "iPad4,6": return "iPad Mini 2" case "iPad4,7", "iPad4,8", "iPad4,9": return "iPad Mini 3" case "iPad5,1", "iPad5,2": return "iPad Mini 4" case "iPad6,3", "iPad6,4", "iPad6,7", "iPad6,8":return "iPad Pro" case "AppleTV5,3": return "Apple TV" case "i386", "x86_64": return "Simulator" default: return identifier } } } </code></pre> <p>This is how you will use it:</p> <pre><code>let modelName = UIDevice.currentDevice().modelName </code></pre>
<p><strong>Swift 3.0</strong>:</p> <pre><code>if(UIDevice.current.userInterfaceIdiom == .pad){ //iPads }else if(UIDevice.current.userInterfaceIdiom == .phone){ //iPhone }else if(UIDevice.current.userInterfaceIdiom == .carPlay){ //CarPlay }else if(UIDevice.current.userInterfaceIdiom == .tv){ //AppleTV } </code></pre>