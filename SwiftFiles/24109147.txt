Why does this require an if statement to execute
<p>In the swift book by Apple, there is an enum example. It lets you convert a raw Int to a enum rank. However when I try to remove the if statement, the code gives me</p> <blockquote> <p>Playground execution failed: error: :30:13: error: 'Rank?' does not have a member named 'simpleDesciption'</p> </blockquote> <pre><code>enum Rank: Int { case Ace = 1 case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten case Jack, Queen, King func simpleDesciption() -&gt; String { switch self { case .Ace: return "ace" case .Jack: return "jack" case .Queen: return "queen" case .King: return "king" default: return String(self.toRaw()) } } } if let convertedRank = Rank.fromRaw(1){ let threeDescription = convertedRank.simpleDesciption() } // Why does it need to be wrapped in a if statement? let convertedRank = Rank.fromRaw(1) let threeDescription = convertedRank.simpleDesciption() </code></pre>
<p>The <code>if let</code> construct allows to unwrap an optional type. The <code>Rank.fromRaw</code> returns the <code>Rank?</code> optional type, which means it could either be <code>nil</code> or an actual value of the type.</p> <p>There are two ways to unwrap the value of an optional type in Swift, one of which is the <code>if let</code> construct. The body of the <code>if let</code> is executed if the optional type is not <code>nil</code>, and the variable that follows <code>if let</code> is bound to its value (and thus has type <code>Rank</code>, not <code>Rank?</code>).</p> <p>Note that if you simply write <code>let convertedRank = Rank.fromRaw(1)</code> without the <code>if</code>, <code>convertedRank</code> has the type <code>Rank?</code> and, again, cannot be directly used as a <code>Rank</code> without being unwrapped.</p> <p>If you are <strong><em>sure</em></strong> that the value will never be <code>nil</code>, you can force-unwrap it by suffixing the variable name with <code>!</code>:</p> <pre><code>let convertedRank = Rank.fromRaw(1) convertedRank!.simpleDescription() </code></pre> <p>But this is not recommended style, as it will fail at runtime if the value is not defined.</p>