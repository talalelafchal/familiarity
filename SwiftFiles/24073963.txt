Using Swift to share core code between iOS and Android
<p><strong>What I want:</strong> To share non-UI code between Android and iOS using Swift.</p> <p><strong>The Problem:</strong> Android has NDK support that allows you to run C and C++ code (not Objective C) using the Java Native Interface (JNI). I'm a Java programmer and don't quite understand the ins and outs of compiling C code. What are the general steps I would need to go through in order to be able to access a swift method through the JNI?</p>
<p>You need to export your Swift library as a .so, then you'll have to write a wrapper (JNI) to interact between the Java layer and the library. For the wrapper part, install the <a href="https://developer.android.com/tools/sdk/ndk/index.html" rel="nofollow">NDK.</a></p>
<p>The folks at RemObjects have announced <a href="http://www.remobjects.com/elements/silver/" rel="nofollow">Silver</a>. Which is a Swift compatible front end to their Elements compiler suite. Elements produces programs for JVM, Android, .Net, iOS, OSX platforms. You can use this tool set to write applications in C#, Oxygen (their version of the ObjectPascal) and now Swift! </p> <p>I've been using a pre-release version of Silver and its fun to see Swift code running on my Android device. Looking forward to getting some of the wrinkles out of the system and publishing my first Swift app on Android. Note that you program the native UI Toolkits ... there is no multiplatform code to work with except for some basic data structures like Arrays and Dictionaries in the RemObjects Sugar library which is open source. </p>
<p>Instead of JNI, you can do it with RemObjects Silver. The swift code you write there <strong>is not compiled with Apple's Swift toolchain</strong>, instead they have their own compiler toolchain called Elements, so <strong>Element's Swift</strong> which is also known as <strong>Silver</strong> has some differences with Apple's swift. It has been extended so that it blends nicely into Java and .NET world. You can read more about it here - <a href="https://docs.elementscompiler.com/Silver/LanguageExtensions/" rel="nofollow noreferrer">Silver Language Extentions</a>.</p> <p>You can use elements from Visual Studio or from their own OS X IDE called Fire. Let me demonstrate on a very simple example with Fire. (<a href="http://www.elementscompiler.com/elements/download.aspx" rel="nofollow noreferrer">Download Elements</a>)</p> <h2>Example: Simple Shared Logger</h2> <p><strong>1.</strong> Open Fire and Create a New Project. In Project template, choose <strong>Shared Project</strong>. (the choice of the platform doesn't matter) </p> <p><img src="https://i.stack.imgur.com/Da7Hd.jpg" width="500" /></p> <p><strong>2.</strong> Under <strong>File -> New File</strong> create a new empty source file with <strong>Code File</strong> template. Let's call it logger. (make sure the language selected is <code>swift</code>)</p> <p><strong>3.</strong> Replace the contents of that file with:</p> <pre><code>#if COOPER import java.util #elseif ECHOES import System.Collections.Generic import System.Linq import System.Text #elseif NOUGAT import Foundation #elseif !ELEMENTS #endif public class Logger { public class func logIt(stuff: String){ #if NOUGAT NSLog("\(stuff)") #elseif ECHOES Console.WriteLine("\(stuff)") #elseif COOPER System.out.println("\(stuff)") #elseif !ELEMENTS print("\(stuff)") #endif } } </code></pre> <p>This is the most simple example of a logger abstraction that works for each platform. With preprocessor directives you specify the code that will be compiled to each specific platform.<br> <code>NOUGAT</code> stands for <strong>Cocoa</strong><br> <code>ECHOES</code> stands for <strong>.NET</strong><br> <code>COOPER</code> stands for <strong>Java</strong> </p> <p>You can also use <code>!ELEMENTS</code> to indicate the code that you will conditionally compile with other toolchains, for example if you want to build the code with Apple's Swift.</p> <ol start="4"> <li>Under <strong>File -> New Project</strong> create new Android Class Library and add it to the current solution</li> </ol> <p><img src="https://i.stack.imgur.com/W21sl.png" width="400" /></p> <ol start="5"> <li>In your solution explorer on the left drag your shared project (you can drag from shared project's globe icon) into your android class library references. You then should be able to see your shared project there. You can also delete the source file that Android Class Library has.</li> </ol> <p><img src="https://i.stack.imgur.com/bTn59.png" width="250" /></p> <ol start="6"> <li><p>Under <strong>Fire -> Preferences</strong>, go the 4th tab and ensure that you have JDK, JRE and Android Folder discovered by Fire.</p></li> <li><p>Build the solution. The Android Class Library will build .jar file that you can now use from your Android Studio Project.</p></li> <li><p>Navigate to your Android Class Library project directory, and copy from <code>obj/Dubug/Android</code> the .jar file into your Android Project <code>libs</code> folder.</p></li> <li><p>In Android studio, right click on .jar file and press on <strong>Add as Library</strong>. Then make sure your build.gradle has <code>compile files('libs/swiftcommons.android.jar')</code> in its dependencies.</p></li> </ol> <p>This is how Logger will look when decompiled.</p> <pre><code>package swiftcommons.android; public class Logger { public static void logIt(String stuff) { if(stuff == null) { throw new IllegalArgumentException("stuff"); } else { System.out.println(String.format("%s", new Object[]{stuff})); } } public Logger() { } } </code></pre> <p>So now you can call your Logger from your code:</p> <pre><code>import swiftcommons.android.Logger; //..... Logger.logIt("It works.."); </code></pre> <p>Also as a good strategy I will recommend you writing your shared codebase that will compile with Apple's swift toolchain (<code>#IF !ELEMENTS</code>) and Elements for Android. (<code>#IF COOPER</code>). Elements also provide you <strong>SwiftBaseLibrary</strong> and utilities library called <a href="https://docs.elementscompiler.com/API/Sugar/" rel="nofollow noreferrer">Sugar</a> that you can utilize when compiling with Elements.</p>