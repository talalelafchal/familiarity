Expensive Object management in Swift
<p>I have been looking at Swift the last couple of days and it looks good, I am confused on a point though even after review of the guide Apple published.</p> <p>I understand that memory management in Swift uses ARC and therefore quite safe, however in situations where I'd like more fine grained control of object creation and destruction I'm slightly confused.</p> <p>Take these two simple examples:</p> <p>In ObjC, when you'd (for example) like a UIViewController you intend to push to stay around for the lifetime of your app and only be created once (say because it's expensive to create), you'd make it a property and then wrap it's Alloc Init like this:</p> <pre><code>if (!self.myProperty) { self.myProperty = [[MyObj alloc] init]; } </code></pre> <p>This way it only creates once, keeps state and the same object instance can be reused indefinitely, yielding known object references, and good performance not having to recreate each time the viewController goes out of scope.</p> <p>Another example of this is with NSMutableString, vs Swifts String.</p> <p>You can set an NSMutableString's string many times and it will keep the same object reference, however this doesn't seem to be the case with a Swift String when changing it.</p> <p>This may just be 'deprecated thinking in Objective C' but is there a best practice with regard to keeping around expensive objects or to keep state (same object) for certain objects during the lifetime of their usage.</p>
<p>I think what you're looking for is a "Lazy stored property":</p> <p>The <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html" rel="nofollow">example in the swift docs</a> is:</p> <pre><code>class DataManager { @lazy var importer = DataImporter() var data = String[]() // the DataManager class would provide data management functionality here } </code></pre> <p>and it says about <code>@lazy</code>:</p> <blockquote> <p>A lazy stored property is a property whose initial value is not calculated until the first time it is used. You indicate a lazy stored property by writing the @lazy attribute before its declaration.</p> </blockquote> <p>The comment about <code>NSMutableString</code> is a little different, you can continue to use <code>NSMutableString</code> in your swift code, but Apple are encouraging developers to use the Swift built-in types whenever possible :)</p> <p>see the "String Mutability" section in the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html" rel="nofollow">swift docs</a></p>