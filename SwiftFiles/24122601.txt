Swift variable decorations with &quot;?&quot; (question mark) and &quot;!&quot; (exclamation mark)
<p>I understand that in Swift all variables must be set with a value, and that by using optionals we can set a variable to be set to <code>nil</code> initially.</p> <p>What I don't understand is, what setting a variable with a <code>!</code> is doing, because I was under the impression that this "unwraps" a value from an optional. I thought by doing so, you are guaranteeing that there is a value to unwrap in that variable, which is why on IBActions and such you see it used.</p> <p>So simply put, what is the variable being initialized to when you do something like this:</p> <pre><code>var aShape : CAShapeLayer! </code></pre> <p>And why/when would I do this?</p>
<p>In a type declaration the <code>!</code> is similar to the <code>?</code>. Both are an optional, but the <code>!</code> is an "<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID334">implicitly unwrapped" optional</a>, meaning that you do not have to unwrap it to access the value (but it can still be nil).</p> <p>This is basically the behavior we already had in objective-c. A value <em>can</em> be nil, and you have to check for it, but you can also just access the value directly as if it wasn't an optional (with the important difference that if you don't check for nil you'll get a runtime error)</p> <pre><code>// Cannot be nil var x: Int = 1 // The type here is not "Int", it's "Optional Int" var y: Int? = 2 // The type here is "Implicitly Unwrapped Optional Int" var z: Int! = 3 </code></pre> <h3>Usage:</h3> <pre><code>// you can add x and z x + z == 4 // ...but not x and y, because y needs to be unwrapped x + y // error // to add x and y you need to do: x + y! // but you *should* do this: if let y_val = y { x + y_val } </code></pre>