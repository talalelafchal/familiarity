Why can't I call the default super.init() on UIViewController in Swift?
<p>I am not using a UIViewController from StoryBoards and I want to have a custom init function where I pass in an NSManagedObjectID of some object. I just want to call super.init() like I have in objective c. Like this:</p> <pre><code>init(objectId : NSManagedObjectID) { super.init() } </code></pre> <p>But I can't compile with that. Can I simply not do that any more?</p> <p>The compiler error message I get: "must call designated initializer of the superclass uiviewcontroller"</p>
<p>The designated initialiser for <code>UIViewController</code> is <code>initWithNibName:bundle:</code>. You should be calling that instead.</p> <p>See <a href="http://www.bignerdranch.com/blog/real-iphone-crap-2-initwithnibnamebundle-is-the-designated-initializer-of-uiviewcontroller/">http://www.bignerdranch.com/blog/real-iphone-crap-2-initwithnibnamebundle-is-the-designated-initializer-of-uiviewcontroller/</a></p> <p>If you don't have a nib, pass in <code>nil</code> for the nibName (bundle is optional too). Then you could construct a custom view in <code>loadView</code> or by adding subviews to <code>self.view</code> in <code>viewDidLoad</code>, same as you used to.</p>
<p>Another nice solution is to declare your new initializer as a <code>convenience</code> initializer as follows:</p> <pre><code>convenience init( objectId : NSManagedObjectID ) { self.init() // ... store or user your objectId } </code></pre> <p>If you declare no designated initializers in your subclass at all, they are inherited automatically and you are able to use <code>self.init()</code> within your convenience initializer.</p> <p>In case of UIViewController the default init method will call <code>init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!)</code> with <code>nil</code> for both arguments (Command-Click on UIViewController will give you that info).</p> <p><strong>TL;TR</strong>: If you prefer to programmatically work with <code>UIViewController</code>s here is a complete working example that adds a new initializer with a custom argument:</p> <pre><code>class MyCustomViewController: UIViewController { var myString: String = "" convenience init( myString: String ) { self.init() self.myString = myString } } </code></pre>