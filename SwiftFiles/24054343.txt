How to detect and debug strong reference cycles in Swift?
<p>In simple cases it as trivial as an intense stare at a few lines of code:</p> <pre><code>class A { var b: B? } class B { var a: A? } var a = A() var b = B() a.b = b b.a = a </code></pre> <p>How to solve this problem for >50k lines of code project (porting from Objective-C/C++). For example, is there a way to develop a tool to traverse an object graph at the run time (as is done in Java/C# worlds)? </p>
<p>Instead of implementing an object graph traversal, you can detect strong reference cycles with instruments : it identifies memory leaks and can graphically show the cycles (<a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/MemoryManagementforYouriOSApp/MemoryManagementforYouriOSApp.html#//apple_ref/doc/uid/TP40004652-CH11-SW4" rel="nofollow">Apple instruments documentation</a>)</p> <p>You should replace every objective C weak property by a weak instance variable in Swift</p> <pre><code> class B { weak var a: A? } </code></pre> <p>and if you can be sure that it never takes nil as a value you can prefix it by unowned</p> <pre><code> class B { unowned var a: A } </code></pre> <p>you could then access the property without having to force-unwrap the variable with a !</p> <p>There might be more to it if your objective-C code uses @properties attributes that were the norm before arc</p>