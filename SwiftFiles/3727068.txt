Set padding for UITextField with UITextBorderStyleNone
<p>I wanted to use a custom background for my <code>UITextFields</code>. This works fine except for the fact that I have to use <code>UITextBorderStyleNone</code> to make it look pretty. This forces the text to stick to the left without any padding.</p> <p>Can I set a padding manually so that it looks similar to <code>UITextBorderStyleRoundedRect</code> except for using my custom background image?</p>
<p>You can't set padding. Instead have a <code>UIView</code> which has your background image and the <code>UITextField</code> inside of it. Set the <code>UITextField</code> width as <code>UIViewWidth-(paddingSize x 2)</code> and the height similarly and then set it at point <code>paddingSize,paddingSize</code>.</p>
<p>I found a neat little hack to set the left padding for this exact situation. </p> <p>Basically, you set the leftView property of the <code>UITextField</code> to be an empty view of the size of the padding you want:</p> <pre><code>UIView *paddingView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 5, 20)]; textField.leftView = paddingView; textField.leftViewMode = UITextFieldViewModeAlways; </code></pre> <p>Worked like a charm for me! </p>
<p>I created this category implementation and added it to the top of the <code>.m</code> file. </p> <pre><code>@implementation UITextField (custom) - (CGRect)textRectForBounds:(CGRect)bounds { return CGRectMake(bounds.origin.x + 10, bounds.origin.y + 8, bounds.size.width - 20, bounds.size.height - 16); } - (CGRect)editingRectForBounds:(CGRect)bounds { return [self textRectForBounds:bounds]; } @end </code></pre> <p>Based off the link Piotr Blasiak provided. It seemed simpler then creating a whole new subclass, and also simpler then adding the additional <code>UIView</code>. Still, it seems like something is missing to not be able to control the padding inside a text field.</p> <p>Swift 2 solution: </p> <pre><code>import UIKit class CustomTextField: UITextField { required init?(coder aDecoder: NSCoder){ super.init(coder: aDecoder) } override func textRectForBounds(bounds: CGRect) -&gt; CGRect { return CGRectMake(bounds.origin.x + 10, bounds.origin.y + 8, bounds.size.width - 20, bounds.size.height - 16); } override func editingRectForBounds(bounds: CGRect) -&gt; CGRect { return self.textRectForBounds(bounds); } } </code></pre>
<p>I found it far easier to use a non-editable <code>UITextView</code> and set the <code>contentOffset</code></p> <pre><code>uiTextView.contentOffset = CGPointMake(8, 7); </code></pre>
<p>Another consideration is that, if you have more than one <code>UITextField</code> where you are adding padding, is to create a separate <code>UIView</code> for each textfield - because they cannot be shared.</p>
<p>I was based off Nate's solution, but then i found it that this causes problems when you use the leftView/rightView properties, so its better tune the super's implementation, because it will take the left/right view's into account.</p> <pre><code>- (CGRect)textRectForBounds:(CGRect)bounds { CGRect ret = [super textRectForBounds:bounds]; ret.origin.x = ret.origin.x + 5; ret.size.width = ret.size.width - 10; return ret; } - (CGRect)editingRectForBounds:(CGRect)bounds { return [self textRectForBounds:bounds]; } </code></pre>
<p>^ these suggestions are great for those who are programmatically creating an interface. </p> <p>But there are two LAZY EASY WAYS for those of us who use the Xcode interface builder:</p> <ul> <li><p>easier: put a UIImageView behind a text field</p></li> <li><p><strong>easiest: change the border style on your to the simple black square (second from left option), then add your image as a background image.</strong> The image takes precedence over the square, so you still get the padding needed for a normal image background, without the square actually being drawn on.</p></li> </ul> <p>EDIT: you can also use the black sphere (third from left option when selecting the UITextBox in IB), it does not work with the far right, "graphical sphere" style. </p>
<p>A good approach to add padding to UITextField is to subclass and add an edgeInsets property. You then set the edgeInsets and the UITextField will be drawn accordingly. This will also function correctly with a custom leftView or rightView set.</p> <p><strong>OSTextField.h</strong></p> <pre><code>#import &lt;UIKit/UIKit.h&gt; @interface OSTextField : UITextField @property (nonatomic, assign) UIEdgeInsets edgeInsets; @end </code></pre> <p><strong>OSTextField.m</strong></p> <pre><code>#import "OSTextField.h" @implementation OSTextField - (id)initWithFrame:(CGRect)frame{ self = [super initWithFrame:frame]; if (self) { self.edgeInsets = UIEdgeInsetsZero; } return self; } -(id)initWithCoder:(NSCoder *)aDecoder{ self = [super initWithCoder:aDecoder]; if(self){ self.edgeInsets = UIEdgeInsetsZero; } return self; } - (CGRect)textRectForBounds:(CGRect)bounds { return [super textRectForBounds:UIEdgeInsetsInsetRect(bounds, self.edgeInsets)]; } - (CGRect)editingRectForBounds:(CGRect)bounds { return [super editingRectForBounds:UIEdgeInsetsInsetRect(bounds, self.edgeInsets)]; } @end </code></pre>
<p>Why not Attributed String !?!, this is one of the blessing feature of IOS 6.0 :)</p> <pre><code>NSMutableParagraphStyle *mps = [[NSMutableParagraphStyle alloc] init]; mps.firstLineHeadIndent = 5.0f; UIColor *placeColor = self.item.bgColor; textFieldInstance.attributedPlaceholder = [[NSAttributedString alloc] initWithString:@"My Place Holder" attributes:@{NSForegroundColorAttributeName: placeColor, NSFontAttributeName : [UIFont systemFontOfSize:7.0f], NSParagraphStyleAttributeName : mps}]; </code></pre>
<p>Just subclass UITextField like this:</p> <pre><code>@implementation DFTextField - (CGRect)textRectForBounds:(CGRect)bounds { return CGRectInset(bounds, 10.0f, 0); } - (CGRect)editingRectForBounds:(CGRect)bounds { return [self textRectForBounds:bounds]; } @end </code></pre> <p>This adds horizontal padding of 10 points either side.</p>
<p>@Evil trout's answer is great. I have been using this approach for quite a some time now. The only thing it lacks is "dealing with numerous text fields". I tried other approaches but does not seem to work.</p> <p>Subclassing UITextField just to add a padding didn't make any sense to me. So, I iterated over all UITextFields to add the padding.</p> <pre><code>-(void) addPaddingToAllTextFields:(UIView*)view { for(id currentView in [view subviews]){ if([currentView isKindOfClass:[UITextField class]]) { // Change value of CGRectMake to fit ur need [currentView setLeftView:[[UIView alloc] initWithFrame:CGRectMake(0, 0, 10, 20)]]; [currentView setLeftViewMode:UITextFieldViewModeAlways]; } if([currentView respondsToSelector:@selector(subviews)]){ [textfieldarray addObjectsFromArray:[self addPaddingToAllTextFields:currentView]]; } } } </code></pre>
<p>Based on Evil Trout's answer you might wanna create a category to make it easier to use across multiple applications.</p> <p>Header file:</p> <pre><code>@interface UITextField (PaddingText) -(void) setLeftPadding:(int) paddingValue; -(void) setRightPadding:(int) paddingValue; @end </code></pre> <p>Implementation file:</p> <pre><code>#import "UITextField+PaddingText.h" @implementation UITextField (PaddingText) -(void) setLeftPadding:(int) paddingValue { UIView *paddingView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, paddingValue, self.frame.size.height)]; self.leftView = paddingView; self.leftViewMode = UITextFieldViewModeAlways; } -(void) setRightPadding:(int) paddingValue { UIView *paddingView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, paddingValue, self.frame.size.height)]; self.rightView = paddingView; self.rightViewMode = UITextFieldViewModeAlways; } @end </code></pre> <p>Usage Example</p> <pre><code>#import "UITextField+PaddingText.h" [self.YourTextField setLeftPadding:20.0f]; </code></pre> <p>Hope it helps you out guys</p> <p>Cheers</p>
<p>Brody's solution worked perfect for me. I have had to add side views on a textfield and add additional padding. So by implementing the custom UIEdgeInsets property to a UITextField subclass I have managed to achieve the task. I'm going to use this new subclass in all of my projects.</p>
<p>The best solution I found so far is a category. That's how I add a 5 points padding to left and right:</p> <pre><code>@implementation UITextField (Padding) #pragma clang diagnostic push #pragma clang diagnostic ignored "-Wobjc-protocol-method-implementation" - (CGRect)textRectForBounds:(CGRect)bounds { return CGRectMake(bounds.origin.x + 5, bounds.origin.y, bounds.size.width - 10, bounds.size.height); } - (CGRect)editingRectForBounds:(CGRect)bounds { return [self textRectForBounds:bounds]; } #pragma clang diagnostic pop @end </code></pre> <p>The #pragma's are just for removing the annoying warnings</p>
<p>Based on @Evil Trout's most voted answer I created a custom method in my VController class, like shown bellow:</p> <pre><code>- (void) modifyTextField:(UITextField *)textField { UIView *paddingView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 5, 20)]; textField.leftView = paddingView; textField.leftViewMode = UITextFieldViewModeAlways; textField.rightView = paddingView; textField.rightViewMode = UITextFieldViewModeAlways; [textField setBackgroundColor:[UIColor whiteColor]]; [textField setTextColor:[UIColor blackColor]]; } </code></pre> <p>Now I can call that method inside (viewDidLoad method) and send any of my TextFields to that method and add padding for both right and left, and give text and background colors by writing just one line of code, as follows:</p> <pre><code>[self modifyTextField:self.firstNameTxtFld]; </code></pre> <p>This Worked perfectly on iOS 7! I know that adding too much Views might make this a bit heavier class to be loaded. But when concerned about the difficulty in other solutions, I found myself more biased to this method and more flexible with using this way. ;)</p> <p>Thanks for the Hack "Evil Trout"! (bow)</p>
<p>In iOS 6 <code>myTextField.leftView = paddingView;</code> is causing issue</p> <p>This solves the problem</p> <pre><code>myTextField.layer.sublayerTransform = CATransform3DMakeTranslation(5, 0, 0); </code></pre>
<p>Swift version:</p> <pre><code>extension UITextField { @IBInspectable var padding_left: CGFloat { get { LF.log("WARNING no getter for UITextField.padding_left") return 0 } set (f) { layer.sublayerTransform = CATransform3DMakeTranslation(f, 0, 0) } } } </code></pre> <p>So that you can assign value in IB</p> <p><img src="https://i.stack.imgur.com/VvDAR.png" alt="IBInspectable setting represented in Interface Builder"></p>
<p>Just subclass <strong>UITextField</strong> like this (<strong>Swift version</strong>):</p> <pre><code>import UIKit class CustomTextField: UITextField { override func textRectForBounds(bounds: CGRect) -&gt; CGRect { return CGRectInset(bounds, 25.0, 0) } override func editingRectForBounds(bounds: CGRect) -&gt; CGRect { return self.textRectForBounds(bounds) } } </code></pre> <p>This adds horizontal padding of <strong>25.0</strong> points either side.</p>
<p>A Swift 3 version for Xcode >6, where you can edit the inset value in Interface Builder / Storyboard.</p> <pre><code>import UIKit @IBDesignable class FormTextField: UITextField { @IBInspectable var inset: CGFloat = 0 override func textRect(forBounds bounds: CGRect) -&gt; CGRect { return bounds.insetBy(dx: inset, dy: inset) } override func editingRect(forBounds bounds: CGRect) -&gt; CGRect { return textRect(forBounds: bounds) } } </code></pre> <p><img src="https://i.stack.imgur.com/W5CQP.png" alt="enter image description here"></p>
<p>The best way to do this is simply make a class using subclass of UITextField and in .m file</p> <pre><code> #import "CustomTextField.h" #import &lt;QuartzCore/QuartzCore.h&gt; @implementation CustomTextField - (id)initWithCoder:(NSCoder*)coder { self = [super initWithCoder:coder]; if (self) { //self.clipsToBounds = YES; //[self setRightViewMode:UITextFieldViewModeUnlessEditing]; self.leftView = [[UIView alloc] initWithFrame:CGRectMake(0, 0,15,46)]; self.leftViewMode=UITextFieldViewModeAlways; } return self; } </code></pre> <p>by doing this go to your storyboard or xib and click on identity inspector and replace UITextfield with your own "CustomTextField" in class option.</p> <p>Note: If you simply give padding with auto layout for textfield then your application will not run and show only blank screen.</p>
<p><strong>Objective C Code</strong> </p> <p>MyTextField.h</p> <pre><code>#import &lt;UIKit/UIKit.h&gt; @interface MyTextField : UITextField @property (nonatomic) IBInspectable CGFloat padding; @end </code></pre> <p>MyTextField.m</p> <pre><code>#import "MyTextField.h" IB_DESIGNABLE @implementation MyTextField @synthesize padding; -(CGRect)textRectForBounds:(CGRect)bounds{ return CGRectInset(bounds, padding, padding); } -(CGRect)editingRectForBounds:(CGRect)bounds{ return [self textRectForBounds:bounds]; } @end </code></pre> <p><img src="https://i.stack.imgur.com/E8yZI.png" alt="enter image description here"></p>
<p>Here's how to achieve this in SWIFT</p> <pre><code>@IBOutlet weak var yourTextField: UITextField! override func viewDidLoad() { super.viewDidLoad() let paddingView = UIView(frame: CGRectMake(0, 0, 10, self.yourTextField.frame.height)) yourTextField.leftView = paddingView yourTextField.leftViewMode = UITextFieldViewMode.Always } } </code></pre> <p><a href="https://medium.com/@deepdeviant/how-to-set-padding-for-uitextfield-in-swift-2f830d131f40" rel="nofollow">Resource</a></p>
<ol> <li>Create a textfield Custom</li> </ol> <blockquote> <p>PaddingTextField.swift</p> </blockquote> <pre><code>import UIKit class PaddingTextField: UITextField { @IBInspectable var paddingLeft: CGFloat = 0 @IBInspectable var paddingRight: CGFloat = 0 override func textRectForBounds(bounds: CGRect) -&gt; CGRect { return CGRectMake(bounds.origin.x + paddingLeft, bounds.origin.y, bounds.size.width - paddingLeft - paddingRight, bounds.size.height); } override func editingRectForBounds(bounds: CGRect) -&gt; CGRect { return textRectForBounds(bounds) }} </code></pre> <ol start="2"> <li><p>Set your textfield class is PaddingTextField and custom your padding as you want <a href="https://i.stack.imgur.com/ihtmK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ihtmK.png" alt="enter image description here"></a> <a href="https://i.stack.imgur.com/XCIVU.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/XCIVU.png" alt="enter image description here"></a></p></li> <li><p>Enjoy it</p></li> </ol> <p><a href="https://i.stack.imgur.com/jbAeV.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jbAeV.png" alt="final"></a></p>
<pre><code>textField.layer.borderWidth = 3; </code></pre> <p>will add border, which worked as padding for me. </p>
<p><strong>Swift 2.0 Version:</strong></p> <pre><code>let paddingView: UIView = UIView(frame: CGRectMake(0, 0, 5, 20)) textField.leftView = paddingView textField.leftViewMode = UITextFieldViewMode.Always; </code></pre>
<p><a href="http://stackoverflow.com/a/6416234/4407087">Nate Flink's</a> answer is my favourite, but don't forget about right/left views. E.g for <code>UITextField</code> subclass:</p> <pre><code>override func rightViewRectForBounds(bounds: CGRect) -&gt; CGRect { let rightViewBounds = super.rightViewRectForBounds(bounds) return CGRectMake(CGRectGetMinX(rightViewBounds) - 10, CGRectGetMinY(rightViewBounds), CGRectGetWidth(rightViewBounds), CGRectGetHeight(rightViewBounds)) } </code></pre> <p>Above code set right padding for <code>rightView</code> of <code>UITextField</code>.</p>
<p><strong>Swift 3 Solution</strong></p> <pre><code>class CustomTextField: UITextField { override func textRect(forBounds bounds: CGRect) -&gt; CGRect { return CGRect(x: bounds.origin.x + 10, y: bounds.origin.y + 8, width: bounds.size.width - 20, height: bounds.size.height - 16) } override func editingRect(forBounds bounds: CGRect) -&gt; CGRect { return self.textRect(forBounds: bounds) } } </code></pre>
<p><strong>Here is a Swift code to give padding in UITextfield</strong></p> <pre><code> func txtPaddingVw(txt:UITextField) { let paddingView = UIView(frame: CGRectMake(0, 0, 10, 10)) txt.leftViewMode = .Always txt.leftView = paddingView } </code></pre> <p><strong>and call using</strong></p> <pre><code>self.txtPaddingVw(txtPin) </code></pre>
<p>Updated version for Swift 3:</p> <pre><code>@IBDesignable class FormTextField: UITextField { @IBInspectable var paddingLeft: CGFloat = 0 @IBInspectable var paddingRight: CGFloat = 0 override func textRect(forBounds bounds: CGRect) -&gt; CGRect { return CGRect(x: bounds.origin.x + paddingLeft, y: bounds.origin.y, width: bounds.size.width - paddingLeft - paddingRight, height: bounds.size.height) } override func editingRect(forBounds bounds: CGRect) -&gt; CGRect { return textRect(forBounds: bounds) } } </code></pre>
<p>you can use category. set padding to left and right</p> <p>UITextField+Padding.h</p> <pre><code>@interface UITextField (Padding) @property (nonatomic, assign) CGFloat paddingValue; @property (nonatomic, assign) CGFloat leftPadding; @property (nonatomic, assign) CGFloat rightPadding; //overwrite -(CGRect)textRectForBounds:(CGRect)bounds; -(CGRect)editingRectForBounds:(CGRect)bounds; @end </code></pre> <p><strong>UITextField+Padding.m</strong></p> <pre><code>#import "UITextField+Padding.h" #import &lt;objc/runtime.h&gt; static char TAG_LeftPaddingKey; static char TAG_RightPaddingKey; static char TAG_Left_RightPaddingKey; @implementation UITextField (Padding) #pragma clang diagnostic push #pragma clang diagnostic ignored "-Wobjc-protocol-method-implementation" -(CGRect)textRectForBounds:(CGRect)bounds { CGFloat offset_Left=0; CGFloat offset_Right=0; if (self.paddingValue&gt;0) { offset_Left=self.paddingValue; offset_Right=offset_Left; }else{ if (self.leftPadding&gt;0){ offset_Left=self.leftPadding; } if (self.rightPadding&gt;0){ offset_Right=self.rightPadding; } } if (offset_Left&gt;0||offset_Right&gt;0) { return CGRectMake(bounds.origin.x+ offset_Left ,bounds.origin.y , bounds.size.width- (offset_Left+offset_Right), bounds.size.height-2 ); }else{ return bounds; } } -(CGRect)editingRectForBounds:(CGRect)bounds { return [self textRectForBounds:bounds]; } #pragma clang diagnostic pop #pragma maek -setter&amp;&amp;getter - (CGFloat)paddingValue { return [objc_getAssociatedObject(self,&amp;TAG_Left_RightPaddingKey) floatValue]; } -(void)setPaddingValue:(CGFloat)paddingValue { objc_setAssociatedObject(self, &amp;TAG_Left_RightPaddingKey, @(paddingValue), OBJC_ASSOCIATION_RETAIN_NONATOMIC); } -(CGFloat)leftPadding { return [objc_getAssociatedObject(self,&amp;TAG_LeftPaddingKey) floatValue]; } -(void)setLeftPadding:(CGFloat)leftPadding { objc_setAssociatedObject(self, &amp;TAG_LeftPaddingKey, @(leftPadding), OBJC_ASSOCIATION_RETAIN_NONATOMIC); } -(CGFloat)rightPadding { return [objc_getAssociatedObject(self,&amp;TAG_RightPaddingKey) floatValue]; } -(void)setRightPadding:(CGFloat)rightPadding { objc_setAssociatedObject(self, &amp;TAG_RightPaddingKey, @(rightPadding), OBJC_ASSOCIATION_RETAIN_NONATOMIC); } @end </code></pre> <p><strong>you can set padding like this</strong> self.phoneNumTF.paddingValue=10.f; or self.phoneNumTF.leftPadding=10.f;</p>