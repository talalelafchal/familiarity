UIButton in Swift is not registering touches
<p>I'm trying to create a UIButton using Swift. It compiles fine and I can see my button in the simulator, but when I click it, nothing happens. This is the code I am using:</p> <pre><code>let settings = UIButton() settings.addTarget(self, action: "touchedSet:", forControlEvents: UIControlEvents.TouchUpInside) settings.setTitle("Settings", forState: .Normal) settings.frame = CGRectMake(0, 530, 150, 50) scrollView.addSubview(settings) </code></pre> <p>In the same class, here is the function 'touchedSet':</p> <pre><code>func touchedSet(sender: UIButton!) { println("You tapped the button") } </code></pre> <p>I'm using the simulator as I don't have an iOS 8.0 device, could that be the problem?</p> <p>Thanks!</p>
<p>Make sure you link you button with your IBOutlet instance variable in your code if you're using storyboard.</p>
<p>Selectors are a struct that have to be created.</p> <p>Do it this way...</p> <pre><code>settingsButton.addTarget(self, action: Selector("showSettings"), forControlEvents: .TouchUpInside) </code></pre> <p>That should do it.</p>
<p>I can see only one problem: You have to set the <code>action</code> with <code>Selector</code> as following:</p> <pre><code>settings.addTarget(self, action: Selector("touchedSet:"), forControlEvents: UIControlEvents.TouchUpInside) </code></pre> <p>Don't forget to insert <code>:</code> if you need to pass parameters to the function.</p>
<p>You said within the same class. Make sure that the button code itself is in the viewDidLoad() and the action be outside of it but inside the class if you are working with a view.</p>
<p>In the simulator, sometimes it doesn't recognise the selector. There is a bug it seems. I just changed the action name (selector), and it worked.</p> <pre><code>let buttonPuzzle:UIButton = UIButton(frame: CGRectMake(100, 400, 100, 50)) buttonPuzzle.backgroundColor = UIColor.greenColor() buttonPuzzle.setTitle("Puzzle", forState: UIControlState.Normal) buttonPuzzle.addTarget(self, action: "buttonAction:", forControlEvents: UIControlEvents.TouchUpInside) buttonPuzzle.tag = 22; self.view.addSubview(buttonPuzzle) </code></pre> <p>Selector Function is Here:</p> <pre><code>func buttonAction(sender:UIButton!) { var btnsendtag:UIButton = sender if btnsendtag.tag == 22 { //println("Button tapped tag 22") } } </code></pre>
<p>So you should use following line</p> <pre><code>settings.userInteractionEnabled = true </code></pre>
<p>The problem with that tutorial from Apple is the way they put the UIView (RatingControl) inside the StackView, which is incorrect. The UIView (RatingControl) should be outside of the StackView. So, the solution is: 1. Drag the UIView (RatingControl) outside of the StackView 2. Set the constraints for the new position of the RatingControl - Leading margin to the Container equal zero - Trailing margin to the Container equal zero - Top margin to the StackView equal zero</p> <p>With this new constraints, now the RatingControl will have the same with as the Container, no matter what is the device screen size, and always will be just behind of the StackView where the photo selector will appear.</p> <p>I hope this help you guys.</p>
<p>Old question, but thought I'd give some help to other looking for this issue. First off, I'm not entire sure this is correct so please correct me if I'm wrong.</p> <p>But if you set the selector wrongly the application would crash when you press the button since it's subscribed to a selector which doesn't exist. Which means that your selector is working. My guess is that something else is blocking the touch event, assuming <code>UIButton.enabled = true</code> and <code>UIButton.userInteractionEnabled = true</code>. Usually you could check this by long pressing the button and see if it hits. If it does then you have a <code>UIGestureRecognizer</code> added somewhere which takes up the hits first. Could also be the <code>UIScrollView</code> which is delaying the touch input (there's a checkbox for this in the Inspector).</p> <p>Hope this helps someone, and hope it's accurate.</p>
<p>I see it is an old question but I just faced very similar problem yesterday. My buttons were highlighted on touch but not firing the action.</p> <p>I have two view controllers. One view covers the others view and button is on the top view.</p> <p>eg.</p> <ul> <li><p>Rootviewcontroller has back view</p></li> <li><p>Topviewcontroller has top view</p></li> </ul> <p>The button on top view does not call the action if I don't add the topviewcontroler as childviewcontroller of the rootviewcontroller. After adding the topviewcontroller as childviewcontroller it started to working.</p> <p>So in short: just try to add the view controller of buttons superview as childviewcontroller to the parent views viewcontroller with the following method</p> <pre><code>func addChildViewController(_ childController: UIViewController) </code></pre>
<p>I've found similar example for Swift 2 and adapted for Swift 3. Tested it is working very well. I hope it helps.</p> <pre><code>// http://lab.dejaworks.com/ios-swift-3-playground-uibutton-action // Trevor D. Beydag import UIKit import PlaygroundSupport class Responder : NSObject { func action() { print("Button pressed!") } } let containerView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 300.0, height: 600.0)) PlaygroundPage.current.liveView = containerView let responder = Responder() let button = UIButton(frame: CGRect(x: 0, y: 0, width: 50, height: 50)) button.backgroundColor = UIColor.green button.setTitle("TEST", for: .normal) button.addTarget(responder, action: #selector(Responder.action), for: .touchUpInside) containerView.addSubview(button) </code></pre>
<p>For those how also stuck in the tutorial:</p> <p>I ran in to the same problem, when I was following Apples "Start Developing iOS Apps (Swift)". It turned out, that I have overseen this code lines in the tutorial</p> <pre><code>override var intrinsicContentSize : CGSize { return CGSize(width: 240, height: 44) } </code></pre> <p>Adding them to me RatingControl fixed the problem.</p>