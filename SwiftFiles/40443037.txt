Can't I downcast inside a switch ? (Swift 3)
I have 2 segues in the same prepareForSegue, one connects to a UIViewController subclass and the other connects to a UICollectionViewController subclass. I'm trying to use a switch/case with polymorphism to set my destinationViewController but the downcast I do inside the switch is not visible outside it, it keeps seeing the var as UIVC as declared originally. What am I doing wrong here ? The error is "Value of type 'UIViewController' has no member 'context'"  let identifier: String! var destinationTest: UIViewController! switch identifier { case "Add Exercise": destinationTest = segue.destination as! AddExerciseViewController case "addExerciseInCollectionView": destinationTest = segue.destination as! AddExerciseCollectionVC default: break } destinationTest.context = self.context
As RMaddy said, you have declared destinationTest as UIViewController, so even though you are assigning specific UIViewController subclasses inside the switch, all the compiler knows is that destinationTest is a UIViewController, so you can't access any subclass properties via this variable. You either need your two view controller subclasses to inherit from a common superclass, which defines the context property and declare destinationTest to be of that superclass, or use a protocol that provides the context property: property HasContext { var context: Context { set get } } class AddExerciseViewController: UIViewController, HasContext { var context: Context ... } class AddExerciseCollectionVC: UIViewController, HasContext { var context: Context ... } Then you can say let identifier: String! var destinationTest: HasContext! switch identifier { case "Add Exercise": destinationTest = segue.destination as! HasContext case "addExerciseInCollectionView": destinationTest = segue.destination as! HasContext default: break } destinationTest.context = self.context
Your view controllers would need to conform to a protocol that has context, otherwise just consider doing them individually. switch (segue.identifier, segue.destination) { case ("Add Exercise", let controller as AddExerciseViewController: controller.context = self.context case ("addExerciseInCollectionView", let controller as AddExerciseCollectionVC: controller.context = self.context default: break }