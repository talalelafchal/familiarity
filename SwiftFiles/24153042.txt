How can I convert an NSString to an Int?
<p>I'm completely new to Apple programming, but I thought Swift looked interesting after reading about it. I'm trying to make a simple number guessing game on a command line, but I can't get it to convert an integer to a string. I've tried searching the internet a lot for a way to do this, but I have no idea what's wrong. I don't want to just directly accept the user's input as an integer, I'd rather convert it from a string to an integer to make it easier to deal with errors (like how it's done in Python). This is what I did:</p> <pre><code>import Foundation // Get Input let standardInput = NSFileHandle.fileHandleWithStandardInput() // Convert to int function func convertToInt(guess: String) -&gt; Int { var num: Int = guess.toInt()! // It tells me "Thread 1: EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)" on this line and the program stops return num } println("Please enter your name.") // Get the user's name let data = standardInput.availableData var name = NSString(data: data, encoding: NSASCIIStringEncoding) println("Hello \(name)") println("Please enter a number and I will try to guess it.") // Get the user's number let data2 = standardInput.availableData var number = NSString(data: data2, encoding: NSASCIIStringEncoding) // Call the function to convert the number to an int var newnum = convertToInt(number) println(newnum) </code></pre> <p>After running this, it tells me </p> <pre><code>fatal error: Can't unwrap Optional.None (lldb) </code></pre> <p>in the debug area. I have no idea how to fix this. Is there any way to convert a number directly from <code>NSString</code> to <code>Int</code>? </p>
<p>The <code>toInt</code> method returns an Optional. You should check that a value was returned before using it.</p> <pre><code>var name: String = NSString(string: "1234") var integer:Int? = name.toInt() if let integer = integer { println("\(integer)") } </code></pre> <p>You could also use <code>NSNumberFormatter</code> to get a number from the string. Note this returns an <code>NSNumber</code>, but you can cast it to a Swift <code>Int</code> easily.</p> <pre><code>var numberFormatter = NSNumberFormatter() var number:NSNumber? = numberFormatter.numberFromString("1234") if let number = number { var integer = Int(number) println("\(integer)") } </code></pre> <p><code>toInt</code> and <code>numberFromString</code> return Optionals. If the string can't be converted to a number, they return <code>nil</code>.</p>
<p>there are several problems with your code but to answer the question at hand, the problem is with your misuse of optionals (which is covered in the introduction to swift video from wwdc).</p> <p>the toInt method returns an optional and not an Int. Optionals are the answer to the question: "What if the string i'm trying to convert isn't a number, what should be returned?" The same thing goes for trying to access a key from a dictionary that isn't there. In the objective-c world we return nil, but in Swift it's optional. What you need to do is check to see if a value came back, and if so you can use it. For example</p> <pre><code> if let number = guess.toInt() { //now we can do something with number because we know conversion worked println(number) } else { println("a number wasn't entered") } </code></pre>
<pre><code> var numberFormatter:NSNumberFormatter = NSNumberFormatter() numberFormatter.usesGroupingSeparator = true numberFormatter.groupingSeparator = ","; numberFormatter.groupingSize = 3; var number:String? = numberFormatter.stringFromNumber(numberFormatter.numberFromString("15487787878787")!) </code></pre>
<p>In Swift 2, <code>toInt()</code> method is removed. Use <code>Int()</code> method.</p> <p>For example:</p> <pre><code>var tempInt :Int = Int("24")! </code></pre>