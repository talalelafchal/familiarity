How can i change Font of UIBarButtonItem?
<p><img src="https://i.stack.imgur.com/EACXV.png" alt="enter image description here"></p> <p>I have a UIBarButtonItem in my UIToolBar titled <strong>Done</strong>. Now I want to change the font from the default to <strong>"Trebuchet MS"</strong> with Bold. Please guide me on this task. </p>
<p>You can create a custom <code>UIView</code> programmatically:</p> <pre><code>UIView *buttonItemView = [[UIView alloc] initWithFrame:buttonFrame]; </code></pre> <p>Then add images, labels or whatever you like to your custom view:</p> <pre><code>[buttonItemView addSubview:customImage]; [buttonItemView addSubview:customLabel]; ... </code></pre> <p>Now put it in your <code>UIBarButtomItem</code>.</p> <pre><code>UIBarButtonItem *barButtonItem = [[UIBarButtonItem alloc] initWithCustomView:buttonItemView]; </code></pre> <p>And finally add barButtonItem to you navigation bar.</p>
<p>Because UIBarButtonItem inherits from UIBarItem, you can try</p> <pre><code>- (void)setTitleTextAttributes:(NSDictionary *)attributes forState:(UIControlState)state </code></pre> <p>but this is for iOS5 only. For iOS 3/4, you will have to use a custom view.</p>
<p><code>UIBarButton</code> haven't property related to change the font. But you can create a button with custom font and then add into UIBarButton. It May be solved your problem</p>
<p>Assuming you want to support iOS4 and earlier, your best bet is to create a bar button using the <code>initWithCustomView:</code> method and supply your own view which could be something like a UIButton where you can easily customise the font.</p> <p>You can also drag a UIButton onto a toolbar or navigation bar in Interface Builder if you want to create the button with drag-and-drop instead of programmatically.</p> <p>Unfortunately this means creating the button background image yourself. There's no way to customise the font of a standard UIBarButtonItem prior to iOS5.</p>
<p>To be precise, this can be done as below</p> <pre><code>[buttonItem setTitleTextAttributes:[NSDictionary dictionaryWithObjectsAndKeys: [UIFont fontWithName:@"Helvetica-Bold" size:26.0], NSFontAttributeName, [UIColor greenColor], NSForegroundColorAttributeName, nil] forState:UIControlStateNormal]; </code></pre> <p>Or with object literal syntax:</p> <pre><code>[buttonItem setTitleTextAttributes:@{ NSFontAttributeName: [UIFont fontWithName:@"Helvetica-Bold" size:26.0], NSForegroundColorAttributeName: [UIColor greenColor] } forState:UIControlStateNormal]; </code></pre> <p>For convenience, here's the Swift implementation:</p> <pre><code>buttonItem.setTitleTextAttributes([ NSFontAttributeName: UIFont(name: "Helvetica-Bold", size: 26.0)!, NSForegroundColorAttributeName: UIColor.greenColor()], forState: UIControlState.Normal) </code></pre>
<p>For those interested in using <code>UIAppearance</code> to style their <code>UIBarButtonItem</code>'s fonts throughout the app, it can be accomplished using this line of code:</p> <p>Objective C:</p> <pre><code>NSDictionary *barButtonAppearanceDict = @{NSFontAttributeName : [UIFont fontWithName:@"HelveticaNeue-Light" size:12.0], NSForegroundColorAttributeName: [UIColor whiteColor]}; [[UIBarButtonItem appearance] setTitleTextAttributes:barButtonAppearanceDict forState:UIControlStateNormal]; </code></pre> <p>Swift 2.3:</p> <pre><code> UIBarButtonItem.appearance().setTitleTextAttributes( [ NSFontAttributeName : UIFont(name: "HelveticaNeue-Light", size: 12)!, NSForegroundColorAttributeName : UIColor.white ], for: .normal) </code></pre> <p>Of course, you can change the font &amp; size to whatever you'd like. I prefer to put this code in the <code>AppDelegate.m</code> file in the <code>didFinishLaunchingWithOptions</code> section.</p> <p>Available attributes (just add them to the <code>NSDictionary</code>):</p> <ul> <li><code>NSFontAttributeName</code>: Change font with a <code>UIFont</code></li> <li><code>NSForegroundColorAttributeName</code>: Change color with a <code>UIColor</code></li> <li><code>NSShadow</code>: Add a drop shadow (see <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ApplicationKit/Classes/NSShadow_Class/" rel="nofollow"><code>NSShadow</code> class reference)</a></li> </ul> <p>(Updated for iOS7+)</p>
<p>To do this for some <code>UIBarButtonItems</code> but not all I recommend the following approach.</p> <ol> <li>Create a <code>UIBarButtonItem</code> subclass. Don't add anything to it - you will only use it as a custom class in the storyboard and for its appearance proxy...</li> <li>In your storyboard, change the custom class for all desired <code>UIBarButtonItems</code> to your subclass</li> <li>In your AppDelegate import your <code>UIBarButtonItem</code> subclass and add the following line to <code>application:didFinishLaunchingWithOptions:</code></li> </ol> <p>In my case I subclassed <code>UIBarButtonItem</code> for the sole purpose of bolding the text:</p> <pre><code>[[BoldBarButtonItem appearance] setTitleTextAttributes: [NSDictionary dictionaryWithObjectsAndKeys: [UIFont boldSystemFontOfSize:18.0], NSFontAttributeName,nil] forState:UIControlStateNormal]; </code></pre>
<p>These are great answers above. Just updating for iOS7:</p> <pre><code>NSDictionary *barButtonAppearanceDict = @{NSFontAttributeName : [UIFont fontWithName:@"HelveticaNeue-Thin" size:18.0] , NSForegroundColorAttributeName: [UIColor whiteColor]}; [[UIBarButtonItem appearance] setTitleTextAttributes:barButtonAppearanceDict forState:UIControlStateNormal]; </code></pre>
<p>In Swift you would do this as followed:</p> <pre><code>backButtonItem.setTitleTextAttributes([ NSFontAttributeName : UIFont(name: "Helvetica-Bold", size: 26)!, NSForegroundColorAttributeName : UIColor.blackColor()], forState: UIControlState.Normal) </code></pre>
<p><strong>Swift3</strong></p> <pre><code> buttonName.setAttributedTitle([ NSFontAttributeName : UIFont.systemFontOfSize(18.0), NSForegroundColorAttributeName : UIColor.red,NSBackgroundColorAttributeName:UIColor.black], forState: UIControlState.Normal) </code></pre> <p><strong>swift</strong></p> <pre><code> barbutton.setTitleTextAttributes([ NSFontAttributeName : UIFont.systemFontOfSize(18.0), NSForegroundColorAttributeName : UIColor.redColor(),NSBackgroundColorAttributeName:UIColor.blackColor()], forState: UIControlState.Normal) </code></pre> <p><strong>Objective-C</strong></p> <pre><code> [ barbutton setTitleTextAttributes:[NSDictionary dictionaryWithObjectsAndKeys: [UIFont fontWithName:@"Helvetica-Bold" size:20.0], NSFontAttributeName, [UIColor redColor], NSForegroundColorAttributeName,[UIColor blackColor],NSBackgroundColorAttributeName, nil] forState:UIControlStateNormal]; </code></pre>
<p>Throughout App:</p> <pre><code>if let font = UIFont(name: "AvenirNext-DemiBold", size: 15) { UIBarButtonItem.appearance().setTitleTextAttributes([NSFontAttributeName: font,NSForegroundColorAttributeName:TOOLBAR_TITLE_COLOR], forState: UIControlState.Normal) } </code></pre>