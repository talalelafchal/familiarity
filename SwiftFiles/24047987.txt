bridging swift &amp; objective-c protocols?
<p>Bridging swift to objective-c is <em>very</em> painful so far. The compiler is unforgiving about all types including integer types. For example if you were sloppy and declared something as an (int) instead of an (NSInteger), you'll get a compile error that the function is just not found.</p> <p>Example: I have this existing objective-c protocol declared in an objc PixelMapUI.h</p> <pre><code>@protocol DeleteKeyDelegate &lt;NSTableViewDelegate&gt; - ( void ) deleteKeyPressed: ( NSTableView * ) view onRow: ( int ) rowIndex; @end </code></pre> <p>And in my new swift class, I'm trying to do this:</p> <pre><code>extension NSTableView { override func keyDown( event : NSEvent ) { var obj : NSTableViewDelegate = delegate() var obj2 = obj as? DeleteKeyDelegate; let characters : NSString = event.characters; var firstChar = Int(characters.characterAtIndex( 0 )); // if the user pressed delete and the delegate supports deleteKeyPressed if ( ( firstChar == NSDeleteFunctionKey || firstChar == NSDeleteCharFunctionKey || firstChar == NSDeleteCharacter) ) { if let keyObj = obj as? DeleteKeyDelegate { keyObj.deleteKeyPressed( self, onRow: selectedRow() ); } } </code></pre> <p>}</p> <p>This produces a compiler error "Could not find member 'deleteKeyPressed'. After stumbling around, I finally changed my obj-c protocol from (int) to (NSInteger) and it started working. ** sigh ** if swift is going to be as unforgiving as f***ing Java, it's not going to be pretty code when every other line of code has a typecast integer. Is there some option to have swift not treat integer type mismatches as errors?</p>
<p>This one compiles and works quite fine. I know theres a "magic constant" in there ;-) (51 -> Backspace), but for demonstration only the if statement is relevant ;-)</p> <pre><code>@objc protocol MyTableViewDelegate { func deleteKeyPressed(row:Int) } extension NSTableView { override public func keyDown(theEvent: NSEvent!) { if let ds = self.delegate() as? MyTableViewDelegate { if theEvent.keyCode==51 { ds.deleteKeyPressed(self.selectedRow) } } } } </code></pre>