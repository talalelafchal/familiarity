Detecting a change in a compound property
<p>Objective-C would not allow you to run the following code:</p> <pre><code>myShape.origin.x = 50 </code></pre> <p>This made it easy to detect changes in the origin, since someone using your class was forced to write <code>myShape.origin = newOrigin</code>, and thus you could easily tie in to the setter of this property.</p> <p>Swift now allows you to perform the original, formerly-disallowed code. Assuming the following class structure, how would you detect the change to the origin in order to execute your own code (e.g. to update the screen)?</p> <pre><code>struct Point { var x = 0 var y = 0 } class Shape { var origin: Point = Point() } </code></pre> <p><strong>Update:</strong> Perhaps I should have been more explicit, but assume I don't want to modify the Point struct. The reason is that Shape is but one class that uses Point, there may very well be hundreds of others, not to mention that the origin is not the only way a Point may be used.</p>
<p>Doesn't this work?</p> <pre><code>class Shape { var origin: Point { willSet(aNewValueForOrigin) { // pre flight code } didSet(theOldValueOfOrigin) { // post flight code } } } </code></pre> <p>Edit: revisited code and added name of arguments to reflect what to expect.</p>
<p>Use <code>didSet</code>, e.g.,</p> <pre><code>struct Point { var x = 0 var y: Int = 0 { didSet { println("blah blah") } } } class Shape { var origin: Point = Point() } let s = Shape() s.origin.y = 2 </code></pre>
<p>You can use Property Observers also works for structs</p> <p><a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/Swift_Programming_Language/Properties.html" rel="nofollow">Link to the part on the ebook</a></p> <pre><code>class StepCounter { var totalSteps: Int = 0 { willSet(newTotalSteps) { println("About to set totalSteps to \(newTotalSteps)") } didSet { if totalSteps &gt; oldValue { println("Added \(totalSteps - oldValue) steps") } } } } let stepCounter = StepCounter() stepCounter.totalSteps = 200 // About to set totalSteps to 200 // Added 200 steps stepCounter.totalSteps = 360 // About to set totalSteps to 360 // Added 160 steps stepCounter.totalSteps = 896 // About to set totalSteps to 896 // Added 536 steps </code></pre>
<p>Property observers (<code>willSet</code> and <code>didSet</code>) <strong>do</strong> fire when sub-properties of that property are changed. In this case, when the <code>x</code> <em>or</em> <code>y</code> values of the <code>Point</code> structure change, that property will be set.</p> <p>Here is my example playground code:</p> <pre><code>struct Point : Printable { var x = 0 var y = 0 var description : String { { return "(\(x), \(y))"; } } class Shape { var origin : Point = Point() { willSet(newOrigin) { println("Changing origin to \(newOrigin.description)!") } } } let circle = Shape() circle.origin.x = 42 circle.origin.y = 77 </code></pre> <p>And here is the console output:</p> <pre><code>Changing origin to (42, 0)! Changing origin to (42, 77)! </code></pre>