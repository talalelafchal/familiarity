Function of swift, taking another function of its arguments
<pre><code>func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool { for item in list { if condition(item) { return true } } return false } func lessThanTen(number: Int) -&gt; Bool { return number &lt; 10 } var numbers = [20, 19, 7, 12] hasAnyMatches(numbers, lessThanTen) </code></pre> <p>This is the example on <em>The Swift Programming Language</em>.</p> <p>But in this example, I want to change </p> <pre><code>func lessThanTen(number: Int) -&gt; Bool { return number &lt; 10 } </code></pre> <p>to</p> <pre><code>func lessThanBenchmark(number: Int, benchMark: Int) -&gt; Bool { return number &lt; 10 } </code></pre> <hr> <p>so I also change this example to</p> <pre><code>func hasAnyMatches(list: Int[], condition: (Int, benchmark: Int) -&gt; Bool) -&gt; Bool { for item in list { if condition(item, benchmark) { return true } } return false } func lessThanBenchmark(number: Int, benchmark: Int) -&gt; Bool { return number &lt; benchmark } var numbers = [20, 19, 7, 12] hasAnyMatches(numbers, lessThanBenchmark) </code></pre> <p>However, I got an error.</p> <pre><code>&lt;REPL&gt;:155:28: error: use of unresolved identifier 'benchmark' if condition(item, benchmark) { </code></pre> <p>At last, I have to write like this style</p> <pre><code>func hasAnyMatches(list: Int[], condition: (Int, Int) -&gt; Bool, benchmark:Int) -&gt; Bool { for item in list{ if condition(item, benchmark) { return true } } return false } func lessThanBenchmark(number: Int, benckmark: Int) -&gt; Bool { return number &lt; benckmark } var numbers = [20, 19, 7,12] hasAnyMatches(numbers, lessThanBenchmark, 10) </code></pre> <p>How can I pass benchmark to condition just as its own parameter?</p>
<p>benchmark is an argument of function.</p> <pre><code>condition: (Int, benchmark: Int) -&gt; Bool </code></pre> <p>this line of code means that condition is a function that return Bool value and can takes two arguments: Int as first argument, and benchmark: Int is second argument.</p> <p>You can call benchmark inside of condition.</p> <p>smth like that:</p> <pre><code>func hasAnyMatches(list: Int[], condition: (Int, benchmark: Int) -&gt; Bool) -&gt; Bool { for item in list { if condition(item, benchmark: 15) { return true } } return false } </code></pre> <p>15 is a value that you want to use</p>