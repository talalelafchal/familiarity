ScrollView is not automatically moving up when keyboard is visible
I am facing a problem in moving my srollview up when keyboard appears on screen. I am having 4 textfields on my screen and all are number keypad textfields which dont have a next/done return key so for that i have added custom toolbar with previous and next button on it in my keyboard. So when i move from one textfield to another textfield using next button , cursor moves properly to the next field but scrollview dont move up so my textfield hides behind the keyboard. I have added scrollview to my storyboard and set delegates of textfield as well. Code: override open func viewWillAppear(_ animated: Bool) { super.viewWillAppear(animated) self.registerForKeyboardNotifications() keyboardVisible = false } override open func viewWillDisappear(_ animated: Bool) { super.viewWillDisappear(animated) self.deregisterFromKeyboardNotifications() } func registerForKeyboardNotifications ()-> Void { NotificationCenter.default.addObserver(self, selector: #selector(ViewController.keyboardWasShown(_:)), name: NSNotification.Name.UIKeyboardDidShow, object: nil) NotificationCenter.default.addObserver(self, selector: #selector(ViewController.keyboardWillBeHidden(_:)), name: NSNotification.Name.UIKeyboardWillHide, object: nil) } func deregisterFromKeyboardNotifications () -> Void { let center: NotificationCenter = NotificationCenter.default center.removeObserver(self, name: NSNotification.Name.UIKeyboardDidShow, object: nil) center.removeObserver(self, name: NSNotification.Name.UIKeyboardWillHide, object: nil) } func keyboardWasShown (_ notification: Notification) { if(keyboardVisible == true){ return } print(scrollView) if let keyboardSize = ((notification as NSNotification).userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue { offset = scrollView!.contentOffset print(offset) var viewFrame = scrollView!.frame viewFrame.size.height -= keyboardSize.height scrollView!.frame = viewFrame var textFieldRect = activeField?.frame textFieldRect?.origin.y += 10; scrollView!.scrollRectToVisible(textFieldRect!, animated: true) keyboardVisible = true; } } func keyboardWillBeHidden (_ notification: Notification) { if(keyboardVisible == false){ return; } scrollView.frame = CGRect(x: 0, y: 0, width: scrollViewWidth, height: scrollViewHeight) scrollView?.contentOffset = offset keyboardVisible = false } // textfield delegate //in textfieldDidBeginEditing i m setting custom toolbar on textfield input accesory view open func textFieldDidBeginEditing(_ textField: UITextField) { if(textField == myTextField1){ myTextField1.inputAccessoryView = myCustomToolbar myCustomToolbar?.nextButton.isEnabled = true myCustomToolbar?.previousButton.isEnabled = false myCustomToolbar?.nextButton.title = "Next" }else if(textField == myTextField2){ myTextField2.inputAccessoryView = myCustomToolbar myCustomToolbar?.previousButton.isEnabled = true myCustomToolbar?.nextButton.isEnabled = true myCustomToolbar?.nextButton.title = "Next" }else if(textField == myTextField3){ myTextField3.inputAccessoryView = myCustomToolbar myCustomToolbar?.nextButton.isEnabled = true myCustomToolbar?.previousButton.isEnabled = true myCustomToolbar?.nextButton.title = "Next" }else if(textField == myTextField4){ myTextField4.inputAccessoryView = myCustomToolbar myCustomToolbar?.nextButton.isEnabled = true myCustomToolbar?.previousButton.isEnabled = true myCustomToolbar?.changeNextToActionButton(withTitle: "Some title") } } open func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool { activeField = textField return true } //PnPToolbar Delegate public func pnPToolbarNextButtonClicked(_ myCustomToolbar: myCustomToolbar!) { if(myTextField1.isFirstResponder){ myTextField2.becomeFirstResponder() }else if(myTextField2.isFirstResponder){ myTextField3.becomeFirstResponder() }else if(myTextField3.isFirstResponder){ myTextField4.becomeFirstResponder() }else if(ifscCode.isFirstResponder){ //Done call your method self.myMethod() } var textFieldRect = activeField?.frame textFieldRect?.origin.y += 10; scrollView!.scrollRectToVisible(textFieldRect!, animated: true) } public func myCustomToolbarPreviousButtonClicked(_ myCustomToolbar: myCustomToolbar!) { if(myTextField4.isFirstResponder){ myTextField3.becomeFirstResponder() }else if(myTextField3.isFirstResponder){ myTextField2.becomeFirstResponder() }else if(myTextField2.isFirstResponder){ myTextField1.becomeFirstResponder() } var textFieldRect = activeField?.frame textFieldRect?.origin.y += 10; scrollView!.scrollRectToVisible(textFieldRect!, animated: true) } when i move from myTextField1 to myTextField2 cursor comes to second textfield but scrollview does not move up and content size of the scrollview also not moves up beyond the keyboard.
Manage your flag in TextField's delegate as below :  func textFieldDidBeginEditing(_ textField: UITextField) { keyboardVisible = true } func textFieldEndEditings(sender:UITextField) -> Void { print(sender.text) keyboardVisible = false }
For toolbar above the keyboard let numberToolbar = UIToolbar(frame: CGRectMake(0, 0, self.view.frame.size.width, 50)) numberToolbar.barStyle = UIBarStyle.Default numberToolbar.items = [ UIBarButtonItem(title: "Cancel", style: UIBarButtonItemStyle.Plain, target: self, action: "cancelNumberPad"), UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FlexibleSpace, target: nil, action: nil), UIBarButtonItem(title: "Done", style: UIBarButtonItemStyle.Plain, target: self, action: "doneWithNumberPad")] numberToolbar.sizeToFit() phonenumberTextField.inputAccessoryView = numberToolbar