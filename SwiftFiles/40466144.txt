How do it safely with optional bindings
After all long time later i build makeResult to display in the label but problem it is to much code here . how can I reduce the code? .  @IBAction func value_Array(_ sender: AnyObject) { var hobbies = [String]() // print(jsondata["hobbies"]) hobbies = jsondata["hobbies"] as! [String] var makeResult : String? for (index, value) in hobbies.enumerated(){ print(value) makeResult = (makeResult != nil ? "\(makeResult!) \n" : "") + " your \(index+ 1) is \(value)" } outputResult.text = makeResult != nil ? makeResult : " " } Note : Since I have to unwrap hobbies anyway how do it safely with optional bindings .
This may not be smaller but it is much safer. This will not crash if there is no hobbies data. @IBAction func value_Array(_ sender: AnyObject) { guard let hobbies = jsondata["hobbies"] as? [String], hobbies.count > 0 else { outputResult.text = " " return } var index = 0 outputResult.text = hobbies.reduce("") { index += 1 return $0 + ($0.isEmpty ? "" : " \n") + " your \(index) is \($1)" } } An alternative to using the internal index variable is to zip together the indices and hobbies into a tuple first. But this makes the string creation line more complex; your choice. @IBAction func value_Array(_ sender: AnyObject) { guard let hobbies = jsondata["hobbies"] as? [String], hobbies.count > 0 else { outputResult.text = " " return } outputResult.text = zip([1...hobbies.count], hobbies).reduce("") { return $0 + ($0.isEmpty ? "" : " \n") + " your \($1.0) is \($1.1)" } }
I think this does what you want safely and succinctly. @IBAction func value_Array(_ sender: AnyObject) { guard let hobbies = jsondata["hobbies"] as? [String] else { outputResult.text = "" return } outputResult.text = hobbies.enumerated().map { index, element in return " your \(index + 1) is \(element)" }.joined(separator: " \n") }