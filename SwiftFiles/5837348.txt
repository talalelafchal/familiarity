Counting the number of lines in a UITextView, lines wrapped by frame size
<p>I wanted to know when a text is wrapped by the frame of the text view is there any delimiter with which we can identify whether the text was wrapped or not.</p> <p>For instance if my text view has a width of 50 px and text is exceeding that, it wraps the text to next line.</p> <p>I wanted to count the number of lines in my text view. Now "\n" and "\r" are not helping me.</p> <p>My code is:</p> <pre><code>NSCharacterSet *aCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@"\n\r"]; NSArray *myArray = [textViewText componentsSeparatedByCharactersInSet:aCharacterSet]; NSLog(@"%d",[myArray count]); </code></pre>
<p>Use this (where _text_v is your text view):</p> <pre><code>-(NSInteger) linesCount { return _text_v.contentSize.height/_text_v.font.lineHeight; } </code></pre>
<p>This variation takes into account how you wrap your lines and the max size of the <code>UITextView</code>, and may output a more precise height. For example, if the text doesn't fit it will truncate to the visible size, and if you wrap whole words (which is the default) it may result in more lines than if you do otherwise.</p> <pre><code>UIFont *font = [UIFont boldSystemFontOfSize:11.0]; CGSize size = [string sizeWithFont:font constrainedToSize:myUITextView.frame.size lineBreakMode:UILineBreakModeWordWrap]; // default mode float numberOfLines = size.height / font.lineHeight; </code></pre>
<p>You need to use the <code>lineHeight</code> property, and font <code>lineHeight</code>:</p> <pre><code>int numLines = txtview.contentSize.height / txtview.font.lineHeight; </code></pre> <p>I am getting correct number of lines, hope it help you also.</p>
<p>You need to consider textView.textContainerInset, also need to round the calculated value since line number definitely is an integer</p> <pre><code>float rawLineNumber = (textView.contentSize.height - textView.textContainerInset.top - textView.textContainerInset.bottom) / textView.font.lineHeight; int finalLineNumber = round(rawLineNumber) </code></pre> <p>In real case, you may see following result rawLineNumber = 3.008099 finalLineNumber = 3 (3 lines)</p>
<p><strong>Swift extension:</strong></p> <p>Using @himanshu padia answer</p> <pre><code>//MARK: - UITextView extension UITextView{ func numberOfLines() -&gt; Int{ if let fontUnwrapped = self.font{ return Int(self.contentSize.height / fontUnwrapped.lineHeight) } return 0 } } </code></pre> <p>Usage : <code>yourTextView.numberOfLines()</code></p> <p>be aware that if for some reason the font of the text view is nil, the return will be zero.</p>
<p>I found the perfect solution to this problem in Apple's <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/TextLayout/Tasks/CountLines.html" rel="nofollow">Text Layout Programming Guide</a>. Here is the solution Apple provides:</p> <pre><code>NSLayoutManager *layoutManager = [textView layoutManager]; unsigned numberOfLines, index; unsigned numberOfGlyphs = [layoutManager numberOfGlyphs]; NSRange lineRange; for (numberOfLines = 0, index = 0; index &lt; numberOfGlyphs; numberOfLines++){ (void) [layoutManager lineFragmentRectForGlyphAtIndex:index effectiveRange:&amp;lineRange]; index = NSMaxRange(lineRange); } </code></pre> <p>This could easily be written into an extension for UITextView, or as a standalone method taking in a UITextView object as a parameter</p>