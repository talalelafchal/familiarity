Identity operators in Swift
<p>If a is identical to c, b is identical to c, why a is not identical to b? </p> <pre><code>var a = [1, 2, 3] var b = a var c = a[0...2] a === c // true b === c // true a === b // false </code></pre> <p>If a, b, c are constants:</p> <pre><code>let a = [1, 2, 3] let b = a let c = a[0...2] a === c // true b === c // true a === b // true </code></pre>
<p>Interesting, my guess is that since <code>c</code> is a <code>var</code> in the first case, its mutable and thus it has to make a copy. That way if you add on to <code>c</code> it wouldn't modify <code>a</code>. In the second case, they are all immutable so they can point to the same memory space</p>
<p>You can remove the <code>import Cocoa</code> or <code>import UIKit</code> if you are playing with PlayGround to make it correct. It seems there is some type map thing in the Cocoa framework to mess things up. It should be a bug, I think.</p>
<p>As @onevcat said, it's might be a bug of Playground. And if you change <code>a</code> to objects of reference type, all the identity tests will be <code>true</code>.</p> <pre><code>class K {} var a = [K(), K(), K()] var b = a var c = a[0...2] a === c // true b === c // true a === b // true </code></pre> <p>it means that <code>a</code>, <code>b</code> &amp; <code>c</code> share the same storage and elements.</p>