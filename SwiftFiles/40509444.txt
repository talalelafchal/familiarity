Multiple animations on imageView inside scrollView
I have UIScrollView inside which I have an ImageView. What I am trying to achieve is: - zoom-in image to fit full height of the screen when user taps and zoom-out when user taps again, - start automatically first animation which is scrolling to the right side of the image, - after that, start second animation which is scrolling to the middle of the image, - at last start again the animation scrolling to the right side of the image. I would like to achieve the impression of image floating on the screen. User cannot scroll the image by himself. I have already done the part with zooming, but the problem I have is with animations. I have tried something like this, where offset, middleOffset and endOffset are CGPoints: override func viewDidLoad() { super.viewDidLoad() scrollView.delegate = self setupGestureRecognizer() } override func viewDidAppear(_ animated: Bool) { super.viewDidAppear(true) scrollView.panGestureRecognizer.isEnabled = false scrollView.pinchGestureRecognizer?.isEnabled = false } fileprivate func updateMinZoomScaleForSize(size: CGSize) { let widthScale = size.width / imageView.bounds.width let heightScale = size.height / imageView.bounds.height let minScale = min(widthScale, heightScale) let maxHeightScale = view.frame.height / imageView.bounds.height scrollView.maximumZoomScale = maxHeightScale scrollView.minimumZoomScale = minScale scrollView.zoomScale = minScale } fileprivate func updateConstraintsForSize(size: CGSize) { let yOffset = max(0, (size.height - imageView.frame.height) / 2) imageViewTopConstraint.constant = yOffset imageViewBottomConstraint.constant = yOffset let xOffset = max(0, (size.width - imageView.frame.width) / 2) imageViewLeadingConstraint.constant = xOffset imageViewTrailingConstraint.constant = xOffset view.layoutIfNeeded() } override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() updateMinZoomScaleForSize(size: view.bounds.size) } func setupGestureRecognizer() { let singleTap = UITapGestureRecognizer(target: self, action: #selector(self.handleSingleTap(recognizer:))) singleTap.numberOfTapsRequired = 1 scrollView.addGestureRecognizer(singleTap) } func handleSingleTap(recognizer: UITapGestureRecognizer) { if (scrollView.zoomScale > scrollView.minimumZoomScale) { scrollView.setZoomScale(scrollView.minimumZoomScale, animated: true) } else { scrollView.setZoomScale(scrollView.maximumZoomScale, animated: true) } } func scrollViewDidScroll(_ scrollView: UIScrollView) { UIView.animate(withDuration: 1, delay: 0.3, options: [], animations: { scrollView.setContentOffset(offset, animated: false) }, completion: { _ in UIView.animate(withDuration: 1, delay: 0.3, options: [], animations: { scrollView.setContentOffset(middleOffset, animated: false) }, completion: { _ in UIView.animate(withDuration: 1, delay: 0.3, options: [], animations: { scrollView.setContentOffset(endOffset, animated: false) }, completion: nil) }) }) } func viewForZooming(in scrollView: UIScrollView) -> UIView? { return imageView } func scrollViewDidZoom(_ scrollView: UIScrollView) { updateConstraintsForSize(size: view.bounds.size) } Howewer it does not work. First animation loads after image is zoomed in, but then it stops (it does not crash). It seems like animation is not finished because I cannot zoom-out image when tapping again.
Ok, I found out that animation blocks cannot be inside of scrollViewDidScroll delegate method. I put them inside handleSingleTap function and then it works as it should.