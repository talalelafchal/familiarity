Improve perfomance when scrolling UITableView with custom cells
I have a UITableView which cells are custom, and cell has a view with chart (Charts library). Data for chart is pretty big (it stored as a property of Controller), it appears during few seconds. Also I do some Chart's View setup (only little UI changes) in setSelected method in custom TableViewCell class When scrolling table view there some lags appear. I suppose it happens because of heavy content I want to display. During solving this problem I've thought about four solutions: Load all cells in ViewDidAppear, save them to array, in CellForRowAt method show cells from this array. Put table view into scroll view, make content's height pretty big to fit all cells in table view. Make chart loads only after cell's loading and its content view appearing. Show activity indicator while chart's loading is on. Put chart's loading in background thread. First two approaches seem to me a not so good in terms of memory managment. But I am not sure, maybe there is common solution which I have not known. Some code example from project:  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell { let graphCell = tableView.dequeueReusableCell(withIdentifier: Cells.graphViewCell) as! GraphViewCell graphCell.lineChartView.data = track.chartDataForHeight() return graphCell } Here's track is variable where I store data for chart.
If you have a very complex cell and not too many of them and you do not want to pay to create it every time, then its correct not to use dequeResuableCell and just lazily create the cells and cache them. You can mitigate the memory problem by responding to didReceiveMemoryWarning and dumping the off screen cells then lazily recreating them. UICollectionView now has prefetching in ios 10. You can also try using this instead of UITableView.