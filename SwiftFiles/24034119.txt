Swift Generics issue
<p>Right now I want to be able to see if an object is included inside an <code>Array</code> so:</p> <pre><code>func isIncluded&lt;U:Comparable&gt;(isIncluded : U) -&gt; Bool { for item in self { if (item == isIncluded) { return true } } return false } </code></pre> <p>If you notice this function belongs to an <code>Array</code> extension. The problem is if add it to this:</p> <pre><code>extension Array{ } </code></pre> <p>I receive the following error:</p> <blockquote> <p>Could not find an overload for '==' that accepts the supplied arguments</p> </blockquote> <p><img src="https://i.stack.imgur.com/LK8d7.png" alt="enter image description here"></p> <p>I understand that I could probably need to tell what kind of objects should be inside the <code>Array</code> like so: <code>T[] &lt;T.GeneratorType.Element: Comparable&gt;</code>. But it doesn't work as well:</p> <blockquote> <p>Braced block of statements is an unused closure<br> Non-nominal type 'T[]' cannot be extended<br> Expected '{' in extension</p> </blockquote> <p><img src="https://i.stack.imgur.com/8CNSO.png" alt="enter image description here"></p>
<p>Not to say that it's impossible, but I haven't yet seen a way to extend structs or classes to put conditions on the original generics, for instance to guarantee <code>Equatable</code> or <code>Comparable</code> on an Array. However, for your particular issue, instead of extending, you can do something like the following:</p> <pre><code>var arr = [1, 2, 3] var isIncluded : Bool = arr.bridgeToObjectiveC().doesContain(1) </code></pre>
<p>With Swift, we'll need to think whether there's a <em>function</em> that can do the trick -- outside the methods of a class.</p> <p>Just like in our case here:</p> <pre><code>contains(theArray, theItem) </code></pre> <p>You can try it in a playground:</p> <pre><code>let a = [1, 2, 3, 4, 5] contains(a, 3) contains(a, 6) </code></pre> <p>I discover a lot of these functions by cmd-clicking on a Swift symbol (example: <em>Array</em>) and then by looking around in that file (which seems to be the global file containing all declarations for Swift general classes and functions).</p> <p>Here's a little extension that will add the "contains" method to all arrays:</p> <pre><code>extension Array { func contains&lt;T: Equatable&gt;(item: T) -&gt; Bool { for i in self { if item == (i as T) { return true } } return false } } </code></pre>
<p>To add, the problem is that T is already defined and the Array's definition of T does not conform to Equatable. You can either accomplish what you want by casting (<strong>like the accepted answer</strong>), and risking an invalid cast, or you could pass in a delegate where no casting would be required.</p> <p>Consider modifying like so:</p> <pre><code>extension Array { func contains(comparator: (T)-&gt;Bool) -&gt; Bool { for item in self { if comparator(item) { return true } } return false } } </code></pre> <p>Example usage:</p> <pre><code>class Test { func arrayContains(){ var test: Int[] = [0,1,3,4,5] //should be true var exists = test.contains({(item)-&gt;Bool in item == 0}); } } </code></pre>