Simple math operations in Swift not working as they should
<p>Alright, let's imagine I have an NSDate object <code>date</code>, that is in the past, and I want to calculate the number of seconds that have passed. This is how I do it:</p> <pre><code>let timeInterval = -date.timeIntervalSinceNow </code></pre> <p>Then I want to decompose that into minutes, seconds and centi-seconds:</p> <pre><code>let seconds = Int(timeInterval) % 60 let minutes = Int(timeInterval - seconds) / 60 let centiSeconds = Int((timeInterval - Int(timeInterval)) * 100) </code></pre> <p>Except that the compiler complains about the last two lines, and I cannot figure out why.</p> <p>For the <code>minutes</code> line it says <code>Could not find and overload for '/' that accepts the supplied arguments</code>, and for the <code>centiSeconds</code> line it says <code>Could not find and overload for 'init' that accepts the supplied arguments</code>. What am I doing wrong? Isn't this acceptable in Swift-land?</p>
<p>It's all a matter of where you apply the cast:</p> <pre><code>let timeInterval = -now.timeIntervalSinceNow let seconds = Int(timeInterval) % 60 let minutes = (Int(timeInterval) - seconds) / 60 let centiSeconds = timeInterval - floor(timeInterval)) * 100 </code></pre> <p>The underlying issue is that <code>now.timeIntervalSinceNow</code> returns an NSTimeInterval which is a floating point. As a result, the following is a compilation error:</p> <pre><code>let minutes = Int(timeInterval - seconds) / 60 </code></pre> <p>However, the error Xcode reports <code>Could not find and overload for 'init' that accepts the supplied arguments</code> is incorrect and is not the root cause here.</p>