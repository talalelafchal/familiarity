How to use NSURLConnection completionHandler with swift
<p>Does anybody know how handlers (blocks) work in swift? I am trying to get this code running but i can't find any documentation of the right syntax for the completionHandler.</p> <pre><code>let url:NSURL = NSURL(string:"some url") let request:NSURLRequest = NSURLRequest(URL:url) let queue:NSOperationQueue = NSOperationQueue() NSURLConnection.sendAsynchronousRequest(request:request, queue:queue, completionHandler handler:((NSURLResponse!, NSData!, NSError!) -&gt; Void)!) </code></pre>
<p>You need to use this code:</p> <pre><code>NSURLConnection.sendAsynchronousRequest(request,queue:queue,completionHandler:{response,data,error in /* code goes here */ }) </code></pre> <p>For more info, you can refer to <a href="http://jamesonquave.com/blog/developing-ios-apps-using-swift-tutorial-part-2/" rel="nofollow">this</a> tutorial, or or check the answers to <a href="http://stackoverflow.com/questions/24013410/how-to-parse-a-json-file-in-swift/24013547#24013547">How to parse a JSON file in swift?</a>.</p>
<p>Like this:</p> <pre><code>NSURLConnection.sendAsynchronousRequest(request, queue: queue, completionHandler:{ response, data, error in /* Your code */ }) </code></pre> <p>Or more verbose variant.</p> <pre><code>NSURLConnection.sendAsynchronousRequest(request, queue: queue, completionHandler:{ (response: NSURLResponse!, data: NSData!, error: NSError!) -&gt; Void in /* Your code */ }) </code></pre>
<p>The right term you are looking for here is <strong><em>Closure</em></strong>. Closures in Swift are similar to blocks in C and Objective-C. In addition to Tomáš's answer there is another short version to use the completion handler here:</p> <pre><code>NSURLConnection.sendAsynchronousRequest(request, queue: queue, completionHandler: {$0; $1; $2}) </code></pre> <p>Here I have used <em>Shorthand Argument Names</em>. I am accessing <em>response</em> as <strong>$0</strong>, <em>data</em> as <strong>$1</strong> and <em>error</em> as <strong>$3</strong>. I find this syntax more easy to read and write unless the parameters are large in number otherwise the code will become unreadable. </p>
<p><code>sendAsynchronousRequest</code> has been deprecated in newer versions of Swift. Move to <code>dataTaskWithRequest</code>, luckily it is used pretty much the same way</p> <pre><code>let request:NSURLRequest = NSURLRequest(URL:NSURL(string:"http://YOUR_DESIRED_URL.com")!) let config = NSURLSessionConfiguration.defaultSessionConfiguration() let session = NSURLSession(configuration: config) let task = session.dataTaskWithRequest(request, completionHandler: {(data, response, error) in }); task.resume() </code></pre>