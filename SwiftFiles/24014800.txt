@property/@synthesize equivalent in swift
<p>We used to declare <code>property</code> to pass data between classes as following:</p> <pre><code>.h file (interface file) @property (nonatomic) double topSpeed; .m file (implementation file) @synthesize topSpeed; </code></pre> <p>Now there is no <code>interface</code> class, how to pass data between <code>.swift</code> classes ?</p>
<p>Using Properties.</p> <p>From the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-XID_323">Swift Programming Guide</a>:</p> <blockquote> <p><strong>Stored Properties and Instance Variables</strong></p> <p>If you have experience with Objective-C, you may know that it provides two ways to store values and references as part of a class instance. In addition to properties, you can use instance variables as a backing store for the values stored in a property.</p> <p>Swift unifies these concepts into a single property declaration. A Swift property does not have a corresponding instance variable, and the backing store for a property is not accessed directly. This approach avoids confusion about how the value is accessed in different contexts and simplifies the property’s declaration into a single, definitive statement. All information about the property—including its name, type, and memory management characteristics—is defined in a single location as part of the type’s definition.</p> </blockquote>
<p>Swift provides no differentiation between properties and instance variables (i.e, the underlying store for a property). To define a property, you simply declare a variable in the context of a class.</p> <p>A swift class is simply a ClassName.swift file.</p> <p>You declare a class and properties as</p> <pre><code>class SomeClass { var topSpeed: Double var aStrProperty: String var anIntProperty: Int //Initializers and other functions } </code></pre> <p>You access property values via dot notation. As of Xcode6 beta 4, there also are access modifiers (<code>public</code>, <code>internal</code> and <code>private</code>) in Swift. By default every property is <code>internal</code>. <a href="https://developer.apple.com/swift/blog/?id=5">See here</a> for more information.</p> <p>For more information, refer to the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-XID_323">Swift Programming Guide</a>:</p> <blockquote> <h2>Stored Properties and Instance Variables</h2> <p>If you have experience with Objective-C, you may know that it provides two ways to store values and references as part of a class instance. In addition to properties, you can use instance variables as a backing store for the values stored in a property.</p> <p>Swift unifies these concepts into a single property declaration. A Swift property does not have a corresponding instance variable, and the backing store for a property is not accessed directly. This approach avoids confusion about how the value is accessed in different contexts and simplifies the property’s declaration into a single, definitive statement. All information about the property—including its name, type, and memory management characteristics—is defined in a single location as part of the type’s definition.</p> </blockquote>
<p>It sounds like at least part of your question relates to communicating a given class's interface to other classes. Like Java (and unlike C, C++, and Objective-C), Swift doesn't separate the interface from the implementation. You don't <code>import</code> a header file if you want to use symbols defined somewhere else. Instead, you <code>import</code> a <em>module</em>, like:</p> <pre><code>import Foundation import MyClass </code></pre> <p>To access properties in another class, import that class.</p>
<p>Properties in Objective-C correspond to properties in Swift. There are two ways to implement properties in Objective-C and Swift:</p> <ol> <li>Synthesized/auto-synthesized properties in Objective C -- these are called "stored properties" in Swift. You simply declare it with <code>var topSpeed : Double</code> or <code>let topSpeed : Double = 4.2</code> in a class declaration, exactly as you would declare a local variable in a function body. You don't get to specify the name of the backing instance variable because, well, there are currently no instance variables in Swift. You must always use the property instead of its backing instance variable.</li> <li>Manually implemented properties in Objective-C -- these are called "computed properties" in Swift. You declare them in the class declaration like <code>var topSpeed : Double { get { getter code here } set { setter code here } }</code> (for <code>readwrite</code> properties), or <code>var topSpeed : Double { getter code here }</code> (for <code>readonly</code> properties).</li> </ol>
<blockquote> <p>Stored Properties and Instance Variables</p> <p>If you have experience with Objective-C, you may know that it provides two ways to store values and references as part of a class instance. In addition to properties, you can use instance variables as a backing store for the values stored in a property.</p> <p>Swift unifies these concepts into a single property declaration. A Swift property does not have a corresponding instance variable, and the backing store for a property is not accessed directly. This approach avoids confusion about how the value is accessed in different contexts and simplifies the property’s declaration into a single, definitive statement. All information about the property—including its name, type, and memory management characteristics—is defined in a single location as part of the type’s definition.</p> </blockquote> <p>From the Swift Programming Book:</p> <pre><code> struct FixedLengthRange { var firstValue: Int let length: Int } var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3) </code></pre>