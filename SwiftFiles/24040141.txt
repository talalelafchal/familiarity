How do I load a text file into an array with Swift?
<p>How do I load a text file into an <code>array</code> with <code>swift</code>?</p>
<p>Something along the lines of:</p> <pre><code>func arrayFromContentsOfFileWithName(fileName: String) -&gt; [String]? { guard let path = NSBundle.mainBundle().pathForResource(fileName, ofType: "txt") else { return nil } do { let content = try String(contentsOfFile:path, encoding: NSUTF8StringEncoding) return content.componentsSeparatedByString("\n") } catch _ as NSError { return nil } } </code></pre> <p>This approach assumes the file in question is located in your app bundle.</p>
<p>This works only until Xcode 6.1 beta 1. In 6.1 beta 2 you must write this:</p> <pre><code>var err: NSError? = NSError() let s = String(contentsOfFile: fullPath, encoding: NSUTF8StringEncoding, error: &amp;err) </code></pre> <p>Where <code>fullPath</code> is a string containing the full path to the file and <code>NSUTF8StringEncoding</code> is a predefined constant for UTF8-Encoding.</p> <p>You can also use <code>NSMacOSRomanStringEncoding</code> for Mac files or <code>NSISOLatin1StringEncoding</code> for Windows files.</p> <p><code>s</code> is an optional String and you can look if reading the file was successful:</p> <pre><code>if (s != nil) { return (s!) // Return the string as "normal" string, not as optional string } </code></pre>
<p>If you are in Swift 2.0, you should use:</p> <pre><code>let path = NSBundle.mainBundle().pathForResource(fileName, ofType: nil) if path == nil { return nil } var fileContents: String? = nil do { fileContents = try String(contentsOfFile: path!, encoding: NSUTF8StringEncoding) } catch _ as NSError { return nil } </code></pre>
<p>My simple coding for you</p> <pre><code> let path = NSBundle.mainBundle().pathForResource("FileName", ofType: "txt") var text = String(contentsOfFile: path!, encoding: NSUTF8StringEncoding, error: nil)! println(text) var array = text.componentsSeparatedByString("\n") </code></pre>
<p>For me works as follow:</p> <pre><code>let myFileURL = NSBundle.mainBundle().URLForResource("listacomuni", withExtension: "txt")! let myText = try! String(contentsOfURL: myFileURL, encoding: NSISOLatin1StringEncoding) print(String(myText)) </code></pre>
<p>If you want to read a csv file of numeric data. (based on Cezar's answer)</p> <pre><code>func get_csv_data() -&gt; [[Double]] { guard let path = NSBundle.mainBundle().pathForResource("filename_without_extension", ofType: "csv") else { return [] } do { let content = try String(contentsOfFile:path, encoding: NSUTF8StringEncoding) let line_str_array = content.componentsSeparatedByString("\n") return line_str_array.map { let field_str_array = $0.componentsSeparatedByString(",") return field_str_array.map { Double($0)! } } } catch _ as NSError { return [] } } </code></pre>
<p>Swift 3 version based on the accepted answer:</p> <pre><code>func arrayFromContentsOfFileWithName(fileName: String) -&gt; [String]? { guard let path = Bundle.main.path(forResource: fileName, ofType: "txt") else { return nil } do { let content = try String(contentsOfFile:path, encoding: String.Encoding.utf8) return content.components(separatedBy: "\n") } catch { return nil } } </code></pre>