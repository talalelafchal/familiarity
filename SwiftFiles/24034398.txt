New Array from Index Range Swift
<p>How can I do something like this? Take the first n elements from an array:</p> <pre><code>newNumbers = numbers[0..n] </code></pre> <p>Currently getting the following error:</p> <pre><code>error: could not find an overload for 'subscript' that accepts the supplied arguments </code></pre> <p>EDIT:</p> <p>Here is the function that I'm working in.</p> <pre><code>func aFunction(numbers: Array&lt;Int&gt;, position: Int) -&gt; Array&lt;Int&gt; { var newNumbers = numbers[0...position] return newNumbers } </code></pre>
<p>This works for me:</p> <pre><code>var test = [1, 2, 3] var n = 2 var test2 = test[0..&lt;n] </code></pre> <p>Your issue could be with how you're declaring your array to begin with.</p> <p>EDIT:</p> <p>To fix your function, you have to cast your <code>Slice</code> to an array:</p> <pre><code>func aFunction(numbers: Array&lt;Int&gt;, position: Int) -&gt; Array&lt;Int&gt; { var newNumbers = Array(numbers[0..&lt;position]) return newNumbers } // test aFunction([1, 2, 3], 2) // returns [1, 2] </code></pre>
<h1>Using a custom function to retrieve a subsequence of the first <em>n</em> elements of an array</h1> <p>When you write: </p> <pre><code>let newNumbers = numbers[0...position] </code></pre> <p><code>newNumbers</code> is not of type <code>Array&lt;Int&gt;</code> but is of type <code>ArraySlice&lt;Int&gt;</code>.</p> <p>Swift array's <a href="https://developer.apple.com/library/mac/documentation/Swift/Reference/Swift_Array_Structure/index.html#//apple_ref/swift/structsub/Array/s:sSa9subscriptFGVSs5RangeSi_GVSs10ArraySliceq__" rel="nofollow">subscript</a> returns an <code>ArraySlice&lt;Element&gt;</code> that, according to Apple, presents a view onto the storage of some larger array. Swift also provides an <a href="https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_Array_Structure/index.html#//apple_ref/swift/structctr/Array/s:FSacu__Rqd__Ss12SequenceTypezq_qqqd__S_9GeneratorSs13GeneratorType7Element_FMGSaq__Fqd__GSaq__" rel="nofollow">initializer</a> for <code>Array</code> that allows us to create a new array from an <code>ArraySlice</code>.</p> <p>For example:</p> <pre><code>let array = Array(1...4) // [1, 2, 3, 4] let arraySlice = array[0..&lt;3] let newArray = Array(arraySlice) print(newArray) // prints [1, 2, 3] </code></pre> <p>As a consequence, you will have to rewrite your code to something similar to this:</p> <pre><code>func aFunction(numbers: Array&lt;Int&gt;, position: Int) -&gt; Array&lt;Int&gt; { let newNumbers = numbers[0...position] return Array(newNumbers) } </code></pre> <hr> <h1>Using <code>prefix(_:)</code> to retrieve a subsequence of the first <em>n</em> elements of an array</h1> <p>Swift provides a <code>prefix(_:)</code> method for types that conform to <code>CollectionType</code> protocol (including <code>Array</code>). <code>prefix(_:)</code> has the following <a href="https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_CollectionType_Protocol/index.html#//apple_ref/swift/intfm/CollectionType/s:FeRq_Ss14CollectionType_SsS_6prefixuRq_S__Fq_FSiqq_S_11SubSequence" rel="nofollow">declaration</a>:</p> <pre><code>func prefix(maxLength: Int) -&gt; Self.SubSequence </code></pre> <blockquote> <p>Returns a subsequence, up to maxLength in length, containing the initial elements.</p> </blockquote> <p>Thus, you should prefer this method to any custom global function (as shown above) when you want to get the first <em>n</em> elements of an array. The following code shows how to use <code>prefix(_:)</code>:</p> <pre><code>let array = Array(1...4) // [1, 2, 3, 4] let newArray = array.prefix(2) print(newArray) // prints [1, 2] </code></pre>
<pre><code>func subArray&lt;T&gt;(array: [T], range: NSRange) -&gt; [T] { if range.location &gt; array.count { return [] } return Array(array[range.location..&lt;min(range.length, array.count)]) } </code></pre>