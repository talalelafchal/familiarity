UITableViewCell checkmark change on select
<p>Am I correct in thinking that to change the checkmark for "on" to "off", I must change the <code>CellAccessoryType</code> between <code>none</code> and <code>checkmark</code> on the <code>didSelectRowAtIndexPath</code>?</p> <p>Because I have done this but I have noticed the behaviour is not perfectly identical to like the checkmark cells on the auto lock settings on the iphone.</p> <p>Or is there some other way checkmarks are meant to be handled?</p>
<ol> <li><p>Keep a property in your view controller called <code>selectedRow</code>, which represents the index of a row that represents the checked item in a table section.</p></li> <li><p>In your view controller's <code>-tableView:cellForRowAtIndexPath:</code> delegate method, set the <code>accessoryType</code> of the <code>cell</code> to <code>UITableViewCellAccessoryCheckmark</code> if the cell's <code>indexPath.row</code> equals the <code>selectedRow</code> value. Otherwise, set it to <code>UITableViewCellAccessoryNone</code>.</p></li> <li><p>In your view controller's <code>-tableView:didSelectRowAtIndexPath:</code> delegate method, set the <code>selectedRow</code> value to the <code>indexPath.row</code> that is selected, e.g.: <code>self.selectedRow = indexPath.row</code></p></li> </ol>
<p>It should be </p> <blockquote> <p>didHighlightRowAtIndexPath</p> </blockquote> <p>instead of </p> <blockquote> <p>tableView:didSelectRowAtIndexPath</p> </blockquote>
<p>Alex answer worked for me only after adding reload table , <strong>in .h</strong></p> <pre><code>{ int selectedCell; } @property(nonatomic,readwrite)int selectedCell; </code></pre> <p><strong>in .m</strong> *<em>cellForRowAtIndexPath</em>* </p> <pre><code>if(indexPath.row == selectedCell) { cell.accessoryType = UITableViewCellAccessoryCheckmark; cell.selected = YES; } else { cell.accessoryType = UITableViewCellAccessoryNone; cell.selected = NO; } </code></pre> <p><strong>and in anywhere didHighlightRowAtIndexPath or didSelectRowAtIndexPath</strong></p> <pre><code> self.selectedCell = indexPath.row; [self.tableView reloadData]; </code></pre>
<p>Another solution:</p> <pre><code>-(NSIndexPath *)tableView:(UITableView *)tableView willSelectRowAtIndexPath:(NSIndexPath *)indexPath { NSIndexPath *oldIndex = [self.tableView indexPathForSelectedRow]; [self.tableView cellForRowAtIndexPath:oldIndex].accessoryType = UITableViewCellAccessoryNone; [self.tableView cellForRowAtIndexPath:indexPath].accessoryType = UITableViewCellAccessoryCheckmark; return indexPath; } </code></pre> <p>And yeah: you don't have to check if oldIndex is nil :)</p> <hr> <p>[EDIT: added Swift version]</p> <pre><code> override func tableView(tableView: UITableView, willSelectRowAtIndexPath indexPath: NSIndexPath) -&gt; NSIndexPath? { if let oldIndex = tableView.indexPathForSelectedRow { tableView.cellForRowAtIndexPath(oldIndex)?.accessoryType = .None } tableView.cellForRowAtIndexPath(indexPath)?.accessoryType = .Checkmark return indexPath } </code></pre>
<p>Zyphrax suggested a great solution that worked great for me! And if you need to clear the previous selected row, just use:</p> <pre><code>[self.tableView reloadData]; </code></pre> <p>in </p> <pre><code>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath </code></pre>
<p><strong>If you want to use your custom image as accessoryType use below code</strong></p> <pre><code>-(NSIndexPath *)tableView:(UITableView *)tableView willSelectRowAtIndexPath:(NSIndexPath *)indexPath { UIImageView *imgCheckMark = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"select_icon.png"]]; [imgCheckMark setFrame:CGRectMake(self.view.frame.size.width - 30, 25, 14, 18)]; imgCheckMark.tag = 1000+indexPath.row; NSIndexPath *oldIndex = [self.tblSelectService indexPathForSelectedRow]; [self.tblSelectService cellForRowAtIndexPath:oldIndex].accessoryView = UITableViewCellAccessoryNone; [self.tblSelectService cellForRowAtIndexPath:indexPath].accessoryView = imgCheckMark; return indexPath; } </code></pre>
<p>swift:</p> <pre><code>var selectedCell:UITableViewCell?{ willSet{ selectedCell?.accessoryType = .None newValue?.accessoryType = .Checkmark } } </code></pre> <p>then:</p> <pre><code>override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { selectedCell = self.tableView.cellForRowAtIndexPath(indexPath) self.mapView.selectAnnotation(self.mapView.annotations[indexPath.row], animated: true) } </code></pre>