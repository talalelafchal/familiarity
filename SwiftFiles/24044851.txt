How do you use String.substringWithRange? (or, how do Ranges work in Swift?)
<p>I have not yet been able to figure out how to get a substring of a <code>String</code> in Swift:</p> <pre><code>var str = “Hello, playground” func test(str: String) -&gt; String { return str.substringWithRange( /* What goes here? */ ) } test (str) </code></pre> <p>I'm not able to create a Range in Swift. Autocomplete in the Playground isn’t super helpful - this is what it suggests:</p> <pre><code>return str.substringWithRange(aRange: Range&lt;String.Index&gt;) </code></pre> <p>I haven't found anything in the Swift Standard Reference Library that helps. Here was another wild guess:</p> <pre><code>return str.substringWithRange(Range(0, 1)) </code></pre> <p>And this:</p> <pre><code>let r:Range&lt;String.Index&gt; = Range&lt;String.Index&gt;(start: 0, end: 2) return str.substringWithRange(r) </code></pre> <p>I've seen other answers (<a href="http://stackoverflow.com/questions/24029163/finding-index-of-character-in-swift-string">Finding index of character in Swift String</a>) that seem to suggest that since <code>String</code> is a bridge type for <code>NSString</code>, the "old" methods should work, but it's not clear how - e.g., this doesn't work either (doesn't appear to be valid syntax):</p> <pre><code>let x = str.substringWithRange(NSMakeRange(0, 3)) </code></pre> <p>Thoughts?</p>
<p><em>NOTE: @airspeedswift makes some <a href="http://airspeedvelocity.net/2014/09/14/accidentally-putting-a-loop-in-your-loop/" rel="nofollow">very insightful points</a> on the trade-offs of this approach, particularly the hidden performance impacts. Strings are not simple beasts, and getting to a particular index may take O(n) time, which means a loop that uses a subscript can be O(n^2). You have been warned.</em></p> <p>You just need to add a new <code>subscript</code> function that takes a range and uses <code>advancedBy()</code> to walk to where you want:</p> <pre><code>import Foundation extension String { subscript (r: Range&lt;Int&gt;) -&gt; String { get { let startIndex = self.startIndex.advancedBy(r.startIndex) let endIndex = startIndex.advancedBy(r.endIndex - r.startIndex) return self[Range(start: startIndex, end: endIndex)] } } } var s = "Hello, playground" println(s[0...5]) // ==&gt; "Hello," println(s[0..&lt;5]) // ==&gt; "Hello" </code></pre> <p><strike>(This should definitely be part of the language. Please dupe <a href="http://openradar.appspot.com/radar?id=6373877630369792" rel="nofollow">rdar://17158813</a>)</strike></p> <p>For fun, you can also add a <code>+</code> operator onto the indexes:</p> <pre><code>func +&lt;T: ForwardIndex&gt;(var index: T, var count: Int) -&gt; T { for (; count &gt; 0; --count) { index = index.succ() } return index } s.substringWithRange(s.startIndex+2 .. s.startIndex+5) </code></pre> <p>(I don't know yet if this one should be part of the language or not.)</p>
<p>You can use the substringWithRange method. It takes a start and end String.Index.</p> <pre><code>var str = "Hello, playground" str.substringWithRange(Range&lt;String.Index&gt;(start: str.startIndex, end: str.endIndex)) //"Hello, playground" </code></pre> <p>To change the start and end index, use advancedBy(n).</p> <pre><code>var str = "Hello, playground" str.substringWithRange(Range&lt;String.Index&gt;(start: str.startIndex.advancedBy(2), end: str.endIndex.advancedBy(-1))) //"llo, playgroun" </code></pre> <p>You can also still use the NSString method with NSRange, but you have to make sure you are using an NSString like this:</p> <pre><code>let myNSString = str as NSString myNSString.substringWithRange(NSRange(location: 0, length: 3)) </code></pre> <p>Note: as JanX2 mentioned, this second method is not safe with unicode strings.</p>
<p>The short answer is that this is really hard in Swift right now. My hunch is that there is still a bunch of work for Apple to do on convenience methods for things like this.</p> <p><code>String.substringWithRange()</code> is expecting a <code>Range&lt;String.Index&gt;</code> parameter, and as far as I can tell there isn't a generator method for the <code>String.Index</code> type. You can get <code>String.Index</code> values back from <code>aString.startIndex</code> and <code>aString.endIndex</code> and call <code>.succ()</code> or <code>.pred()</code> on them, but that's madness.</p> <p>How about an extension on the String class that takes good old <code>Int</code>s?</p> <pre><code>extension String { subscript (r: Range&lt;Int&gt;) -&gt; String { get { let subStart = advance(self.startIndex, r.startIndex, self.endIndex) let subEnd = advance(subStart, r.endIndex - r.startIndex, self.endIndex) return self.substringWithRange(Range(start: subStart, end: subEnd)) } } func substring(from: Int) -&gt; String { let end = countElements(self) return self[from..&lt;end] } func substring(from: Int, length: Int) -&gt; String { let end = from + length return self[from..&lt;end] } } let mobyDick = "Call me Ishmael." println(mobyDick[8...14]) // Ishmael let dogString = "This 's name is Patch." println(dogString[5..&lt;6]) // println(dogString[5...5]) // println(dogString.substring(5)) // 's name is Patch. println(dogString.substring(5, length: 1)) // </code></pre> <hr> <p><strong><em>Update:</strong> Swift beta 4 resolves the issues below!</em></p> <p>As it stands [in beta 3 and earlier], even Swift-native strings have some issues with handling Unicode characters. The dog icon above worked, but the following doesn't:</p> <pre><code>let harderString = "1:1️⃣" for character in harderString { println(character) } </code></pre> <p>Output:</p> <pre><code>1 : 1 ️ ⃣ </code></pre>
<p>For example to find the first name (up to the first space) in my full name:</p> <pre><code>let name = "Joris Kluivers" let start = name.startIndex let end = find(name, " ") if end { let firstName = name[start..end!] } else { // no space found } </code></pre> <p><code>start</code> and <code>end</code> are of type <code>String.Index</code> here and are used to create a <code>Range&lt;String.Index&gt;</code> and used in the subscript accessor (if a space is found at all in the original string).</p> <p>It's hard to create a <code>String.Index</code> directly from an integer position as used in the opening post. This is because in my name each character would be of equal size in bytes. But characters using special accents in other languages could have used several more bytes (depending on the encoding used). So what byte should the integer refer to?</p> <p>It's possible to create a new <code>String.Index</code> from an existing one using the methods <code>succ</code> and <code>pred</code> which will make sure the correct number of bytes are skipped to get to the next code point in the encoding. However in this case it's easier to search for the index of the first space in the string to find the end index.</p>
<p>There's been a lot of good examples of how to attack this problem. The original question was about using the substringWithRange, but as has been pointed out that's a harder way to go than just doing your own extension.</p> <p>The above range solution is good. You can also do this a dozen other ways. Here's yet another example of how you could do this:</p> <pre><code>extension String{ func sub(start: Int, length: Int) -&gt; String { assert(start &gt;= 0, "Cannot extract from a negative starting index") assert(length &gt;= 0, "Cannot extract a negative length string") assert(start &lt;= countElements(self) - 1, "cannot start beyond the end") assert(start + length &lt;= countElements(self), "substring goes past the end of the original") var a = self.substringFromIndex(start) var b = a.substringToIndex(length) return b } } var s = "apple12345" println(s.sub(6, length: 4)) // prints "2345" </code></pre>
<p><a href="http://www.learnswiftonline.com/reference-guides/string-reference-guide-for-swift/" rel="nofollow">http://www.learnswiftonline.com/reference-guides/string-reference-guide-for-swift/</a> shows that this works well:</p> <pre><code>var str = "abcd" str = str.substringToIndex(1) </code></pre>
<p>try this in playground</p> <pre><code>var str:String = "Hello, playground" let range = Range(start:advance(str.startIndex,1), end: advance(str.startIndex,8)) </code></pre> <p>it will give you <strong>"ello, p"</strong></p> <p>However where this gets really interesting is that if you make the last index bigger than the string in playground it will show any strings that you defined after str :o</p> <p>Range() appears to be a generic function so that it needs to know the type it is dealing with.</p> <p>You also have to give it the actual string your interested in playgrounds as it seems to hold all stings in a sequence one after another with their variable name afterwards.</p> <p>So</p> <pre><code>var str:String = "Hello, playground" var str2:String = "I'm the next string" let range = Range(start:advance(str.startIndex,1), end: advance(str.startIndex,49)) </code></pre> <p>gives <strong>"ello, playground�str���I'm the next string�str2�"</strong></p> <p>works even if str2 is defined with a let</p> <p>:)</p>
<p>Well, I had the same issue and solved with the "bridgeToObjectiveC()" function:</p> <pre><code>var helloworld = "Hello World!" var world = helloworld.bridgeToObjectiveC().substringWithRange(NSMakeRange(6,6)) println("\(world)") // should print World! </code></pre> <p>Please note that in the example, substringWithRange in conjunction with NSMakeRange take the part of the string starting at index 6 (character "W") and finishing at index 6 + 6 positions ahead (character "!")</p> <p>Cheers.</p>
<blockquote> <p>Since String is a bridge type for NSString, the "old" methods should work, but it's not clear how - e.g., this doesn't work either (doesn't appear to be valid syntax):</p> <pre><code> let x = str.substringWithRange(NSMakeRange(0, 3)) </code></pre> </blockquote> <p>To me, that is the really interesting part of your question. String <em>is</em> bridged to NSString, so <em>most</em> NSString methods <em>do</em> work directly on a String. You can use them freely and without thinking. So, for example, this works just as you expect:</p> <pre><code>// delete all spaces from Swift String stateName stateName = stateName.stringByReplacingOccurrencesOfString(" ", withString:"") </code></pre> <p>But, as so often happens, "I got my mojo workin' but it just don't work on you." You just happened to pick one of the rare cases where <em>a parallel identically named Swift method exists</em>, and in a case like that, the Swift method overshadows the Objective-C method. Thus, when you say <code>str.substringWithRange</code>, Swift thinks you mean the Swift method rather than the NSString method — and then you are hosed, because the Swift method expects a <code>Range&lt;String.Index&gt;</code>, and you don't know how to make one of those. </p> <p>The easy way out is to stop Swift from overshadowing like this, by casting explicitly:</p> <pre><code>let x = (str as NSString).substringWithRange(NSMakeRange(0, 3)) </code></pre> <p>Note that no significant extra work is involved here. "Cast" does not mean "convert"; the String <em>is</em> effectively an NSString. We are just telling Swift how to <em>look</em> at this variable for purposes of this one line of code.</p> <p>The really weird part of this whole thing is that the Swift method, which causes all this trouble, is undocumented. I have no idea where it is defined; it is not in the NSString header and it's not in the Swift header either.</p>
<p>Taking a page from Rob Napier, I developed these <a href="https://gist.github.com/albertbori/0faf7de867d96eb83591" rel="nofollow">Common String Extensions</a>, two of which are:</p> <pre><code>subscript (r: Range&lt;Int&gt;) -&gt; String { get { let startIndex = advance(self.startIndex, r.startIndex) let endIndex = advance(self.startIndex, r.endIndex - 1) return self[Range(start: startIndex, end: endIndex)] } } func subString(startIndex: Int, length: Int) -&gt; String { var start = advance(self.startIndex, startIndex) var end = advance(self.startIndex, startIndex + length) return self.substringWithRange(Range&lt;String.Index&gt;(start: start, end: end)) } </code></pre> <p>Usage:</p> <pre><code>"Awesome"[3...7] //"some" "Awesome".subString(3, length: 4) //"some" </code></pre>
<p>It is much more simple than any of the answers here, once you find the right syntax.</p> <p>I want to take away the [ and ]</p> <pre><code>let myString = "[ABCDEFGHI]" let startIndex = advance(myString.startIndex, 1) //advance as much as you like let endIndex = advance(myString.endIndex, -1) let range = startIndex..&lt;endIndex let myNewString = myString.substringWithRange( range ) </code></pre> <p>result will be "ABCDEFGHI" the startIndex and endIndex could also be used in </p> <pre><code>let mySubString = myString.substringFromIndex(startIndex) </code></pre> <p>and so on!</p> <p>PS: As indicated in the remarks, there are some syntax changes in swift 2 which comes with xcode 7 and iOS9!</p> <p>Please look at this <a href="http://stackoverflow.com/questions/24044851/how-do-you-use-string-substringwithrange-or-how-do-ranges-work-in-swift">page</a> </p>
<p>This is how you get a range from a string:</p> <pre><code>var str = "Hello, playground" let startIndex = advance(str.startIndex, 1) let endIndex = advance(startIndex, 8) let range = startIndex..&lt;endIndex let substr = str[range] //"ello, pl" </code></pre> <p>The key point is that you are passing a range of values of type String.Index (this is what advance returns) instead of integers. </p> <p>The reason why this is necessary, is that strings in Swift don't have random access (because of variable length of Unicode characters basically). You also can't do <code>str[1]</code>. String.Index is designed to work with their internal structure. </p> <p>You can create an extension with a subscript though, that does this for you, so you can just pass a range of integers (see e.g. <a href="http://stackoverflow.com/a/24046551/930450">Rob Napier's answer</a>). </p>
<p>This works in my playground :) </p> <pre><code>String(seq: Array(str)[2...4]) </code></pre>
<p>You can use any of the substring methods in a Swift String extension I wrote <a href="https://bit.ly/JString" rel="nofollow">https://bit.ly/JString</a>.</p> <pre><code>var string = "hello" var sub = string.substringFrom(3) // or string[3...5] println(sub)// "lo" </code></pre>
<p>If you have an <code>NSRange</code>, bridging to <code>NSString</code> works seamlessly. For example, I was doing some work with <code>UITextFieldDelegate</code> and I quickly wanted to compute the new string value when it asked if it should replace the range. </p> <pre><code>func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&gt; Bool { let newString = (textField.text as NSString).stringByReplacingCharactersInRange(range, withString: string) println("Got new string: ", newString) } </code></pre>
<p>In new Xcode 7.0 use</p> <pre><code>//: Playground - noun: a place where people can play import UIKit var name = "How do you use String.substringWithRange?" let range = name.startIndex.advancedBy(0)..&lt;name.startIndex.advancedBy(10) name.substringWithRange(range) //OUT: </code></pre> <p><a href="https://i.stack.imgur.com/1wYAl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/1wYAl.png" alt="enter image description here"></a></p>
<p>In Swift 2.0 you can use this extensions to improve <code>substringWithRange</code></p> <pre><code>extension String { func substringWithRange(start: Int, end: Int) -&gt; String { if (start &lt; 0 || start &gt; self.characters.count) { print("start index \(start) out of bounds") return "" } else if end &lt; 0 || end &gt; self.characters.count { print("end index \(end) out of bounds") return "" } let range = Range(start: self.startIndex.advancedBy(start), end: self.startIndex.advancedBy(end)) return self.substringWithRange(range) } func substringWithRange(start: Int, location: Int) -&gt; String { if (start &lt; 0 || start &gt; self.characters.count) { print("start index \(start) out of bounds") return "" } else if location &lt; 0 || start + location &gt; self.characters.count { print("end index \(start + location) out of bounds") return "" } let range = Range(start: self.startIndex.advancedBy(start), end: self.startIndex.advancedBy(start + location)) return self.substringWithRange(range) } } </code></pre> <p>Usage:</p> <pre><code>let str = "Hello, playground" let substring1 = str.substringWithRange(0, end: 5) //Hello let substring2 = str.substringWithRange(7, location: 10) //playground </code></pre>
<p>Rob Napier had already given a awesome answer using subscript. But i felt one drawback in that as there is no check for out of bound conditions. This can tend to crash. So i modified the extension and here it is</p> <pre><code>extension String { subscript (r: Range&lt;Int&gt;) -&gt; String? { //Optional String as return value get { let stringCount = self.characters.count as Int //Check for out of boundary condition if (stringCount &lt; r.endIndex) || (stringCount &lt; r.startIndex){ return nil } let startIndex = self.startIndex.advancedBy(r.startIndex) let endIndex = self.startIndex.advancedBy(r.endIndex - r.startIndex) return self[Range(start: startIndex, end: endIndex)] } } } </code></pre> <p>Output below</p> <pre><code>var str2 = "Hello, World" var str3 = str2[0...5] //Hello, var str4 = str2[0..&lt;5] //Hello var str5 = str2[0..&lt;15] //nil </code></pre> <p>So i suggest always to check for the if let</p> <pre><code>if let string = str[0...5] { //Manipulate your string safely } </code></pre>
<p><strong>SWIFT 2.0/3.0 in Xcode 8 beta 5</strong></p> <p>simple:</p> <pre><code>let myString = "full text container" myString[myString.startIndex..&lt;myString.startIndex.advancedBy(3)] // prints: ful </code></pre> <p><strong>swift 3.0 in Xcode 8 beta 6 or later</strong></p> <pre><code>myString[myString.startIndex..&lt;myString.index(myString.startIndex, offsetBy: 3)] // prints: ful </code></pre>
<h2>Swift 2.0</h2> <p>Simple</p> <pre><code>let str = "My String" let subStr = str[str.startIndex.advancedBy(3)...str.startIndex.advancedBy(7)] //"Strin" </code></pre> <h2>Swift 3</h2> <pre><code>let startIndex = str.index(str.startIndex, offsetBy: 3) let endIndex = str.index(str.startIndex, offsetBy: 7) str[startIndex...endIndex] // "Strin" str.substring(to: startIndex) // "My " str.substring(from: startIndex) // "String" </code></pre>
<p>Sample Code for how to get substring in <strong>Swift 2.0</strong> </p> <p><strong><em>(i) Substring from starting index</em></strong></p> <p>Input:-</p> <pre><code>var str = "Swift is very powerful language!" print(str) str = str.substringToIndex(str.startIndex.advancedBy(5)) print(str) </code></pre> <p>Output:-</p> <pre><code>Swift is very powerful language! Swift </code></pre> <p><strong><em>(ii) Substring from particular index</em></strong></p> <p>Input:- </p> <pre><code>var str = "Swift is very powerful language!" print(str) str = str.substringFromIndex(str.startIndex.advancedBy(6)).substringToIndex(str.startIndex.advancedBy(2)) print(str) </code></pre> <p>Output:-</p> <pre><code>Swift is very powerful language! is </code></pre> <p>I hope it will help you!</p>
<p>Updated for Xcode 7. Adds String extension:</p> <p>Use:</p> <pre><code>var chuck: String = "Hello Chuck Norris" chuck[6...11] // =&gt; Chuck </code></pre> <p>Implementation:</p> <pre><code>extension String { /** Subscript to allow for quick String substrings ["Hello"][0...1] = "He" */ subscript (r: Range&lt;Int&gt;) -&gt; String { get { let start = self.startIndex.advancedBy(r.startIndex) let end = self.startIndex.advancedBy(r.endIndex - 1) return self.substringWithRange(start..&lt;end) } } } </code></pre>
<p>First create the range, then the substring. You can use <code>fromIndex..&lt;toIndex</code> syntax like so:</p> <pre><code>let range = fullString.startIndex..&lt;fullString.startIndex.advancedBy(15) // 15 first characters of the string let substring = fullString.substringWithRange(range) </code></pre>
<p><strong>here is a example to get video-Id only .i.e (6oL687G0Iso)</strong> from the whole URL in swift</p> <pre><code>let str = "https://www.youtube.com/watch?v=6oL687G0Iso&amp;list=PLKmzL8Ib1gsT-5LN3V2h2H14wyBZTyvVL&amp;index=2" var arrSaprate = str.componentsSeparatedByString("v=") let start = arrSaprate[1] let rangeOfID = Range(start: start.startIndex,end:start.startIndex.advancedBy(11)) let substring = start[rangeOfID] print(substring) </code></pre>
<p>Simple <strong>extension</strong> for <code>String</code>:</p> <pre><code>extension String { func substringToIndex(index: Int) -&gt; String { return self[startIndex...startIndex.advancedBy(min(index, characters.count - 1))] } } </code></pre>
<p>I tried to come up with something Pythonic.</p> <p>All the subscripts here are great, but the times I really need something simple is usually when I want to count from back, e.g. <code>string.endIndex.advancedBy(-1)</code></p> <p>It supports <code>nil</code> values, for both start and end index, where <code>nil</code> would mean index at 0 for start, <code>string.characters.count</code> for end.</p> <pre><code>extension String { var subString: (Int?) -&gt; (Int?) -&gt; String { return { (start) in { (end) in let startIndex = start ?? 0 &lt; 0 ? self.endIndex.advancedBy(start!) : self.startIndex.advancedBy(start ?? 0) let endIndex = end ?? self.characters.count &lt; 0 ? self.endIndex.advancedBy(end!) : self.startIndex.advancedBy(end ?? self.characters.count) return startIndex &gt; endIndex ? "" : self.substringWithRange(startIndex ..&lt; endIndex) } } } } let dog = "Dog‼" print(dog.subString(nil)(-1)) // Dog!! </code></pre> <p><strong>EDIT</strong></p> <p>A more elegant solution:</p> <pre><code>public extension String { struct Substring { var start: Int? var string: String public subscript(end: Int?) -&gt; String { let startIndex = start ?? 0 &lt; 0 ? string.endIndex.advancedBy(start!) : string.startIndex.advancedBy(start ?? 0) let endIndex = end ?? string.characters.count &lt; 0 ? string.endIndex.advancedBy(end!) : string.startIndex.advancedBy(end ?? string.characters.count) return startIndex &gt; endIndex ? "" : string.substringWithRange(startIndex ..&lt; endIndex) } } public subscript(start: Int?) -&gt; Substring { return Substring(start: start, string: self) } } let dog = "Dog‼" print(dog[nil][-1]) // Dog!! </code></pre>
<p><strong>Swift 3.0</strong></p> <p>I decided to have a little fun with this and produce an extension on <code>String</code>. I might not be using the word truncate properly in what I'm having the function actually do.</p> <pre><code>extension String { func truncate(from initialSpot: Int, withLengthOf endSpot: Int) -&gt; String? { guard endSpot &gt; initialSpot else { return nil } guard endSpot + initialSpot &lt;= self.characters.count else { return nil } let truncated = String(self.characters.dropFirst(initialSpot)) let lastIndex = truncated.index(truncated.startIndex, offsetBy: endSpot) return truncated.substring(to: lastIndex) } } let favGameOfThronesSong = "Light of the Seven" let word = favGameOfThronesSong.truncate(from: 1, withLengthOf: 4) // "ight" </code></pre>
<pre><code>let startIndex = text.startIndex var range = startIndex.advancedBy(1) ..&lt; text.endIndex.advancedBy(-4) let substring = text.substringWithRange(range) </code></pre> <p>Full sample you can see <a href="https://gist.github.com/svetlanama/59c0259626b532208ae82534e77998e4" rel="nofollow">here</a></p>
<p>At the time I'm writing, no extension is perfectly <strong>Swift 3</strong> compatible, so here is one that covers all the needs I could think of:</p> <pre><code>extension String { func substring(from: Int?, to: Int?) -&gt; String { if let start = from { guard start &lt; self.characters.count else { return "" } } if let end = to { guard end &gt; 0 else { return "" } } if let start = from, let end = to { guard end - start &gt; 0 else { return "" } } let startIndex: String.Index if let start = from, start &gt;= 0 { startIndex = self.index(self.startIndex, offsetBy: start) } else { startIndex = self.startIndex } let endIndex: String.Index if let end = to, end &gt;= 0, end &lt; self.characters.count { endIndex = self.index(self.startIndex, offsetBy: end + 1) } else { endIndex = self.endIndex } return self[startIndex ..&lt; endIndex] } func substring(from: Int) -&gt; String { return self.substring(from: from, to: nil) } func substring(to: Int) -&gt; String { return self.substring(from: nil, to: to) } func substring(from: Int?, length: Int) -&gt; String { guard length &gt; 0 else { return "" } let end: Int if let start = from, start &gt; 0 { end = start + length - 1 } else { end = length - 1 } return self.substring(from: from, to: end) } func substring(length: Int, to: Int?) -&gt; String { guard let end = to, end &gt; 0, length &gt; 0 else { return "" } let start: Int if let end = to, end - length &gt; 0 { start = end - length + 1 } else { start = 0 } return self.substring(from: start, to: to) } } </code></pre> <p>And then, you can use:</p> <pre><code>let string = "Hello,World!" </code></pre> <p><code>string.substring(from: 1, to: 7)</code>gets you: <code>ello,Wo</code></p> <p><code>string.substring(to: 7)</code>gets you: <code>Hello,Wo</code></p> <p><code>string.substring(from: 3)</code>gets you: <code>lo,World!</code></p> <p><code>string.substring(from: 1, length: 4)</code>gets you: <code>ello</code></p> <p><code>string.substring(length: 4, to: 7)</code>gets you: <code>o,Wo</code></p> <p>Updated <code>substring(from: Int?, length: Int)</code> to support starting from zero.</p>
<p>Make an extension that includes basic subStringing that nearly all other languages have:</p> <pre><code>extension String { func subString(start: Int, end: Int) -&gt; String { let startIndex = self.index(self.startIndex, offsetBy: start) let endIndex = self.index(startIndex, offsetBy: end) let finalString = self.substring(from: startIndex) return finalString.substring(to: endIndex) } } </code></pre> <p>Simply call this with</p> <pre><code>someString.subString(start: 0, end: 6) </code></pre>
<p>In <strong>Swift3</strong></p> <p>For ex: a variable "Duke James Thomas", we need to get "James". </p> <pre><code>let name = "Duke James Thomas" let range: Range&lt;String.Index&gt; = name.range(of:"James")! let lastrange: Range&lt;String.Index&gt; = img.range(of:"Thomas")! var middlename = name[range.lowerBound..&lt;lstrange.lowerBound] print (middlename) </code></pre>