Get from AnyObject(NSString) to String
<p>I am reading a plist key (NSArray with n NSDictionaries):</p> <pre><code> let regionsToMonitor = NSBundle.mainBundle().infoDictionary["Regions"] as Array&lt;Dictionary&lt;String,AnyObject&gt;&gt; </code></pre> <p>now I iterate over it:</p> <pre><code> for regionToMonitor in regionsToMonitor { </code></pre> <p>and now I want to to get uuidString of the regionToMonitor</p> <p>in ObjC: <code>NSString *uuidString = regionToMonitor[@"uuidString"];</code></p> <p>in swift I try: <code>let uuidString = regionToMonitor["uuid"]!.stringValue;</code></p> <p>the above does compile but the string is always <code>nil</code> in swift. <code>regionToMonitor["uuid"]</code> when used without !.stringValue works fine in <code>println</code></p> <p>how do I get a valid Swift.String here?</p> <p><strong>I am trying to pass it to NSUUID!</strong></p> <hr> <p>I also tried</p> <p><code>let uuidString:String = regionToMonitor["uuid"]</code><br/> => AnyObject isn't convertible to String</p> <p><code>let uuidString = regionToMonitor["uuid"] as String</code><br/> => Could not find an overload for 'subscript' that accepts the supplied arguments</p> <p><code>let uuidString = regionToMonitor["uuid"];</code><br/> => 'AnyObject?' cannot be implicitly downcast to 'String'; did you mean to use 'as' to force downcast?</p>
<p><code>AnyObject?</code> is an optional, because the dictionary may or may not contain a value for the "uuid" key. To get at an optional's value, you have to <em>unwrap</em> it. See <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_428" rel="nofollow">Optionals</a> in the documentation.</p> <p>The safest way to deal with an optional is to put it in a conditional statement.</p> <pre><code>if let uuidString = regionToMonitor["uuid"] { // do something with uuidString } </code></pre> <p>If you're absolutely positively sure the dictionary will always contain this key/value pair, you can use an implicitly unwrapped optional (the <code>!</code> suffix):</p> <pre><code>println("UUID: \(regionToMonitor["uuid"]!)") </code></pre> <p>In this case, if there's no value for the key your app will crash.</p> <p>If you use <code>!</code> a lot, it looks like you're yelling all the time... which might help illustrate why you should use it sparingly, if at all. :)</p>
<p>I've found a working solution, which compiles without warnings and such:</p> <pre><code>var regions = NSBundle.mainBundle().infoDictionary["Regions"] as Array&lt;Dictionary&lt;String, AnyObject&gt;&gt; for region in regions { let dict: NSDictionary = region var uuid = dict["uuidString"] as String } </code></pre> <p>The <code>infoDictionary</code> from the <code>NSBundle</code> returns an <code>NSArray</code> and <code>NSDictionary</code>, not a <code>Swift.Array</code> or <code>Swift.Dictionary</code>. Though, they should be interchangeable, but maybe they aren't as we though.</p>
<p>I ended up with the ugly line:</p> <pre><code>var uuidString:String = regionToMonitor["uuid"] as! String </code></pre> <p>no warnings, no errors, no runtime error</p>
<p>You can also use</p> <pre><code>var uuidString = regionToMonitor["uuid"]? as String </code></pre> <p>It has the same results as what you are doing, but is IMHO more clear in intent. The <code>as</code> operator force unwraps anyway, so putting the exclamation mark behind it feels redundant. Putting the question mark behind the dictionary subscript makes it clear you are chaining an optional.</p>
<p>I found this to work for me</p> <pre><code>var uuidString: String? = regionToMonitor["uuid"] as AnyObject? as? String </code></pre> <p>EDIT: this was the answer for an older swift version</p> <p>Please use the accepted answer.</p>
<p>If you are sure you want the unwrapped value you can use any of these:</p> <pre><code>var uuidString:String! = regionToMonitor["uuid"] var uuidString = regionToMonitor["uuid"] as String! </code></pre> <p>or even this:</p> <pre><code>if var uuidString = regionToMonitor["uuid"] { println("\(uuidString) has been unwrapped") } </code></pre>
<p>I am not sure my solution is effective of not but here it is.</p> <pre><code>var uuidVar = regionToMonitor["uuid"] var uuidString:String = "\(uuidVar)" </code></pre> <p>Hope it helps.</p>