Using stringByReplacingCharactersInRange in Swift
<p>I'm trying to use UITextFieldDelegate in Swift/Xcode6 and I'm struggling with the way I'm supposed to use stringByReplacingCharactersInRange. The compiler error is 'Cannot convert the expression's type 'String' to type '$T8'.</p> <pre><code>func textField(textField: UITextField!, shouldChangeCharactersInRange range: NSRange, replacementString string: String!) -&gt; Bool { let s = textField.text.stringByReplacingCharactersInRange(range:range, withString:string) if countElements(s) &gt; 0 { } else { } return true } </code></pre> <p>Update for Xcode 6 Beta 5: The thing is shouldChangeCharactersInRange gives an NSRange object and we'd need a Swift Range object for stringByReplacingCharactersInRange. Can this still be considered a bug as I don't see why we should still be dealing with NS* objects? The String argument of the delegate method is anyway of a Swift type.</p>
<ol> <li><code>String</code> has no <code>stringByReplacingCharactersInRange</code> method. Convert to <code>NSString</code>.</li> <li>You have to leave out the first argument's name.</li> </ol> <p>This should work:</p> <pre><code>let s = textField.text.bridgeToObjectiveC().stringByReplacingCharactersInRange(range, withString:string) </code></pre>
<p>Creating String.Index is cumbersome.</p> <pre><code>let string = "hello" let range = string.startIndex .. string.startIndex.succ().succ() let result = string.stringByReplacingCharactersInRange(range, withString: "si") </code></pre>
<p>The simplest solution I have found is using <code>as NSString</code> - that enables us to use <code>NSRange</code>.</p> <pre><code>var textField : UITextField = UITextField() textField.text = "this is a test" let nsRange : NSRange = NSRange(location: 0, length: 4) let replaced = (textField.text as NSString) .stringByReplacingCharactersInRange(nsRange, withString: "that"); NSLog("Replaced: %@", replaced); //prints "that is a test" </code></pre>
<p>This is a cross-post from <a href="http://stackoverflow.com/questions/24044851/how-do-you-use-string-substringwithrange-or-how-do-ranges-work-in-swift">this question</a>, but without a way to make a <code>Range&lt;String.Index&gt;</code> the Swift-native <code>String.stringByReplacingCharactersInRange()</code> is pretty useless. So, here's a function to generate a <code>Range&lt;String.Index&gt;</code>:</p> <pre><code>func RangeMake(#start:Int, #end:Int) -&gt; Range&lt;String.Index&gt; { assert(start &lt;= end, "start must be less than or equal to end") func rep(str: String, count: Int) -&gt; String { var result = "" for i in 0..count { result += str } return result } let length = end - start let padding = rep(" ", start) let dashes = rep("-", length) let search = padding + dashes return search.rangeOfString(dashes, options: nil, range: Range(start: search.startIndex, end: search.endIndex), locale: NSLocale.systemLocale()) } let sourceString = "Call me Ishmael." let range = RangeMake(start: 8, end: 15) let name = sourceString.substringWithRange(range) // name = "Ishmael" </code></pre>
<p>I created an extension to <code>NSRange</code> the converted to <code>Range&lt;String.Index&gt;</code></p> <pre><code>extension NSRange { func toRange(string: String) -&gt; Range&lt;String.Index&gt; { let startIndex = advance(string.startIndex, location) let endIndex = advance(startIndex, length) return startIndex..&lt;endIndex } } </code></pre> <p>So I can create the String like this</p> <pre><code>let text = textField.text let newText = text.stringByReplacingCharactersInRange(range.toRange(text), withString: string) </code></pre> <p>in Swift 2.1 the extension looks like:</p> <pre><code>extension NSRange { func toRange(string: String) -&gt; Range&lt;String.Index&gt; { let startIndex = string.startIndex.advancedBy(location) let endIndex = startIndex.advancedBy(length) return startIndex..&lt;endIndex } } </code></pre>
<pre><code>let newString = (textField.text as NSString).stringByReplacingCharactersInRange(range, withString: string) </code></pre> <p>bridgeToObjectiveC can be removed in coming updates</p>
<p>for iOS 8.3 use following code</p> <pre><code> func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&gt; Bool { if textField.isEqual(&lt;textField whose value to be copied&gt;) { &lt;TextField to be updated&gt;.text = (textField.text as NSString).stringByReplacingCharactersInRange(range, withString: string) } return true } </code></pre>
<pre><code>import UIKit class LoginViewController: UIViewController, UITextFieldDelegate { @IBOutlet weak var submitButton: UIButton! override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&gt; Bool { let length = count(textField.text) - range.length + count(string) if length &gt; 0 { submitButton.enabled = true } else { submitButton.enabled = false } return true } } </code></pre>
<p>Nothing worked for me except the following: (FYI I'm using <strong>Xcode7.0 GM</strong>, <strong>Swift 2.0</strong>, <strong>iOS9GM</strong>)</p> <pre><code>func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&gt; Bool { let currentText = textField.text ?? "" let prospectiveText = (currentText as NSString).stringByReplacingCharactersInRange(range, withString: string) print("prospectiveText", prospectiveText) return true; } </code></pre>
<p>With Swift 2.0, the answer from Durul must be changed because characters.count must be used instead of count().</p> <p>The following must be done. </p> <pre><code>func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&gt; Bool { let length = textField.text!.characters.count - range.length + string.characters.count if length &gt; 0 { submitButton.enabled = true } else { submitButton.enabled = false } return true } </code></pre>
<p>Swift 3 version. No more NSRange -> "Range"</p> <pre><code>public func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -&gt; Bool{ let title:String; if let original = textView.text { let startIndex = original.index(original.startIndex, offsetBy:range.location); let endIndex = original.index(startIndex, offsetBy:range.length); title = original.replacingCharacters(in: startIndex..&lt;endIndex, with: text) }else{ title = text; } </code></pre>