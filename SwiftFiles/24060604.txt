For Loop in Apple Swift
<p>Apple's newly released language Swift has an example on the <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-ID462" rel="nofollow">official documentation</a>. Example is like this;</p> <pre><code>let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25], ] var largest = 0 for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { largest = number } } } largest </code></pre> <p>This is pretty simple but as an extra exercise,it requires to add another variable in order to return what type is the largest number (i.e. Square is the case here)</p> <p>However, I can't seem to figure out what is "(kind,numbers)" here represent and how should I make my for-loop to go through all Dictionary(interestingNumbers) keys and find which key has the largest number.</p> <p>Thank you all for your help in advance</p>
<pre><code>let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25], ] var largest = 0 for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { largest = number } } } largest </code></pre> <p>This will return pair of (String,Int) which we have in Our Dictionary similar to function return multiple value as below,</p> <pre><code> func refreshWebPage() -&gt; (status:String,code:Int){ //refresh logic return ("Success",200) } </code></pre>
<p>You can do this way,</p> <pre><code> var key="" if number &gt; largest { largest = number key = Kind } </code></pre> <p>Now <code>key</code> holds the Kind which has the max number.</p>
<blockquote> <p>I can't seem to figure out what is "(kind,numbers)" here represents</p> </blockquote> <p>It's a key-value pair (a tuple) containing the kind of the number. This syntax is called decomposition, basically, inside the loop you can access <code>kind</code> as the kind and <code>numbers</code> as the numbers that map for it.</p> <p>For example, in some iteration:</p> <pre><code>kind // "Prime" numbers // [2, 3, 5, 7, 11, 13] </code></pre> <p>Quoting the guide:</p> <blockquote> <p>You can also iterate over a dictionary to access its key-value pairs. Each item in the dictionary is returned as a (key, value) tuple when the dictionary is iterated, and you can decompose the (key, value) tupleâ€™s members as explicitly named constants for use within in the body of the for-in loop. </p> </blockquote>
<pre><code>for (kind, numbers) in interestingNumbers{} </code></pre> <p>This for loop actually enumerating the key/value pairs of dictionary <code>interestingNumbers</code>. Where <code>kind</code> is the <em><strong>key</strong></em> and numbers is the correspoding <em><strong>value</em></strong> </p> <pre><code>kind:Prime //Key numbers: [2, 3, 5, 7, 11, 13] //Value </code></pre> <p>Here the complete solution of the exercise </p> <pre><code>let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25], ] var largest = 0 var type: String = "" for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { largest = number type = kind } } } largest type </code></pre>
<blockquote> <p>However, I can't seem to figure out what is "(kind,numbers)" here represent </p> </blockquote> <p>The loop iterates over the dictionary, and every iteration gives you a key and associated value. Those are called <code>kind</code> (key) and <code>numbers</code> (value) here. You can choose any name you want.</p> <blockquote> <p>and how should I make my for-loop to go through all Dictionary(interestingNumbers) keys and find which key has the largest number.</p> </blockquote> <p>You get each key in turn in the <code>kind</code> loop variable.</p> <p>Once you find one that results in a new <code>largest</code>, you can assign that to a result variable, say <code>largestKind</code>.</p> <p>At the end of the loop, <code>largestKind</code> will contain the key of the array with the largest number (that number being the <code>largest</code> you already have).</p>
<p>Swift allows you to loop over a dictionary with <em>tuple-syntax</em> <code>(key, value)</code>. So in every iteration of the for-loop Swift cares about reassigning the specified tuple-variables (<code>kind</code> and <code>number</code> in your case) to the actual dictionary-record.</p> <p>To figure out which Key includes the highest number in your example you can extend your code as follows:</p> <pre><code>let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25], ] var largest = 0 var largestKey = "" for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { largest = number largestKey = kind } } } largest // =25 largestKey // ="Square" </code></pre> <p>Or if you want to practice the tuple-syntax try that (with the same result):</p> <pre><code>var largest = 0 var largestKey = "" for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { (largestKey, largest) = (kind, number) } } } largest // =25 largestKey // ="Square" </code></pre>