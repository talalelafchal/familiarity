Unwrap an Enum Tuple outside of a Switch in Swift
<p>So one of the cool new features in Swift is more advanced <code>enum</code>s and the possibility to associate more complex data. For example, I could do something like this:</p> <pre><code>enum Location { case GeoPoint(latitude: Double, longitude: Double) case Address(address: String) } var address = Location.Address(address: "1234 Fake St, Fakesville TN, 41525") var geoPoint = Location.GeoPoint(latitude: 42.342, longitude: -32.998) // address or geoPoint switch address { case .Address(let addressStr): // Unwrapped value as 'addressStr' println("Address: \(addressStr)") case .GeoPoint(let latitude, let longitude): // Unwrapped values as 'latitude' and 'longitude' println("lat: \(latitude) long: \(longitude)") } </code></pre> <p>Is it possible to unwrap these inner values outside of a <code>switch</code> statement? Something like:</p> <pre><code>var addressStr = address.0 </code></pre> <p>Why?</p> <p>I don't have a good reason, I'm just experimenting with the language. </p>
<p>I don't think it's possible, because an enum variable is not guaranteed to be a case with those inner values. You could add a computed property that unwraps it for you:</p> <pre><code>enum Location { var address: String? { get { switch self { case .Address(let address) return address default: return nil } } } case GeoPoint(latitude: Double, longitude: Double) case Address(address: String) } </code></pre> <p>Then you can do:</p> <pre><code>var addressStr = address.address </code></pre>
<p>I think you are looking at enumeration wrong. The enumeration type can only be one of the values. In this case a location can only be a GeoPoint or an Address, not both. The switch statement determines which one it is. I think the functionality you are looking for here is a structure like this:</p> <pre><code>struct Geopoint{ var longitude : Double = 0.0 var latitude : Double = 0.0 } struct Location{ var address : String = "" var geopoint: Geopoint } </code></pre> <p>Then you can create a new instance of <code>Location</code> and access its properties.</p> <pre><code>var location = Location(address: "1 Example Street ...", geopoint:Geopoint(longitude: 12.2, latitude: 53.2)) println(location.address); </code></pre>
<p>Fortunately you can do that in Swift 2 with an <code>if case</code>:</p> <pre><code>if case .Address(let addressString) = address { // do something with addressString } </code></pre>