Using C style unsigned char array and bitwise operators in Swift
<p>I'm working on changing some Objective-C Code over to Swift, and I cannot figure out for the life of me how to take care of unsigned char arrays and bitwise operations in this specific instance of code.</p> <p>Specifically, I'm working on converting the following Objective-C code (which deals with CoreBluetooth) to Swift:</p> <pre><code>unsigned char advertisementBytes[21] = {0}; [self.proximityUUID getUUIDBytes:(unsigned char *)&amp;advertisementBytes]; advertisementBytes[16] = (unsigned char)(self.major &gt;&gt; 8); advertisementBytes[17] = (unsigned char)(self.major &amp; 255); </code></pre> <p>I've tried the following in Swift:</p> <pre><code>var advertisementBytes: CMutablePointer&lt;CUnsignedChar&gt; self.proximityUUID.getUUIDBytes(advertisementBytes) advertisementBytes[16] = (CUnsignedChar)(self.major &gt;&gt; 8) </code></pre> <p>The problems I'm running into are that getUUIDBytes in Swift seems to only take a <code>CMutablePointer&lt;CUnsignedChar&gt;</code> object as an argument, rather than an array of CUnsignedChars, so I have no idea how to do the later bitwise operations on advertisementBytes, as it seems it would need to be an unsignedChar array to do so.</p> <p>Additionally, <code>CMutablePointer&lt;CUnsignedChar[21]&gt;</code> throws an error saying that fixed length arrays are not supported in CMutablePointers in Swift.</p> <p>Could anyone please advise on potential work-arounds or solutions? Many thanks.</p>
<p>Have a look at <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html">Interacting with C APIs</a></p> <p>Mostly this</p> <blockquote> <p>C Mutable Pointers</p> <p>When a function is declared as taking a CMutablePointer argument, it can accept any of the following:</p> <ul> <li>nil, which is passed as a null pointer </li> <li>A CMutablePointer value</li> <li>An in-out expression whose operand is a stored lvalue of type Type, which is passed as the address of the lvalue </li> <li>An in-out Type[] value, which is passed as a pointer to the start of the array, and lifetime-extended for the duration of the call </li> </ul> <p>If you have declared a function like this one:</p> <p>SWIFT</p> <pre><code>func takesAMutablePointer(x: CMutablePointer&lt;Float&gt;) { /*...*/ } You </code></pre> <p>can call it in any of the following ways:</p> <p>SWIFT</p> <pre><code>var x: Float = 0.0 var p: CMutablePointer&lt;Float&gt; = nil var a: Float[] = [1.0, 2.0, 3.0] takesAMutablePointer(nil) takesAMutablePointer(p) takesAMutablePointer(&amp;x) takesAMutablePointer(&amp;a) </code></pre> </blockquote> <p>So you code becomes</p> <pre><code>var advertisementBytes = CUnsignedChar[]() self.proximityUUID.getUUIDBytes(&amp;advertisementBytes) advertisementBytes[16] = CUnsignedChar(self.major &gt;&gt; 8) </code></pre>