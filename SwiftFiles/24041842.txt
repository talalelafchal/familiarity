How to use indexesOfObjectsPassingTest: in Swift
<p>The declaration of indexesOfObjectsPassingTest: looks like this in Swift,</p> <pre><code>func indexesOfObjectsPassingTest(predicate: ((AnyObject!, Int, CMutablePointer&lt;ObjCBool&gt;) -&gt; Bool)!) -&gt; NSIndexSet! </code></pre> <p>I've tried all sorts of permutations to get this to work, but I'm stumped, particularly with how you deal with this piece, <code>CMutablePointer&lt;ObjCBool&gt;) -&gt; Bool)!</code>. I found it confusing enough, when I was first learning blocks in objective-c, how you translate from the declaration to actual use of a method, and the syntax of Swift is at least as confusing.</p>
<p>The block syntax is being replaced in Swift by a closure, the <code>predicate</code> parameter here.</p> <p>So you can just do:</p> <pre><code>var array = NSArray(array: [1, 2, 3, 4, 5]) var indexSet = array.indexesOfObjectsPassingTest({ (val: AnyObject!, index: Int, stop: CMutablePointer&lt;ObjCBool&gt;) -&gt; Bool in return index &gt; 2 }) indexSet.count </code></pre> <p>Out of the method, it could look like this:</p> <pre><code>var closure = {(val: AnyObject!, index: Int, stop: CMutablePointer&lt;ObjCBool&gt;) -&gt; Bool? in /* Do Something */ } </code></pre> <p>Hope this helps.</p>
<p>This code is working in the Playground for me ;) Hope it helps a bit</p> <h2>Extra Function-Definition</h2> <pre><code>import Cocoa let list = [2, 3, 4, 5, 6, 7, 8] func test (object: AnyObject!, index: Int, stop: CMutablePointer&lt;ObjCBool&gt;) -&gt; Bool { let number = object as Int return (number % 2 == 0) //for even numbers } let result: NSIndexSet = (list as NSArray).indexesOfObjectsPassingTest(test) println("\(result.lastIndex)") //prints "6" (because 8%2=0) </code></pre> <h2>Inline-Closure</h2> <p>I transformed my above example to work with an inline-closure (described in the Swift-eBook). The parameter-list and return-type is separated by the term <code>in</code>. </p> <pre><code>import Cocoa let list = [2, 3, 4, 5, 6, 7, 8] let result: NSIndexSet = (list as NSArray).indexesOfObjectsPassingTest({ (object: AnyObject!, index: Int, stop: CMutablePointer&lt;ObjCBool&gt;) -&gt; Bool in let number = object as Int return (number % 2 == 0) //for even numbers }) println("\(result.lastIndex)") //prints "6" (because 8%2=0) </code></pre>
<p>Seems like CMutablePointer was recently changed to UnsafeMutablePointer. </p> <p>This one worked for me:</p> <pre><code>let indices = myArray.indexesOfObjectsPassingTest({ (obj: AnyObject!, idx: Int, stop: UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Bool in var didPass = false //determine if obj passes test, if it does set didPass = true return didPass }) </code></pre>