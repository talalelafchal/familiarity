How to stop unwanted UIButton animation on title change?
<p>In iOS7 my UIButton titles are animating in and out at the wrong time - late. This problem does not appear on iOS6. I'm just using:</p> <pre><code> [self setTitle:text forState:UIControlStateNormal]; </code></pre> <p>I would prefer this happens instantly and without a blank frame. This blink is especially distracting and draws attention away from other animations. </p> <p>thx!</p>
<p>This works for custom buttons:</p> <pre><code>[UIView setAnimationsEnabled:NO]; [_button setTitle:@"title" forState:UIControlStateNormal]; [UIView setAnimationsEnabled:YES]; </code></pre> <p>For system buttons you need to add this before re-enabling animations (thank you @Klaas):</p> <pre><code>[_button layoutIfNeeded]; </code></pre>
<p><strong>Please note :</strong></p> <p>when "<em>buttonType</em>" of _button is <strong>"UIButtonTypeSystem"</strong>, below code is <strong>invalid</strong>：</p> <pre><code>[UIView setAnimationsEnabled:NO]; [_button setTitle:@"title" forState:UIControlStateNormal]; [UIView setAnimationsEnabled:YES]; </code></pre> <p>when "<em>buttonType</em>" of _button is <strong>"UIButtonTypeCustom"</strong>, above code is <strong>valid</strong>.</p>
<p>I've found that this workaround works with <strong>UIButtonTypeSystem</strong> as well but will only work if the button is <strong>enabled</strong> for some reason.</p> <pre><code>[UIView setAnimationsEnabled:NO]; [_button setTitle:@"title" forState:UIControlStateNormal]; [UIView setAnimationsEnabled:YES]; </code></pre> <p>So you'll have to add these if you need the button to be disabled when setting its title.</p> <pre><code>[UIView setAnimationsEnabled:NO]; _button.enabled = YES; [_button setTitle:@"title" forState:UIControlStateNormal]; _button.enabled = NO; [UIView setAnimationsEnabled:YES]; </code></pre> <p>(iOS 7, Xcode 5)</p>
<p>Combining above great answers results in following workaround for <strong>UIButtonTypeSystem</strong>:</p> <pre><code>if (_button.enabled) { [UIView setAnimationsEnabled:NO]; [_button setTitle:@"title" forState:UIControlStateNormal]; [UIView setAnimationsEnabled:YES]; } else // disabled { [UIView setAnimationsEnabled:NO]; _button.enabled = YES; [_button setTitle:@"title" forState:UIControlStateNormal]; _button.enabled = NO; [UIView setAnimationsEnabled:YES]; } </code></pre>
<p>Use the <code>performWithoutAnimation:</code> method and then force layout to happen immediately instead of later on.</p> <pre><code>[UIView performWithoutAnimation:^{ [self.myButton setTitle:text forState:UIControlStateNormal]; [self.myButton layoutIfNeeded]; }]; </code></pre>
<p>Maybe generating 2 animations and 2 buttons is a better solution, to avoid the problem that is appearing with animating and changing the text of a button? </p> <p>I created a second uibutton and generated 2 animation, this solution works with no hickups. </p> <pre><code> _button2.hidden = TRUE; _button1.hidden = FALSE; CGPoint startLocation = CGPointMake(_button1.center.x, button1.center.y - 70); CGPoint stopLocation = CGPointMake(_button2.center.x, button2.center.y- 70); [UIView animateWithDuration:0.3 animations:^{ _button2.center = stopLocation;} completion:^(BOOL finished){_button2.center = stopLocation;}]; [UIView animateWithDuration:0.3 animations:^{ _button1.center = startLocation;} completion:^(BOOL finished){_button1.center = startLocation;}]; </code></pre>
<p>You can remove the animations from from the title label's layer:</p> <pre><code> [[[theButton titleLabel] layer] removeAllAnimations]; </code></pre>
<p>Starting in iOS 7.1 the only solution that worked for me was initializing the button with type <code>UIButtonTypeCustom</code>.</p>
<p>so i find worked solution:</p> <pre><code>_logoutButton.titleLabel.text = NSLocalizedString(@"Logout",); [_logoutButton setTitle:_logoutButton.titleLabel.text forState:UIControlStateNormal]; </code></pre> <p>in first we change title for button, then resize button for this title</p>
<p>I got the ugly animation problem when changing button titles in view controllers within a UITabBarController. The titles that were originally set in the storyboard showed up for a short while before fading into their new values.</p> <p>I wanted to iterate through all subviews and use the button titles as keys to get their localized values with NSLocalizedString, such as; </p> <pre><code>for(UIView *v in view.subviews) { if ([v isKindOfClass:[UIButton class]]) { UIButton *btn = (UIButton*)v; NSString *newTitle = NSLocalizedString(btn.titleLabel.text, nil); [btn setTitle:newTitle]; } } </code></pre> <p>I found out that what's triggering the animation is really the call to btn.titleLabel.text. So to still make use of the storyboards and have the components dynamically localized like this I make sure to set every button's Restoration ID (in Identity Inspector) to the same as the title and use that as key instead of the title;</p> <pre><code>for(UIView *v in view.subviews) { if ([v isKindOfClass:[UIButton class]]) { UIButton *btn = (UIButton*)v; NSString *newTitle = NSLocalizedString(btn.restorationIdentifier, nil); [btn setTitle:newTitle]; } } </code></pre> <p>Not ideal, but works..</p>
<p>You can simply create Custom button and it will stop animate while changing the title. </p> <pre><code> UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; [btn setTitle:@"the title" forState:UIControlStateNormal]; </code></pre> <p>you also can do it in Storyboard checkbox: select the button in storyboard -> select the attributes inspector (fourth from left side) -> in the 'Type' drop down menu, select 'Custom' instead of 'System' that was probably selected.</p> <p>Good luck!</p>
<p>I got it to work with a combination of answers:</p> <pre><code>[[[button titleLabel] layer] removeAllAnimations]; [UIView performWithoutAnimation:^{ [button setTitle:@"Title" forState:UIControlStateNormal]; }]; </code></pre>
<p>Change button type to custom form interface builder.</p> <p><img src="https://i.stack.imgur.com/j1vck.png" alt="enter image description here"></p> <p>This worked for me.</p>
<p>I’ve made a Swift extension to do this:</p> <pre><code>extension UIButton { func setTitleWithoutAnimation(title: String?) { UIView.setAnimationsEnabled(false) setTitle(title, forState: .Normal) layoutIfNeeded() UIView.setAnimationsEnabled(true) } } </code></pre> <p>Works for me on iOS 8 and 9, with <code>UIButtonTypeSystem</code>.</p> <p>(Objective-C is similar)</p>
<p>You can actually set the title outside of an animation block, just be sure to call <code>layoutIfNeeded()</code> inside a performWithoutAnimation:</p> <pre><code>button1.setTitle("abc", forState: .Normal) button2.setTitle("abc", forState: .Normal) button3.setTitle("abc", forState: .Normal) UIView.performWithoutAnimation { self.button1.layoutIfNeeded() self.button2.layoutIfNeeded() self.button3.layoutIfNeeded() } </code></pre> <p>If you have a bunch of buttons, consider just calling <code>layoutIfNeeded()</code> on the super view:</p> <pre><code>button1.setTitle("abc", forState: .Normal) button2.setTitle("abc", forState: .Normal) button3.setTitle("abc", forState: .Normal) UIView.performWithoutAnimation { self.view.layoutIfNeeded() } </code></pre>
<p>In Swift you can use :</p> <pre><code>UIView.performWithoutAnimation { self.someButtonButton.setTitle(newTitle, forState: .Normal) self.someButtonButton.layoutIfNeeded() } </code></pre>
<p>Set the button type to UIButtonTypeCustom and it'll stop flashing</p>
<p>Usually simply setting the button type to Custom works for me, but for other reasons I needed to subclass UIButton and set the button type back to the default (System), so the blinking reappeared.</p> <p>Setting <code>UIView.setAnimationsEnabled(false)</code> before changing the title and then to true again after that didn't avoid the blinking for me, no matter if I called <code>self.layoutIfNeeded()</code> or not.</p> <p>This, and only this in the following exact order, worked for me with iOS 9 and 10 beta:</p> <p>1) Create a subclass for UIButton (don't forget to set the custom class for the button in the Storyboard too).</p> <p>2) Override <code>setTitle:forState:</code> as follows:</p> <pre><code>override func setTitle(title: String?, forState state: UIControlState) { UIView.performWithoutAnimation({ super.setTitle(title, forState: state) self.layoutIfNeeded() }) } </code></pre> <p>In Interface Builder, you can leave the button type to System, no need to change it to Custom Type for this approach to work.</p> <p>I hope this helps someone else, I've struggled for so long with the annoying blinking buttons that I hope to avoid it to others ;)</p>
<p>The Xhacker Liu extension converted to Swift 3 :</p> <pre><code>extension UIButton { func setTitleWithoutAnimation(title: String?) { UIView.setAnimationsEnabled(false) setTitle(title, for: .normal) layoutIfNeeded() UIView.setAnimationsEnabled(true) } } </code></pre>