List comprehension in Swift
<p>The language guide has revealed no trace of list comprehension. <strong>What's the neatest way of accomplishing this in Swift?</strong> I'm looking for something similar to:</p> <pre><code>evens = [ x for x in range(10) if x % 2 == 0] </code></pre>
<p>One way would be :</p> <pre><code>var evens: Int[]() for x in 0..&lt;10 { if x%2 == 0 {evens += x} // or evens.append(x) } </code></pre> <ul> <li><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-XID_85" rel="nofollow">Range operators</a></li> <li><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-XID_135" rel="nofollow">Arrays</a></li> </ul>
<p>As of Swift 2.x, there are a few short equivalents to your Python-style list comprehension.</p> <p>The most straightforward adaptations of Python's formula (which reads something like "apply a transform to a sequence subject to a filter") involve chaining the <code>map</code> and <code>filter</code> methods available to all <code>SequenceType</code>s, and starting from a <code>Range</code>:</p> <pre><code>// Python: [ x for x in range(10) if x % 2 == 0 ] let evens = (0..&lt;10).filter { $0 % 2 == 0 } // Another example, since the first with 'x for x' doesn't // use the full ability of a list comprehension: // Python: [ x*x for x in range(10) if x % 2 == 0 ] let evenSquared = (0..&lt;10).filter({ $0 % 2 == 0 }).map({ $0 * $0 }) </code></pre> <p>Note that a <code>Range</code> is abstract — it doesn't actually create the whole list of values you ask it for, just a construct that lazily supplies them on demand. (In this sense it's more like Python's <code>xrange</code>.) However, the <code>filter</code> call returns an <code>Array</code>, so you lose the "lazy" aspect there. If you want to keep the collection lazy all the way through, just say so:</p> <pre><code>// Python: [ x for x in range(10) if x % 2 == 0 ] let evens = (0..&lt;10).lazy.filter { $0 % 2 == 0 } // Python: [ x*x for x in range(10) if x % 2 == 0 ] let evenSquared = (0..&lt;10).lazy.filter({ $0 % 2 == 0 }).map({ $0 * $0 }) </code></pre> <p>Unlike the list comprehension syntax in Python (and similar constructs in some other languages), these operations in Swift follow the same syntax as other operations. That is, it's the same style of syntax to construct, filter, and operate on a range of numbers as it is to filter and operate on an array of objects — you don't have to use function/method syntax for one kind of work and list comprehension syntax for another.</p> <p>And you can pass other functions in to the <code>filter</code> and <code>map</code> calls, and chain in other handy transforms like <code>sort</code> and <code>reduce</code>:</p> <pre><code>// func isAwesome(person: Person) -&gt; Bool // let people: [Person] let names = people.filter(isAwesome).sort(&lt;).map({ $0.name }) let sum = (0..&lt;10).reduce(0, combine: +) </code></pre> <p>Depending on what you're going for, though, there may be more concise ways to say what you mean. For example, if you specifically want a list of even integers, you can use <code>stride</code>:</p> <pre><code>let evenStride = 0.stride(to: 10, by: 2) // or stride(through:by:), to include 10 </code></pre> <p>Like with ranges, this gets you a generator, so you'll want to make an <code>Array</code> from it or iterate through it to see all the values:</p> <pre><code>let evensArray = Array(evenStride) // [0, 2, 4, 6, 8] </code></pre> <p><sup><strong>Edit:</strong> Heavily revised for Swift 2.x. See the edit history if you want Swift 1.x.</sup></p>
<p>Generally, a list comprehension in Python can be written in the form:</p> <pre><code>[f(x) for x in xs if g(x)] </code></pre> <p>Which is the same as</p> <pre><code>map(f, filter(g, xs)) </code></pre> <p>Therefore, in Swift you can write it as</p> <pre><code>listComprehension&lt;Y&gt;(xs: [X], f: X -&gt; Y, g: X -&gt; Bool) = map(filter(xs, g), f) </code></pre> <p>For example:</p> <pre><code>map(filter(0..&lt;10, { $0 % 2 == 0 }), { $0 }) </code></pre>
<p>As of Swift 2 you can do something like this:</p> <pre><code>var evens = [Int]() for x in 1..&lt;10 where x % 2 == 0 { evens.append(x) } // or directly filtering Range due to default implementations in protocols (now a method) let evens = (0..&lt;10).filter{ $0 % 2 == 0 } </code></pre>
<p>With Swift 2, according to your needs/tastes, you may choose one of the following Playground codes (ranked by order of preference):</p> <h3>#1. stride and array init style</h3> <pre><code>let stride = 0.stride(to: 10, by: 2) let evens = Array(stride) // let evens = Array(0.stride(to: 10, by: 2)) // also works print(evens) // prints [0, 2, 4, 6, 8] </code></pre> <h3>#2. stride and map style</h3> <pre><code>let stride = 0.stride(to: 10, by: 2) let evens = stride.map({ $0 }) // let evens = 0.stride(to: 10, by: 2).map { $0 } // also works print(evens) // prints [0, 2, 4, 6, 8] </code></pre> <h3>#3. filter style</h3> <pre><code>let range = 0 ..&lt; 10 let evenClosure = { $0 % 2 == 0 } let evens = range.filter(evenClosure) // let evens = (0 ..&lt; 10).filter { $0 % 2 == 0 } // also works print(evens) // prints [0, 2, 4, 6, 8] </code></pre> <h3>#4. for loop with where clause style</h3> <pre><code>var evens = [Int]() for value in 0 ..&lt; 10 where value % 2 == 0 { evens.append(value) } print(evens) // prints [0, 2, 4, 6, 8] </code></pre> <h3>#5. for loop with if condition style</h3> <pre><code>var evens = [Int]() for value in 0 ..&lt; 10 { if value % 2 == 0 { evens.append(value) } } print(evens) // prints [0, 2, 4, 6, 8] </code></pre>