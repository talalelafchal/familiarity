Unable to test the Live rendering in Xcode 6
<p>Recently I have downloaded the new <strong>XCode 6</strong> beta version.In the apple docs it is saying that we can see the output while editing the Code in .swift file without build and run. I haven't find any ways to fulfill the live rendering. Could you please help me out on this? Thanks in advance</p>
<p>It's important that you set up your project as a cocoa touch framework!</p> <p>Then:</p> <p>1.) Add @IBDesignable to your custom UIView before the class definition. (It might be helpful to override the drawInRect function for the beginning.)</p> <p>2.) Add a UIView object to your .xib or .storyboard file at it change its class to your customView with the @IBDesignable attribute. </p> <p>It should work. </p> <p>Tipp: Check out this years WWDC video: "What's New to Interface Builder in Xcode 6" - There is explained how to set it up. </p>
<p>This is my solution <a href="https://github.com/yume190/CustomView" rel="nofollow">Custom View</a></p> <ol> <li>Custom View</li> <li>Live Render (Objc)</li> <li>Live Render (Swift)</li> </ol> <p>Another solution <a href="http://www.weheartswift.com/make-awesome-ui-components-ios-8-using-swift-xcode-6/" rel="nofollow">How to make awesome UI components in iOS 8 using Swift and XCode 6</a>. (Swift, didset,live render)</p>
<p>You actually do not have to create Cocoa Touch framework. If you create a custom view with nib that contains UI elements and show them another view just add the code below to your custom view</p> <pre><code>-(instancetype)initWithFrame:(CGRect)frame{ #if !TARGET_INTERFACE_BUILDER self= [super initWithFrame:frame]; if(self){ } return self; #else NSBundle *bundle = [NSBundle bundleForClass:[self class]]; return [bundle loadNibNamed:NSStringFromClass([self class]) owner:self options:nil][0]; #endif } </code></pre> <p>Since you don't have your main bundle while you are on design mode, you won't be able to retrieve your custom view to render. In addition to this, if you have extra properties and set them onto your ui elements, you may do this within method </p> <pre><code>-(void)prepareForInterfaceBuilder{ } </code></pre>