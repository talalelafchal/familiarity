Static Linking with Swift, XCode6-Beta
<p>I've been experimenting with porting an Obj-C library to Swift, and I've run into a problem where the linker fails to build a static library when Swift code is in the project.</p> <p>As a minimal reproducer, go into XCode6 and create a new iOS Static Library. It'll give you a project with a blank .h and .m file. This will compile fine. Then, add a new .swift file to the project (with or without creating a header bridge). This too <em>should</em> compile fine, but instead it fails during linking:</p> <pre><code>Libtool /Users/alexkarantza/Library/Developer/Xcode/DerivedData/Test-alenfoymgkewlghfjjvizjjuvign/Build/Products/Debug-iphonesimulator/libTest.a normal i386 cd /Users/alexkarantza/Workspace/Test export IPHONEOS_DEPLOYMENT_TARGET=8.0 export PATH="/Applications/Xcode6-Beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode6-Beta.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin" /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool -static -arch_only i386 -syslibroot /Applications/Xcode6-Beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk -L/Users/alexkarantza/Library/Developer/Xcode/DerivedData/Test-alenfoymgkewlghfjjvizjjuvign/Build/Products/Debug-iphonesimulator -filelist /Users/alexkarantza/Library/Developer/Xcode/DerivedData/Test-alenfoymgkewlghfjjvizjjuvign/Build/Intermediates/Test.build/Debug-iphonesimulator/Test.build/Objects-normal/i386/Test.LinkFileList -ObjC -L/Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator -Xlinker -rpath -Xlinker /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator -Xlinker -force_load -Xlinker /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc/libarclite_iphonesimulator.a -Xlinker -sectalign -Xlinker __SWIFT -Xlinker __ast -Xlinker 4 -Xlinker -sectcreate -Xlinker __SWIFT -Xlinker __ast -Xlinker /Users/alexkarantza/Library/Developer/Xcode/DerivedData/Test-alenfoymgkewlghfjjvizjjuvign/Build/Intermediates/Test.build/Debug-iphonesimulator/Test.build/Objects-normal/i386/Test.swiftmodule -o /Users/alexkarantza/Library/Developer/Xcode/DerivedData/Test-alenfoymgkewlghfjjvizjjuvign/Build/Products/Debug-iphonesimulator/libTest.a error: /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool: unknown option character `X' in: -Xlinker Usage: /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool -static [-] file [...] [-filelist listfile[,dirname]] [-arch_only arch] [-sacLT] [-no_warning_for_no_symbols] Usage: /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool -dynamic [-] file [...] [-filelist listfile[,dirname]] [-arch_only arch] [-o output] [-install_name name] [-compatibility_version #] [-current_version #] [-seg1addr 0x#] [-segs_read_only_addr 0x#] [-segs_read_write_addr 0x#] [-seg_addr_table &lt;filename&gt;] [-seg_addr_table_filename &lt;file_system_path&gt;] [-all_load] [-noall_load] </code></pre> <p>This happens if I'm targeting the simulator or the device. It looks like perhaps having the Swift file in the project is causing it to use linker options normally reserved for executables, even though the target is a static library? I don't know enough about the build options to know if this is a bug in the beta, or some option I should be configuring. It seems questionable that the build would legitimately fail on such a trivial example. Any thoughts?</p>
<p>Look at this threat <a href="http://stackoverflow.com/questions/19693769/xcode5-simulator-unknown-option-character-x-in-xlinker">XCode5 simulator: unknown option character `X&#39; in: -Xlinker</a></p> <blockquote> <p>In order to understand the error, you have to understand what the command is attempting to do.</p> <p>In this case it's using Libtool, which is a slightly altered version of libtool. There are some options that are specified in the command line, but what we're looking for is the destination file, and this is passed in as the -o option, who's argument is /Users/jr/ios/app/iCozi/build/DevOnly-iphonesimulator/libCozi\ Common\ Code.a, and the type of library we're generating, and in this case it's -static. Both options together explicitly state that you're making a static library archive.</p> <p>Because you're making a static library archive, the only thing you're actually doing is taking .o files and possibly .a files and turning them into another .a file. This can be roughly equated to the creating of a .zip file from a set of files (.o), and the contents of other .zip files (.a). There are very few things you can do while making this archive, for example you can't specify libraries that need to be implicitly linked while building a static archive, you can't specify that you're going to require entitlements.</p> <p>libtool is complaining because it doesn't understand the options that are being used for a static library that are being passed in. In this case the options are:</p> <p>-Xlinker -sectcreate -Xlinker __TEXT -Xlinker __entitlements -Xlinker /Users/jr/ios/app/iCozi/build/iCozi.build/DevOnly-iphonesimulator/Cozi\ Common\ Code.build/Cozi\ Common\ Code.xcent</p> <p>These are options that are present when you're trying to link in an entitlements file, which means that some options is specifying the use of an entitlements file. In this case, you found the correct solution yourself, which was to remove the entitlements file specified in the project settings -> Code Signing -> Code Signing Entitlements -> DevOnly.</p> </blockquote>
<p>I have been looking at this issue too for a while, here is what I found:</p> <p>First, in Xcode 6 Beta, there is no language selection when you create Cocoa Touch Static Library, the language is set to Objective-C by default, though you can add Swift file to the project, it gives error like in your question as a result. My interpretation is that it is Apple's intention to steer away from creating Swift static library.</p> <p>So If you intent to build a library that leverages power of Swift, use <strong>Cocoa Touch Framework</strong> instead of Static Library. I have written steps on creating framework project and app project, you can find it <strong><a href="http://stackoverflow.com/questions/24039470/xcode-6-ios-creating-a-cocoa-touch-framework-architectures-issues/24295122#24295122">here</a></strong>. <strong>Note</strong> in that example, I created an Objective-C framework project. Choose <strong>Language Swift</strong> if want pure Swift framework project.</p> <p><img src="https://i.stack.imgur.com/ZvQpi.png" alt="enter image description here"></p> <p>Also note If you look to import Swift framework into Objective-C project, or mix the languages, there is a good reading here <strong><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_84" rel="nofollow noreferrer">Swift and Objective-C in the Same Project</a></strong>.</p> <p>Hope this will give you a good direction.</p>
<p>To answer my own question after some discussion in the comments, it is simply not possible to build static libraries that include Swift code yet. I'm writing this as of Beta 4, and the release notes still say, under "Known issues in Xcode 6 beta 4":</p> <p><strong>Xcode does not support building static libraries that include Swift code. (17181019)</strong></p>
<p>Check out this blog (translation needed)</p> <p><a href="http://andelf.github.io/blog/2014/06/25/write-swift-module-with-swift-cont/" rel="nofollow">http://andelf.github.io/blog/2014/06/25/write-swift-module-with-swift-cont/</a></p>
<p>I came across same problem and I did found a solution for it. 'libtool' is failing because of -Xlinker attribute, which tries to specify Swift module - that seems not to be supported for static libraries. (I also think that is mistake/deficiency by Apple, but maybe that's a discussion for another thread)</p> <p>What I did is I copy/pasted the whole libtool command to terminal, remove all '-XLinker ...' parameters and surprisingly build succeeded from command line.</p> <p>My static library project included both Objective-C and Swift sources and they were both 'packed' into produced static library!</p> <p>The only downside was that Swift module was not produced but in my case that didn't matter because Swift was used only internally - I had only Objective C external interfaces.</p> <p>I think it would be possible also to expose Swift 'interfaces' by copying produced static lib bridging header along the produced static lib. </p>