Lazy properties with initializers
<p>I am trying to use the <code>@lazy</code> attribute to load a property on demand, but I need to pass a member variable into the lazy-loaded instance's initializer.</p> <p>Here's the example</p> <pre><code>class Worker { init(AnyObject context) { ... } } class Hive { let context : AnyObject init(AnyObject context) { self.context = context } @lazy var worker = Worker(self.context) // This does not work } </code></pre> <p>Is there no way to inject member variables into lazy loaded properties?</p> <p>Here is my rather annoying workaround:</p> <pre><code>class Hive { // initializer and context constant elided let lazy = Lazy() class Lazy { var worker : Worker? = nil var token : dispatch_once_t = 0 } var worker : Worker { get { dispatch_once(&amp;lazy.token) { self.lazy.worker = Worker(self.context) } return lazy.worker! } } } </code></pre> <p>Please tell me there is a better way to accomplish this...</p>
<p>The following code compiles for me (your code must've been typed up outside of XCode because the syntax is off)</p> <pre><code>class Worker { init(context : AnyObject) { } } class Hive { var context : AnyObject init(context : AnyObject) { self.context = context } @lazy var worker : Worker = { let instance = Worker(context: self.context) return instance; }() } </code></pre> <p>It also works without the closure:</p> <pre><code> @lazy var worker : Worker = Worker(context: self.context) </code></pre>