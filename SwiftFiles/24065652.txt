How to get your custom content drawn in Interface Builder?
<p>I watched the "What's New in Interface Builder" session video and tried to replicate the code that was showed but unfortunately when I assign a view to my custom class which has <code>@IBDesignable</code> I get 2 errors:</p> <p>Main.storyboard: error: Live Views: Failed to update auto layout status: The bundle “swiftTest” couldn’t be loaded because its executable isn’t loadable.</p> <p>Main.storyboard: error: Live Views: Failed to render instance of _TtC9swiftTest14ControllerView: The bundle “swiftTest” couldn’t be loaded because its executable isn’t loadable.</p> <p>Later on in the video I saw that to have Live Views you have to make these steps: 1. Create framework 2. Create class 3. Mark as designable</p> <p>How do I make the 1st step?</p> <p>Thanks</p>
<p>You should make new framework as a target for current project and add your live views in this framework. On General tab on main target you will see your framework in Embedded Binaries section.</p>
<p>I code about @IBDesignable &amp; @IBInspectable,</p> <p>firstly, I got two errors like you,</p> <p>then, I change the code I wrote,</p> <p>you can checkout the code from my <a href="https://github.com/kingiol/IBDesignableDemo" rel="nofollow">github</a></p> <p>Good Luck.</p>
<p>As I understand it at the moment (<em>prior to Xcode 6 Beta 3</em>), @IBDesignable will only work from a view declared in a <em>separate</em> framework target. However, I also struggled to add it because I had no "plus" button as described in various links (<em>because the Hide Project &amp; Target Lists arrow option was toggled off</em>). </p> <p>So, select your current project target, then just use the xcode menu options: <em>Editor > Add target...</em> Then select <em>Framework &amp; Library > Cocoa Touch Framework</em> etc.</p> <p>By the way, to test @IBDesignable, this tutorial worked perfectly as a starting point: <a href="http://www.weheartswift.com/make-awesome-ui-components-ios-8-using-swift-xcode-6/" rel="nofollow">http://www.weheartswift.com/make-awesome-ui-components-ios-8-using-swift-xcode-6/</a></p> <p>One small but important thing to note in that tutorial (if you follow it onscreen instead of following on to its full github code listing) is that your view class must be prepended/decorated with @IBDesignable, e.g. class CustomView : UIView {...} should be @IBDesignable class CustomView : UIView {...}</p>
<p>I had a project with live views working and at one point I also had these error messages. This went away for me when closing XCode and restarting, fwiw.</p>
<hr> <blockquote> <p>It is <strong>working very well</strong> (<em>and easily</em>) for me with <em>Swift</em> in <strong>Xcode 6 Beta 5</strong>.</p> </blockquote> <hr> <p>I've confirmed that with <em>Xcode 6 Beta 5</em> I did <strong><em>not</em></strong> need to add any frameworks (for example, Cocoa Touch framework option under frameworks in the dialog that appears when adding a new project target). Nor did I need to add IBDesignable.h to the project. <em>Both seem to be outdated requirements as per the the weheartswift.com write-up linked in the initial answer to the question.</em></p> <p>All I needed to do was:</p> <ol> <li><p>Prefix <strong>class</strong> definition of my custom Swift class source file with keyword <strong>@IBDesignable</strong> </p></li> <li><p>Prefix vars I wanted to show up in IB Attributes Inspector with <strong>@IBInspectable</strong> (IB recognizes several common variable types).</p></li> </ol> <p>Then, after assigning my custom component's (UIControl subclass) name to IB's "Class" name file (under Identity Inspector tab, in right pane) replacing "UIView" -- e.g. the class name of the UIView placeholder object I originally dragged onto the IB VC's view -- upon selecting my custom component from the Content View component list in IB, I saw all my custom class' inspectable items show up in the IB Attributes Inspector!! <em>Very</em> cool.</p> <hr> <p><em>Note: At first XCode would only allow me to prefix one variable with @IBInspectable. It showed errors on subsequent ones. Then, suddenly it seemed to work, and no more problems after that. Not sure if it was a typo or just took Xcode awhile to re-index my project and pre-compile or parse the code.</em></p>