what are the benefit of using explicitly defined type for a constant
<p>In Swift, constants can expressed with let keyword like this</p> <pre><code>let MyConstant = 100 </code></pre> <p>and explicitly defined with type name like below</p> <pre><code>let MyConstant: Int = 100 </code></pre> <p>what are the benefit of using second method?</p>
<p>Imagine you want to set a floating point value for amount. </p> <p>And if you define it this way :</p> <pre><code>let MyConstant = 100 </code></pre> <p>your constant will be treated as INT instead of floating point one , So you have to implicity define type or provide a value that will help compiler infer the type of constant. e.g We have two options here </p> <p><strong>Case A</strong></p> <pre><code>let MyConstant = 100.0 </code></pre> <p><strong>Case B</strong></p> <pre><code>let MyConstant:Double = 100 </code></pre> <p>If you are writing code for others and want it to be more expressive and readable the second approach is much better,bcz it shows the intent of program not just for compiler, but also for the coder.</p>
<p>In case the compiler can't figure out the type of the rhs, for example,</p> <pre><code>let x: Double = 1 </code></pre>
<p>Sometimes, the type inference will infer types that is less abstract than what you want. If you want your identifier to be less abstract, you can explicitly define the type of your identifiers.</p> <p>For example (assume that return type of <code>obj.getString()</code> is NSString:</p> <pre><code>let someObject: NSObject = obj.getString() let someString = obj.getString() </code></pre> <p>On the second line, the constant <code>someString</code> will have type of <code>NSString</code>, whereas the on the first line it will be what you explicitly defined.</p>
<p>If the type definition is omitted, its type is <strong>inferred</strong>, which for integer literals are inferred as <code>Int</code>, so in this case both statements are exactly the same.</p> <p>Specifying the type in this case doesn't increase readability and just adds unnecessary noise since the type is clearly an Integer, but in cases where it's not obvious what the type is, e.g:</p> <pre><code>let MyConstant : Int = createNumber() </code></pre> <p>Then there's an argument for explicitly specifying the type info for the additional clarity.</p>