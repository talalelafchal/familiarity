How to enumerate an enum with String type?
<pre><code>enum Suit { case Spades, Hearts, Diamonds, Clubs func simpleDescription() -&gt; String { switch self { case .Spades: return "spades" case .Hearts: return "hearts" case .Diamonds: return "diamonds" case .Clubs: return "clubs" } } } </code></pre> <p>For example, how can I do something like:</p> <pre><code>for suit in Suit { // do something with suit } </code></pre>
<p>On Swift, <code>enum</code> types can be accessed like <code>EnumType.Case</code>:</p> <p><code>let tableView = UITableView(frame: self.view.bounds, style: UITableViewStyle.Plain)</code></p> <p>Most of the time you're only going to use <code>enum</code> types when you have a few options to work with, and know exactly what you're going to do on each one.</p> <p>It wouldn't make much sense to use the <code>for-in</code> structure when working with <code>enum</code> types.</p> <p>You can do this, for instance:</p> <pre><code>func sumNumbers(numbers : Int...) -&gt; Int { var sum = 0 for number in numbers{ sum += number } return sum } </code></pre>
<p>Enums have toRaw() and fromRaw() methods so if your raw value is an Int, you can iterate from the first to last enum:</p> <pre><code>enum Suit: Int { case Spades = 1 case Hearts, Diamonds, Clubs func simpleDescription() -&gt; String { switch self { case .Spades: return "spades" case .Hearts: return "hearts" case .Diamonds: return "diamonds" case .Clubs: return "clubs" } } } for i in Suit.Spades.toRaw()...Suit.Clubs.toRaw() { if let covertedSuit = Suit.fromRaw(i) { let description = covertedSuit.simpleDescription() } } </code></pre> <p>One gotcha is that you need to test for optional values before running the simpleDescription method, so we set convertedSuit to our value first and then set a constant to convertedSuit.simpleDescription()</p>
<p>In principle it is possible to do it this way assuming that you don't use raw values assignment for enum's cases:</p> <pre><code>enum RankEnum: Int { case Ace case One case Two } class RankEnumGenerator : Generator { var i = 0 typealias Element = RankEnum func next() -&gt; Element? { let r = RankEnum.fromRaw(i) i += 1 return r } } extension RankEnum { static func enumerate() -&gt; SequenceOf&lt;RankEnum&gt; { return SequenceOf&lt;RankEnum&gt;({ RankEnumGenerator() }) } } for r in RankEnum.enumerate() { println("\(r.toRaw())") } </code></pre>
<p>This seems like a hack but if you use raw values you can do something like this</p> <pre><code>enum Suit: Int { case Spades = 0, Hearts, Diamonds, Clubs ... } var suitIndex = 0 while var suit = Suit.fromRaw(suitIndex++) { ... } </code></pre>
<p>Try this:</p> <pre><code>func createDeck() -&gt; Card[] { var deck = Card[]() for rank in 1...13 { deck.append(Card(rank: Rank.fromRaw(rank)!, suit: Suit.Clubs)) deck.append(Card(rank: Rank.fromRaw(rank)!, suit: Suit.Diamonds)) deck.append(Card(rank: Rank.fromRaw(rank)!, suit: Suit.Hearts)) deck.append(Card(rank: Rank.fromRaw(rank)!, suit: Suit.Spades)) } return deck } </code></pre>
<p>My humble contribution... I played around and came to this. The upside is that it is very readable to me. A little downside is that it required some additional typing to create the enumerate'able array.</p> <pre><code>enum Rank: Int { case Ace case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten case Jack, Queen, King case All func simpleDescription() -&gt; String { switch self { case .Ace: return "ace" case .Jack: return "jack" case .Queen: return "queen" case .King: return "king" case .All: return "all" default: return String(self.toRaw()) } } func values() -&gt; Array&lt;Rank&gt; { let allRanks = [Rank.Ace, Rank.Two, Rank.Three, Rank.Four, Rank.Five, Rank.Six, Rank.Seven, Rank.Eight, Rank.Nine, Rank.Ten, Rank.Jack, Rank.Queen, Rank.King] return allRanks }} enum Suit { case Spades, Hearts, Diamonds, Clubs case All func simpleDescription() -&gt; String { switch self { case .Spades: return "spades" case .Hearts: return "hearts" case .Diamonds: return "diamonds" case .Clubs: return "clubs" case .All: return "all" } } func values() -&gt; Array&lt;Suit&gt; { let allSuits = [Suit.Spades, Suit.Hearts, Suit.Diamonds, Suit.Clubs] return allSuits }} struct Card { var rank: Rank var suit: Suit func simpleDescription() -&gt; String { return "The \(rank.simpleDescription()) of \(suit.simpleDescription())" }} var deck = Card[]() for aSuit: Suit in Suit.All.values() { for aRank: Rank in Rank.All.values() { let card = Card(rank: aRank, suit: aSuit) deck += card println("\(card.simpleDescription())") }} </code></pre>
<p>It took me a little more then just one method in the struct like the swift book called for but i set up next functions in the enum. I would have used a protocol I'm not sure why but having rank set as int messes it up</p> <pre><code>enum Rank: Int { case Ace = 1 case Two, Three, Four, Five, Six, Seve, Eight, Nine, Ten case Jack, Queen, King func simpleDescription() -&gt; String { switch self{ case .Ace: return "ace" case .Jack: return "jack" case .Queen: return "Queen" case .King: return "King" default: return String(self.toRaw()) } } mutating func next() -&gt; Rank { var rank = self var rawrank = rank.toRaw() var nrank:Rank = self rawrank = rawrank + 1 if let newRank = Rank.fromRaw(rawrank) { println("\(newRank.simpleDescription())") nrank = newRank } else { return self } return nrank } } enum Suit { case Spades, Hearts, Diamonds, Clubs func color() -&gt; String { switch self{ case .Spades, .Clubs: return "black" default: return "red" } } func simpleDescription() -&gt; String { switch self{ case .Spades: return "spades" case .Hearts: return "hearts" case .Diamonds: return "diamonds" case .Clubs: return "clubs" } } mutating func next() -&gt; Suit { switch self{ case .Spades: return Hearts case .Hearts: return Diamonds case .Diamonds: return Clubs case .Clubs: return Spades } } } struct Card { var rank:Rank var suit:Suit func deck() -&gt; Card[] { var tRank = self.rank var tSuit = self.suit let tcards = 52 // we start from 0 var cards: Card[] = [] for i in 0..tcards{ var card = Card(rank: tRank, suit: tSuit) cards.append(card) tRank = tRank.next() tSuit = tSuit.next() } return cards } func simpleDescription() -&gt; String { return "The \(rank.simpleDescription()) of \(suit.simpleDescription())" } } var card = Card(rank: .Ace, suit: .Spades) var deck = card.deck() </code></pre> <p>hope this helps basically I used a little general knowledge but that can be easily rectified by multiplying suits by rank (if you aren't using a standard deck of cards and you'd have to change the enums accordingly and if basically just steps through the different enums note to save time I used ranks raw values you could do the same for suits if you wanted however the example did not have it so I decided to figure it out without changing suits raw value</p>
<p>This post is relevant here <a href="http://www.swift-studies.com/blog/2014/6/10/enumerating-enums-in-swift">http://www.swift-studies.com/blog/2014/6/10/enumerating-enums-in-swift</a></p> <p>Essentially the proposed solution is</p> <pre><code>enum ProductCategory : String { case Washers = "washers", Dryers = "dryers", Toasters = "toasters" static let allValues = [Washers, Dryers, Toasters] } for category in ProductCategory.allValues{ //Do something } </code></pre>
<p>This is what I ended up going with; I think it strikes the right balance of readability and maintainability.</p> <pre><code>struct Card { // ... static func deck() -&gt; Card[] { var deck = Card[]() for i in Rank.Ace.toRaw()...Rank.King.toRaw() { for suit in [Suit.Spades, .Hearts, .Clubs, .Diamonds] { let card = Card(rank: Rank.fromRaw(i)!, suit: suit) deck.append(card) } } return deck } let deck = Card.deck() </code></pre>
<p>There is a clever way, and frustrating as it is it illustrates the difference between the two different kinds of enums.</p> <p>Try this:</p> <pre><code> func makeDeck() -&gt; Card[] { var deck: Card[] = [] var suits: Suit[] = [.Hearts, .Diamonds, .Clubs, .Spades] for i in 1...13 { for suit in suits { deck += Card(rank: Rank.fromRaw(i)!, suit: suit) } } return deck } </code></pre> <p>The deal is that an enum backed by numbers (raw values) is implicitly explicitly ordered, whereas an enum that isn't backed by numbers is explicitly implicitly unordered.</p> <p>E.g. when we give the enum values numbers, the language is cunning enough to figure out what order the numbers are in. If on the other hand we don't give it any ordering, when we try to iterate over the values the language throws its hands up in the air and goes <em>"yes, but which one do you want to go first???"</em></p> <p>Other languages which can do this (iterating over unordered enums) might be the same languages where everything is 'under the hood' actually a map or dictionary, and you can iterate over the keys of a map, whether there's any logical ordering or not.</p> <p>So the trick is to provide it with something that is explicitly ordered, in this case instances of the suits in an array in the order we want. As soon as you give it that, Swift is like <em>"well why didn't you say so in the first place?"</em></p> <p>The other shorthand trick is to use the forcing operator on the fromRaw function. This illustrates another 'gotcha' about enums, that the range of possible values to pass in is often larger than the range of enums. For instance if we said Rank.fromRaw(60) there wouldn't be a value returned, so we're using the <strong>optional</strong> feature of the language, and where we start using optionals, forcing will soon follow. (Or alternately the <em>if let</em> construction which still seems a bit weird to me)</p>
<pre><code>enum Rank: Int { case Ace = 0 case Two, Three, Four, Five, Six, Seve, Eight, Nine, Ten case Jack, Queen, King case Count } enum Suit : Int { case Spades = 0 case Hearts, Diamonds, Clubs case Count } struct Card { var rank:Rank var suit:Suit } class Test { func makeDeck() -&gt; Card[] { let suitsCount:Int = Suit.Count.toRaw() let rankCount:Int = Rank.Count.toRaw() let repeatedCard:Card = Card(rank:Rank.Ace, suit:Suit.Spades) let deck:Card[] = Card[](count:suitsCount*rankCount, repeatedValue:repeatedCard) for i:Int in 0..rankCount { for j:Int in 0..suitsCount { deck[i*suitsCount+j] = Card(rank: Rank.fromRaw(i)!, suit: Suit.fromRaw(j)!) } } return deck } } </code></pre> <p>Based on Rick answer: this is 5 times faster</p>
<p>Here's a less cryptic example if you still wanted to use enums for <code>Rank</code> And <code>Suit</code>. Just collect them into an Array if you want to use a <code>for-in loop</code> to iterate over each one.</p> <h3>Example of a standard 52-card deck:</h3> <pre><code>enum Rank: Int { case Ace = 1, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King func name() -&gt; String { switch self { case .Ace: return "ace" case .Jack: return "jack" case .Queen: return "queen" case .King: return "king" default: return String(self.toRaw()) } } } enum Suit: Int { case Diamonds = 1, Clubs, Hearts, Spades func name() -&gt; String { switch self { case .Diamonds: return "diamonds" case .Clubs: return "clubs" case .Hearts: return "hearts" case .Spades: return "spades" default: return "NOT A VALID SUIT" } } } let Ranks = [ Rank.Ace, Rank.Two, Rank.Three, Rank.Four, Rank.Five, Rank.Six, Rank.Seven, Rank.Eight, Rank.Nine, Rank.Ten, Rank.Jack, Rank.Queen, Rank.King ] let Suits = [ Suit.Diamonds, Suit.Clubs, Suit.Hearts, Suit.Spades ] class Card { var rank: Rank var suit: Suit init(rank: Rank, suit: Suit) { self.rank = rank self.suit = suit } } class Deck { var cards = Card[]() init() { for rank in Ranks { for suit in Suits { cards.append(Card(rank: rank, suit: suit)) } } } } var myDeck = Deck() myDeck.cards.count // =&gt; 52 </code></pre>
<p>I have used the below method, the assumption is that I know which is the last value in the Rank enum and all the ranks have incremental values after Ace</p> <p>I prefer this way as it is clean and small, easy to understand</p> <pre><code> func cardDeck() -&gt; Card[] { var cards: Card[] = [] let minRank = Rank.Ace.toRaw() let maxRank = Rank.King.toRaw() for rank in minRank...maxRank { if var convertedRank: Rank = Rank.fromRaw(rank) { cards.append(Card(rank: convertedRank, suite: Suite.Clubs)) cards.append(Card(rank: convertedRank, suite: Suite.Diamonds)) cards.append(Card(rank: convertedRank, suite: Suite.Hearts)) cards.append(Card(rank: convertedRank, suite: Suite.Spades)) } } return cards } </code></pre>
<p>The other solutions <em>work</em> but they all make assumptions of for example the number of possible ranks and suits, or what the first and last rank may be. True, the layout of a deck of cards probably isn't going to change much in the foreseeable future. In general, however, it's neater to write code which makes as little assumptions as possible. My solution:</p> <p>I've added a raw type to the suit enum, so I can use Suit(rawValue:) to access the Suit cases:</p> <pre><code>enum Suit: Int { case Spades = 1 case Hearts, Diamonds, Clubs func simpleDescription() -&gt; String { switch self { case .Spades: return "spades" case .Hearts: return "hearts" case .Diamonds: return "diamonds" case .Clubs: return "clubs" } } func color() -&gt; String { switch self { case .Spades: return "black" case .Clubs: return "black" case .Diamonds: return "red" case .Hearts: return "red" } } } enum Rank: Int { case Ace = 1 case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten case Jack, Queen, King func simpleDescription() -&gt; String { switch self { case .Ace: return "ace" case .Jack: return "jack" case .Queen: return "queen" case .King: return "king" default: return String(self.rawValue) } } } </code></pre> <p>Below the implementation of Card's createDeck() method. init(rawValue:) is a failable initializer and returns an optional. By unwrapping and checking it's value in both while statements, there's no need to assume the number of Rank or Suit cases:</p> <pre><code>struct Card { var rank: Rank var suit: Suit func simpleDescription() -&gt; String { return "The \(rank.simpleDescription()) of \(suit.simpleDescription())" } func createDeck() -&gt; [Card] { var n = 1 var deck = [Card]() while let rank = Rank(rawValue: n) { var m = 1 while let suit = Suit(rawValue: m) { deck.append(Card(rank: rank, suit: suit)) m += 1 } n += 1 } return deck } } </code></pre> <p>Here is how to call the createDeck method:</p> <pre><code>let card = Card(rank: Rank.Ace, suit: Suit.Clubs) let deck = card.createDeck() </code></pre>
<p>You could iterate through an enum by implementing the <code>ForwardIndexType</code> protocol.</p> <p>The <code>ForwardIndexType</code> protocol requires you to define a <code>successor()</code> function to step through the elements.</p> <pre><code>enum Rank: Int, ForwardIndexType { case Ace = 1 case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten case Jack, Queen, King // ... other functions // Option 1 - Figure it out by hand func successor() -&gt; Rank { switch self { case .Ace: return .Two case .Two: return .Three // ... etc. default: return .King } } // Option 2 - Define an operator! func successor() -&gt; Rank { return self + 1 } } // NOTE: The operator is defined OUTSIDE the class func + (left: Rank, right: Int) -&gt; Rank { // I'm using to/from raw here, but again, you can use a case statement // or whatever else you can think of return left == .King ? .King : Rank(rawValue: left.rawValue + right)! } </code></pre> <p>Iterating over an open or closed range (<code>..&lt;</code> or <code>...</code>) will internally call the <code>successor()</code> function which allows you to write this:</p> <pre><code>// Under the covers, successor(Rank.King) and successor(Rank.Ace) are called to establish limits for r in Rank.Ace...Rank.King { // Do something useful } </code></pre>
<pre><code>enum Rank: Int { case Ace = 1 case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten case Jack, Queen, King func simpleDescription() -&gt; String { switch self { case .Ace: return "ace" case .Jack: return "jack" case .Queen: return "queen" case .King: return "king" default: return String(self.toRaw()) } } } enum Suit: Int { case Spades = 1 case Hearts, Diamonds, Clubs func simpleDescription() -&gt; String { switch self { case .Spades: return "spades" case .Hearts: return "hearts" case .Diamonds: return "diamonds" case .Clubs: return "clubs" } } func color() -&gt; String { switch self { case .Spades, .Clubs: return "black" case .Hearts, .Diamonds: return "red" } } } struct Card { var rank: Rank var suit: Suit func simpleDescription() -&gt; String { return "The \(rank.simpleDescription()) of \(suit.simpleDescription())" } static func createPokers() -&gt; Card[] { let ranks = Array(Rank.Ace.toRaw()...Rank.King.toRaw()) let suits = Array(Suit.Spades.toRaw()...Suit.Clubs.toRaw()) let cards = suits.reduce(Card[]()) { (tempCards, suit) in tempCards + ranks.map { rank in Card(rank: Rank.fromRaw(rank)!, suit: Suit.fromRaw(suit)!) } } return cards } } </code></pre>
<p>Here's my suggested approach. It's not completely satisfactory (I'm very new to Swift and OOP!) but maybe someone can refine it. The idea is to have each enum provide its own range information as .first and .last properties. It adds just two lines of code to each enum: still a bit hard-coded, but at least it's not duplicating the whole set. It does require modifying the Suit enum to be an Int like the Rank enum is, instead of untyped. </p> <p>Rather than echo the whole solution, here's the code I added to the Rank enum, somewhere after the case statements (Suit enum is similar):</p> <pre><code>var first: Int { return Ace.toRaw() } var last: Int { return King.toRaw() } </code></pre> <p>and the loop I used to build the deck as an array of String. (The problem definition did not state how the deck was to be structured.)</p> <pre><code>func createDeck() -&gt; [String] { var deck: [String] = [] var card: String for r in Rank.Ace.first...Rank.Ace.last { for s in Suit.Hearts.first...Suit.Hearts.last { card = Rank.simpleDescription( Rank.fromRaw(r)!)() + " of " + Suit.simpleDescription( Suit.fromRaw(s)!)() deck.append( card) } } return deck } </code></pre> <p>It's unsatisfactory because the properties are associated to an element rather than to the enum. But it does add clarity to the 'for' loops. I'd like it to say Rank.first instead of Rank.Ace.first. It works (with any element), but it's ugly. Can someone show how to elevate that to the enum level?</p> <p>And to make it work, I lifted the createDeck method out of the Card struct... could not figure out how to get a [String] array returned from that struct, and that seems a bad place to put such a method anyway.</p>
<p>Sometimes, you may deal with an enumerated type with an underlying raw integer type that changes throughout the software development lifecycle. Here is an example that works well for that case:</p> <pre><code>public class MyClassThatLoadsTexturesEtc { //... // Colors used for gems and sectors. public enum Color: Int { // Colors arranged in order of the spectrum. case First = 0 case Red, Orange, Yellow, Green, Blue, Purple, Pink // --&gt; Add more colors here, between the first and last markers. case Last } //... public func preloadGems() { // Preload all gems. for i in (Color.First.toRaw() + 1) ..&lt; (Color.Last.toRaw()) { let color = Color.fromRaw(i)! loadColoredTextures(forKey: color) } } //... } </code></pre>
<p>I did it using computed property, which returns the array of all values (thanks to this post <a href="http://natecook.com/blog/2014/10/loopy-random-enum-ideas/" rel="nofollow">http://natecook.com/blog/2014/10/loopy-random-enum-ideas/</a>). However it also uses int raw-values, but I don't need to repeat all members of enumeration in separate property. </p> <p><strong>UPDATE</strong> Xcode 6.1 changed a bit a way how to get enum member using raw value, so I fixed listing. Also fixed small error with wrong first raw value</p> <pre><code>enum ValidSuits:Int{ case Clubs=0, Spades, Hearts, Diamonds func description()-&gt;String{ switch self{ case .Clubs: return "♣︎" case .Spades: return "♠︎" case .Diamonds: return "♦︎" case .Hearts: return "♥︎" } } static var allSuits:[ValidSuits]{ return Array( SequenceOf { () -&gt; GeneratorOf&lt;ValidSuits&gt; in var i=0 return GeneratorOf&lt;ValidSuits&gt;{ return ValidSuits(rawValue: i++) } } ) } } </code></pre>
<p>The experiment was: EXPERIMENT</p> <p>Add a method to Card that creates a full deck of cards, with one card of each combination of rank and suit.</p> <p>So without modifying or enhancing the given code other than adding the method (and without using stuff that hasn't been taught yet), I came up with this solution:</p> <pre><code>struct Card { var rank: Rank var suit: Suit func simpleDescription() -&gt; String { return "The \(rank.simpleDescription()) of \(suit.simpleDescription())" } func createDeck() -&gt; [Card] { var deck: [Card] = [] for rank in Rank.Ace.rawValue...Rank.King.rawValue { for suit in Suit.Spades.rawValue...Suit.Clubs.rawValue { let card = Card(rank: Rank(rawValue: rank)!, suit: Suit(rawValue: suit)!) //println(card.simpleDescription()) deck += [card] } } return deck } } let threeOfSpades = Card(rank: .Three, suit: .Spades) let threeOfSpadesDescription = threeOfSpades.simpleDescription() let deck = threeOfSpades.createDeck() </code></pre>
<p>I made a utility function <code>iterateEnum()</code> for iterating cases for arbitrary <code>enum</code> types.</p> <p>Here is the example usage:</p> <pre><code>enum Suit:String { case Spades = "♠" case Hearts = "♥" case Diamonds = "♦" case Clubs = "♣" } for f in iterateEnum(Suit) { println(f.rawValue) } </code></pre> <p>outputs:</p> <pre><code>♠ ♥ ♦ ♣ </code></pre> <p>But, this is <strong>only for debug or test</strong> purpose: This relies on several undocumented current(Swift1.1) compiler behaviors. So, use it at your own risk :)</p> <p>Here is the code:</p> <pre><code>func iterateEnum&lt;T: Hashable&gt;(_: T.Type) -&gt; GeneratorOf&lt;T&gt; { var cast: (Int -&gt; T)! switch sizeof(T) { case 0: return GeneratorOf(GeneratorOfOne(unsafeBitCast((), T.self))) case 1: cast = { unsafeBitCast(UInt8(truncatingBitPattern: $0), T.self) } case 2: cast = { unsafeBitCast(UInt16(truncatingBitPattern: $0), T.self) } case 4: cast = { unsafeBitCast(UInt32(truncatingBitPattern: $0), T.self) } case 8: cast = { unsafeBitCast(UInt64($0), T.self) } default: fatalError("cannot be here") } var i = 0 return GeneratorOf { let next = cast(i) return next.hashValue == i++ ? next : nil } } </code></pre> <p>The underlying idea is:</p> <ul> <li>Memory representation of <code>enum</code> - excluding <code>enum</code>s with associated types - is just a index of cases, when the count of the cases is <code>2...256</code>, it's identical to <code>UInt8</code>, when <code>257...65536</code>, it's <code>UInt16</code> and so on. So, it can be <code>unsafeBitcast</code> from corresponding unsigned integer types.</li> <li><code>.hashValue</code> of enum values is the same as the index of the case.</li> <li><code>.hashValue</code> of enum values bitcasted from <em>invalid</em> index is <code>0</code></li> </ul> <hr> <p><strong>ADDED:</strong></p> <p>Revised for Swift2 and implemented casting ideas from <a href="http://stackoverflow.com/a/32429125/3804019">@Kametrixom's answer</a></p> <pre><code>func iterateEnum&lt;T: Hashable&gt;(_: T.Type) -&gt; AnyGenerator&lt;T&gt; { var i = 0 return anyGenerator { let next = withUnsafePointer(&amp;i) { UnsafePointer&lt;T&gt;($0).memory } return next.hashValue == i++ ? next : nil } } </code></pre> <hr> <p><strong>ADDED:</strong> Revised for Swift3</p> <pre><code>func iterateEnum&lt;T: Hashable&gt;(_: T.Type) -&gt; AnyIterator&lt;T&gt; { var i = 0 return AnyIterator { let next = withUnsafePointer(to: &amp;i) { $0.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee } } if next.hashValue != i { return nil } i += 1 return next } } </code></pre>
<p>My solution, is to declare an array with all the enum possibilities, so for can traverse through all of them.</p> <pre><code>//Function inside struct Card static func generateFullDeck() -&gt; [Card] { let allRanks = [Rank.Ace, Rank.Two, Rank.Three, Rank.Four, Rank.Five, Rank.Six, Rank.Seven, Rank.Eight, Rank.Nine, Rank.Ten, Rank.Jack, Rank.Queen, Rank.King] let allSuits = [Suit.Hearts, Suit.Diamonds, Suit.Clubs, Suit.Spades] var myFullDeck: [Card] = [] for myRank in allRanks { for mySuit in allSuits { myFullDeck.append(Card(rank: myRank, suit: mySuit)) } } return myFullDeck } //actual use: let aFullDeck = Card.generateFullDeck() //Generate the desired full deck var allDesc: [String] = [] for aCard in aFullDeck { println(aCard.simpleDescription()) //You'll see all the results in playground } </code></pre>
<pre><code>enum Rank: Int { ... static let ranks = (Rank.Ace.rawValue ... Rank.King.rawValue).map{Rank(rawValue: $0)! } } enum Suit { ... static let suits = [Spades, Hearts, Diamonds, Clubs] } struct Card { ... static func fullDesk() -&gt; [Card] { var desk: [Card] = [] for suit in Suit.suits { for rank in Rank.ranks { desk.append(Card(rank: rank,suit: suit)) } } return desk } } </code></pre> <p>How about this?</p>
<p>While dealing with <code>Swift 2.0</code> here is my suggestion:</p> <p>I have added the raw type to <code>Suit</code> <code>enum</code> </p> <pre><code>enum Suit: Int { </code></pre> <p>then:</p> <pre><code>struct Card { var rank: Rank var suit: Suit func fullDeck()-&gt; [Card] { var deck = [Card]() for i in Rank.Ace.rawValue...Rank.King.rawValue { for j in Suit.Spades.rawValue...Suit.Clubs.rawValue { deck.append(Card(rank:Rank(rawValue: i)! , suit: Suit(rawValue: j)!)) } } return deck } } </code></pre>
<p>Sorry, my answer was specific to how I used this post in what I needed to do. For those who stumble upon this question, looking for a way to <em>find</em> a case within an enum, this is the way to do it (new in Swift 2):</p> <p>Edit: lowercase camelCase is now the standard for Swift 3 enum values</p> <pre><code>// From apple docs: If the raw-value type is specified as String and you don’t assign values to the cases explicitly, each unassigned case is implicitly assigned a string with the same text as the name of that case. enum Theme: String { case white, blue, green, lavender, grey } func loadTheme(theme: String) { // this checks the string against the raw value of each enum case (note that the check could result in a nil value, since it's an optional, which is why we introduce the if/let block if let testTheme = Theme(rawValue: theme) { // testTheme is guaranteed to have an enum value at this point self.someOtherFunction(testTheme) } } </code></pre> <p>For those wondering about the enumerating on an enum, the answers given on this page that include a static var/let containing an array of all enum values are correct. The latest Apple example code for tvOS contains this exact same technique.</p> <p>That being said, they should build a more convenient mechanism into the language (Apple, are you listening?)!</p>
<h2>The second answer that really works</h2> <p>So I stumbled around in the bits and bytes and created an extension (that I later found out works very similar to <a href="http://stackoverflow.com/users/3804019/rintaro">@rintaro</a>'s answer). It's usable like this:</p> <pre><code>enum E : EnumCollection { case A, B, C } Array(E.cases()) // [A, B, C] </code></pre> <p>Remarkable is that it's usable on any enum (without associated values). Note that this doesn't work for enums that have no cases.</p> <h3>Disclaimer</h3> <p>As with <a href="http://stackoverflow.com/users/3804019/rintaro">@rintaro</a>'s answer, this code uses the underlying representation of an enum. This representation isn't documented and might change in the future, which would break it -> I don't recommend the usage of this in production. </p> <p>EDIT: It's been about a year and this still works.</p> <h3>Code (Swift 2.2, Xcode 7.3.1)</h3> <pre><code>protocol EnumCollection : Hashable {} extension EnumCollection { static func cases() -&gt; AnySequence&lt;Self&gt; { typealias S = Self return AnySequence { () -&gt; AnyGenerator&lt;S&gt; in var raw = 0 return AnyGenerator { let current : Self = withUnsafePointer(&amp;raw) { UnsafePointer($0).memory } guard current.hashValue == raw else { return nil } raw += 1 return current } } } } </code></pre> <h3>Code (Swift 3, Xcode 8.1)</h3> <pre><code>protocol EnumCollection : Hashable {} extension EnumCollection { static func cases() -&gt; AnySequence&lt;Self&gt; { typealias S = Self return AnySequence { () -&gt; AnyIterator&lt;S&gt; in var raw = 0 return AnyIterator { let current : Self = withUnsafePointer(to: &amp;raw) { $0.withMemoryRebound(to: S.self, capacity: 1) { $0.pointee } } guard current.hashValue == raw else { return nil } raw += 1 return current } } } } </code></pre> <p>(I have no idea why I need the <code>typealias</code>, but the compiler complains without it)</p> <p>(I made big modification to this answer, look at edits for past versions)</p>
<p>If you give the enum <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html">a raw Int value</a> it will make looping much easier.</p> <p>For example, you can use <code>anyGenerator</code> to get a generator that can enumerate across your values:</p> <pre><code>enum Suit: Int, CustomStringConvertible { case Spades, Hearts, Diamonds, Clubs var description: String { switch self { case .Spades: return "Spades" case .Hearts: return "Hearts" case .Diamonds: return "Diamonds" case .Clubs: return "Clubs" } } static func enumerate() -&gt; AnyGenerator&lt;Suit&gt; { var nextIndex = Spades.rawValue return anyGenerator { Suit(rawValue: nextIndex++) } } } // You can now use it like this: for suit in Suit.enumerate() { suit.description } // or like this: let allSuits: [Suit] = Array(Suit.enumerate()) </code></pre> <hr> <p>However, this looks like a fairly common pattern, wouldn't it be nice if we could make any enum type enumerable by simply conforming to a protocol? Well with Swift 2.0 and protocol extensions, now we can!</p> <p>Simply add this to your project:</p> <pre><code>protocol EnumerableEnum { init?(rawValue: Int) static func firstValue() -&gt; Int } extension EnumerableEnum { static func enumerate() -&gt; AnyGenerator&lt;Self&gt; { var nextIndex = firstRawValue() return anyGenerator { Self(rawValue: nextIndex++) } } static func firstRawValue() -&gt; Int { return 0 } } </code></pre> <p>Now any time you create an enum (so long as it has an Int raw value), you can make it enumerable by conforming to the protocol:</p> <pre><code>enum Rank: Int, EnumerableEnum { case Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King } // ... for rank in Rank.enumerate() { ... } </code></pre> <p>If your enum values don't start with <code>0</code> (the default), override the <code>firstRawValue</code> method:</p> <pre><code>enum DeckColor: Int, EnumerableEnum { case Red = 10, Blue, Black static func firstRawValue() -&gt; Int { return Red.rawValue } } // ... let colors = Array(DeckColor.enumerate()) </code></pre> <hr> <p>The final Suit class, including replacing <code>simpleDescription</code> with the <a href="http://stackoverflow.com/questions/24108634/what-is-the-swift-equivalent-of-nsobject-description">more standard CustomStringConvertible protocol</a>, will look like this:</p> <pre><code>enum Suit: Int, CustomStringConvertible, EnumerableEnum { case Spades, Hearts, Diamonds, Clubs var description: String { switch self { case .Spades: return "Spades" case .Hearts: return "Hearts" case .Diamonds: return "Diamonds" case .Clubs: return "Clubs" } } } // ... for suit in Suit.enumerate() { print(suit.description) } </code></pre>
<p>I like this solution which I put together after finding this page: <a href="http://stackoverflow.com/questions/24003584/list-comprehension-in-swift/24003930#24003930">List comprehension in Swift</a> </p> <p>It uses Int raws instead of Strings but it avoids typing twice, it allows customizing the ranges, and doesn't hard code raw values.</p> <pre><code>enum Suit: Int { case None case Spade, Heart, Diamond, Club static let allRawValues = Suit.Spade.rawValue...Suit.Club.rawValue static let allCases = Array(allRawValues.map{ Suit(rawValue: $0)! }) } enum Rank: Int { case Joker case Two, Three, Four, Five, Six case Seven, Eight, Nine, Ten case Jack, Queen, King, Ace static let allRawValues = Rank.Two.rawValue...Rank.Ace.rawValue static let allCases = Array(allRawValues.map{ Rank(rawValue: $0)! }) } func makeDeck(withJoker withJoker: Bool) -&gt; [Card] { var deck = [Card]() for suit in Suit.allCases { for rank in Rank.allCases { deck.append(Card(suit: suit, rank: rank)) } } if withJoker { deck.append(Card(suit: .None, rank: .Joker)) } return deck } </code></pre>
<p>Updated to <strong>Swift 2.2</strong>+</p> <pre><code>func iterateEnum&lt;T: Hashable&gt;(_: T.Type) -&gt; AnyGenerator&lt;T&gt; { var i = 0 return AnyGenerator { let next = withUnsafePointer(&amp;i) { UnsafePointer&lt;T&gt;($0).memory } if next.hashValue == i { i += 1 return next } else { return nil } } } </code></pre> <p>it's updated code to Swift 2.2 form <a href="http://stackoverflow.com/a/32429125/3804019">@Kametrixom's an</a>swer</p> <p>For <strong>Swift 3.0+</strong> (many thanks to <a href="http://stackoverflow.com/users/4778598/philip">@Philip</a>)</p> <pre><code>func iterateEnum&lt;T: Hashable&gt;(_: T.Type) -&gt; AnyIterator&lt;T&gt; { var i = 0 return AnyIterator { let next = withUnsafePointer(&amp;i) { UnsafePointer&lt;T&gt;($0).pointee } if next.hashValue == i { i += 1 return next } else { return nil } } } </code></pre>
<p>There are lots of good solutions in this thread and others however some of them are very complicated. I like to simplify as much as possible. Here is a solution which may or may not work for different needs but I think it works well in most cases: </p> <pre><code>enum Number: String { case One case Two case Three case Four case EndIndex func nextCase () -&gt; Number { switch self { case .One: return .Two case .Two: return .Three case .Three: return .Four case .Four: return .EndIndex /* Add all additional cases above */ case .EndIndex: return .EndIndex } } static var allValues: [String] { var array: [String] = Array() var number = Number.One while number != Number.EndIndex { array.append(number.rawValue) number = number.nextCase() } return array } } </code></pre> <p>To iterate:</p> <pre><code>for item in Number.allValues { print("number is: \(item)") } </code></pre>
<p>Adapting <a href="http://stackoverflow.com/a/28341290/96153">@rintaro's answer</a> to Swift 3 in which rintaro:</p> <ul> <li>wrote a utility function <code>iterateEnum()</code> for iterating cases for arbitrary enum types</li> <li>implemented casting ideas from <a href="http://stackoverflow.com/a/32429125/3804019">@Kametrixom's answer</a></li> </ul> <hr> <p>Swift3</p> <pre><code>func iterateEnum&lt;T: Hashable&gt;(_: T.Type) -&gt; AnyGenerator&lt;T&gt; { var i = 0 return AnyGenerator { let next = withUnsafePointer(&amp;i) { UnsafePointer&lt;T&gt;($0).memory } let value : T? if next.hashValue == i { value = next } else { value = nil } i = i + 1 return value } } </code></pre>
<p>As with @Kametrixom answer <a href="http://stackoverflow.com/a/32429125/81388">here</a> I believe returning an array would be better than returning AnySequence, since you can have access to all of Array's goodies such as count, etc.</p> <p>Here's the re-write:</p> <pre><code>public protocol EnumCollection : Hashable {} extension EnumCollection { public static func allValues() -&gt; [Self] { typealias S = Self let retVal = AnySequence { () -&gt; AnyGenerator&lt;S&gt; in var raw = 0 return AnyGenerator { let current : Self = withUnsafePointer(&amp;raw) { UnsafePointer($0).memory } guard current.hashValue == raw else { return nil } raw += 1 return current } } return [S](retVal) } } </code></pre>
<p>I found myself doing <code>.allValues</code> alot throughout my code. I finally figured out a way to simply conform to an <code>Iteratable</code> protocol and have an <code>rawValues()</code> method.</p> <pre><code>protocol Iteratable {} extension RawRepresentable where Self: RawRepresentable { static func iterateEnum&lt;T: Hashable&gt;(_: T.Type) -&gt; AnyIterator&lt;T&gt; { var i = 0 return AnyIterator { let next = withUnsafePointer(to: &amp;i) { $0.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee } } if next.hashValue != i { return nil } i += 1 return next } } } extension Iteratable where Self: RawRepresentable, Self: Hashable { static func hashValues() -&gt; AnyIterator&lt;Self&gt; { return iterateEnum(self) } static func rawValues() -&gt; [Self.RawValue] { return hashValues().map({$0.rawValue}) } } // Example enum Grocery: String, Iteratable { case Kroger = "kroger" case HEB = "h.e.b." case Randalls = "randalls" } let groceryHashes = Grocery.hashValues() // AnyIterator&lt;Grocery&gt; let groceryRawValues = Grocery.rawValues() // ["kroger", "h.e.b.", "randalls"] </code></pre>