Swift rangeOfString index 0 or 1
I have a array of Names and want to filter out those which has first OR second letter as "E", from the following array var userNames = ["John","Tom","Ed","Ben","Albert"] The outputShould be ["Ed","Ben"]. Albert should not be included as the position is not from 1st or second let filteredNames = userName.filter { (inputStr) -> Bool in if let inputRang = inputStr.range(of: "e", options: .caseInsensitive, range: nil, locale: nil) { //How do I check the position 0 or 1 here return true } return false }
let result = userNames.filter { $0.lowercased().characters.prefix(2).contains("e") } print(result) // ["Ed", "Ben"] This should do it.
@Eendje has posted has a good and efficient solution to achieve your goal, but to answer your direct question: You would have to calculate the distance from the strings initial index (inputStr.startIndex) to the position where the substring has been found (inputRange.lowerBound): let filteredNames = userNames.filter { (inputStr) -> Bool in if let inputRange = inputStr.range(of: "e", options: .caseInsensitive) { if inputStr.distance(from: inputStr.startIndex, to: inputRange.lowerBound) <= 1 { return true } } return false } Another option is to restrict the search range: let filteredNames = userNames.filter { (inputStr) -> Bool in let range = inputStr.startIndex ..< inputStr.index(inputStr.startIndex, offsetBy: 2) return inputStr.range(of: "e", options: .caseInsensitive, range: range) != nil }