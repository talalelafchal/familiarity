How to define optional methods in Swift protocol?
<p>Is it possible in Swift? If not then is there a workaround to do it?</p>
<p>Put the <code>@optional</code> in front of methods or properties.</p>
<p>If you want to use optional methods, you <strong>must</strong> mark your protocol with <code>@objc</code> flag:</p> <pre><code>@objc protocol MyProtocol { optional func doSomething() } class MyClass : MyProtocol { // no error } </code></pre> <p>Otherwise, Swift protocols behave like interfaces on other OO languages, where all methods defined in interfaces must be implemented.</p>
<ul> <li>You need to add <code>optional</code> keyword prior to each method. </li> <li>Please note, however, that for this to work, <strong>your protocol must be marked with @objc attribute.</strong></li> <li>This further implies that this protocol would only be applicable to classes, and not structures.</li> </ul>
<p>The other answers here involving marking the protocol as "@objc" do not work when using swift-specific types. </p> <pre><code>struct Info { var height: Int var weight: Int } @objc protocol Health { func isInfoHealthy(info: Info) -&gt; Bool } //Error "Method cannot be marked @objc because the type of the parameter cannot be represented in Objective-C" </code></pre> <p>In order to declare optional protocols that work well with swift, declare the functions as variables instead of func's. </p> <pre><code>protocol Health { var isInfoHealthy: (Info) -&gt; (Bool)? { get set } } </code></pre> <p>And then implement the protocol as follows</p> <pre><code>class Human: Health { var isInfoHealthy: (Info) -&gt; (Bool)? = { info in if info.weight &lt; 200 &amp;&amp; info.height &gt; 72 { return true } return false } //Or leave out the implementation and declare it as: //var isInfoHealthy: (Info) -&gt; (Bool)? } </code></pre> <p>You can then use "?" to check whether or not the function has been implemented</p> <pre><code>func returnEntity() -&gt; Health { return Human() } var anEntity: Health = returnEntity() var isHealthy = anEntity.isInfoHealthy(Info(height: 75, weight: 150))? //"isHealthy" is true </code></pre>
<p>Here's a very simple example for swift Classes ONLY, and not for structures or enumerations. Note that the protocol method being optional, has two levels of optional chaining at play. Also the class adopting the protocol needs the @objc attribute in its declaration.</p> <pre><code>@objc protocol CollectionOfDataDelegate{ optional func indexDidChange(index: Int) } @objc class RootView: CollectionOfDataDelegate{ var data = CollectionOfData() init(){ data.delegate = self data.indexIsNow() } func indexDidChange(index: Int) { println("The index is currently: \(index)") } } class CollectionOfData{ var index : Int? weak var delegate : CollectionOfDataDelegate? func indexIsNow(){ index = 23 delegate?.indexDidChange?(index!) } } </code></pre>
<p>In Swift 2.0 it's possible to add default implementations of a protocol. This creates a new way of optional methods in protocols. </p> <pre><code>protocol MyProtocol { func doSomethingNonOptionalMethod() func doSomethingOptionalMethod() } extension MyProtocol { func doSomethingOptionalMethod(){ // leaving this empty } } </code></pre> <p>It's not a really nice way in creating optional protocol methods, but gives you the possibility to use structs in in protocol callbacks.</p> <p>I wrote a small summary here: <a href="http://www.avanderlee.com/swift-2-0/optional-protocol-methods/">http://www.avanderlee.com/swift-2-0/optional-protocol-methods/</a></p>
<p>Slightly off topic from the original question, but it builds off Antoine’s idea and I thought it might help someone. </p> <p>You can also make computed properties optional for structs with protocol extensions.</p> <p>You can make a property on the protocol optional</p> <pre><code>protocol SomeProtocol { var required: String { get } var optional: String? { get } } </code></pre> <p>Implement the dummy computed property in the protocol extension</p> <pre><code>extension SomeProtocol { var optional: String? { return nil } } </code></pre> <p>And now you can use structs that do or don’t have the optional property implemented</p> <pre><code>struct ConformsWithoutOptional { let required: String } struct ConformsWithOptional { let required: String let optional: String? } </code></pre> <p>I’ve also written up how to do <a href="http://matthewpalmer.net/blog/2015/08/29/optional-computed-property-swift-protocol-non-objc/" rel="nofollow">optional properties in Swift protocols on my blog</a>, which I’ll keep updated in case things change through the Swift 2 releases.</p>
<p><strong>Here is a concrete example with the delegation pattern.</strong></p> <p>Setup your Protocol:</p> <pre><code>@objc protocol MyProtocol:class { func requiredMethod() optional func optionalMethod() } class MyClass: NSObject { weak var delegate:MyProtocol? func callDelegate() { delegate?.requiredMethod() delegate?.optionalMethod?() } } </code></pre> <p>Set the delegate to a class and implement the Protocol. See that the optional method does not need to be implemented.</p> <pre><code>class AnotherClass: NSObject, MyProtocol { init() { super.init() let myInstance = MyClass() myInstance.delegate = self } func requiredMethod() { } } </code></pre> <p>One important thing is that the optional method is optional and needs a "?" when calling. Mention the second question mark.</p> <pre><code>delegate?.optionalMethod?() </code></pre>