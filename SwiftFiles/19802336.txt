Changing Font Size For UITableView Section Headers
<p>Can someone please instruct me on the easiest way to change the font size for the text in a UITableView section header?</p> <p>I have the section titles implemented using the following method:</p> <pre><code>- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section </code></pre> <p>Then, I understand how to successfully change the section header height using this method:</p> <pre><code>- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section </code></pre> <p>I have the UITableView cells populated using this method:</p> <pre><code>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath </code></pre> <p>However, I'm stuck as to how to actually increase the font size - or for that matter the font style - of the section header text?</p> <p>Can someone please assist? Thanks.</p>
<p>Unfortunately, you may have to override this:</p> <pre><code>- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section </code></pre> <p>Try something like this:</p> <pre><code>- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section { UILabel *myLabel = [[UILabel alloc] init]; myLabel.frame = CGRectMake(20, 8, 320, 20); myLabel.font = [UIFont boldSystemFontOfSize:18]; myLabel.text = [self tableView:tableView titleForHeaderInSection:section]; UIView *headerView = [[UIView alloc] init]; [headerView addSubview:myLabel]; return headerView; } </code></pre>
<p>While mosca1337's answer is a correct solution, be careful with that method. For a header with text longer than one line, you will have to perform the calculations of the height of the header in <code>tableView:heightForHeaderInSection:</code> which can be cumbersome.</p> <p>A much preferred method is to use the appearance API:</p> <pre><code>[[UILabel appearanceWhenContainedIn:[UITableViewHeaderFooterView class], nil] setFont:[UIFont boldSystemFontOfSize:28]]; </code></pre> <p>This will change the font, while still leaving the table to manage the heights itself.</p> <p><strong>For optimal results, subclass the table view, and add it to the containment chain (in <code>appearanceWhenContainedIn:</code>) to make sure the font is only changed for the specific table views.</strong></p>
<p>Another way to do this would be to respond to the <code>UITableViewDelegate</code> method <code>willDisplayHeaderView</code>. The passed view is actually an instance of a <code>UITableViewHeaderFooterView</code>.</p> <p>The example below changes the font, and also centers the title text vertically and horizontally within the cell. Note that you should also respond to <code>heightForHeaderInSection</code> to have any changes to your header's height accounted for in the layout of the table view. (That is, if you decide to change the header height in this <code>willDisplayHeaderView</code> method.)</p> <p>You could then respond to the <code>titleForHeaderInSection</code> method to reuse this configured header with different section titles.</p> <pre><code>- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section { UITableViewHeaderFooterView *header = (UITableViewHeaderFooterView *)view; header.textLabel.textColor = [UIColor redColor]; header.textLabel.font = [UIFont boldSystemFontOfSize:18]; CGRect headerFrame = header.frame; header.textLabel.frame = headerFrame; header.textLabel.textAlignment = NSTextAlignmentCenter; } </code></pre> <p>UPDATE (updated for Swift 1.2): Might as well show the same example in Swift. (Note: if your view controller is a descendant of a <code>UITableViewController</code>, this would need to be declared as <code>override func</code>.)</p> <pre><code>override func tableView(tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) { let header:UITableViewHeaderFooterView = view as! UITableViewHeaderFooterView header.textLabel.textColor = UIColor.redColor() header.textLabel.font = UIFont.boldSystemFontOfSize(18) header.textLabel.frame = header.frame header.textLabel.textAlignment = NSTextAlignment.Center } </code></pre> <p>UPDATE (updated for Swift 3.0): The following code works for Swift 3.0 and also ensures that the app doesn't crash if your header view is something other than a UITableViewHeaderFooterView:</p> <pre><code>override func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) { guard let header = view as? UITableViewHeaderFooterView else { return } header.textLabel?.textColor = UIColor.red header.textLabel?.font = UIFont.boldSystemFont(ofSize: 18) header.textLabel?.frame = header.frame header.textLabel?.textAlignment = .center } </code></pre>
<p>For iOS 7 I use this,</p> <pre><code> -(void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section { UITableViewHeaderFooterView *header = (UITableViewHeaderFooterView *)view; header.textLabel.font = [UIFont boldSystemFontOfSize:10.0f]; header.textLabel.textColor = [UIColor orangeColor]; } </code></pre> <p>Here is Swift version with header resizing</p> <pre><code>func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat { return CGFloat(27); } func tableView(tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) { if let header = view as? UITableViewHeaderFooterView { header.textLabel!.font = UIFont.systemFontOfSize(10.0) header.textLabel!.textColor = UIColor.orangeColor() } } </code></pre>
<p><strong>Swift 2.0</strong>:</p> <ol> <li><em>Replace default section header with fully customisable UILabel.</em></li> </ol> <p>Implement viewForHeaderInSection, like so:</p> <pre><code> override func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? { let sectionTitle: String = self.tableView(tableView, titleForHeaderInSection: section)! if sectionTitle == "" { return nil } let title: UILabel = UILabel() title.text = sectionTitle title.textColor = UIColor(red: 0.0, green: 0.54, blue: 0.0, alpha: 0.8) title.backgroundColor = UIColor.clearColor() title.font = UIFont.boldSystemFontOfSize(15) return title } </code></pre> <ol start="2"> <li><em>Alter the default header (retains default).</em></li> </ol> <p>Implement willDisplayHeaderView, like so:</p> <pre><code> override func tableView(tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) { if let view = view as? UITableViewHeaderFooterView { view.backgroundView?.backgroundColor = UIColor.blueColor() view.textLabel!.backgroundColor = UIColor.clearColor() view.textLabel!.textColor = UIColor.whiteColor() view.textLabel!.font = UIFont.boldSystemFontOfSize(15) } } </code></pre> <p>Remember: If you're using static cells, the first section header is padded higher than other section headers due to the top of the UITableView; to fix this:</p> <p>Implement heightForHeaderInSection, like so:</p> <pre><code> override func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat { return 30.0 // Or whatever height you want! } </code></pre>
<p><strong>Swift 2:</strong></p> <p>As OP asked, <strong>only</strong> adjust the size, not setting it as a system bold font or whatever:</p> <pre><code>func tableView(tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) { if let headerView = view as? UITableViewHeaderFooterView, textLabel = headerView.textLabel { let newSize = CGFloat(16) let fontName = textLabel.font.fontName textLabel.font = UIFont(name: fontName, size: newSize) } } </code></pre>
<p><strong>Swift 3:</strong></p> <p>Simplest way to adjust <strong>only</strong> size:</p> <pre><code>func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) { let header = view as! UITableViewHeaderFooterView if let textlabel = header.textLabel { textlabel.font = textlabel.font.withSize(15) } } </code></pre>