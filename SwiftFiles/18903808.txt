Compass placing or position in a map view post iOS6
<p>Does anyone know of a way to change the placing of the compass in MKMapview? </p> <p>I'm talking about the compass that shows up in the upper right corner of the map when it's rotated.</p> <p>I'm making it so you can see the map blurred underneath the navigation bar, which means the frame's y origin will be underneath the nav-bar. The problem is that when the map is rotated, it automatically adds the compass button in the upper right corner and as you can (kind of) see in the screenshot below, that's covered by the navBar.</p> <p><img src="https://i.stack.imgur.com/KpsSM.png" alt="screenshot"></p> <p>I haven't seen any documentation talking about the the compass, anybody have any ideas?</p>
<p>My tests have shown, that the <code>MKMapView</code> somehow knows in what context it is displayed. If you use a regular <code>UINavigationController</code> you'll get the compass positioned below the navigation bar even when it is translucent.</p> <p>There is a new <code>UIViewController</code> property in iOS 7 that defines the beginning of the actual content on the Y axis. It is called <code>topLayoutGuide</code>.</p> <p>Sadly you cannot really influence the value that Apple uses to calculate this property in different contents. It also depends on the visibility of the status bar.</p> <p><strong>BUT:</strong> To solve this problem, I created a simple custom object that I return in my custom view controller:</p> <pre><code>@interface MiFixedLayoutGuide : NSObject &lt;UILayoutSupport&gt; @property (nonatomic) CGFloat pbLength; - (id)initWithLength:(CGFloat)length; @end @implementation MiFixedLayoutGuide - (id)initWithLength:(CGFloat)length { self = [super init]; if (self) { _pbLength = length; } return self; } - (CGFloat)length { return _pbLength; } @end </code></pre> <p>Then I overrode the following two methods in my <code>UIViewController</code> subclass:</p> <pre><code>- (id&lt;UILayoutSupport&gt;)topLayoutGuide { return [[MiFixedLayoutGuide alloc]initWithLength:44]; } - (id&lt;UILayoutSupport&gt;)bottomLayoutGuide { return [[MiFixedLayoutGuide alloc]initWithLength:44]; } </code></pre> <p>This insets the layout guides by 44 points. And the <code>MKMapView</code> will use these values to position the compass at the top, and the "Legal" label at the bottom.</p> <p>One thing that you now have to pay attention to is, that you cannot use the layout guides anymore within the auto layout visual format language. </p>
<p>With iOS 8 you can simple do:</p> <pre><code>[someMapView setLayoutMargins:UIEdgeInsetsMake(20, 0, 20, 0)]; </code></pre>
<p><strong>Swift 2.3:</strong></p> <pre><code>mapView.layoutMargins = UIEdgeInsets(top: 20, left: 0, bottom: 20, right: 0) </code></pre> <p>Where instead of 20 you could calculate your UI elements height to have a more dynamic solution adjusting to each device or element.</p>