Protocol Extensions and subclasses
I am wondering why the following doesn't print out what I think it should. /* Fails */ protocol TheProtocol { func update() } class A: TheProtocol { } class B : A {} extension TheProtocol { func update() { print("Called update from TheProtocol") } } extension TheProtocol where Self: B { func update() { print("Called update from B") } } let instanceB = B() instanceB.update() let instanceBViaProtocol:TheProtocol = B() instanceBViaProtocol.update() This will print the following: Called update from B Called update from TheProtocol // Why not: Called update from B (extension) I am especially wondering why instanceBViaProtocol.update() Doesn't execute the update() in the extension on TheProtocol: extension TheProtocol where Self: B { func update() { print("Called update from B") } } I would think it would since B inherits from A which adopts TheProtocol, so I would think that B would then implicitly adopt TheProtocol as well. Moving the protocol adoption to B from A yields the expected result. protocol TheProtocol { func update() } class A { // Remove TheProtocol } class B : A, TheProtocol {} // Add TheProtocol extension TheProtocol { func update() { print("Called update from TheProtocol") } } extension TheProtocol where Self: B { func update() { print("Called update from B") } } let instanceB = B() instanceB.update() let instanceBViaProtocol:TheProtocol = B() instanceBViaProtocol.update() Result: Called update from B Called update from B I took a look at https://medium.com/ios-os-x-development/swift-protocol-extension-method-dispatch-6a6bf270ba94#.6cm4oqaq1 and http://krakendev.io/blog/subclassing-can-suck-and-heres-why, but I was unable to figure this out. Are extension methods not honored on subclasses of entities that adopt the protocol?