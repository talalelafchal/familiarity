Programmatically UITableView using swift
<p>I'm trying to create a simple tableView programmatically using swift, so I wrote this code on "AppDelegate.swift" :</p> <pre><code> func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -&gt; Bool { self.window = UIWindow(frame: UIScreen.mainScreen().bounds) var tvc :TableViewController = TableViewController(style: UITableViewStyle.Plain) self.window!.rootViewController = tvc self.window!.backgroundColor = UIColor.whiteColor() self.window!.makeKeyAndVisible() return true } </code></pre> <p>Basically I added the TableViewController creation and added to the window. And this is the TableViewController code:</p> <pre><code>class TableViewController: UITableViewController { init(style: UITableViewStyle) { super.init(style: style) } override func viewDidLoad() { super.viewDidLoad() } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } // #pragma mark - Table view data source override func numberOfSectionsInTableView(tableView: UITableView?) -&gt; Int { return 1 } override func tableView(tableView: UITableView?, numberOfRowsInSection section: Int) -&gt; Int { return 10 } override func tableView(tableView: UITableView?, cellForRowAtIndexPath indexPath: NSIndexPath?) -&gt; UITableViewCell? { var cell:UITableViewCell = self.tableView.dequeueReusableCellWithIdentifier("reuseIdentifier", forIndexPath: indexPath) as UITableViewCell cell.textLabel.text = "Hello World" return cell } </code></pre> <p>}</p> <p>So, when I try to run the code I receive this message: </p> <blockquote> <p>Xcode6Projects/TableSwift/TableSwift/TableViewController.swift: 12: 12: fatal error: use of unimplemented initializer 'init(nibName:bundle:)' for class 'TableSwift.TableViewController'</p> </blockquote> <p>The error occurs when the compiler is executing the </p> <blockquote> <p>super.init(style: style)</p> </blockquote> <p>Any thoughts ?</p>
<p><strong>In Xcode 6 Beta 4</strong></p> <p>Removing</p> <pre><code>init(style: UITableViewStyle) { super.init(style: style) } </code></pre> <p>will do the trick. This is caused by different initializer behavior between Obj-C and Swift. You have created a designated initializer. If you remove it, all initializers will be inherited.</p> <p>The root cause is probably in <code>-[UITableViewController initWithStyle:]</code> which calls</p> <pre><code>[self initWithNibName:bundle:] </code></pre> <p>I actually think this might be a bug in the way Obj-C classes are converted to Swift classes. </p>
<p>Instead of</p> <pre><code>init(style: UITableViewStyle) { super.init(style: style) } </code></pre> <p>you might find this handy:</p> <pre><code>convenience init() { self.init(style: .Plain) title = "Plain Table" } </code></pre> <p>Then, you can just call <code>TableViewController()</code> to initialize.</p>
<p><strong>Cell Function Use:</strong></p> <pre><code>override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell!{ var cell = tableView.dequeueReusableCellWithIdentifier(kLCellIdentifier) as UITableViewCell! if !cell { cell = UITableViewCell(style:.Default, reuseIdentifier: kLCellIdentifier) } cell.backgroundColor = UIColor.clearColor() cell.textLabel.text = arrData[indexPath.row] cell.image = UIImage(named: "\(arrImage[indexPath.row])") cell.accessoryType = UITableViewCellAccessoryType.DetailDisclosureButton cell.selectionStyle = UITableViewCellSelectionStyle.None return cell } </code></pre>
<p>It is as simple as writing a function</p> <pre><code> func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! { let cell: UITableViewCell = UITableViewCell(style: UITableViewCellStyle.Subtitle, reuseIdentifier: "MyTestCell") cell.text = self.Myarray[indexPath.row] cell.textLabel.textColor = UIColor.greenColor() cell.detailTextLabel.text = "DummyData #\(indexPath.row)" cell.detailTextLabel.textColor = UIColor.redColor() cell.imageView.image = UIImage(named:"123.png") return cell } </code></pre>