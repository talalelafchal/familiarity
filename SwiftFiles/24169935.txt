Swift compiling bug &quot;Unknown type name&quot; and &quot;Expected a type&quot;
<p>I'm running into an issue where my Swift code compiles fine but then the generated -Swift.h file has an error in it...</p> <p>Here is an example of what I'm doing:</p> <pre><code>class MyScene : CCLayer { var ctrl : CCControlSlider? } </code></pre> <p>This compiles just fine in the swift code and I can see the methods on the ctrl object just fine as well. I have the following in my bridge header:</p> <pre><code>#import "cocos2d.h" #import "CCControlSlider.h" </code></pre> <p>This works perfectly fine in other classes that use other libraries which work correctly. Also note that I can use this CCControlSlider class in my objective-c classes with no issues at all as well.</p> <p>Here is what happens on the generated -Swift.h file:</p> <pre><code>SWIFT_CLASS("_TtC15MyProject10MyScene") @interface MyScene : CCLayer @property (nonatomic) CCControlSlider * ctrl; @end </code></pre> <p>The property has the error "Unknown type name "CCControlSlider" and if it's used in a method then it gives the error "Expected a type".</p> <p>This works just fine using other classes but for some reason this one class gives this compiler error only in the generated header file and only when used from Swift.</p> <p>I guess what I'm wondering is, am I doing something wrong or is this just a bug??</p>
<p>The answer given here is the simplest approach: <a href="http://stackoverflow.com/a/24216718/341994">http://stackoverflow.com/a/24216718/341994</a></p> <p>Basically, somewhere in your Objective-C code you are importing the automatically generated <code>-Swift.h</code> header. In that same code, <em>before</em> that <code>#import</code> line, insert <code>#import "CCControlSlider.h"</code>. The order of these two <code>#import</code> statements is crucial!</p> <p>The fact that this Objective-C class may not need CCControlSlider is irrelevant (though if it does, that's a bonus). The important thing is the order. We want to expose the namespace to CCControlSlider before exposing the namespace to the automatically generated <code>-Swift.h</code> header.</p>
<p>If you don't want to worry about the order of imports everywhere you import your <code>ProjectName-Swift.h</code> file, try this:</p> <p>Create a file named <code>ProjectName-Swift-Fixed.h</code> with the following contents</p> <pre><code>// ProjectName-Swift-Fixed.h @class CCControlSlider; // (Add other imports or forward declarations here) #import "ProjectName-Swift.h" </code></pre> <p>Second, throughout the rest of your codebase, replace <code>#import "ProjectName-Swift.h"</code> with <code>#import "ProjectName-Swift-Fixed.h"</code></p> <p>This approach has two benefits over copying and pasting a list of <code>#import</code> statements above each place you use Swift classes in Objective-C code:</p> <ol> <li>You won't have to worry about the order of imports, except in the <code>ProjectName-Swift-Fixed.h</code> file</li> <li>When you add new Objective-C classes to your Swift code, you won't have to add new <code>#import</code> statements in every Objective-C file that uses Swift code</li> </ol>
<p>While incorporating a set of Objective C files into my mostly Swift-based project I suddenly started getting a lot of these errors on them. Then I realized though the file had:</p> <pre><code>#import &lt;Foundation/Foundation.h&gt; </code></pre> <p>It did not have:</p> <pre><code>#import &lt;UIKit/UIKit.h&gt; </code></pre> <p>and once I added that line the errors started resolving. Cleaning afterwards always helps. Good luck</p>
<p>OC code has a global call # import "projectName - swift. H", and "the projectName - Bridging - Header. H" and calls the OC code.Is equivalent to the parent class call subclasses, subclasses and calls the superclass.To make the "projectName - Bridging - Header. H" calls the oc class don't call # import "projectName - swift. H.</p>