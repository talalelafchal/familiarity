Nested Function in Swift return type casting error
<p>Original Code:</p> <pre><code>func makeIncrement()-&gt;(Int-&gt;Int){ func addOne(Number:Int)-&gt;Int{ return 1 + Number } return addOne } </code></pre> <p><strong>Question One:</strong> does the (Int->Int) interrupted like this -- first Int is the return type of inner function, second Int is return type of the outer? I did little experiment myself by changing code to:</p> <pre><code>func makeIncrement()-&gt;(Int-&gt;String){ func addOne(Number:Int)-&gt;Int{ return 1 + Number } return String(addOne) } </code></pre> <p><strong>error pop up says NSString is not a subtype of Int->String</strong></p> <p>I tried other way around (reverse return type, but gave me similar errors)</p> <p><strong>Question Two</strong>: How does this type of casting work in this case ?</p>
<p><code>addOne</code> is a function. You cannot simply take a function and convert it into a text (<code>String</code>).</p> <pre><code>func makeIncrement() -&gt; (Int -&gt; String) { </code></pre> <p>Says that you want to return a function that takes an <code>Int</code> as a parameter and returns a <code>String</code></p> <p>You must create such a function first:</p> <pre><code>func addOneAsString(number: Int) -&gt; String { return String(1 + number) } </code></pre> <p>And then return it:</p> <pre><code>func makeIncrement() -&gt; (Int -&gt; String){ func addOneAsString(number: Int) -&gt; String { return String(1 + number) } return addOneAsString } </code></pre> <p>See <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_204" rel="nofollow">Swift Reference - Functions</a></p>
<blockquote> <p>Question One: does the (Int->Int) interrupted like this -- first Int is the return type of inner function, second Int is return type of the outer?</p> </blockquote> <p>No, <code>(Int -&gt; Int)</code> is the return type of the outer function, which means it returns a function that takes an <code>Int</code> as a parameter and returns an <code>Int</code>. Thus, you need to return a function that has those characteristics.</p>