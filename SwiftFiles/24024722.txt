Determine if a Range contains a value
<p>I'm trying to figure out a way to determine if a value falls within a <code>Range</code> in Swift.</p> <p>Basically what I'm trying to do is adapt one of the switch statement examples to do something like this:</p> <pre><code>let point = (1, -1) switch point { case let (x, y) where (0..5).contains(x): println("(\(x), \(y)) has an x val between 0 and 5.") default: println("This point has an x val outside 0 and 5.") } </code></pre> <p>As far as I can tell, there isn't any built in way to do what my imaginary <code>.contains</code> method above does.</p> <p>So I tried to extend the <code>Range</code> class. I ended up running into issues with generics though. I can't extend <code>Range&lt;Int&gt;</code> so I had to try to extend <code>Range</code> itself.</p> <p>The closest I got was this but it doesn't work since <code>&gt;=</code> and <code>&lt;=</code> aren't defined for <code>ForwardIndex</code></p> <pre><code>extension Range { func contains(val:ForwardIndex) -&gt; Bool { return val &gt;= self.startIndex &amp;&amp; val &lt;= self.endIndex } } </code></pre> <p>How would I go about adding a <code>.contains</code> method to <code>Range</code>? Or is there a better way to determine whether a value falls within a range?</p> <p>Edit2: This seems to work to extend <code>Range</code></p> <pre><code>extension Range { func contains(val:T) -&gt; Bool { for x in self { if(x == val) { return true } } return false } } var a = 0..5 a.contains(3) // true a.contains(6) // false a.contains(-5) // false </code></pre> <p>I am very interested in the ~= operator mentioned below though; looking into that now.</p>
<p>Instead of messing with Range, you could add a simple helper function like this</p> <pre><code>let point = (1, -1) switch point { case let (x, y) where contains((0..5),x): println("(\(x), \(y)) has an x val between 0 and 5.") default: println("This point has an x val outside 0 and 5.") } func contains(range :Range&lt;Int&gt;, x: Int)-&gt;Bool{ for num in range{ if(num==x){ return true } } return false } </code></pre> <p>You could also probably do something similar with a closure.</p>
<p>You can do it with the <code>~=</code> operator:</p> <pre><code>let point = (1, -1) switch point { case let (x, y) where (0..5) ~= x: println("(\(x), \(y)) has an x val between 0 and 5.") default: println("This point has an x val outside 0 and 5.") } </code></pre> <p>You can also do it directly in a switch:</p> <pre><code>let point = (1, -1) let (x, y) = point switch x { case 0..5: println("yes") default: println("no") } </code></pre> <p><code>~=</code> is the pattern match operator used by case statements. See details <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Patterns.html#//apple_ref/doc/uid/TP40014097-CH36-XID_909">in the docs</a>.</p>
<p>I was looking at the same thing and did: </p> <pre><code>let r = 7...9 operator infix ~ {} func ~ (range:Range&lt;Int&gt;, item:Int) -&gt; Bool{ return item &gt;= range.startIndex &amp;&amp; item &lt;= range.endIndex - 1 } r ~ 9 </code></pre> <p>then I saw that ~= does the same thing! </p>
<p>If you want to write <code>contains</code> extension of <code>Range</code>, use <code>distanceTo</code> of <code>ForwardIndex</code> to determine if given value falls within range.</p> <p>Also use specific type <code>Element</code> instead of general protocol <code>FowardIndex</code> as parameter's type.</p> <p>Both <code>distanceTo</code> and <code>Element</code> are part of <code>Range</code> definition.</p> <pre><code>extension Range { func contains(element: Element) -&gt; Bool { return startIndex.distanceTo(element) &gt;= 0 &amp;&amp; element.distanceTo(endIndex) &gt; 0 } } </code></pre> <p>Plus <code>Range</code> already has a <code>contains</code> method from <code>extension SequenceType where Generator.Element : Equatable</code>. So you can just use it without writing one yourself.</p>
<p>According to your needs, you may choose one of the following options to determine if a <code>Range</code> instance contains a value.</p> <h2>1. <code>SequenceType</code>'s <code>contains(:)</code> method</h2> <p>Since Swift 2, <code>Range</code> conforms to <a href="https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_CollectionType_Protocol/index.html" rel="nofollow"><code>CollectionType</code></a> protocol that inherits itself from <a href="https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_SequenceType_Protocol/index.html#//apple_ref/swift/intf/s:Ps12SequenceType" rel="nofollow"><code>SequenceType</code></a>. For this reason, you can use <a href="https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_SequenceType_Protocol/index.html#//apple_ref/swift/intfm/SequenceType/s:FesRxs12SequenceTypeWx9Generator7Element_s9EquatablerS_8containsFWxS0_S1__Sb" rel="nofollow"><code>contains(_:)</code></a> method in order to check if your range contains a specific value.</p> <p><code>contains(_:)</code> has the following declaration:</p> <blockquote> <p><code>@warn_unused_result func contains(_ element: Self.Generator.Element) -&gt; Bool</code></p> </blockquote> <p>Usage:</p> <pre><code>let value: Int = 0 let range: Range&lt;Int&gt; = -200 ..&lt; 300 print(range.contains(value)) // prints true </code></pre> <h2>2. Expression pattern</h2> <p>Apple states about <a href="https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/Patterns.html#//apple_ref/swift/grammar/expression-pattern" rel="nofollow">expression pattern</a> and the <code>~=</code> operator in <em>The Swift Programming Language</em>:</p> <blockquote> <p>By default, the <code>~=</code> operator compares two values of the same type using the <code>==</code> operator. It can also match an integer value with a range of integers in a Range object.</p> </blockquote> <p>Usage:</p> <pre><code>let value = 0 let range = -200 ..&lt; 300 print(range ~= value) // prints true </code></pre> <h2>3. Switch statement</h2> <p>A simple way to test if a range contains a value is to use a switch statement:</p> <pre><code>let value = 0 switch value { case -200 ..&lt; 300: print("OK") // prints "OK" default: break } </code></pre> <h2>4. Pattern matching with <code>if case</code></h2> <p>As an alternative to the previous switch statement, you can use <code>if case</code>:</p> <pre><code>let value = 0 if case -200 ..&lt; 300 = value { print("OK") // prints "OK" } </code></pre> <hr> <p>Therefore, in order to solve your problem, you can mix the previous options:</p> <pre><code>let point = (1, -1) switch point { case let (x, y) where (0 ..&lt; 5).contains(x): print("(\(x), \(y)) has an x val between 0 and 5.") default: print("This point has an x val outside 0 and 5.") } </code></pre> <pre><code>let point = (1, -1) if case let (x, y) = point where 0 ..&lt; 5 ~= x { print("(\(x), \(y)) has an x val between 0 and 5.") } </code></pre>