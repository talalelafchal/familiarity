Does Swift have constructs for parallel programming through Grand Central Dispatch's dispatch_async?
<p>I am interested in adopting the new Swift programming language. The code base I maintain makes extensive use of multi-core processing through the C++ Grand Central Dispatch extensions (dispatch_async, etc.)</p> <p>Does anyone who has reviewed Swift as it stands know if this language has the ability to access GCD in a fashion similar to this?</p>
<p>I haven't worked with them in swift, but it appears that GCD's functions are available with Swift.</p>
<p>Yes, it does though I have not had too much success in the playground. In a real project it should work. All of the iOS 8 and OS X 10.10 documentation show Swift syntax for GCD methods.</p> <p>I am using <code>dispatch_once</code> for singletons in my current project, it works just fine:</p> <p><code>NSOperation</code> and <code>NSOperationQueue</code> both use GCD under the hood, and it seems to work better in the playground:</p> <pre><code>let operationQueue = NSOperationQueue() for index in 1...20 { operationQueue.addOperationWithBlock( { let thread = NSThread.currentThread() let threadNumber = thread.valueForKeyPath("private.seqNum").integerValue println("Task #\(index) completed on thread #\(threadNumber)") }) } </code></pre> <p>Output:</p> <pre><code>Task #1 completed on thread #3 Task #2 completed on thread #4 Task #3 completed on thread #5 Task #4 completed on thread #4 Task #5 completed on thread #5 Task #6 completed on thread #3 Task #7 completed on thread #6 Task #8 completed on thread #4 Task #9 completed on thread #5 Task #10 completed on thread #5 Task #11 completed on thread #3 Task #12 completed on thread #6 Task #13 completed on thread #3 Task #14 completed on thread #3 Task #15 completed on thread #6 Task #16 completed on thread #5 Task #17 completed on thread #4 Task #18 completed on thread #3 Task #19 completed on thread #4 Task #20 completed on thread #3 </code></pre>