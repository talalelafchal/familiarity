How can I achieve nonlocal exit in Swift?
<p>I know that <a href="http://stackoverflow.com/a/24023248/1639670">Swift does not have try/catch</a>, but are there any other methods by which I can exit from a function to one higher up on the stack without returning to the intervening functions? For example, in the following code is it possible to exit from <code>d()</code> directly back to <code>a()</code> so that only the first print statement (in <code>a()</code>) is executed?</p> <pre><code>func a() { b() println("returned to a()") } func b() { c() println("returned to b()") } func c() { d() println("returned to d()") } func d() { // exit to a() } a() </code></pre> <p>If Swift did have try/catch I could simply wrap the call to <code>b()</code> with <code>try</code> and throw an exception in <code>d()</code>.</p>
<p>No, Swift does not have this in the core language. There may be hacks to work around it (manipulate the stack manually, etc) but the best way to solve this is to just return some value that indicates its exit status, and always check the result of function calls. Like in C.</p>
<p>One would expect more advanced control constructs, such as <code>call-with-current-continuation</code> or lessor related, to appear once exceptions are introduced into the language. For now, nothing.</p>