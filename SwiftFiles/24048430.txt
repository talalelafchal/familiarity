Logging Method signature using swift
<p>I am trying to rewrite my logging class and I would like to know how to substitute <strong>PRETTY_FUNCTION</strong> or NSStringFromSelector(_cmd) in a swift file in order to track the method calls?</p>
<p>Special literals in swift are as follows (from <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html">the swift guide</a>):</p> <p><code>__FILE__</code> <strong>String</strong> The name of the file in which it appears.</p> <p><code>__LINE__</code> <strong>Int</strong> The line number on which it appears.</p> <p><code>__COLUMN__</code> <strong>Int</strong> The column number in which it begins.</p> <p><code>__FUNCTION__</code> <strong>String</strong> The name of the declaration in which it appears.</p> <p>You can use these in logging statements like so:</p> <p><code>println("error occurred on line \(__LINE__) in function \(__FUNCTION__)")</code></p> <hr> <p><strong>As of Swift 2.2b4</strong>, these have been changed to</p> <p><code>#file</code> <strong>String</strong> The name of the file in which it appears.</p> <p><code>#line</code> <strong>Int</strong> The line number on which it appears.</p> <p><code>#column</code> <strong>Int</strong> The column number in which it begins.</p> <p><code>#function</code> <strong>String</strong> The name of the declaration in which it appears.</p>
<p>Check out a new library I've just published: <a href="https://github.com/DaveWoodCom/XCGLogger" rel="nofollow">https://github.com/DaveWoodCom/XCGLogger</a></p> <p>It's a debug logging library for Swift.</p> <p>The key to being able to use the <code>#function</code> macros, is to set them as default values to your logging function. The compiler will then fill them in using the expected values.</p> <pre><code>func log(logMessage: String, functionName: String = #function) { print("\(functionName): \(logMessage)") } </code></pre> <p>Then just call:</p> <pre><code>log("my message") </code></pre> <p>And it works as expected giving you something like:</p> <pre><code>whateverFunction(): my message </code></pre> <p>More info on how this works: <a href="http://www.cerebralgardens.com/blog/entry/2014/06/09/the-first-essential-swift-3rd-party-library-to-include-in-your-project" rel="nofollow">http://www.cerebralgardens.com/blog/entry/2014/06/09/the-first-essential-swift-3rd-party-library-to-include-in-your-project</a></p>
<p>This will get you the class and the function name in one go:</p> <pre><code>var name = NSStringFromClass(self.classForCoder) + "." + __FUNCTION__ </code></pre>
<p>Try this:</p> <pre><code>class Log { class func msg(message: String, functionName: String = __FUNCTION__, fileNameWithPath: String = __FILE__, lineNumber: Int = __LINE__ ) { // In the default arguments to this function: // 1) If I use a String type, the macros (e.g., __LINE__) don't expand at run time. // "\(__FUNCTION__)\(__FILE__)\(__LINE__)" // 2) A tuple type, like, // typealias SMLogFuncDetails = (String, String, Int) // SMLogFuncDetails = (__FUNCTION__, __FILE__, __LINE__) // doesn't work either. // 3) This String = __FUNCTION__ + __FILE__ // also doesn't work. var fileNameWithoutPath = fileNameWithPath.lastPathComponent #if DEBUG let output = "\(NSDate()): \(message) [\(functionName) in \(fileNameWithoutPath), line \(lineNumber)]" println(output) #endif } } </code></pre> <p>Log using:</p> <pre><code>let x = 100 Log.msg("My output message \(x)") </code></pre>
<p>Here is what I used in: <a href="https://github.com/goktugyil/QorumLogs" rel="nofollow">https://github.com/goktugyil/QorumLogs</a><br> Its like XCGLogger but better.</p> <pre><code>func myLog&lt;T&gt;(object: T, _ file: String = __FILE__, _ function: String = __FUNCTION__, _ line: Int = __LINE__) { let info = "\(file).\(function)[\(line)]:\(object)" print(info) } </code></pre>
<p>I'd use something like this:</p> <pre><code>func Log(message: String = "", _ path: String = __FILE__, _ function: String = __FUNCTION__) { let file = path.componentsSeparatedByString("/").last!.componentsSeparatedByString(".").first! // Sorry NSLog("\(file).\(function): \(message)") } </code></pre> <p>Improvements compared to previous answers:</p> <ul> <li>Uses NSLog, not print/println</li> <li>Does not use lastPathComponent which is not available on Strings anymore</li> <li>The log message is optional</li> </ul>
<p>This will print only in debug mode:</p> <pre><code>func debugLog(text: String, fileName: String = __FILE__, function: String = __FUNCTION__, line: Int = __LINE__) { debugPrint("[\((fileName as NSString).lastPathComponent), in \(function)() at line: \(line)]: \(text)") } </code></pre> <p>Result:</p> <pre><code>"[Book.swift, in addPage() at line: 33]: Page added with success" </code></pre>
<p>As of Swift 2.2, you can specify it using <code>Literal Expressions</code>, as described at the <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-ID383" rel="nofollow">Swift Programming Language guide</a>.</p> <p>So if you had a <code>Logger</code> struct that had a function that logged where the error happened, then you would call it like this:</p> <p><code>Logger().log(message, fileName: #file, functionName: #function, atLine: #line)</code></p>