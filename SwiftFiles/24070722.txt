Swift: how can I create external interface for static library (public headers analog in Objective-C .h)
<p>I need to create a static library with Swift, and I need to know how can I implement interface for the library.</p> <p>In Objective-C I can mark needed headers as public in <strong>build phases</strong>, but there is not any headers and any interfaces in Swift.</p> <p>What should I do with Swift?</p>
<p>Simply put: you don't.</p> <p>Swift is not a language that separates headers and implementations. When you create a library or framework based on Swift and only for consumption by Swift, the Xcode default build setting of <code>DEFINES_MODULE</code> already does the job for you. This will create a <code>.swiftmodule</code> file, which will be used by <code>import</code> in other Swift projects.</p> <p>If you want your code to be importable from Objective-C though, you might want to check if the <code>SWIFT_INSTALL_OBJC_HEADER</code> build setting is also enabled (which it is by default for frameworks as far as I know). Then the Swift compiler will generate a <code>&lt;ProductName&gt;-Swift.h</code> file for you, which you can import in Objective-C code to access your Swift classes and functions.</p>
<p>If you want your <code>Swift</code> framework to expose certain classes to the interface, simply mark the 'entities' (functions, variables etc.) <code>public</code>:</p> <pre><code>public class Class {} public var variable: Int public func function() { } </code></pre> <p>By default, all entities have <code>internal</code> access.</p> <ul> <li><code>public</code> entities are intended for use as API, and can be accessed by any file that imports the module, e.g. as a framework used in several of your projects.</li> <li><code>internal</code> entities are available to the entire module that includes the definition (e.g. an app or framework target).</li> <li><code>private</code> entities are available only from within the source file where they are defined.</li> </ul> <p>Source: <a href="https://developer.apple.com/swift/blog/?id=5" rel="nofollow">the official Swift blog</a>.</p>