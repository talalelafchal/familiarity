Can a Swift subscript return a variable?
<p>In C#, the only indexer that actually returns a <em>variable</em><sup><a href="http://stackoverflow.com/a/20920021/1362135">1</a>,<a href="http://stackoverflow.com/a/4727371/1362135">2</a></sup> are array indexers.</p> <pre class="lang-cs prettyprint-override"><code>void Make42(ref int x) {x=42;} void SetArray(int[] array){ Make42(ref array[0]);} //works as intended; array[0] becomes 42 void SetList(List&lt;int&gt; list){ Make42(ref list[0]);} //does not work as intended, list[0] stays 0 </code></pre> <p>In the example above, <code>array[0]</code> is a variable, but <code>list[0]</code> is not. This is the culprit behind many developers, writing high-performance libraries, being forced to write their own List implementations (that, unlike the built-in <a href="http://msdn.microsoft.com/en-us/library/6sh2ey19%28v=vs.110%29.aspx" rel="nofollow">List</a>, expose the underlying array) to get <em>benchmark worthy</em> performance out of the language.</p> <p>In Swift, <code>ref</code> is called <code>inout</code> and <code>indexer</code> seems to be called <code>subscript</code>. I'm wondering if there's any mechanisms in Swift's <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Subscripts.html#//apple_ref/doc/uid/TP40014097-CH16-XID_393" rel="nofollow"><code>subscript</code></a> to explicitly return a <em>variable</em> rather than a <em>value</em> (a <em>value</em> can be a value-type or reference-type).</p>
<p>If I may bring in C++ parlance, you'd be looking to return a <em>reference</em> to a value. I'm using the term here because it's generally better understood by the programming crowd.</p> <p>The reason C# limits it to just arrays is that returning arbitrary references <a href="http://stackoverflow.com/questions/6339602/why-doesnt-c-sharp-support-the-return-of-references">may compromise the language's safety guarantees</a> if not done properly.</p> <p>There appears to be no syntax to return a reference in Swift. Since returning references is hard to verify, and since Swift is rather new and since it aims at being a safe language, it is understandable that Apple didn't go this way.</p> <p>If you get to a level where you need this kind of performance, you may want to consider C++, in which you can sacrifice almost all the safety you want to get performance.</p>