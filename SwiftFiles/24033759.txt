Why does my @lazy property crash, but if I make it non lazy it works?
<p>I have a problem with lazy properties. I thought I got them but maybe I didn't / maybe it is a bug</p> <p>I have a lazy array in my class</p> <pre><code>@lazy var enteredRegions = Array&lt;String&gt;() </code></pre> <p>now In</p> <pre><code> func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -&gt; Bool </code></pre> <p>I have</p> <pre><code> self.enteredRegions.append(clRegion!.identifier); </code></pre> <p>this crashes hard with a EXC_BAD_ACCESS.</p> <p>NOW If I remove the @lazy:</p> <pre><code> var enteredRegions = Array&lt;String&gt;() </code></pre> <p>all works</p> <p>so.. whats up with this? :D my understanding was that <code>self.enteredRegions</code> would create it anyway</p> <p>(I do this with a UIWindow and a CLLocationManager and that works as I thought)</p>
<p>After some trial, I found something quite odd.</p> <p>First of all, if we wrap the var inside a class, it simply works:</p> <pre><code>class RegionManager { @lazy var enteredRegions = Array&lt;String&gt;() } </code></pre> <p>In <code>AppDelegate</code>, I declared a <code>@lazy var regManager = RegionManager()</code>.</p> <p>Then, in <code>application:didFinishLaunching:</code>, I modify and use the value, it works without spitting a word:</p> <pre><code>regManager.enteredRegions.append("New!") println("Regions: \(regManager.enteredRegions)") // Regions: [New!] </code></pre> <p>After this, I tried to change to some <em>native</em> values, for example, <code>String</code>, <code>Int</code> and so on, they all fail.</p> <p>So, my guess is that this strange behaviour is actually a bug of the compiler itself, it may be rooted in some optimization for <em>native</em> types, maybe there's a inner pool or what that apple doesn't tell us.</p>