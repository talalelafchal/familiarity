Swift: declare an empty dictionary
<p>I am beginning to learn <code>swift</code> by following the iBook-<code>The Swift Programming Language</code> on Swift provided by Apple. The book says to create an empty dictionary one should use <code>[:]</code> same as while declaring array as <code>[]</code>:</p> <p>I declared an empty array as follows :</p> <pre><code>let emptyArr = [] // or String[]() </code></pre> <p>But on declaring empty dictionary, I get syntax error:</p> <pre><code>let emptyDict = [:] </code></pre> <p>How do I declare an empty dictionary?</p>
<pre><code>var emptyDictionary = [String: String]() </code></pre> <p>&shy;</p> <pre><code>var populatedDictionary = ["key1": "value1", "key2": "value2"] </code></pre> <p><strong>Note</strong>: if you are going to change the contents of the dictionary over time then declare it as a <code>var</code> (variable). You <em>can</em> declare an empty dictionary as a <code>let</code> (constant) but it is pointless if you have the intention of changing its contents over time, since constant can't be changed after it has been initialized.</p> <hr> <p><strong>Old answer</strong>:</p> <p>Creating an empty dictionary of type <code>&lt;String, String&gt;</code> would look as follows:</p> <pre><code>var emptyDictionary = Dictionary&lt;String, String&gt;() </code></pre>
<p>You have to give the dictionary a type</p> <pre><code>// empty dict with Ints as keys and Strings as values var namesOfIntegers = Dictionary&lt;Int, String&gt;() </code></pre> <p>If the compiler can infer the type, you can use the shorter syntax</p> <pre><code>namesOfIntegers[16] = "sixteen" // namesOfIntegers now contains 1 key-value pair namesOfIntegers = [:] // namesOfIntegers is once again an empty dictionary of type Int, String </code></pre>
<p>You can't use <code>[:]</code> unless type information is available.</p> <p>You need to provide it explicitly in this case:</p> <pre><code>var dict = Dictionary&lt;String, String&gt;() </code></pre> <p><code>var</code> means it's mutable, so you can add entries to it. Conversely, if you make it a <code>let</code> then you cannot further modify it (<code>let</code> means constant).</p> <p>You can use the <code>[:]</code> shorthand notation if the type information can be inferred, for instance</p> <pre><code>var dict = ["key": "value"] // stuff dict = [:] // ok, I'm done with it </code></pre> <p>In the last example the dictionary is known to have a type <code>Dictionary&lt;String, String&gt;</code> by the first line. Note that you didn't have to specify it explicitly, but it has been inferred.</p>
<p>I'm playing with this too. It seems strange that you can just declare an empty dictionary and then add a key/value pair to it like so :</p> <pre><code>var emptyDictionary = Dictionary&lt;String, Float&gt;() var flexDictionary = [:] emptyDictionary["brian"] = 4.5 flexDictionary["key"] = "value" // ERROR : cannot assign to the result of this expression </code></pre> <p>But you can create a Dictionary that accepts different value types by using the "Any" type like so :</p> <pre><code>var emptyDictionary = Dictionary&lt;String, Any&gt;() emptyDictionary["brian"] = 4.5 emptyDictionary["mike"] = "hello" </code></pre>
<p>You can simply declare it like this:</p> <pre><code>var emptyDict:NSMutableDictionary = [:] </code></pre>
<p>Use this will work.</p> <pre><code>var emptyDict = [String: String]() </code></pre>
<p>It is very handy for finding your way</p> <p>var dict:Dictionary = [:]</p>
<p>var dictList = String:String for dictionary in swift var arrSectionTitle = String for array in swift</p>
<p>The <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html">Swift documentation</a> recommends the following way to initialize an empty Dictionary:</p> <pre><code>var emptyDict = [String: String]() </code></pre> <p>I was a little confused when I first came across this question because different answers showed different ways to initialize an empty Dictionary. It turns out that there are actually a lot of ways you can do it, though some are a little redundant or overly verbose given Swift's ability to infer the type. </p> <pre><code>var emptyDict = [String: String]() var emptyDict = Dictionary&lt;String, String&gt;() var emptyDict: [String: String] = [:] var emptyDict: [String: String] = [String: String]() var emptyDict: [String: String] = Dictionary&lt;String, String&gt;() var emptyDict: Dictionary = [String: String]() var emptyDict: Dictionary = Dictionary&lt;String, String&gt;() var emptyDict: Dictionary&lt;String, String&gt; = [:] var emptyDict: Dictionary&lt;String, String&gt; = [String: String]() var emptyDict: Dictionary&lt;String, String&gt; = Dictionary&lt;String, String&gt;() </code></pre> <p>After you have an empty Dictionary you can add a key-value pair like this:</p> <pre><code>emptyDict["some key"] = "some value" </code></pre> <p>If you want to empty your dictionary again, you can do the following:</p> <pre><code>emptyDict = [:] </code></pre> <p>The types are still <code>&lt;String, String&gt;</code> because that is how it was initialized.</p>
<p>You can declare it as nil with the following:</p> <pre><code>var assoc : [String:String] </code></pre> <p>Then nice thing is you've already typeset (notice I used var and not let, think of these as mutable and immutable). Then you can fill it later:</p> <pre><code>assoc = ["key1" : "things", "key2" : "stuff"] </code></pre>
<p><strong>Swift:</strong></p> <pre><code>var myDictionary = Dictionary&lt;String, AnyObject&gt;() </code></pre>
<p>var parking = [Dictionary &lt; String, Double >() ]</p> <p>^ this adds a dictionary for a [string:double] input</p>