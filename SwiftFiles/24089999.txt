How do you create a swift Date object
<p>How do you create a date object from a date in swift xcode.</p> <p>eg in javascript you would do: <code>var day = new Date('2014-05-20');</code></p>
<p>According to <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/interactingwithobjective-capis.html">Apple documentation</a></p> <p>Example :</p> <pre><code>var myObject = NSDate() let futureDate = myObject.dateByAddingTimeInterval(10) let timeSinceNow = myObject.timeIntervalSinceNow </code></pre>
<p>Swift doesn't have its own Date type, but you to use the existing Cocoa <code>NSDate</code> type, e.g:</p> <pre><code>class Date { class func from(year: Int, month: Int, day: Int) -&gt; Date { let gregorianCalendar = NSCalendar(calendarIdentifier: .gregorian)! var dateComponents = DateComponents() dateComponents.year = year dateComponents.month = month dateComponents.day = day let date = gregorianCalendar.date(from: dateComponents)! return date } class func parse(_ string: String, format: String = "yyyy-MM-dd") -&gt; Date { let dateFormatter = DateFormatter() dateFormatter.timeZone = NSTimeZone.default dateFormatter.dateFormat = format let date = dateFormatter.date(from: string)! return date } } </code></pre> <p>Which you can use like:</p> <pre><code>var date = Date.parse("2014-05-20") var date = Date.from(year: 2014, month: 05, day: 20) </code></pre>
<p>This is best done using an extension to the existing <code>NSDate</code> class.</p> <p>The following extension adds a new initializer which will create a date in the current locale using the date string in the format you specified.</p> <pre><code>extension NSDate { convenience init(dateString:String) { let dateStringFormatter = NSDateFormatter() dateStringFormatter.dateFormat = "yyyy-MM-dd" dateStringFormatter.locale = NSLocale(localeIdentifier: "en_US_POSIX") let d = dateStringFormatter.dateFromString(dateString)! self.init(timeInterval:0, sinceDate:d) } } </code></pre> <p>Now you can create an NSDate from Swift just by doing:</p> <pre><code>NSDate(dateString:"2014-06-06") </code></pre> <p>Please note that this implementation does not cache the NSDateFormatter, which you might want to do for performance reasons if you expect to be creating many <code>NSDate</code>s in this way.</p> <p>Please also note that this implementation will simply crash if you try to initialize an <code>NSDate</code> by passing in a string that cannot be parsed correctly. This is because of the forced unwrap of the optional value returned by <code>dateFromString</code>. If you wanted to return a <code>nil</code> on bad parses, you would ideally use a failible initializer; but you cannot do that now (June 2015), because of a limitation in Swift 1.2, so then you're next best choice is to use a class factory method.</p> <p>A more elaborate example, which addresses both issues, is here: <a href="https://gist.github.com/algal/09b08515460b7bd229fa">https://gist.github.com/algal/09b08515460b7bd229fa</a> .</p>
<p>I often have a need to combine date values from one place with time values for another. I wrote a helper function to accomplish this.</p> <pre><code>let startDateTimeComponents = NSDateComponents() startDateTimeComponents.year = NSCalendar.currentCalendar().components(NSCalendarUnit.Year, fromDate: date).year startDateTimeComponents.month = NSCalendar.currentCalendar().components(NSCalendarUnit.Month, fromDate: date).month startDateTimeComponents.day = NSCalendar.currentCalendar().components(NSCalendarUnit.Day, fromDate: date).day startDateTimeComponents.hour = NSCalendar.currentCalendar().components(NSCalendarUnit.Hour, fromDate: time).hour startDateTimeComponents.minute = NSCalendar.currentCalendar().components(NSCalendarUnit.Minute, fromDate: time).minute let startDateCalendar = NSCalendar(identifier: NSCalendarIdentifierGregorian) combinedDateTime = startDateCalendar!.dateFromComponents(startDateTimeComponents)! </code></pre>
<p><em>Updated for Swift 3</em></p> <h1>Creating a Date and Time in Swift</h1> <p>In Swift, dates and times are stored in a 64-bit floating point number measuring the number of seconds since the reference date of January 1, 2001 at 00:00:00 <a href="http://www.timeanddate.com/time/aboututc.html" rel="nofollow">UTC</a>. This is expressed in the <code>Date</code> struct. The following would give you the current date and time:</p> <pre><code>let currentDateTime = Date() </code></pre> <p>For creating other date-times, you can use one of the following methods.</p> <p><strong>Method 1</strong></p> <p>If you know the number of seconds before or after the 2001 reference date, you can use that.</p> <pre><code>let someDateTime = Date(timeIntervalSinceReferenceDate: -123456789.0) // Feb 2, 1997, 10:26 AM </code></pre> <p><strong>Method 2</strong></p> <p>Of course, it would be easier to use things like years, months, days and hours (rather than relative seconds) to make a <code>Date</code>. For this you can use <code>DateComponents</code> to specify the components and then <code>Calendar</code> to create the date. The <code>Calendar</code> gives the <code>Date</code> context. Otherwise, how would it know what time zone or calendar to express it in?</p> <pre><code>// Specify date components var dateComponents = DateComponents() dateComponents.year = 1980 dateComponents.month = 7 dateComponents.day = 11 dateComponents.timeZone = TimeZone(abbreviation: "JST") // Japan Standard Time dateComponents.hour = 8 dateComponents.minute = 34 // Create date from components let userCalendar = Calendar.current // user calendar let someDateTime = userCalendar.date(from: dateComponents) </code></pre> <p>Other time zone abbreviations can be found <a href="https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations" rel="nofollow">here</a>. If you leave that blank, then the default is to use the user's time zone.</p> <p><strong>Method 3</strong></p> <p>The most succinct way (but not necessarily the best) could be to use <code>DateFormatter</code>.</p> <pre><code>let formatter = DateFormatter() formatter.dateFormat = "yyyy/MM/dd HH:mm" let someDateTime = formatter.date(from: "2016/10/08 22:31") </code></pre> <p>The <a href="http://www.unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns" rel="nofollow">Unicode technical standards show other formats</a> that <code>DateFormatter</code> supports.</p> <h1>Notes</h1> <p>See <a href="http://stackoverflow.com/a/33343958/3681880">my full answer</a> for how to display the date and time in a readable format. Also read these excellent articles:</p> <ul> <li><a href="http://www.globalnerdy.com/2016/08/18/how-to-work-with-dates-and-times-in-swift-3-part-1-dates-calendars-and-datecomponents/" rel="nofollow">How to work with dates and times in Swift 3, part 1: Dates, Calendars, and DateComponents</a></li> <li><a href="http://www.globalnerdy.com/2016/08/22/how-to-work-with-dates-and-times-in-swift-3-part-2-dateformatter/" rel="nofollow">How to work with dates and times in Swift 3, part 2: DateFormatter</a></li> <li><a href="http://www.globalnerdy.com/2016/08/29/how-to-work-with-dates-and-times-in-swift-3-part-3-date-arithmetic/" rel="nofollow">How to work with dates and times in Swift 3, part 3: Date arithmetic</a></li> </ul>