Confused about behaviour of remainder operator in Swift
<p>I am trying to calculate two random numbers constrained to a particular range using arc4random and the % operator.</p> <p><img src="https://i.stack.imgur.com/PvtMA.png" alt="Issue with % operator"></p> <p>I am not able to figure out why the compiler is complaining when calculating (x1,y1) when almost the same thing is done for x2,y2 except for using an int literal directly.</p> <p>Any ideas?</p> <p>The code sample is:</p> <pre><code>import Darwin let w1:Int = 223 // error: Could not find an overload for '%' that accepts the supplied arguments let (x1,y1) = ( arc4random() % w1, arc4random() % 345 ) let (x2,y2) = ( arc4random() % 223, arc4random() % 345 ) </code></pre>
<p>That's due to Swift's enforcement of type safety. </p> <p><code>arc4random()</code> returns a <code>UInt32</code>, while you've declared <code>w</code> as an <code>Int</code>, so a compiler error is thrown. That'd also happen if you had tried to sum or divide <code>w</code> and the result of calling <code>arc4random()</code>, so the behaviour is not exclusive to the remainder operator.</p> <p>You have a few options, depending on how you intend to use the resulting value of the operation.</p> <p>You can declare w1 as an <code>UInt32</code> in the first place:</p> <pre><code>var w1: UInt32 = 223 </code></pre> <p>Or, you can cast it to an <code>UInt32</code> before performing the remainder operation:</p> <pre><code>arc4random() % UInt32(w1) </code></pre> <p>Finally, you can initialize an <code>Int</code> from the result of the <code>arc4random()</code> call and use it with the Int version of <code>w1</code></p> <pre><code>Int(arc4random()) % w1 </code></pre> <p>Note that this behaviour does not apply to literals.</p> <p>From the Apple provided iBook:</p> <blockquote> <p>The rules for combining numeric constants and variables are different from the rules for numeric literals. The literal value 3 can be added directly to the literal value 0.14159, because number literals do not have an explicit type in and of themselves. Their type is inferred only at the point that they are evaluated by the compiler.</p> </blockquote> <p>That's why you don't see the same problem occur when doing <code>arc4random() % 345</code>.</p>
<p>You need to use the same type for both variables, to wit:</p> <pre><code>let w1:UInt32 = 223 </code></pre> <p>Should solve the problem</p> <p>The error is because you are trying to use an <code>Int</code> and a <code>UInt32</code> </p>