JSON Deserialization in Swift
<p>After reading up a bit on collections, I began to wonder if json deserialization was going to be an issue given that collections need to specify a type for the values they contain. And in the case of dictionaries, one would need to specify the type for both the key and the value.</p> <p>After a bit of experimentation, I found that the following works:</p> <pre><code>let jsonString = "{\"bool\": true, \"num\": 1,\"string\": \"a string\"}" let jsonData = jsonString.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false) let json : AnyObject! = NSJSONSerialization.JSONObjectWithData(jsonData, options: NSJSONReadingOptions.MutableContainers, error: nil) let valid = NSJSONSerialization.isValidJSONObject(json) </code></pre> <p>And when I use a playground (or am in the REPL), I get the following when printing out the contents of the json object:</p> <pre><code>["num": 1, "string": "a string", "bool": 1] </code></pre> <p>My question: is there may be a better way to handle this?</p>
<p>I'd suggest typing your json object a little more:</p> <pre><code>let json = NSJSONSerialization.JSONObjectWithData(jsonData, options: NSJSONReadingOptions.MutableContainers, error: nil) as? Dictionary&lt;String, AnyObject?&gt; </code></pre> <p>This will help you access elements by their key.</p>
<p><a href="https://github.com/alibaba/HandyJSON" rel="nofollow">HandyJSON</a> may help you deal with JSON easy. </p> <p>You just define the class, and deserialize JSON to it directly. Like:</p> <pre><code>class Animal: HandyJSON { var name: String? var id: String? var num: Int? required init() {} } let jsonString = "{\"name\":\"cat\",\"id\":\"12345\",\"num\":180}" if let animal = JSONDeserializer&lt;Animal&gt;.deserializeFrom(jsonString) { print(animal) } </code></pre> <p>Have fun!</p>