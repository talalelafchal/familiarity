Why can't I divide integers in swift?
<p>In the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1">Swift "Tour" documentation</a>, there's an exercise where you build on the following function to average a set of numbers:</p> <pre><code>func sumOf(numbers: Int...) -&gt; Int { var sum = 0 for number in numbers { sum += number } return sum } </code></pre> <p>I can make this work using something like the following:</p> <pre><code>func averageOf(numbers: Double...) -&gt; Double { var sum: Double = 0, countOfNumbers: Double = 0 for number in numbers { sum += number countOfNumbers++ } var result: Double = sum / countOfNumbers return result } </code></pre> <p>My question is, why do I have to cast everything as a Double to make it work? If I try to work with integers, like so:</p> <pre><code>func averageOf(numbers: Int...) -&gt; Double { var sum = 0, countOfNumbers = 0 for number in numbers { sum += number countOfNumbers++ } var result: Double = sum / countOfNumbers return result } </code></pre> <p>I get the following error: <code>Could not find an overload for '/' that accepts the supplied arguments</code></p>
<p>you just need to do this:</p> <pre><code>func averageOf(numbers: Int...) -&gt; Double { var sum = 0, countOfNumbers = 0 for number in numbers { sum += number countOfNumbers++ } var result: Double = Double(sum) / Double(countOfNumbers) return result } </code></pre>
<p>that may be helful:</p> <pre><code>func averageOf(numbers: Int...) -&gt; Double { var sum = 0, countOfNumbers = 0 for number in numbers { sum += number countOfNumbers++ } var result: Double = Double(sum) / Double(countOfNumbers) return result } </code></pre> <hr> <h1>OR</h1> <p>overloading the <code>/</code> operator for <code>Int</code> values can be also a solution:</p> <pre><code>func / (lhs: Int, rhs: Int) -&gt; Double { return Double(lhs) / Double(rhs) } </code></pre>
<p>The OP seems to know <strong>how</strong> the code has to look like but he is explicitly asking <strong>why</strong> it is not working the other way.</p> <p>So, "explicitly" is part of the answer he is looking for: Apple writes inside the "Language Guide" in chapter "The Basics" -> "Integer and Floating-Point Conversion":</p> <blockquote> <p>Conversions between integer and floating-point numeric types must be made explicit</p> </blockquote>
<p>You are assigning the output of <code>/</code> to a variable of type <code>Double</code>, so Swift thinks you want to call this function:</p> <pre><code>func /(lhs: Double, rhs: Double) -&gt; Double </code></pre> <p>But the arguments you're passing it are not <code>Double</code>s and Swift doesn't do implicit casting.</p>
<p>Try this but notice swift doesn't like to divide by integers that are initialized to zero or could become zero so you must use &amp;/ to force the division. this code is a little verbose but it is easy to understand and it gives the correct answer in integer not floating point or double</p> <pre><code>func sumOf(numbers: Int...) -&gt; Int { var sum = 0 var i = 0 var avg = 1 for number in numbers { sum += number i += 1 } avg = sum &amp;/ i return avg } sumOf() sumOf(42, 597, 12) </code></pre>
<p>There's no reason to manually track of the number of arguments when you can just get it directly.</p> <pre><code>func sumOf(numbers: Int...) -&gt; Int { var sum = 0 for number in numbers { sum += number } let average = sum &amp;/ numbers.count return average } sumOf() sumOf(42, 597, 12) </code></pre>
<p>I don't find a necessity for a Forced Division. Normal division operator works though. In the following code, </p> <pre><code>func average(numbers:Int...)-&gt;Float{ var sum = 0 for number in numbers{ sum += number } var average: Float = 0 average = (Float (sum) / Float(numbers.count)) return average } let averageResult = average(20,10,30) averageResult </code></pre> <p>Here, two float values are divided, of course after type casting as i am storing the result in a float variable and returning the same. </p> <p><strong>Note:</strong> I have not used an extra variable to count the number of parameters. "numbers" are considered as array, as the functions in Swift take a variable number of arguments into an array. "numbers.count" (Similar to Objective C) will return the count of the parameters being passed. </p>