Swift: method called more than once after restarting game
<p>I'm making a little game where the user has to tap on a circle 10 times. Each time a label shows how many times to tap are left. So after every tap the number in the label decreases by one. After finishing you are brought to a new view where you can tap a "play again" button.</p> <p>The problem is that when playing the second time the number decreases by two on every tap and when playing the third time by three and so on.</p> <p>Here's the code:</p> <pre><code>import UIKit var circleTapTrue = UIButton() var circleTapFalse1 = UIButton() var circleTapFalse2 = UIButton() var circleTapFalse3 = UIButton() var circleTapFalse4 = UIButton() var lblTappingSpeed = UILabel() var tappingSpeed = 0.00 var lblMovesLeft = UILabel() var movesLeft = Int() var imgCircleWidthHeight = Float() var imgCircleXPos = Float() var imgCircleYPos = Float() class ViewController: UIViewController { var timerCountDown = NSTimer() override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. moveCircles() movesLeft = 10 lblMovesLeft.text = "\(movesLeft)" var circleImageNames = ["CircleTap", "CircleLightGray", "CirclePink", "CircleViolet", "CircleYellow"] circleTapFalse1.setImage(UIImage(named: circleImageNames[1]), forState: UIControlState.Normal) circleTapFalse1.setImage(UIImage(named: circleImageNames[1]), forState: UIControlState.Highlighted) circleTapFalse1.addTarget(self, action: "falseCircleTouched", forControlEvents: UIControlEvents.TouchDown) self.view.addSubview(circleTapFalse1) circleTapFalse2.setImage(UIImage(named: circleImageNames[2]), forState: UIControlState.Normal) circleTapFalse2.setImage(UIImage(named: circleImageNames[2]), forState: UIControlState.Highlighted) circleTapFalse2.addTarget(self, action: "falseCircleTouched", forControlEvents: UIControlEvents.TouchDown) self.view.addSubview(circleTapFalse2) circleTapFalse3.setImage(UIImage(named: circleImageNames[3]), forState: UIControlState.Normal) circleTapFalse3.setImage(UIImage(named: circleImageNames[3]), forState: UIControlState.Highlighted) circleTapFalse3.addTarget(self, action: "falseCircleTouched", forControlEvents: UIControlEvents.TouchDown) self.view.addSubview(circleTapFalse3) circleTapFalse4.setImage(UIImage(named: circleImageNames[4]), forState: UIControlState.Normal) circleTapFalse4.setImage(UIImage(named: circleImageNames[4]), forState: UIControlState.Highlighted) circleTapFalse4.addTarget(self, action: "falseCircleTouched", forControlEvents: UIControlEvents.TouchDown) self.view.addSubview(circleTapFalse4) circleTapTrue.setImage(UIImage(named: circleImageNames[0]), forState: UIControlState.Normal) circleTapTrue.setImage(UIImage(named: circleImageNames[0]), forState: UIControlState.Highlighted) circleTapTrue.addTarget(self, action: "moveCircles", forControlEvents: UIControlEvents.TouchDown) self.view.addSubview(circleTapTrue) lblTappingSpeed.frame = CGRectMake(200, 20, 100, 21) lblTappingSpeed.text = "\(tappingSpeed)" lblTappingSpeed.textAlignment = NSTextAlignment.Right self.view.addSubview(lblTappingSpeed) lblMovesLeft.frame = CGRectMake(20, 20, 100, 21) self.view.addSubview(lblMovesLeft) } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } override func viewDidAppear(animated: Bool) { timerCountDown = NSTimer.scheduledTimerWithTimeInterval(0.01, target: self, selector: "TapSpeed", userInfo: nil, repeats: true) } func moveCircles() { getRandomCirclePositionAndSize() UIView.beginAnimations("moveCircle", context: nil) UIView.setAnimationDuration(0.2) circleTapFalse1.frame = CGRectMake(imgCircleXPos, imgCircleYPos, imgCircleWidthHeight, imgCircleWidthHeight) UIView.commitAnimations() getRandomCirclePositionAndSize() UIView.beginAnimations("moveCircle", context: nil) UIView.setAnimationDuration(0.2) circleTapFalse2.frame = CGRectMake(imgCircleXPos, imgCircleYPos, imgCircleWidthHeight, imgCircleWidthHeight) UIView.commitAnimations() getRandomCirclePositionAndSize() UIView.beginAnimations("moveCircle", context: nil) UIView.setAnimationDuration(0.2) circleTapFalse3.frame = CGRectMake(imgCircleXPos, imgCircleYPos, imgCircleWidthHeight, imgCircleWidthHeight) UIView.commitAnimations() getRandomCirclePositionAndSize() UIView.beginAnimations("moveCircle", context: nil) UIView.setAnimationDuration(0.2) circleTapFalse4.frame = CGRectMake(imgCircleXPos, imgCircleYPos, imgCircleWidthHeight, imgCircleWidthHeight) UIView.commitAnimations() getRandomCirclePositionAndSize() UIView.beginAnimations("moveCircle", context: nil) UIView.setAnimationDuration(0.2) circleTapTrue.frame = CGRectMake(imgCircleXPos, imgCircleYPos, imgCircleWidthHeight, imgCircleWidthHeight) UIView.commitAnimations() movesLeft-- lblMovesLeft.text = "\(movesLeft)" if movesLeft == 0 { gameFinished() } } func getRandomCirclePositionAndSize() { imgCircleWidthHeight = (Float(arc4random()) % 80) + 20 imgCircleXPos = Float(arc4random()) % (320 - imgCircleWidthHeight) imgCircleYPos = (Float(arc4random()) % (460 - imgCircleWidthHeight)) + 20 } func falseCircleTouched() { movesLeft++ lblMovesLeft.text = "\(movesLeft)" } func TapSpeed() { tappingSpeed = tappingSpeed + 0.01 lblTappingSpeed.text = NSString(format: "%.2f", tappingSpeed) if movesLeft == 0 { timerCountDown.invalidate() } } func gameFinished() { tappingSpeed = 0 lblTappingSpeed.text = NSString(format: "%.2f", tappingSpeed) timerCountDown.invalidate() self.performSegueWithIdentifier("test", sender: self) } override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) { } } </code></pre> <p>Maybe I have to remove the objects after finishing the game? And how should I do it?</p> <p>Thanks in advance</p>
<p>You have your buttons stored in global variables. (i.e. outside of any class's instance) This means they'll be shared across your view controllers. Each time viewDidLoad is called, you're adding another view controller's callbacks to the same buttons.</p> <p>You should store your buttons as instance variables of your view controller instead; just move all your <code>var</code> declarations inside the <code>class ViewController</code> curly braces.</p>