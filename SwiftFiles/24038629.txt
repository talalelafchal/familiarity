Swift - which types to use? NSString or String
<p>With the introduction of Swift I've been trying to get my head round the new language</p> <p>I'm an iOS developer and would use types such as <code>NSString, NSInteger, NSDictionary</code> in an application. I've noticed that in the "The Swift Programming Language" ebook by Apple, they use the Swift types <code>String, Int, Dictionary</code></p> <p>I've noticed the Swift types don't have (or are differently named) some of the functions that the Foundation types do. For example <code>NSString</code> has a <code>length</code> property. But I've not been able to find a similar one for the Swift <code>String</code>.</p> <p>I'm wondering, for an iOS application should I still be using the Foundation types?</p>
<p>Your best bet is to use Swift native types and classes, as some others have noted NSString has toll free translation to String, however, they're not the same a 100%, take for example the following</p> <pre><code>var nsstring: NSString = "\U0001F496" var string: String = "\U0001F496" nsstring.length count(string) </code></pre> <p>you need to use the method count() to count the characters in string, also note that nsstring.length returns 2, because it counts its length based on UTF16.</p> <p>Similar, YES The same, NO</p>
<p>You should use the Swift native types whenever possible. The language is optimized to use them, and most of the functionality is bridged between the native types and the <code>Foundation</code> types.</p> <p>While <code>String</code> and <code>NSString</code> are mostly interchangeable, i.e, you can pass <code>String</code> variables into methods that take <code>NSString</code> parameters and vice versa, some methods seem to not be automatically bridged as of this moment. See <a href="http://stackoverflow.com/a/24037759/1371070">this answer</a> for a discussion on how to get the a String's length and <a href="http://stackoverflow.com/a/24037522/1371070">this answer</a> for a discussion on using <code>containsString()</code> to check for substrings. (Disclaimer: I'm the author for both of these answers)</p> <p>I haven't fully explored other data types, but I assume some version of what was stated above will also hold true for <code>Array</code>/<code>NSArray</code>, <code>Dictionary</code>/<code>NSDictionary</code>, and the various number types in Swift and <code>NSNumber</code></p> <p>Whenever you need to use one of the Foundation types, you can either use them to type variables/constants explicitly, as in <code>var str: NSString = "An NSString"</code> or use <code>bridgeToObjectiveC()</code> on an existing variable/constant of a Swift type, as in <code>str.bridgeToObjectiveC().length</code> for example. You can also cast a <code>String</code> to an <code>NSString</code> by using <code>str as NSString</code>.</p> <p>However, the necessity for these techniques to explicitly use the Foundation types, or at least some of them, may be obsolete in the future, since from what is stated in the language reference, the <code>String</code>/<code>NSString</code> bridge, for example, should be completely seamless.</p> <p>For a thorough discussion on the subject, refer to <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/WorkingWithCocoaDataTypes.html#//apple_ref/doc/uid/TP40014216-CH6-XID_40">Using Swift with Cocoa and Objective-C: Working with Cocoa Data Types</a></p>
<p>Since the objective C types are still dynamically dispatched they're probably going to be slower. I'd say you're best served using the Swift native types unless you need to interact with objective-c APIs</p>
<p><code>String</code> and <code>NSString</code> are interchangeable, so it doesn't really matter which one you use. You can always cast between the two, using</p> <pre><code>let s = "hello" as NSString </code></pre> <p>or even</p> <pre><code>let s: NSString = "hello" </code></pre> <p><code>NSInteger</code> is just an alias for an <code>int</code> or a <code>long</code> (depending on the architecture), so I'd just use <code>Int</code>.</p> <p><code>NSDictionary</code> is a different matter, since <code>Dictionary</code> is a completely separate implementation.</p> <p>In general I'd stick to swift types whenever possibile and you can always convert between the two at need, using the <code>bridgeToObjectiveC()</code> method provided by swift classes.</p>
<p>Use the Swift native types whenever you can. In the case of String, however, you have "seamless" access to all the <code>NSString</code> methods like this:</p> <pre><code>var greeting = "Hello!" var len = (greeting as NSString).length </code></pre>
<p>NSString : Creates objects that resides in heap and always passed by reference.</p> <p>String: Its a value type whenever we pass it , its passed by value. like Struct and Enum. But copy is not created when you pass. It creates copy when you fist mutate it. For more information please refer apple documents</p>