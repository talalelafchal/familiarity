COpaquePointer to an arbitrary byte in a block of memory
<p>I'm porting some code to Swift, but I'm confused about how to handle pointers.</p> <hr> <p>In Swift, <strong>how do you create an empty block of memory, in such a manner that C functions can access it</strong>?</p> <p><em>C source:</em></p> <pre><code>UInt8* bytes = malloc( qty_bytes_in_file ); </code></pre> <hr> <p>..and, after so-doing, <strong>how would you create a pointer to an arbitrary offset of that memory</strong>? I'll need to repeatedly move the pointers to various addresses in this block of memory, to which a C function will then write data. </p> <p><em>C source:</em></p> <pre><code>void* mData = &amp;bytes[i]; </code></pre> <hr> <p>Here's an abbreviated version of the C code with which I'm starting, so you can see both lines in context:</p> <p><em>C source:</em></p> <pre><code>UInt8* bytes = malloc( qty_bytes_in_file ); // Swift equivalent? while ( !err ) { AudioBufferList buffer_list = new_buffer_list(); buffer_list.mBuffers[0].mData = &amp;bytes[i]; // Swift equivalent? // each iteration, ExtAudioFileRead fills // in a portion of buffer_list's '.mData': err = ExtAudioFileRead( audio_file, &amp;qty_frames_requested, &amp;buffer_list ); i += foo; } </code></pre>
<p>For the first question I would just make an array of byte values:</p> <pre><code>var bytes = Array&lt;UInt8&gt;(count: qty_bytes_in_file, repeatedValue: 0) </code></pre> <p>And I think you can provide a reference to that array as an in-out parameter. For example:</p> <pre><code>let stream = NSInputStream(data: someNSDataObject) let numberOfBytesRead = stream.read(&amp;bytes, maxLength:buffer.count) </code></pre> <p>There is also in Swift a wrapper available … </p> <pre><code>struct UnsafePointer&lt;T&gt; </code></pre> <p>… with a "memory" property to get to the raw underlying memory.</p>