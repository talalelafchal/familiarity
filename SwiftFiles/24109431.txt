swift How to use enum as parameter in constructing struct?
<p>I was doing an experiment of Swift programming book and stuck with construct a struct inner the struct itself. But the error reported the parameter is unwrapped. How could I take it value as parameter?</p> <pre><code>struct Card { var rank: Rank var suit: Suit func simpleDescription() -&gt; String { return "The \(rank.simpleDescription()) of \(suit.simpleDescription())" } func FullDeck() -&gt; Card[] { var deck: Card[] for i in 1...13 { for j in 0...3 { let rank_para = Rank.fromRaw(i) let suit_para = Suit.fromRaw(j) **deck.append(Card(rank: rank_para, suit : suit_para )) //value of optional type unwrapped;did you mean to use ? or !** } } return deck } } enum Rank: Int { case Ace = 1 case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten case Jack, Queen, King func simpleDescription() -&gt; String { switch self { case .Ace: return "ace" case .Jack: return "jack" case .Queen: return "queen" case .King: return "king" default: return String(self.toRaw()) } } func compare(sec:Rank) -&gt; Bool { var first = 0 var second = 0 if self.toRaw() == 1 { first = 1 } else { first = self.toRaw() } if sec.toRaw() == 1 { second = 1 } else { second = self.toRaw() } return first &gt; second } } enum Suit: Int{ case Spades = 0 case Hearts, Diamonds, Clubs func simpleDescription() -&gt; String { switch self { case .Spades: return "spades" case .Hearts: return "hearts" case .Diamonds: return "diamonds" case .Clubs: return "clubs" } } } </code></pre>
<p>the <code>fromRaw</code> method returns an optional value: <code>Rank?</code> and <code>Suit?</code>. That means that the value could be nil. You need to check for that:</p> <pre><code>if let aRank = rank_para { if let aSuit = suit_para { deck.append(Card(rank: aRank, suit: aSuit)) } } </code></pre> <p>By using "if let", you "unwrap" the optional value into a value (aRank and aSuit) that is no longer optional (cannot be nil).</p> <h2>Another way to do that:</h2> <pre><code>if rank_para and suit_para { deck.append(Card(rank: rank_para!, suit: suit_para!)) } </code></pre> <p>Here, you are checking if rank_para and suit_para are nil. If they both are not, you call append and "unwrap" the optional values using <code>!</code>. <code>!</code> means if the value is <code>nil</code> throw a runtime error, otherwise, treat this variable as if it cannot be <code>nil</code>.</p>