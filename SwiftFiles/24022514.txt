Are generics specialized during compilation or they are just like java generics only for compile time checks?
<p>There are three ways to implement generics:</p> <ol> <li><p>Just a tool for compile time checks, but every template instance is compiled to the same byte/assembly code implementation (Java, as noted in comments "type erasure" implementation)</p></li> <li><p>Each template instantiation is compiled to specialized code (C++, C#)</p></li> <li><p>Combination of #1 and #2</p></li> </ol> <p>Which one is implemented in Swift?</p>
<p>Swift starts by compiling a single implementation that does dynamic type checking, but the optimizer can then choose to clone off specialized implementations for particular types when the speed vs code size tradeoffs make sense. Ideally, this gets 90% of the speedup of always cloning, without the code size and compilation time exploding.</p>