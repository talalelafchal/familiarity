What does an exclamation mark mean in the Swift language?
<p>The Swift Programming Language guide has the following example: </p> <pre><code>class Person { let name: String init(name: String) { self.name = name } var apartment: Apartment? deinit { println("\(name) is being deinitialized") } } class Apartment { let number: Int init(number: Int) { self.number = number } var tenant: Person? deinit { println("Apartment #\(number) is being deinitialized") } } var john: Person? var number73: Apartment? john = Person(name: "John Appleseed") number73 = Apartment(number: 73) //From Apple's “The Swift Programming Language” guide (https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html) </code></pre> <p>Then when assigning the apartment to the person, they use an exclamation point to "unwrap the instance":</p> <pre><code>john!.apartment = number73 </code></pre> <p>What does it mean to "unwrap the instance"? Why is it necessary? How is it different from just doing the following:</p> <pre><code>john.apartment = number73 </code></pre> <p>I'm very new to the Swift language. Just trying to get the basics down.</p> <p><br> <strong><em>UPDATE:</em></strong><br> The big piece of the puzzle that I was missing (not directly stated in the answers - at least not at the time of writing this) is that when you do the following:</p> <pre><code>var john: Person? </code></pre> <p>that does NOT mean that "<code>john</code> is of type <code>Person</code> and it might be nil", as I originally thought. I was simply misunderstanding that <code>Person</code> and <code>Person?</code> are completely separate types. Once I grasped that, all of the other <code>?</code>, <code>!</code> madness, and the great answers below, made a lot more sense.</p>
<p><code>john</code> is an optional <code>var</code>. So can be contains a <code>nil</code> value. To ensure that the value isn't nil use a <code>!</code> at the end of the <code>var</code> name.</p> <p>From documentation</p> <p><strong>“Once you’re sure that the optional does contain a value, you can access its underlying value by adding an exclamation mark (!) to the end of the optional’s name. The exclamation mark effectively says, “I know that this optional definitely has a value; please use it.”</strong></p>
<p>John is an optional Person, meaning it can hold a value or be nil. </p> <pre><code>john.apartment = number73 </code></pre> <p>is used if john is not an optional. Since john is never nil we can be sure it won't call apartment on a nil value. While</p> <pre><code>john!.apartment = number73 </code></pre> <p>promises the compiler that john is not nil then unwraps the optional to get john's value and accesses john's apartment property. Use this if you know that john is not nil. If you call this on a nil optional, you'll get a runtime error.</p> <p>The documentation includes a nice example for using this where convertedNumber is an optional.</p> <pre><code>if convertedNumber { println("\(possibleNumber) has an integer value of \(convertedNumber!)") } else { println("\(possibleNumber) could not be converted to an integer") } </code></pre>
<p>If john were an optional var (declared thusly)</p> <pre><code>var john: Person? </code></pre> <p>then it would be possible for john to have no value (in ObjC parlance, nil value)</p> <p>The exclamation point basically tells the compiler "I know this has a value, you don't need to test for it". If you didn't want to use it, you could conditionally test for it:</p> <pre><code>if let otherPerson = john { otherPerson.apartment = number73 } </code></pre> <p>The interior of this will only evaluate if john has a value.</p>
<blockquote> <p>What does it mean to "unwrap the instance"? Why is it necessary?</p> </blockquote> <p>As far as I can work out (this is very new to me, too)...</p> <p>The term "wrapped" implies we should <strong>think of an Optional variable as a present, wrapped in shiny paper, which might (sadly!) be empty</strong>.</p> <p>When "wrapped", the value of an Optional variable is an enum with two possible values (a little like a Boolean). This enum describes whether the variable holds a value (<code>Some(T)</code>), or not (<code>None</code>).</p> <p>If there is a value, this can be obtained by "unwrapping" the variable (obtaining the <code>T</code> from <code>Some(T)</code>).</p> <blockquote> <p>How is <code>john!.apartment = number73</code> different from <code>john.apartment = number73</code>? (Paraphrased)</p> </blockquote> <p>If you write the name of an Optional variable (eg text <code>john</code>, without the <code>!</code>), this refers to the "wrapped" enum (Some/None), not the value itself (T). So <code>john</code> isn't an instance of <code>Person</code>, and it doesn't have an <code>apartment</code> member:</p> <pre><code>john.apartment // 'Person?' does not have a member named 'apartment' </code></pre> <p>The actual <code>Person</code> value can be unwrapped in various ways:</p> <ul> <li>"forced unwrapping": <code>john!</code> (gives the <code>Person</code> value if it exists, runtime error if it is nil)</li> <li>"optional binding": <code>if let p = john { println(p) }</code> (executes the <code>println</code> if the value exists)</li> <li>"optional chaining": <code>john?.learnAboutSwift()</code> (executes this made-up method if the value exists)</li> </ul> <p>I guess you choose one of these ways to unwrap, depending upon what should happen in the nil case, and how likely that is. This language design forces the nil case to be handled explicitly, which I suppose improves safety over Obj-C (where it is easy to forget to handle the nil case).</p> <p><strong>Update</strong>:</p> <p>The exclamation mark is also used in the syntax for declaring "Implicitly Unwrapped Optionals".</p> <p>In the examples so far, the <code>john</code> variable has been declared as <code>var john:Person?</code>, and it is an Optional. If you want the actual value of that variable, you must unwrap it, using one of the three methods above.</p> <p>If it were declared as <code>var john:Person!</code> instead, the variable would be an Implicitly Unwrapped Optional (see the section with this heading in Apple's book). There is no need to unwrap this kind of variable when accessing the value, and <code>john</code> can be used without additional syntax. But Apple's book says:</p> <blockquote> <p>Implicitly unwrapped optionals should not be used when there is a possibility of a variable becoming nil at a later point. Always use a normal optional type if you need to check for a nil value during the lifetime of a variable.</p> </blockquote> <p><strong>Update 2</strong>:</p> <p>The article "<a href="https://mikeash.com/pyblog/friday-qa-2014-06-20-interesting-swift-features.html">Interesting Swift Features</a>" by Mike Ash gives some motivation for optional types. I think it is great, clear writing.</p> <p><strong>Update 3</strong>:</p> <p>Another useful article about the <em>implicitly unwrapped optional</em> use for the exclamation mark: "<a href="http://www.subfurther.com/blog/2014/06/14/swift-and-the-last-mile/">Swift and the Last Mile</a>" by Chris Adamson. The article explains that this is a pragmatic measure by Apple used to declare the types used by their Objective-C frameworks which might contain nil. Declaring a type as optional (using <code>?</code>) or implicitly unwrapped (using <code>!</code>) is "a tradeoff between safety and convenience". In the examples given in the article, Apple have chosen to declare the types as implicitly unwrapped, making the calling code more convenient, but less safe.</p> <p>Perhaps Apple might comb through their frameworks in the future, removing the uncertainty of implicitly unwrapped ("probably never nil") parameters and replacing them with optional ("certainly could be nil in particular [hopefully, documented!] circumstances") or standard non-optional ("is never nil") declarations, based on the exact behaviour of their Objective-C code.</p>
<p>In objective C variables with no value were equal to 'nil'(it was also possible to use 'nil' values same as 0 and false), hence it was possible to use variables in conditional statements (Variables having values are same as 'TRUE' and those with no values were equal to 'FALSE').</p> <p>Swift provides type safety by providing 'optional value'. i.e. It prevents errors formed from assigning variables of different types.</p> <p>So in Swift, only booleans can be provided on conditional statements.</p> <pre><code>var hw = "Hello World" </code></pre> <p>Here, even-though 'hw' is a string, it can't be used in an if statement like in objective C.</p> <pre><code>//This is an error if hw {..} </code></pre> <p>For that it needs to be created as,</p> <pre><code>var nhw : String? = "Hello World" //This is correct if nhw {..} </code></pre>
<p>Here is what I think is the difference:</p> <pre><code>var john: Person? </code></pre> <p>Means john can be nil</p> <pre><code>john?.apartment = number73 </code></pre> <p>The compiler will interpret this line as:</p> <pre><code>if john != nil { john.apartment = number73 } </code></pre> <p>While</p> <pre><code>john!.apartment = number73 </code></pre> <p>The compiler will interpret this line as simply:</p> <pre><code>john.apartment = number73 </code></pre> <p>Hence, using ! will unwrap the if statement, and make it run faster, but if john is nil, then a runtime error will happen.</p> <p>So wrap here doesn't mean it is memory wrapped, but it means it is code wrapped, in this case it is wrapped with an if statement, and because Apple pay close attention to performance in runtime, they want to give you a way to make your app run with the best possible performance.</p>
<p>TL;DR</p> <p>What does an exclamation mark mean in the Swift language?</p> <blockquote> <p>The exclamation mark effectively says, “I know that this optional definitely has a value; please use it.” This is known as forced unwrapping of the optional’s value: </p> </blockquote> <p>Example</p> <pre><code>let possibleString: String? = "An optional string." print(possibleString!) // requires an exclamation mark to access its value // prints "An optional string." let assumedString: String! = "An implicitly unwrapped optional string." print(assumedString) // no exclamation mark is needed to access its value // prints "An implicitly unwrapped optional string." </code></pre> <p>Source: <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_399">https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_399</a></p>
<p>In this case...</p> <p>var John: Person!</p> <p>it means, that initially John will have nil value, it will be set and once set will never be nil-led again. Therefore for convenience I can use the easier syntax for accessing an optional var because this is an "Implicitly unwrapped optional"</p>
<p>The ! means that you are force unwrapping the object the ! follows. More info can be found in Apples documentation, which can be found here: <a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/Swift_Programming_Language/TheBasics.html" rel="nofollow">https://developer.apple.com/library/ios/documentation/swift/conceptual/Swift_Programming_Language/TheBasics.html</a></p>
<pre><code>var currentTitle:String? //currentTitle = "Title Name" println("title: \(currentTitle?)") //title: nil println("title: \(currentTitle!)") //runtime exception var currentTitle:String? currentTitle = "Title Name" println("title: \(currentTitle?)") //title: Optonal("Title Name") println("title: \(currentTitle!)") //title: Title Name </code></pre> <p>In some cases we cannot move forward when the optional value is nil</p>
<p>To put it simply, exclamation marks mean an optional is being unwrapped. An optional is a variable that can have a value or not -- so you can check if the variable is empty, using an if let statement <a href="https://medium.com/arthurs-coding-tips/optionals-in-swift-c94fd231e7a4" rel="nofollow">as shown here</a>, and then force unwrap it. If you force unwrap an optional that is empty though, your program will crash, so be careful! Optionals are declared by putting a question mark at the end of an explicit assignment to a variable, for example I could write:</p> <pre><code>var optionalExample: String? </code></pre> <p>This variable has no value. If I were to unwrap it, the program would crash and Xcode would tell you you tried to unwrap an optional with a value of nil. </p> <p>Hope that helped.</p>
<p>The ! at the end of an object says the object is an optional and to unwrap if it can otherwise returns a nil. This is often used to trap errors that would otherwise crash the program.</p>
<p>Here are some examples:</p> <pre><code>var a:Int = 5 var b:Int? </code></pre> <p>Where <code>b</code> is an optional value. means it may or may not contain a value.</p> <pre><code>b = a </code></pre> <p>Here <code>a</code> has a value so we can assign it</p> <pre><code>var c:Int = nil var d:Int! </code></pre> <p>Where <code>d</code> is forcefully unwrapped means it must contain a value</p> <pre><code>d = c </code></pre> <p>The application will crash because we are assign <code>nil</code> to unwrapped</p>
<p>If you're familiar with C#, this is like Nullable types which are also declared using a question mark:</p> <pre><code>Person? thisPerson; </code></pre> <p>And the exclamation mark in this case is equivalent to accessing the .Value property of the nullable type like this:</p> <pre><code>thisPerson.Value </code></pre>
<p>Some big picture perspective to add to the other useful but more detail-centric answers:</p> <p>In Swift, the exclamation point appears in several contexts:</p> <ul> <li>Forced unwrapping: <code>let name = nameLabel!.text</code></li> <li>Implicitly unwrapped optionals: <code>var logo: UIImageView!</code></li> <li>Forced casting: <code>logo.image = thing as! UIImage</code></li> <li>Unhandled exceptions: <code>try! NSJSONSerialization.JSONObjectWithData(data, [])</code></li> </ul> <p>Every one of these is a different language construct with a different meaning, but they all have three important things in common:</p> <h3>1. Exclamation points circumvent Swift’s compile-time safety checks.</h3> <p>When you use <code>!</code> in Swift, you are essentially saying, “Hey, compiler, I know you think an error <em>could</em> happen here, but I <em>know</em> with total certainty that it never will.”</p> <p>Not all valid code fits into the box of Swift’s compile-time type system — or <em>any</em> language’s static type checking, for that matter. There are situations where you can logically prove that an error will never happen, but you can’t prove it <em>to the compiler</em>. That’s why Swift’s designers added these features in the first place.</p> <p>However, whenever you use <code>!</code>, you’re ruling out having a recovery path for an error, which means that…</p> <h3>2. Exclamation points are potential crashes.</h3> <p>An exclamation point also says, “Hey Swift, I am <em>so</em> certain that this error can never happen that it’s better for you to <em>crash my whole app</em> than it is for me to code a recovery path for it.”</p> <p>That’s a dangerous assertion. It <em>can</em> be the correct one: in mission-critical code where you have thought hard about your code’s invariants, it may be that bogus output is worse than a crash.</p> <p>However, when I see <code>!</code> in the wild, it's rarely used so mindfully. Instead, it too often means, “this value was optional and I didn’t really think too hard about why it could be nil or what to about that, but add <code>!</code> made it compile … so my code is good, right?”</p> <p>Beware the arrogance of the exclamation point. Instead…</p> <h3>3. Exclamation points are best used sparingly, almost never.</h3> <p>Every one of these <code>!</code> constructs has a <code>?</code> counterpart that forces you to deal with the error/nil case:</p> <ul> <li>Conditional unwrapping: <code>if let name = nameLabel?.text { ... }</code></li> <li>Optionals: <code>var logo: UIImageView?</code></li> <li>Conditional casts: <code>logo.image = thing as? UIImage</code></li> <li>Nil-on-failure exceptions: <code>try? NSJSONSerialization.JSONObjectWithData(data, [])</code></li> </ul> <p>If you are tempted to use <code>!</code>, it is always good to consider carefully why you are not using <code>?</code> instead. Is crashing your program really the best option if the <code>!</code> operation fails? Is there a reasonable recovery path your code could take in the nil/error case? If so, code it.</p> <p>I periodically search my entire codebase for <code>!</code> and audit every use of it. Very few usages stand up to scrutiny. (As of this writing, the entire Siesta framework has exactly <a href="https://github.com/bustoutsolutions/siesta/blob/0a23609737282b2834b770172410dde08e57e8a7/Source/Resource.swift#L422" rel="nofollow">two</a> <a href="https://github.com/bustoutsolutions/siesta/blob/0a23609737282b2834b770172410dde08e57e8a7/Source/Resource.swift#L438" rel="nofollow">instances</a> of it.)</p> <p>That’s not to say you should <em>never</em> use <code>!</code> in your code — just that you should always use it <em>mindfully</em>, and never make it the default option.</p>
<p>In Short (!): After you have declare a variable and that you are certain the variable is holding a value.</p> <pre><code>let assumedString: String! = "Some message..." let implicitString: String = assumedString </code></pre> <p>else you would have to do this on every after passing value...</p> <pre><code>let possibleString: String? = "An optional string." let forcedString: String = possibleString! // requires an exclamation mark </code></pre>
<p>If you've come from a C-family language, you will be thinking "pointer to object of type X which might be the memory address 0 (NULL)", and if you're coming from a dynamically typed language you'll be thinking "Object which is probably of type X but might be of type undefined". Neither of these is actually correct, although in a roundabout way the first one is close.</p> <p>The way you should be thinking of it is as if it's an object like:</p> <pre><code>struct Optional&lt;T&gt; { var isNil:Boolean var realObject:T } </code></pre> <p>When you're testing your optional value with <code>foo == nil</code> it's really returning <code>foo.isNil</code>, and when you say <code>foo!</code> it's returning <code>foo.realObject</code> with an assertion that <code>foo.isNil == false</code>. It's important to note this because if <code>foo</code> actually is nil when you do <code>foo!</code>, that's a runtime error, so typically you'd want to use a conditional let instead unless you are very sure that the value will not be nil. This kind of trickery means that the language can be strongly typed without forcing you to test if values are nil everywhere.</p> <p>In practice, it doesn't truly behave like that because the work is done by the compiler. At a high level there is a type <code>Foo?</code> which is separate to <code>Foo</code>, and that prevents funcs which accept type <code>Foo</code> from receiving a nil value, but at a low level an optional value isn't a true object because it has no properties or methods; it's likely that in fact it is a pointer which may by NULL(0) with the appropriate test when force-unwrapping.</p> <p>There other situation in which you'd see an exclamation mark is on a type, as in:</p> <pre><code>func foo(bar: String!) { print(bar) } </code></pre> <p>This is roughly equivalent to accepting an optional with a forced unwrap, i.e.:</p> <pre><code>func foo(bar: String?) { print(bar!) } </code></pre> <p>You can use this to have a method which technically accepts an optional value but will have a runtime error if it is nil. In the current version of Swift this apparently bypasses the is-not-nil assertion so you'll have a low-level error instead. Generally not a good idea, but it can be useful when converting code from another language.</p>
<p><strong><em>IN SIMPLE WORDS</em></strong></p> <p><strong>USING Exclamation mark indicates that variable must consists non nil value (it never be nil)</strong> </p>
<p><strong>ASK YOURSELF</strong></p> <ol> <li>Does the type <strong><code>person?</code></strong> have an <code>apartment</code> member/property? OR</li> <li>Does the type <strong><code>person</code></strong> have an <code>apartment</code> member/property?</li> </ol> <p>If you can't answer this question, then I recommend seeing the images below, they are from the free <a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=ios9%20standford%20itunes%20u" rel="nofollow noreferrer">iOS 9 Stanford Course</a>. <a href="https://i.stack.imgur.com/m6WwP.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/m6WwP.jpg" alt="enter image description here"></a> <a href="https://i.stack.imgur.com/nc9aj.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/nc9aj.jpg" alt="enter image description here"></a></p> <p>The optional version doesn't accept members/properties, Because it's actually contained/wrapped. Once it's unwrapped, then you can access its members.</p> <hr> <p>Now that you know what optionals are implemented using enums, you that <code>person?</code> doesn't have any <code>apartment</code> member but its uwrapped ie <code>person!</code> value does.</p> <p>Had you defined <code>var john: Person</code> instead of: <code>var john: Person?</code> then you would have no longer needed to have the <code>!</code> used, because <code>Person</code> itself does have a member of <code>apartment</code></p>
<p>In simple terms if you use optional </p> <pre><code>var str : String? = "Hello" </code></pre> <p>output might like </p> <pre><code>print(str) //---&gt;&gt; Optional(Hello) </code></pre> <p>To remove this buggy form use (unwrapping)</p> <pre><code>print(str!) //---&gt;&gt; Hello </code></pre>