Adapting Swift code to work with Swift 3
I am new to Swift and XCode but just giving it a go at the moment to see how I get on. Anyway, I have taken a look at some code by Belal Khan from this post to connect a phone app to a MySQL database. It seems it needs updating to work with the latest version of Swift though. I've got through most of it I think, but I've got stuck updating one particular part. // // ViewController.swift // SwiftPHPMySQL // // Created by Belal Khan on 12/08/16. // Copyright © 2016 Belal Khan. All rights reserved. // import UIKit class ViewController: UIViewController { //URL to our web service let URL_SAVE_TEAM = "http://www.example.com/api/createteam.php" //TextFields declarations @IBOutlet weak var textFieldName: UITextField! @IBOutlet weak var textFieldMember: UITextField! //Button action method @IBAction func buttonSave(sender: UIButton) { //created NSURL let requestURL = NSURL(string: URL_SAVE_TEAM) //creating NSMutableURLRequest let request = NSMutableURLRequest(URL: requestURL!) //setting the method to post request.HTTPMethod = "POST" //getting values from text fields let teamName=textFieldName.text let memberCount = textFieldMember.text //creating the post parameter by concatenating the keys and values from text field let postParameters = "name="+teamName!+"&member="+memberCount!; //adding the parameters to request body request.HTTPBody = postParameters.dataUsingEncoding(NSUTF8StringEncoding) //creating a task to send the post request let task = NSURLSession.sharedSession().dataTaskWithRequest(request){ data, response, error in if error != nil{ print("error is \(error)") return; } //parsing the response do { //converting resonse to NSDictionary let myJSON = try NSJSONSerialization.JSONObjectWithData(data!, options: .MutableContainers) as? NSDictionary //parsing the json if let parseJSON = myJSON { //creating a string var msg : String! //getting the json response msg = parseJSON["message"] as! String? //printing the response print(msg) } } catch { print(error) } } //executing the task task.resume() } override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } } And here's what I've got so far with updating it... // // ViewController.swift // SwiftPHPMySQL // // Created by Belal Khan on 12/08/16. // Copyright © 2016 Belal Khan. All rights reserved. // import UIKit class ViewController: UIViewController { //URL to our web service let URL_SAVE_TEAM = "http://www.example.com/api/createteam.php" //TextFields declarations @IBOutlet weak var textFieldName: UITextField! @IBOutlet weak var textFieldMember: UITextField! //Button action method @IBAction func buttonSave(sender: UIButton) { //created NSURL let requestURL = URL(string: URL_SAVE_TEAM) //creating NSMutableURLRequest let request = NSMutableURLRequest(url: requestURL!) //setting the method to post request.httpMethod = "POST" //getting values from text fields let teamName=textFieldName.text let memberCount = textFieldMember.text //creating the post parameter by concatenating the keys and values from text field let postParameters = "name="+teamName!+"&member="+memberCount!; //adding the parameters to request body request.httpBody = postParameters.data(using: .utf8) //creating a task to send the post request let task = URLSession.sharedSession().dataTaskWithRequest(request){ data, response, error in if error != nil{ print("error is \(error)") return; } //parsing the response do { //converting resonse to NSDictionary let myJSON = try NSJSONSerialization.JSONObjectWithData(data!, options: .MutableContainers) as? NSDictionary //parsing the json if let parseJSON = myJSON { //creating a string var msg : String! //getting the json response msg = parseJSON["message"] as! String? //printing the response print(msg) } } catch { print(error) } } //executing the task task.resume() } override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } } The error is on the line: let task = URLSession.sharedSession().dataTaskWithRequest(request){ The error I get is Cannot call value of non-function type 'URLSession'
change it to this  URLSession.shared.dataTask(with: request, completionHandler: {data, response, error in ... })
I suggest your for swift3 : You should convert from var requstUrl = NSMutableURLRequest(url: url) to var requstUrl = URLRequest(url: url) Then should convert From let task = NSURLSession.sharedSession().dataTaskWithRequest(request){ data, response, error in to let task = URLSession.shared.dataTask(with: requstUrl) { (data, response, error) in For Swift3 examples :  @IBAction func postRequest(_ sender: AnyObject) { print("::POST Request::") let urlString = "https://aznaz-game-14b06.firebaseio.com/hotel.json" let url = URL(string: urlString)! var requstUrl = URLRequest(url: url) requstUrl.httpMethod = "POST" requstUrl.addValue("application/json", forHTTPHeaderField: "Accept") requstUrl.addValue("application/json", forHTTPHeaderField: "Content-Type") requstUrl.httpBody = "{\"address\": \"166 mirpur dhaka bnagladesh\",\"name\": \"Rupsui Bangla\",\"rating\":\"5/10\" ,\"type\":\"chiken\"}".data(using: String.Encoding.utf8) let dataTask = URLSession.shared.dataTask(with: requstUrl) { (data, response, error) in print(data) guard (error == nil) else { print("error ocure \(error)") return } do { let jsonObjeectDataRead = try JSONSerialization.jsonObject(with: data!, options: .allowFragments) print(jsonObjeectDataRead) let subscriptionData = jsonObjeectDataRead as! [String: String] self.outputResult.text = "Post request succesful, Node Id :\(subscriptionData["name"])" } catch{ print("someting wrong happing ,,,,,,,(:)") } } dataTask.resume() }
You are creating request as NSMutableURLRequest but, URLSession needs URLRequest let request = URLRequest(url: NSURL(string: "") as! URL) URLSession.shared.dataTask(with: request) { (data: Data?, response: URLResponse?, error: Error?) in if error == nil { print("Seccess") } else { print("Error") } } Thanks:)