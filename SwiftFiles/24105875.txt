Why does != 0 cause a compiler error
<p>The following Statement causes a compiler error:Type '()' does not conform to protocol 'LogicValue'. In the second line</p> <pre><code>var b=1 if b!=0 { println("not 0") } </code></pre> <p>But </p> <pre><code>var b=1 if (!(b==0)) { println("not 0") </code></pre> <p>causes no compiler error.</p> <p>For what reason 0 can't be compared using the <code>!=</code> Operator, but can be compared using the <code>==</code> Operator ?What is the best way to deal with this?</p>
<p>What's wrong with a nice and simple <code>b != 0</code>? It's easy to read and easy to implement. </p> <p>The reason why the second option works is because the <code>!</code> here means "not". So if b equalled 0, the statement would be "not True", or "False".</p>
<p>This is probably due to the lack of whitespace around your <code>!=</code> operator - Swift is quite fussy about whitespace, and interprets operators differently depending on their surrounding whitespace.</p> <p>The <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/LexicalStructure.html" rel="nofollow">language specification</a> describes the various rules, although it is not particularly obvious from these that <code>b!=0</code> should be invalid.</p> <p>So you probably need to say <code>b != 0</code> rather than <code>b!=0</code></p> <p>See also: <a href="https://stackoverflow.com/questions/24028666/is-this-response-from-the-compiler-valid">Is this response from the compiler valid?</a></p>
<p>It's a case of missing whitespace:</p> <pre><code>var b=1 if b != 0 { println("not 0") } </code></pre> <p>compiles fine.</p>