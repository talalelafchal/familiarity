Creating and playing a sound in swift
<p>So what I want to do is create and play a sound in swift that will play when I press a button, I know how to do it in Objective-C, but does anyone know how to in Swift?</p> <p>It would be like this for Objective-C:</p> <pre><code>NSURL *soundURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"mysoundname" ofType:@"wav"]]; AudioServicesCreateSystemSoundID((__bridge CFURLRef)soundURL, &amp;mySound); </code></pre> <p>And then to play it I would do:</p> <pre><code>AudioServicesPlaySystemSound(Explosion); </code></pre> <p>Does anyone know how I could do this?</p>
<pre><code>var mySound = NSSound(named:"Morse.aiff") mySound.play() </code></pre> <p>"Morse.aiff" is a system sound of OSX, but if you just click on "named" within XCode, you'll be able to view (in the QuickHelp pane) where this function is searching the sounds. It can be in your "Supporting files" folder</p>
<p>Here's a bit of code I've got added to FlappySwift that works:</p> <pre><code>import SpriteKit import AVFoundation class GameScene: SKScene { // Grab the path, make sure to add it to your project! var coinSound = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource("coin", ofType: "wav")) var audioPlayer = AVAudioPlayer() // Initial setup override func didMoveToView(view: SKView) { audioPlayer = AVAudioPlayer(contentsOfURL: coinSound, error: nil) audioPlayer.prepareToPlay() } // Trigger the sound effect when the player grabs the coin func didBeginContact(contact: SKPhysicsContact!) { audioPlayer.play() } } </code></pre>
<p>This creates a <code>SystemSoundID</code> from a file called <code>Cha-Ching.aiff</code>.</p> <pre><code>import AudioToolbox let chaChingSound: SystemSoundID = createChaChingSound() class CashRegisterViewController: UIViewController { override func viewWillAppear(animated: Bool) { super.viewWillAppear(animated) AudioServicesPlaySystemSound(chaChingSound) } } func createChaChingSound() -&gt; SystemSoundID { var soundID: SystemSoundID = 0 let soundURL = CFBundleCopyResourceURL(CFBundleGetMainBundle(), "Cha-Ching", "aiff", nil) AudioServicesCreateSystemSoundID(soundURL, &amp;soundID) CFRelease(soundURL) return soundID } </code></pre>
<p>This is similar to some other answers, but perhaps a little more "Swifty":</p> <pre><code>// Load "mysoundname.wav" if let soundURL = NSBundle.mainBundle().URLForResource("mysoundname", withExtension: "wav") { var mySound: SystemSoundID = 0 AudioServicesCreateSystemSoundID(soundURL, &amp;mySound) // Play AudioServicesPlaySystemSound(mySound); } </code></pre> <p>Note that this is a trivial example reproducing the effect of the code in the question. You'll need to make sure to <code>import AudioToolbox</code>, plus the general pattern for this kind of code would be to load your sounds when your app starts up, saving them in <code>SystemSoundID</code> instance variables somewhere, use them throughout your app, then call <code>AudioServicesDisposeSystemSoundID</code> when you're finished with them.</p>
<pre><code>import AVFoundation var audioPlayer = AVAudioPlayer() class GameScene: SKScene { override func didMoveToView(view: SKView) { let soundURL = NSBundle.mainBundle().URLForResource("04", withExtension: "mp3") audioPlayer = AVAudioPlayer(contentsOfURL: soundURL, error: nil) audioPlayer.play() } } </code></pre>
<p>Use This Function to make sound in Swift (You can use this function where you want to make sound.)</p> <p>First Add SpriteKit and AVFoundation Framework.</p> <pre><code>import SpriteKit import AVFoundation func playEffectSound(filename: String){ runAction(SKAction.playSoundFileNamed("\(filename)", waitForCompletion: false)) }// use this function to play sound playEffectSound("Sound File Name With Extension") // Example :- playEffectSound("BS_SpiderWeb_CollectEgg_SFX.mp3") </code></pre>
<p>According to new Swift 2.0 we should use do try catch. The code would look like this:</p> <pre><code>var badumSound = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource("BadumTss", ofType: "mp3")) var audioPlayer = AVAudioPlayer() do { player = try AVAudioPlayer(contentsOfURL: badumSound) } catch { print("No sound found by URL:\(badumSound)") } player.prepareToPlay() </code></pre>
<p>This code works for me:</p> <pre><code>class ViewController: UIViewController { var audioFilePathURL : NSURL! var soundSystemServicesId : SystemSoundID = 0 override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. audioFilePathURL = NSBundle.mainBundle().URLForResource("MetalBell", withExtension: "wav") AudioServicesCreateSystemSoundID( audioFilePathURL, &amp;soundSystemServicesId) } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } @IBAction func PlayAlertSound(sender: UIButton) { AudioServicesPlayAlertSound(soundSystemServicesId) } } </code></pre>
<p>Handy Swift extension:</p> <pre><code>import AudioToolbox extension SystemSoundID { static func playFileNamed(fileName: String, withExtenstion fileExtension: String) { var sound: SystemSoundID = 0 if let soundURL = NSBundle.mainBundle().URLForResource(fileName, withExtension: fileExtension) { AudioServicesCreateSystemSoundID(soundURL, &amp;sound) AudioServicesPlaySystemSound(sound) } } } </code></pre> <p>Then, from anywhere in your app (remember to <code>import AudioToolbox</code>), you can call</p> <pre><code>SystemSoundID.playFileNamed("sound", withExtenstion: "mp3") </code></pre> <p>to play "sound.mp3"</p>
<p>With a class &amp; AudioToolbox:</p> <pre><code>import AudioToolbox class Sound { var soundEffect: SystemSoundID = 0 init(name: String, type: String) { let path = NSBundle.mainBundle().pathForResource(name, ofType: type)! let pathURL = NSURL(fileURLWithPath: path) AudioServicesCreateSystemSoundID(pathURL as CFURLRef, &amp;soundEffect) } func play() { AudioServicesPlaySystemSound(soundEffect) } } </code></pre> <p>Usage:</p> <pre><code>testSound = Sound(name: "test", type: "caf") testSound.play() </code></pre>
<p>This code works for me. Use Try and Catch for AVAudioPlayer</p> <pre><code>import UIKit import AVFoundation class ViewController: UIViewController { //Make sure that sound file is present in your Project. var CatSound = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource("Meow-sounds.mp3", ofType: "mp3")!) var audioPlayer = AVAudioPlayer() override func viewDidLoad() { super.viewDidLoad() do { audioPlayer = try AVAudioPlayer(contentsOfURL: CatSound) audioPlayer.prepareToPlay() } catch { print("Problem in getting File") } // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } @IBAction func button1Action(sender: AnyObject) { audioPlayer.play() } } </code></pre>
<p>For <strong>Swift 3</strong>:</p> <pre><code>extension SystemSoundID { static func playFileNamed(_ fileName: String, withExtenstion fileExtension: String) { var sound: SystemSoundID = 0 if let soundURL = Bundle.main.url(forResource: fileName, withExtension: fileExtension) { AudioServicesCreateSystemSoundID(soundURL as CFURL, &amp;sound) AudioServicesPlaySystemSound(sound) } } } </code></pre>