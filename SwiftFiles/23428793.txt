NSURLSession: How to increase time out for URL requests?
<p>I am using iOS 7's new <code>NSURLSessionDataTask</code> to retrieve data as follows:</p> <pre><code>NSURLSession *session = [NSURLSession sharedSession]; NSURLSessionDataTask *dataTask = [session dataTaskWithRequest: request completionHandler: ^(NSData *data, NSURLResponse *response, NSError *error) { // }]; </code></pre> <p>How can I increase the time out values to avoid the error <code>"The request timed out"</code> (in <code>NSURLErrorDomain</code> Code=<code>-1001</code>)?</p> <p>I have checked the documentation for <a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSessionConfiguration_class/Reference/Reference.html#//apple_ref/doc/uid/TP40013440-CH1-SW32">NSURLSessionConfiguration</a> but did not find a way to set the time out value.</p> <p>Thank you for your help!</p>
<p>NSURLSessionConfiguration includes the property timeoutIntervalForRequest:</p> <pre><code>@property NSTimeInterval timeoutIntervalForRequest </code></pre> <p>to control the timeout interval. There is also timeoutIntervalForResource for the timeout after the request is initiated.</p>
<h3>Example</h3> <pre><code>NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration]; sessionConfig.timeoutIntervalForRequest = 30.0; sessionConfig.timeoutIntervalForResource = 60.0; </code></pre> <p><code>timeoutIntervalForRequest</code> and <code>timeoutIntervalForResource</code> specify the timeout interval for the request as well as the resource.</p> <h3>What docs say</h3> <blockquote> <p><strong><code>timeoutIntervalForRequest</code></strong> - The timeout interval to use when waiting for additional data. The timer associated with this value is reset whenever new data arrives. When the request timer reaches the specified interval without receiving any new data, it triggers a timeout.</p> <p><strong><code>timeoutIntervalForResource</code></strong> - The maximum amount of time that a resource request should be allowed to take. This value controls how long to wait for an entire resource to transfer before giving up. The resource timer starts when the request is initiated and counts until either the request completes or this timeout interval is reached, whichever comes first.</p> </blockquote> <p>Based on <a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSessionConfiguration_class/Reference/Reference.html#//apple_ref/occ/instp/NSURLSessionConfiguration/timeoutIntervalForRequest">NSURLSessionConfiguration Class Reference</a></p>
<p>In case Swift developer coming here</p> <p>to do this, you need to use</p> <pre><code> let urlconfig = NSURLSessionConfiguration.defaultSessionConfiguration() urlconfig.timeoutIntervalForRequest = 12 urlconfig.timeoutIntervalForResource = 12 self.session = NSURLSession(configuration: urlconfig, delegate: self.delegates, delegateQueue: nil) </code></pre>
<p>In SWIFT 3.0, You need to use</p> <pre><code> var task:URLSessionDataTask? let urlconfig = URLSessionConfiguration.default urlconfig.timeoutIntervalForRequest = 20 urlconfig.timeoutIntervalForResource = 60 let session = Foundation.URLSession(configuration: urlconfig, delegate: self, delegateQueue: OperationQueue.main) let request = NSMutableURLRequest(url: URL(string: YourURLString)!) request.httpMethod = "POST" request.cachePolicy = URLRequest.CachePolicy.reloadIgnoringCacheData let paramString = YourParameterString request.httpBody = paramString.data(using: String.Encoding.utf8) task = session.dataTask(with: request as URLRequest) { (data, response, error) in // Do here }) </code></pre>