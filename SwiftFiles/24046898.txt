How do I create a new Swift project without using Storyboards?
<p>Creating a new project in XCode 6 doesn't allow to disable Storyboards. You can only select Swift or Objective-C and to use or not Core Data.</p> <p>I tried deleting the storyboard and from the project removing the main storyboard and manually setting the window from didFinishLaunching</p> <p>In the AppDelegate I have this:</p> <pre><code>class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow var testNavigationController: UINavigationController func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -&gt; Bool { testNavigationController = UINavigationController() var testViewController: UIViewController = UIViewController() self.testNavigationController.pushViewController(testViewController, animated: false) self.window = UIWindow(frame: UIScreen.mainScreen().bounds) self.window.rootViewController = testNavigationController self.window.backgroundColor = UIColor.whiteColor() self.window.makeKeyAndVisible() return true } } </code></pre> <p>However, XCode gives me an error:</p> <p>Class 'AppDelegate' has no initializers</p> <p>Anyone has succeed in this?</p>
<p>You must mark the <code>window</code> and <code>testNavigationController</code> variables as optional:</p> <pre><code>var window : UIWindow? var testNavigationController : UINavigationController? </code></pre> <p>Swift classes require non-optional properties to be initialized during the instantiation:</p> <blockquote> <p>Classes and structures must set all of their stored properties to an appropriate initial value by the time an instance of that class or structure is created. Stored properties cannot be left in an indeterminate state.</p> <p>Properties of optional type are automatically initialized with a value of nil, indicating that the property is deliberately intended to have “no value yet” during initialization.</p> </blockquote> <p>When using optional variables, remember to unwrap them with <code>!</code>, such as:</p> <pre><code>self.window!.backgroundColor = UIColor.whiteColor(); </code></pre>
<p>I have found the answer it had nothing to do with the xcode setup, removing storyboard and the reference from project is the right thing. It had to do with the swift syntax.</p> <p>The code is the following:</p> <pre><code>class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? var testNavigationController: UINavigationController? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -&gt; Bool { self.testNavigationController = UINavigationController() var testViewController: UIViewController? = UIViewController() testViewController!.view.backgroundColor = UIColor.redColor() self.testNavigationController!.pushViewController(testViewController, animated: false) self.window = UIWindow(frame: UIScreen.mainScreen().bounds) self.window!.rootViewController = testNavigationController self.window!.backgroundColor = UIColor.whiteColor() self.window!.makeKeyAndVisible() return true } } </code></pre>
<p>Try the following code:</p> <pre><code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -&gt; Bool { self.window = UIWindow(frame: UIScreen.mainScreen().bounds) self.window!.backgroundColor = UIColor.whiteColor() // Create a nav/vc pair using the custom ViewController class let nav = UINavigationController() let vc = NextViewController ( nibName:"NextViewController", bundle: nil) // Push the vc onto the nav nav.pushViewController(vc, animated: false) // Set the window’s root view controller self.window!.rootViewController = nav // Present the window self.window!.makeKeyAndVisible() return true } </code></pre>
<p>Why don't you just create an empty application? the storyboard is not created to me...</p>
<p>I recommend you use controller and xib</p> <p><code>MyViewController.swift</code> and <code>MyViewController.xib</code></p> <p>(You can create through File->New->File->Cocoa Touch Class and set "also create XIB file" true, sub class of UIViewController)</p> <pre><code>class MyViewController: UIViewController { ..... } </code></pre> <p>and In <code>AppDelegate.swift</code> <code>func application</code> write the following code</p> <pre><code>.... var controller: MyViewController = MyViewController(nibName:"MyViewController",bundle:nil) self.window!.rootViewController = controller return true </code></pre> <p>It should be work!</p>
<p>You can just do it like this:</p> <pre><code>class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? var IndexNavigationController: UINavigationController? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -&gt; Bool { var IndexViewContoller : IndexViewController? = IndexViewController() self.IndexNavigationController = UINavigationController(rootViewController:IndexViewContoller) self.window = UIWindow(frame: UIScreen.mainScreen().bounds) self.window!.rootViewController = self.IndexNavigationController self.window!.backgroundColor = UIColor.whiteColor() self.window!.makeKeyAndVisible() return true } } </code></pre>
<p>We can create navigation-based application without storyboard in Xcode 6 (iOS 8) like as follows:</p> <ul> <li><p>Create an empty application by selecting the project language as Swift.</p></li> <li><p>Add new cocoa touch class files with the interface xib. (eg. TestViewController)</p></li> <li><p>In the swift we have only one file interact with the xib i.e. *.swift file, there is no .h and .m files.</p></li> <li><p>We can connect the controls of xib with swift file same as in iOS 7.</p></li> </ul> <p>Following are some snippets for work with the controls and Swift</p> <pre><code>// // TestViewController.swift // import UIKit class TestViewController: UIViewController { @IBOutlet var testBtn : UIButton init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) { super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil) // Custom initialization } @IBAction func testActionOnBtn(sender : UIButton) { let cancelButtonTitle = NSLocalizedString("OK", comment: "") let alertController = UIAlertController(title: "Title", message: "Message", preferredStyle: .Alert) // Create the action. let cancelAction = UIAlertAction(title: cancelButtonTitle, style: .Cancel) { action in NSLog("The simple alert's cancel action occured.") } // Add the action. alertController.addAction(cancelAction) presentViewController(alertController, animated: true, completion: nil) } override func viewDidLoad() { super.viewDidLoad() } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } } </code></pre> <p>Changes in AppDelegate.swift file</p> <pre><code>// // AppDelegate.swift // import UIKit @UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? var navigationController: UINavigationController? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -&gt; Bool { self.window = UIWindow(frame: UIScreen.mainScreen().bounds) self.window!.backgroundColor = UIColor.whiteColor() self.window!.makeKeyAndVisible() var testController: TestViewController? = TestViewController(nibName: "TestViewController", bundle: nil) self.navigationController = UINavigationController(rootViewController: testController) self.window!.rootViewController = self.navigationController return true } func applicationWillResignActive(application: UIApplication) { } func applicationDidEnterBackground(application: UIApplication) { } func applicationWillEnterForeground(application: UIApplication) { } func applicationDidBecomeActive(application: UIApplication) { } func applicationWillTerminate(application: UIApplication) { } } </code></pre> <p>Find code sample and other information on <a href="http://ashishkakkad.wordpress.com/2014/06/16/create-a-application-in-xcode-6-ios-8-without-storyborard-in-swift-language-and-work-with-controls/" rel="nofollow">http://ashishkakkad.wordpress.com/2014/06/16/create-a-application-in-xcode-6-ios-8-without-storyborard-in-swift-language-and-work-with-controls/</a></p>
<p>All it takes for not using Storyboards for the <code>rootViewController</code>:</p> <p>1· Change <code>AppDelegate.swift</code> to:</p> <pre><code>import UIKit @UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { window = UIWindow(frame: UIScreen.mainScreen().bounds) if let window = window { window.backgroundColor = UIColor.whiteColor() window.rootViewController = ViewController() window.makeKeyAndVisible() } return true } } </code></pre> <p>2· Create a <code>ViewController</code> subclass of <code>UIViewController</code>: </p> <pre><code>import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = UIColor.blueColor() } } </code></pre> <p>3· If you created the project from an Xcode template:</p> <ol> <li>Remove the key-value pair for key <code>"Main storyboard file base name"</code> from <code>Info.plist</code>.</li> <li>Delete the storyboard file <code>Main.storyboard</code>.</li> </ol> <p>As you can see in the first code snippet, instead of implicitly unwrapping an optional, I rather like the <code>if let</code> syntax for unwrapping the optional <code>window</code> property. Here I'm using it like <code>if let a = a { }</code> so that the optional <code>a</code> becomes a non-optional reference inside the <code>if</code>-statement with the same name – <code>a</code>. </p> <p>Finally <code>self.</code> is not necessary when referencing the <code>window</code> property inside it own class.</p>
<p>If you want to Initialize your viewController with xib and and need to use navigation controller. Here is a piece of code.</p> <pre><code>var window: UIWindow? var navController:UINavigationController? var viewController:ViewController? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { window = UIWindow(frame: UIScreen.mainScreen().bounds) viewController = ViewController(nibName: "ViewController", bundle: nil); navController = UINavigationController(rootViewController: viewController!); window?.rootViewController = navController; window?.makeKeyAndVisible() return true } </code></pre>
<p>Here is a complete swift test example for an UINavigationController</p> <pre><code> import UIKit @UIApplicationMain class KSZAppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? var testNavigationController: UINavigationController? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { // Override point for customization after application launch. // Working WITHOUT Storyboard // see http://randexdev.com/2014/07/uicollectionview/ // see http://stackoverflow.com/questions/24046898/how-do-i-create-a-new-swift-project-without-using-storyboards window = UIWindow(frame: UIScreen.mainScreen().bounds) if let win = window { win.opaque = true //you could create the navigation controller in the applicationDidFinishLaunching: method of your application delegate. var testViewController: UIViewController = UIViewController() testNavigationController = UINavigationController(rootViewController: testViewController) win.rootViewController = testNavigationController win.backgroundColor = UIColor.whiteColor() win.makeKeyAndVisible() // see corresponding Obj-C in https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewControllerCatalog/Chapters/NavigationControllers.html#//apple_ref/doc/uid/TP40011313-CH2-SW1 // - (void)applicationDidFinishLaunching:(UIApplication *)application { // UIViewController *myViewController = [[MyViewController alloc] init]; // navigationController = [[UINavigationController alloc] // initWithRootViewController:myViewController]; // window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]]; // window.rootViewController = navigationController; // [window makeKeyAndVisible]; //} } return true } } </code></pre>