Type MCSessionState does not conform to protocol 'AnyObject'
<p>I'm getting this error with the following code:</p> <pre><code>var dict: Dictionary&lt;String, AnyObject&gt; = [ "peerID": peerID, "state": state ] </code></pre> <p>I'm using <code>MultipeerConnectivity</code>: peerID is of type MCPeerID (e.g., <code>MCPeerID(displayName: "morpheus")</code>), and state is MCSessionState (an enum, e.g., <code>MCSessionState.Connected</code>). Apparently, I cannot convert an enum to AnyObject? How can I solve this?</p> <p>Best.</p> <p>Edit: I tried using Dictionary&lt;String, Any&gt;, but now I get an exception in the next call. Here's the code:</p> <pre><code>func session(session: MCSession!, peer peerID: MCPeerID!, didChangeState state: MCSessionState) { var dict: Dictionary&lt;String, Any&gt; = [ "peerID": peerID, "state": state ] NSNotificationCenter.defaultCenter().postNotificationName( "MCDidChangeStateNotification", object: nil, userInfo: dict ) } </code></pre> <p>Xcode indicates the "userInfo: dict" line with the exception:</p> <pre><code>Thread 10: EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0) </code></pre> <p>Maybe this won't tell you much, so what could I post that would help?</p> <p>Edit:</p> <p>By inspecting the object at runtime (after the crash), this is what I get:</p> <pre><code>state MultipeerConnectivity.MCSessionState Connecting Connecting dict Swift.Dictionary&lt;Swift.String, protocol&lt;&gt;&gt; [0] Swift._DictionaryElement&lt;Swift.String, protocol&lt;&gt;&gt; key Swift.String "state" core Swift._StringCore value protocol&lt;&gt; payload_data_0 Builtin.RawPointer 0x0 payload_data_1 Builtin.RawPointer 0x0 payload_data_2 Builtin.RawPointer 0x0 instance_type Builtin.RawPointer 0x0 </code></pre> <p>There seem to be some null pointers there, but the "state" variable seems fine...</p> <p>Note: I commented out the peerID assignment.</p>
<blockquote> <p>Apparently, I cannot convert an enum to AnyObject? How can I solve this?</p> </blockquote> <p>That's correct, AnyObject cannot contain enums.</p> <blockquote> <p>I tried using <code>Dictionary&lt;String, Any&gt;</code>, but now I get an exception in the next call.</p> </blockquote> <p>NSNotificationCentre doesn't take a swift <code>Dictionary</code>, it takes an <code>NSDictionary</code>.</p> <p>Wherever possible, <code>Dictionary</code> and <code>NSDictionary</code> are inter-operable however <code>NSDictionary</code> can only have objects as the key and value. You cannot use <code>Any</code> in a dictionary that needs to be treated as if it were an <code>NSDictionary</code> by an obj-c API such as <code>NSNotificationCentre</code>.</p> <p>So, long story short, a notification userInfo dictionary has to be <code>Dictionary&lt;AnyObject, AnyObject&gt;</code> (or <code>&lt;String, String&gt;</code> or something that is an object). You're going to have to use something other than an Enum.</p>
<p>I think you need to use type <code>Any</code> for the dictionary values (because AnyObject can only be used for an instance of a class): </p> <p>This worked in a playground for me:</p> <pre><code>var dict: Dictionary&lt;String, Any&gt; = [ "peerID": peerID, "state": state ]; </code></pre>
<p><code>AnyObject</code> is only for class types, use <code>Any</code> to also support enums (cf. <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html#//apple_ref/doc/uid/TP40014097-CH22-XID_448" rel="nofollow">docs</a>).</p>