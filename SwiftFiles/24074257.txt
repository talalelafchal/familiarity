How to use UIColorFromRGB value in Swift
<p>In iOS we use this code to set RGB color code for views</p> <pre><code>#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0] view.backgroundColor=UIColorFromRGB(0x209624); </code></pre> <p>How to use this in swift ?</p>
<p>You cannot use a complex macros like <code>#define UIColorFromRGB(rgbValue)</code> in swift. The replacement of simple macro in swift is global constants like </p> <pre><code>let FADE_ANIMATION_DURATION = 0.35 </code></pre> <p>Still the complex macros that accept parameters are not supported by swift. you could use functions instead </p> <blockquote> <p>Complex macros are used in C and Objective-C but have no counterpart in Swift. Complex macros are macros that do not define constants, including parenthesized, function-like macros. You use complex macros in C and Objective-C to avoid type-checking constraints or to avoid retyping large amounts of boilerplate code. However, macros can make debugging and refactoring difficult. In Swift, you can use functions and generics to achieve the same results without any compromises. Therefore, the complex macros that are in C and Objective-C source files are not made available to your Swift code.</p> </blockquote> <p>Excerpt from <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html" rel="nofollow">Using swift with cocoa and objective C</a></p> <p>Check @Nate Cooks answer for the Swift version of that function to be used here </p>
<p>Here's a Swift version of that function (for getting a UIColor representation of a <code>UInt</code> value):</p> <pre><code>func UIColorFromRGB(rgbValue: UInt) -&gt; UIColor { return UIColor( red: CGFloat((rgbValue &amp; 0xFF0000) &gt;&gt; 16) / 255.0, green: CGFloat((rgbValue &amp; 0x00FF00) &gt;&gt; 8) / 255.0, blue: CGFloat(rgbValue &amp; 0x0000FF) / 255.0, alpha: CGFloat(1.0) ) } view.backgroundColor = UIColorFromRGB(0x209624) </code></pre>
<p>I wanted to put </p> <pre><code>cell.backgroundColor=UIColor .colorWithRed(125/255.0, green: 125/255.0, blue: 125/255.0, alpha: 1.0) </code></pre> <p>but that didn't work.<br/> </p> <p>So I used:<br/> <strong>For Swift</strong></p> <pre><code>cell.backgroundColor = UIColor(red: 0.5, green: 0.5, blue: 0.5, alpha: 1.0) </code></pre> <p>So this is the workaround that I found.</p>
<p>I really liked Nate Cook's answer but I wanted something a little more idiomatic. I believe this is a really good use case for a convenience initializer via a custom extension.</p> <pre><code>// UIColorExtensions.swift import Foundation import UIKit extension UIColor { convenience init(rgb: UInt) { self.init( red: CGFloat((rgb &amp; 0xFF0000) &gt;&gt; 16) / 255.0, green: CGFloat((rgb &amp; 0x00FF00) &gt;&gt; 8) / 255.0, blue: CGFloat(rgb &amp; 0x0000FF) / 255.0, alpha: CGFloat(1.0) ) } } </code></pre> <p>This can now be used like so:</p> <pre><code>view.backgroundColor = UIColor(rgb: 0x209624) </code></pre> <p>I would only recommend monkey patching UIKit classes like this in your own client code, not libraries.</p>
<p><strong>If you're starting from a string (not hex) this is a function that takes a hex string and returns a UIColor.</strong><br> <em>(You can enter hex strings with either format: <code>#ffffff</code> or <code>ffffff</code>)</em></p> <p><strong>Swift 3:</strong></p> <pre><code>func hexStringToUIColor (hex:String) -&gt; UIColor { var cString:String = hex.trimmingCharacters(in: .whitespacesAndNewlines).uppercased() if (cString.hasPrefix("#")) { cString.remove(at: cString.startIndex) } if ((cString.characters.count) != 6) { return UIColor.gray } var rgbValue:UInt32 = 0 Scanner(string: cString).scanHexInt32(&amp;rgbValue) return UIColor( red: CGFloat((rgbValue &amp; 0xFF0000) &gt;&gt; 16) / 255.0, green: CGFloat((rgbValue &amp; 0x00FF00) &gt;&gt; 8) / 255.0, blue: CGFloat(rgbValue &amp; 0x0000FF) / 255.0, alpha: CGFloat(1.0) ) } </code></pre> <p><strong>Swift 2:</strong></p> <pre><code>func hexStringToUIColor (hex:String) -&gt; UIColor { var cString:String = hex.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet() as NSCharacterSet).uppercaseString if (cString.hasPrefix("#")) { cString = cString.substringFromIndex(cString.startIndex.advancedBy(1)) } if ((cString.characters.count) != 6) { return UIColor.grayColor() } var rgbValue:UInt32 = 0 NSScanner(string: cString).scanHexInt(&amp;rgbValue) return UIColor( red: CGFloat((rgbValue &amp; 0xFF0000) &gt;&gt; 16) / 255.0, green: CGFloat((rgbValue &amp; 0x00FF00) &gt;&gt; 8) / 255.0, blue: CGFloat(rgbValue &amp; 0x0000FF) / 255.0, alpha: CGFloat(1.0) ) } </code></pre> <p><strong>Usage:</strong></p> <pre><code>var color1 = hexStringToUIColor("#d3d3d3") </code></pre> <p><br></p> <hr> <p>Source: <a href="https://gist.github.com/arshad/de147c42d7b3063ef7bc" rel="nofollow">arshad/gist:de147c42d7b3063ef7bc</a></p>
<pre><code>myLabel.backgroundColor = UIColor(red: 50.0/255, green: 150.0/255, blue: 65.0/255, alpha: 1.0) </code></pre>
<p>That can be simply done by using this initialization</p> <pre><code>view.backgroundColor = UIColor(hex: "067AB5") </code></pre>
<p>I have used the following in swift.</p> <pre><code>let appRedColor = UIColor(red: 200.0/255.0, green: 16.0/255.0, blue: 46.0/255.0, alpha: 1.0) let appSilverColor = UIColor(red: 236.0/255.0, green: 236.0/255.0, blue: 236.0/255.0, alpha: 1.0) let appWhiteColor = UIColor(red: 255.0/255.0, green: 255.0/255.0, blue: 255.0/255.0, alpha: 1.0) let appNavyColor = UIColor(red: 19.0/255.0, green: 41.0/255.0, blue: 75.0/255.0, alpha: 1.0) </code></pre>
<p>You can use this:</p> <pre><code>//The color RGB #85CC4B let newColor = UIColor(red: CGFloat(0x85)/255 ,green: CGFloat(0xCC)/255 ,blue: CGFloat(0x4B)/255 ,alpha: 1.0) </code></pre>
<p>My trouble was the table cell's backcolor becomes white on iPad(Used size class). I solved the issue with the following snippet.</p> <pre><code> func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? { let headerCell = tableView.dequeueReusableCellWithIdentifier("liveauctionfeedidentifier") as! LiveAuctionFeedCell var color = headerCell.backgroundColor headerCell.backgroundColor = color } </code></pre>
<p>This is worked for me in swift. Try this</p> <pre><code>bottomBorder.borderColor = UIColor (red: 255.0/255.0, green: 215.0/255.0, blue: 60/255.0, alpha: 1.0).CGColor </code></pre>
<p>This is a nice extension for UIColor. You can use enum values(hex, string) and direct string values when you creating UIColor objects.</p> <p>The extension we deserve <a href="https://github.com/ioramashvili/UsefulExtensions/blob/master/Extensions.playground/Pages/UIColor.xcplaygroundpage/Contents.swift" rel="nofollow">https://github.com/ioramashvili/UsefulExtensions/blob/master/Extensions.playground/Pages/UIColor.xcplaygroundpage/Contents.swift</a></p>
<p>solution for argb format:</p> <pre><code>// UIColorExtensions.swift import UIKit extension UIColor { convenience init(argb: UInt) { self.init( red: CGFloat((argb &amp; 0xFF0000) &gt;&gt; 16) / 255.0, green: CGFloat((argb &amp; 0x00FF00) &gt;&gt; 8) / 255.0, blue: CGFloat(argb &amp; 0x0000FF) / 255.0, alpha: CGFloat((argb &amp; 0xFF000000) &gt;&gt; 24) / 255.0 ) } } </code></pre> <p>usage:</p> <pre><code>var clearColor: UIColor = UIColor.init(argb: 0x00000000) var redColor: UIColor = UIColor.init(argb: 0xFFFF0000) </code></pre>