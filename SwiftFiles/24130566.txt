Extending Array from custom Sequence in Swift?
<p>I'm essentially trying to:</p> <ol> <li>Make custom protocols descended from Sequence and Generator as <code>SpecialSequence</code> and <code>SpecialGenerator</code></li> <li>Implement <code>SpecialGenerator</code> as <code>SpecialGen</code></li> <li>Extend Array to implement <code>SpecialSequence</code></li> </ol> <p>Here's what I've tried so far:</p> <pre><code>protocol SpecialGenerator: Generator { typealias T; func next() -&gt; T?; //... } class SpecialGen&lt;T&gt;: SpecialGenerator { var Objects: Array&lt;T&gt;; var CurrIndex = 0; init(objs: Array&lt;T&gt;) { self.Objects = objs; } func next() -&gt; T? { return Objects[CurrIndex]; } //... } protocol SpecialSequence: Sequence { typealias T; func generate() -&gt; SpecialGenerator; //... } extension Array: SpecialSequence { func generate() -&gt; SpecialGenerator { return SpecialGen(objs: self); } } </code></pre> <p>But I get the error <code>Array&lt;T&gt; does not conform to protocol "SpecialSequence"</code></p> <p>I've also tried using various combinations of <code>SpecialGenerator</code> and <code>SpecialGen&lt;T&gt;</code> as return types to no avail.</p> <p>Is this possible in Swift?</p>
<p>You need to supply a value for the type alias you defined</p> <pre><code>protocol SpecialSequence: Sequence { typealias Foo; func generate() -&gt; SpecialGenerator; //... } extension Array: SpecialSequence { typealias Foo = T func generate() -&gt; SpecialGenerator { return SpecialGen(objs: self); } } </code></pre> <p>This compiles for me</p>