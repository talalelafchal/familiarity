What is a slice in Swift?
<p>What is a slice in Swift and how does it differ from an array?</p> <p>From the documentation, the type signature of subscript(Range) is:</p> <pre><code>subscript(Range&lt;Int&gt;) -&gt; Slice&lt;T&gt; </code></pre> <p>Why not return another <code>Array&lt;T&gt;</code> rather than a <code>Slice&lt;T&gt;</code>?</p> <p>It looks like I can concatenate a slice with an array:</p> <pre><code>var list = ["hello", "world"] var slice: Array&lt;String&gt; = [] + list[0..list.count] </code></pre> <p>But this yields the error:</p> <blockquote> <p>could not find an overload for 'subscript' that accepts the supplied arguments</p> </blockquote> <pre><code>var list = ["hello", "world"] var slice: Array&lt;String&gt; = list[0..list.count] </code></pre> <p>What is a slice?</p>
<p>The slice points into the array. No point making another array when the array already exists and the slice can just describe the desired part of it.</p> <p>The addition causes implicit coercion, so it works. To make your assignment work, <em>you</em> would need to coerce:</p> <pre><code>var list = ["hello", "world"] var slice: Array&lt;String&gt; = Array(list[0..&lt;list.count]) </code></pre>
<p><strong>Note:</strong> This answer is happily invalid as of Swift beta 3, since arrays are now true value types.</p> <hr> <p>@matt is correct, above - the <code>Slice&lt;T&gt;</code> points into the array. That seems contrary to the way Swift handles all the other data types we're working with, since it means the value of the slice can change even if it's declared as a constant:</p> <pre><code>var arr = ["hello", "world", "goodbye"] // ["hello", "world", "goodbye"] let slice = arr[0..2] // ["hello", "world"] arr[0] = "bonjour" println(slice) // ["bonjour", "world"] </code></pre> <p>The worst part is that the slice acts just like an array. Given that in Swift we have an expectation of immutability it seems dangerous that the subscripted values of the slice can change without warning:</p> <pre><code>println(slice[1]) // "world" arr[1] = "le monde" println(slice[1]) // "le monde" </code></pre> <p>But if the underlying array changes too drastically, they get unhooked:</p> <pre><code>arr.removeAtIndex(0) // this detaches slice from arr println(slice) // ["bonjour", "le monde"] arr[0] = "hola" println(slice) // ["bonjour", "le monde"] </code></pre>
<h3>Summary:</h3> <p>The answers above were true up until Beta 3 (and may change again in future releases)</p> <p>Slice now acts just like an array, but as @matt said above, is effectively a shallow copy to an array under the hood, until a change is made. Slices (now) see a snapshot of the original values,</p> <p>Also note that slice syntax has changed: </p> <pre><code>[from..upToButNotIncluding] -&gt; [from..&lt;upToButNotIncluding] </code></pre> <h3>Example:</h3> <pre><code>var arr = ["hello", "world", "goodbye"] // ["hello", "world", "goodbye"] var arrCopy = arr let slice = arr[0..&lt;2] // ["hello", "world"] arr[0] = "bonjour" arr // ["bonjour", "world", "goodbye"] arrCopy // ["hello", "world", "goodbye"] slice // ["hello", "world"] </code></pre> <p>This allows much more uniform processing, as it is simpler (IMHO) to do python style list processing - filtering one list to make another. per Matt's answer prior to Beta 3, you had to create a temporary array in order to map a slice. The new code is now simpler:</p> <pre><code>class NameNumber { var name:String = "" var number:Int = 0 init (name:String, number:Int) { self.name = name self.number = number } } var number = 1 let names = ["Alan", "Bob", "Cory", "David"] let foo = names[0..&lt;2].map { n in NameNumber(name:n, number:number++) } foo // [{name "Alan" number 1}, {name "Bob" number 2}] </code></pre> <p>(though to be fair, foo is still a slice)</p> <h3>Reference:</h3> <p><a href="http://adcdownload.apple.com//Developer_Tools/xcode_6_beta_3_lpw27r/xcode_6_beta_3_release_notes__.pdf">http://adcdownload.apple.com//Developer_Tools/xcode_6_beta_3_lpw27r/xcode_6_beta_3_release_notes__.pdf</a></p> <p>Important Changes, Issues Resolved, - Swift Language, Paragraph 1</p> <p>"Array in Swift has been completely redesigned to have full value semantics like Dictionary and String...m"</p>