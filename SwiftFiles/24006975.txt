Why create &quot;Implicitly Unwrapped Optionals&quot;?
<p>Why would you create a "Implicitly Unwrapped Optional" vs creating just a regular variable or constant. If you know that it can be successfully unwrapped then why create an optional in the first place? For example, why is this: </p> <pre><code>let someString : String! = "this is the string" </code></pre> <p>going to be more useful vs: </p> <pre><code>let someString : String = "this is the string" </code></pre> <p>If <code>“optional indicate that a constant or variable is allowed to have 'no value'”</code>, but <code>“sometimes it is clear from a program’s structure that an optional will always have a value after that value is first set”</code>, what is the point of making it an optional in the first place? If you know an optional is always going to have a value... Doesn't that make it.... not optional?</p>
<p>Consider the case of an object that may have nil properties while it's being constructed and configured, but is immutable and non-nil afterwards (NSImage is often treated this way, though in its case it's still useful to mutate sometimes). Implicitly unwrapped optionals would clean up its code a good deal, with relatively low loss of safety (as long as the one guarantee held, it would be safe). </p> <p>(Edit) To be clear though: regular optionals are nearly always preferable.</p>
<p>One-line (or several-line) simple examples don't cover the behavior of optionals very well — yeah, if you declare a variable and provide it with a value right away, there's no point in an optional. </p> <p>The best case I've seen so far is setup that happens after object initialization, followed by use that's "guaranteed" to follow that setup, e.g. in a view controller:</p> <pre><code>class MyViewController: UIViewController { var screenSize: CGSize? override func viewDidLoad { super.viewDidLoad() screenSize = view.frame.size } @IBAction printSize(sender: UIButton) { println("Screen size: \(screenSize!)") } } </code></pre> <p>We know <code>printSize</code> will be called after the view is loaded — it's an action method hooked up to a control inside that view, and we made sure not to call it otherwise. So we can save ourselves some optional-checking/binding with the <code>!</code>. Swift can't recognize that guarantee (at least until Apple solves the halting problem), so you tell the compiler it exists. </p> <p>This breaks type safety to some degree, though. Anyplace you have an implicitly unwrapped optional is a place your app can crash if your "guarantee" doesn't always hold, so it's a feature to use sparingly. Besides, using <code>!</code> all the time makes it sound like you're yelling, and nobody likes that.</p>
<p>Implicitly unwrapped optionals are useful for presenting a property as non-optional when really it needs to be optional under the covers. This is often necessary for "tying the knot" between two related objects that each need a reference to the other. It makes sense when neither reference is <em>actually</em> optional, but one of them needs to be nil while the pair is being initialized.</p> <p>For example:</p> <pre><code>// These classes are buddies that never go anywhere without each other class B { var name : String weak var myBuddyA : A! init(name : String) { self.name = name } } class A { var name : String var myBuddyB : B init(name : String) { self.name = name myBuddyB = B(name:"\(name)'s buddy B") myBuddyB.myBuddyA = self } } var a = A(name:"Big A") println(a.myBuddyB.name) // prints "Big A's buddy B" </code></pre> <p>Any <code>B</code> instance should always have a valid <code>myBuddyA</code> reference, so we don't want to make the user treat it as optional, but we need it to be optional so that we can construct a <code>B</code> before we have an <code>A</code> to refer to.</p> <p>HOWEVER! This sort of mutual reference requirement is often an indication of tight coupling and poor design. If you find yourself relying on implicitly unwrapped optionals you should probably consider refactoring to eliminate the cross-dependencies.</p>
<p>The rationale of implicit optionals is easier to explain by first looking at the rationale for forced unwrapping.</p> <p>Forced unwrapping of an optional (implicit or not), using the ! operator, means you're certain that your code has no bugs and the optional already has a value where it is being unwrapped. Without the ! operator, you would probably just assert with an optional binding:</p> <pre><code> if let value = optionalWhichTotallyHasAValue { println("\(value)") } else { assert(false) } </code></pre> <p>which is not as nice as</p> <pre><code>println("\(value!)") </code></pre> <p>Now, implicit optionals let you express having an optional which you expect to <em>always</em> to have a value when unwrapped, in all possible flows. So it just goes a step further in helping you - by relaxing the requirement of writing the ! to unwrap each time, and ensuring that the runtime will still error in case your assumptions about the flow are wrong.</p>
<p>Implicitly unwrapped optionals are pragmatic compromise to make the work in hybrid environment that has to interoperate with existing Cocoa frameworks and their conventions more pleasant, while also allowing for stepwise migration into safer programing paradigm — without null pointers — enforced by the Swift compiler.</p> <p><a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_436" rel="nofollow noreferrer">Swift book, in <em>The Basics</em> chapter, section <em>Implicitly Unwrapped Optionals</em></a> says:</p> <blockquote> <p>Implicitly unwrapped optionals are useful when an optional’s value is confirmed to exist immediately after the optional is first defined and can definitely be assumed to exist at every point thereafter. The primary use of implicitly unwrapped optionals in Swift is during class initialization, as described in <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-XID_60" rel="nofollow noreferrer">Unowned References and Implicitly Unwrapped Optional Properties</a>. <br/>… <br/> You can think of an implicitly unwrapped optional as giving permission for the optional to be unwrapped automatically whenever it is used. Rather than placing an exclamation mark after the optional’s name each time you use it, you place an exclamation mark after the optional’s type when you declare it.</p> </blockquote> <p>This comes down to use cases where the <em>non-<code>nil</code>-ness</em> of properties is established via usage convention, and can not be enforced by compiler during the class initialization. For example, the <code>UIViewController</code> properties that are initialized from NIBs or Storyboards, where the initialization is split into separate phases, but after the <code>viewDidLoad()</code> you can assume that properties generally exist. Otherwise, in order to satisfy the compiler, you had to be using the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_430" rel="nofollow noreferrer">forced unwrapping</a>, <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_432" rel="nofollow noreferrer">optional binding</a> or <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-XID_312" rel="nofollow noreferrer">optional chaining</a> only to obscure the main purpose of the code.</p> <p>Above part from the Swift book refers also to the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-XID_60" rel="nofollow noreferrer"><em>Automatic Reference Counting</em> chapter</a>:</p> <blockquote> <p>However, there is a third scenario, in which both properties should always have a value, and neither property should ever be <code>nil</code> once initialization is complete. In this scenario, it is useful to combine an unowned property on one class with an implicitly unwrapped optional property on the other class.</p> <p>This enables both properties to be accessed directly (without optional unwrapping) once initialization is complete, while still avoiding a reference cycle. </p> </blockquote> <p>This comes down to the quirks of not being a garbage collected language, therefore the breaking of retain cycles is on you as a programmer and implicitly unwrapped optionals are a tool to hide this quirk.</p> <p>That covers the “When to use implicitly unwrapped optionals in your code?” question. As an application developer, you’ll mostly encounter them in method signatures of libraries written in Objective-C, which doesn’t have the ability to express optional types.</p> <p>From <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_31" rel="nofollow noreferrer">Using Swift with Cocoa and Objective-C, section <em>Working with nil</em></a>:</p> <blockquote> <p>Because Objective-C does not make any guarantees that an object is non-nil, Swift makes all classes in argument types and return types optional in imported Objective-C APIs. Before you use an Objective-C object, you should check to ensure that it is not missing.</p> <p>In some cases, you might be <em>absolutely</em> certain that an Objective-C method or property never returns a <code>nil</code> object reference. To make objects in this special scenario more convenient to work with, Swift imports object types as <em>implicitly unwrapped optionals</em>. Implicitly unwrapped optional types include all of the safety features of optional types. In addition, you can access the value directly without checking for <code>nil</code> or unwrapping it yourself. When you access the value in this kind of optional type without safely unwrapping it first, the implicitly unwrapped optional checks whether the value is missing. If the value is missing, a runtime error occurs. As a result, you should always check and unwrap an implicitly unwrapped optional yourself, unless you are sure that the value cannot be missing.</p> </blockquote> <p>...and beyond here lay <img src="https://i.stack.imgur.com/mdCqJ.png" alt="dragons"></p>
<p>Before I can describe the use cases for Implicitly Unwrapped Optionals, you should already understand what Optionals and Implicitly Unwrapped Optionals are in Swift. If you do not, I recommend you first read <a href="http://www.drewag.me/posts/what-is-an-optional-in-swift">my article on optionals</a></p> <h1>When To Use An Implicitly Unwrapped Optional</h1> <p>There are four main reasons that one would create an Implicitly Unwrapped Optional. All have to do with defining a variable that will never be accessed when <code>nil</code> because otherwise, the Swift compiler will always force you to explicitly unwrap an Optional.</p> <h2>1. A Constant That Cannot Be Defined During Initialization</h2> <p>Every member constant must have a value by the time initialization is complete. Sometimes, a constant cannot be initialized with its correct value during initialization, but it can still be guaranteed to have a value before being accessed.</p> <p>Using an Optional variable gets around this issue because an Optional is automatically initialized with <code>nil</code> and the value it will eventually contain will still be immutable. However, it can be a pain to be constantly unwrapping a variable that you know for sure is not nil. Implicitly Unwrapped Optionals achieve the same benefits as an Optional with the added benefit that one does not have to explicitly unwrap it everywhere.</p> <p>A great example of this is when a member variable cannot be initialized in a UIView subclass until the view is loaded:</p> <pre><code>class MyView : UIView { @IBOutlet var button : UIButton! var buttonOriginalWidth : CGFloat! override func awakeFromNib() { self.buttonOriginalWidth = self.button.frame.size.width } } </code></pre> <p>Here, you cannot calculate the original width of the button until the view loads, but you know that <code>viewDidLoad</code> will be called before any other method on the view (other than initialization). Instead of forcing the value to be explicitly unwrapped pointlessly all over your class, you can declare it as an Implicitly Unwrapped Optional.</p> <h2>2. Interacting with an Objective-C API</h2> <p>Every reference to an object in Objective-C is a pointer, which means that it can be <code>nil</code>. That means, that every interaction with an Objective-C API from Swift must use an optional where there is a reference to an object. You could use a normal Optional in every one of these cases, but if you know for sure that the reference will not be <code>nil</code>, you can save yourself unwrapping code by declaring it as an Implicitly Unwrapped Optional.</p> <p>A good example of this is a <code>UITableViewDataSource</code>:</p> <pre><code>override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell? { return nil } </code></pre> <p>Here, you know that the method will never be called without a <code>tableView</code> or <code>indexPath</code>. It would be a waste of time to check it for <code>nil</code>. If this were a purely Swift API, one would not declare it as an Optional at all.</p> <h2>3. When Your App Cannot Recover From a Variable Being <code>nil</code></h2> <p>This should be extremely rare, but if your app could literally not continue to run if a variable is <code>nil</code> when accessed, it would be a waste of time to bother testing it for <code>nil</code>. Normally if you have a condition that must absolutely be true for your app to continue running, you would use an <code>assert</code>. An Implicitly Unwrapped Optional has an assert for nil built right into it.</p> <h2>4. NSObject Initializers</h2> <p>Apple does have at least one strange case of Implicitly Unwrapped Optionals. Technically, all initializers from classes that inherit from <code>NSObject</code> return Implicitly Unwrapped Optionals. This is because initialization in Objective-C can return <code>nil</code>. That means, in some cases, that you will still want to be able to test the result of initialization for <code>nil</code>. A perfect example of this is with <code>UIImage</code> if the image does not exist:</p> <pre><code>var image : UIImage? = UIImage(named: "NonExistentImage") if image != nil { println("image exists") } else { println("image does not exist") } </code></pre> <p>If you think there is a chance that your image does not exist and you can gracefully handle that scenario, you can declare the variable capturing the initialization explicitly as an Optional so that you can check it for <code>nil</code>. You could also use an Implicitly Unwrapped Optional here, but since you are planning to check it anyway, it is better to use a normal Optional.</p> <h1>When Not To Use An Implicitly Unwrapped Optional</h1> <h2>1. Lazily Calculated Member Variables</h2> <p>Sometimes you have a member variable that should never be nil, but it cannot be set to the correct value during initialization. One solution is to use an Implicitly Unwrapped Optional, but a better way is to use a lazy variable:</p> <pre><code>class FileSystemItem { } class Directory : FileSystemItem { lazy var contents : [FileSystemItem] = { var loadedContents = [FileSystemItem]() // load contents and append to loadedContents return loadedContents }() } </code></pre> <p>Now, the member variable <code>contents</code> is not initialized until the first time it is accessed. This gives the class a chance to get into the correct state before calculating the initial value.</p> <p><strong>Note:</strong> This may seem to contradict #1 from above. However, there is an important distinction to be made. The <code>buttonOriginalWidth</code> above must be set during viewDidLoad to prevent anyone changing the buttons width before the property is accessed.</p> <h2>2. Everywhere Else</h2> <p>For the most part, Implicitly Unwrapped Optionals should be avoided because if used mistakenly, your entire app will crash when it is accessed while <code>nil</code>. If you are ever not sure about whether a variable can be nil, always default to using a normal Optional. Unwrapping a variable that is never <code>nil</code> certainly doesn't hurt very much.</p>
<p>I think forced unwrapping are considered as evil for no reason.</p> <p>Forced unwrapping optionals are much better than dealing with silent failures. If you think a value should never be nil, force unwrap it, as it will provide a nil check during the runtime. Its similar to NSParameterAssert() in objectiveC.</p> <p>I would rather prefer fastFail than dealing with the silent failures due to <code>if let</code></p>
<p>Apple gives a great example in <em>The Swift Programming Language</em> -> <strong>Automatic Reference Counting</strong> -> <strong>Resolving Strong Reference Cycles Between Class Instances</strong> -> <strong>Unowned References and Implicitly Unwrapped Optional Properties</strong></p> <pre><code>class Country { let name: String var capitalCity: City! // Apple finally correct this line until 2.0 Prerelease (let -&gt; var) init(name: String, capitalName: String) { self.name = name self.capitalCity = City(name: capitalName, country: self) } } class City { let name: String unowned let country: Country init(name: String, country: Country) { self.name = name self.country = country } } </code></pre> <blockquote> <p>The initializer for <code>City</code> is called from within the initializer for <code>Country</code>. However, the initializer for <code>Country</code> cannot pass <code>self</code> to the <code>City</code> initializer until a new <code>Country</code> instance is fully initialized, as described in <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID220">Two-Phase Initialization</a>. </p> <p>To cope with this requirement, you declare the <code>capitalCity</code> property of <code>Country</code> as an implicitly unwrapped optional property.</p> </blockquote>