Making RGB color in xcode
<p>I am using RGB values of a color from photo shop and using the same in xcode the values are.Color-R-160,G-97,B-5...the color in photoshop appears yellowish but in xcode when i used</p> <pre><code>myLabel.textColor= [UIColor colorWithRed:160 green:97 blue:5 alpha:1] ; </code></pre> <p>the color appears whitish.</p> <p>Why this difference is happening? </p>
<h2>Objective-C</h2> <p>You have to give the values between 0 and 1.0. So divide the RGB values by 255.</p> <pre><code>myLabel.textColor= [UIColor colorWithRed:(160/255.0) green:(97/255.0) blue:(5/255.0) alpha:1] ; </code></pre> <p><strong>Update:</strong></p> <p>You can also use this macro</p> <pre><code>#define Rgb2UIColor(r, g, b) [UIColor colorWithRed:((r) / 255.0) green:((g) / 255.0) blue:((b) / 255.0) alpha:1.0] </code></pre> <p>and you can call in any of your class like this</p> <pre><code> myLabel.textColor = Rgb2UIColor(160, 97, 5); </code></pre> <h2>Swift</h2> <p>This is the normal color synax</p> <pre><code>myLabel.textColor = UIColor(red: (160/255.0), green: (97/255.0), blue: (5/255.0), alpha: 1.0) //The values should be between 0 to 1 </code></pre> <p>Swift is not much friendly with macros</p> <blockquote> <p>Complex macros are used in C and Objective-C but have no counterpart in Swift. Complex macros are macros that do not define constants, including parenthesized, function-like macros. You use complex macros in C and Objective-C to avoid type-checking constraints or to avoid retyping large amounts of boilerplate code. However, macros can make debugging and refactoring difficult. In Swift, you can use functions and generics to achieve the same results without any compromises. Therefore, the complex macros that are in C and Objective-C source files are not made available to your Swift code.</p> </blockquote> <p>So we use extension for this</p> <pre><code>extension UIColor { convenience init(_ r: Double,_ g: Double,_ b: Double,_ a: Double) { self.init(red: r/255, green: g/255, blue: b/255, alpha: a) } } </code></pre> <p>You can use it like</p> <pre><code>myLabel.textColor = UIColor(160.0, 97.0, 5.0, 1.0) </code></pre>
<p>Yeah.ios supports RGB valur to range between 0 and 1 only..its close Range [0,1]</p>
<p>You already got the right answer, but if you dislike the <code>UIColor</code> interface like me, you can do this:</p> <pre><code>#import "UIColor+Helper.h" // ... myLabel.textColor = [UIColor colorWithRGBA:0xA06105FF]; </code></pre> <p>UIColor+Helper.h:</p> <pre><code>#import &lt;UIKit/UIKit.h&gt; @interface UIColor (Helper) + (UIColor *)colorWithRGBA:(NSUInteger)color; @end </code></pre> <p>UIColor+Helper.m:</p> <pre><code>#import "UIColor+Helper.h" @implementation UIColor (Helper) + (UIColor *)colorWithRGBA:(NSUInteger)color { return [UIColor colorWithRed:((color &gt;&gt; 24) &amp; 0xFF) / 255.0f green:((color &gt;&gt; 16) &amp; 0xFF) / 255.0f blue:((color &gt;&gt; 8) &amp; 0xFF) / 255.0f alpha:((color) &amp; 0xFF) / 255.0f]; } @end </code></pre>
<p>The values are determined by the bit of the image. 8 bit 0 to 255</p> <p>16 bit...some ridiculous number..0 to 65,000 approx.</p> <p>32 bit are 0 to 1</p> <p>I use .004 with 32 bit images...this gives 1.02 as a result when multiplied by 255</p>
<p><strong>Color picker plugin for Interface Builder</strong></p> <p>There's a nice color picker from Panic which works well with IB: <a href="http://panic.com/~wade/picker/" rel="nofollow">http://panic.com/~wade/picker/</a></p> <p><strong>Xcode plugin</strong></p> <p>This one gives you a GUI for choosing colors: <a href="http://www.youtube.com/watch?v=eblRfDQM0Go" rel="nofollow">http://www.youtube.com/watch?v=eblRfDQM0Go</a></p> <p><strong>Code</strong></p> <pre><code>UIColor *color = [UIColor colorWithRed:(160/255.0) green:(97/255.0) blue:(5/255.0) alpha:1.0]; </code></pre> <p><strong>Pods and libraries</strong></p> <p>There's a nice pod named <code>MPColorTools</code>: <a href="https://github.com/marzapower/MPColorTools" rel="nofollow">https://github.com/marzapower/MPColorTools</a></p>