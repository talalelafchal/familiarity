Swift define double pointer for struct defined in c
<p>I have a library which contains function like this</p> <pre><code>void create_pointer(Pointer **pointer); </code></pre> <p>it takes a pointer's pointer and allocate memory for it. in c, I can do it like this</p> <pre><code>Pointer *pointer; create_pointer(&amp;pointer); </code></pre> <p>then I have a pointer's instance.</p> <p>But now I want to use this function in Swift, How ?</p> <p>I have no details about Pointer, only the know it's a struct, defined like this</p> <pre><code>typedef struct Pointer Pointer; </code></pre>
<p>Let's start with a C example</p> <pre><code>typedef struct { NSUInteger someNumber; } SomeStruct; void create_some_struct(SomeStruct **someStruct) { *someStruct = malloc(sizeof(SomeStruct)); (*someStruct)-&gt;someNumber = 20; } </code></pre> <p>In C, you would use it like this:</p> <pre><code>//pointer to our struct, initially empty SomeStruct *s = NULL; //calling the function create_some_struct(&amp;s); </code></pre> <p>In Swift:</p> <pre><code>//declaring a pointer is simple var s: UnsafePointer&lt;SomeStruct&gt; = UnsafePointer&lt;SomeStruct&gt;.null() //well, this seems to be almost the same thing :) create_some_struct(&amp;s) println("Number: \(s.memory.someNumber)"); //prints 20 </code></pre> <p><b>Edit:</b></p> <p>If your pointer is an opaque type (e.g. <code>void *</code>), you have to use</p> <pre><code>var pointer: COpaquePointer = COpaquePointer.null() </code></pre> <p>Note that Swift is not designed to interact with C code easily. C code is mostly unsafe and Swift is designed for safety, that's why the Swift code is a bit complicated to write. Obj-C wrappers for C libraries make the task much easier.</p>