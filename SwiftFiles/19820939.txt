Setting up UIScrollView to swipe between 3 view controllers
<p>I am trying to set up a UIScrollView so that I can swipe between my 3 view controllers. This is my code in AppDelegate.m:</p> <pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]]; // Override point for customization after application launch.; UIScrollView *sv = [[UIScrollView alloc] init]; BarsViewController *bvc = [[BarsViewController alloc] init]; // Create BarsViewController StopwatchViewController *svc = [[StopwatchViewController alloc] init]; // Create StopwatchViewController TimerViewController *tvc = [[TimerViewController alloc] init]; // Create TimerViewController [sv addSubview:bvc.view]; [sv addSubview:svc.view]; [sv addSubview:tvc.view]; [[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationFade]; // Hide status bar self.window.rootViewController = sv; [self.window makeKeyAndVisible]; return YES; } </code></pre> <p>It gives an error on this line:</p> <pre><code>self.window.rootViewController = sv; </code></pre> <p>saying, "Incompatible pointer types assigning to 'UIViewController *' from UIScrollView *'".</p> <p>However, there is no such thing as a UIScrollViewController, so I don't know what to do.</p> <p>Basically, I just want the whole screen to be a scroll view which allows me to swipe between my 3 view controllers. How would I go about doing that?</p>
<p><strong>UPD: June, 2015</strong> <strong>Swift</strong></p> <p>The concept remains the same, which is described below in Objective-C section. There is a little change in syntax. To add childviewcontroller use following snippet:</p> <pre><code>let aViewController = storyboard.instantiateViewControllerWithIdentifier("A") as! AViewController; addChildViewController(aViewController); scrollView!.addSubview(aViewController.view) aViewController.didMoveToParentViewController(self) </code></pre> <p>Check my <a href="https://github.com/gneil90/CustomScrollContainer" rel="nofollow noreferrer">Swift Github Sample Code</a></p> <p><strong>Objective-C</strong></p> <p>Create your own custom container view controller (I will call it combinedViewController), which will hold your three controllers in scroll view. Inherit like you always do UIViewController, then use addChildViewController public API in your new combinedViewController <code>-viewDidLoad:</code> like this:</p> <pre><code>[self addChildViewController:aViewController]; [self.scrollView addSubview:aViewController.view]; [aViewController didMoveToParentViewController:self]; </code></pre> <p>Here’s what the code does:</p> <ul> <li>It calls the container’s addChildViewController: method to add the child.</li> <li>It accesses the child’s view property to retrieve the view and adds it to its own view hierarchy. The container sets the child’s size and position before adding the view; containers always choose where the child’s content appears.</li> <li>It explicitly calls the child’s didMoveToParentViewController: method to signal that the operation is complete.</li> </ul> <p>Do this operation with each of your viewControllers. Afterwards, set your combinedViewController as a rootViewController. </p> <p>if you need further explanation, feel free to ask.</p> <p>Reference: <a href="https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/CreatingCustomContainerViewControllers/CreatingCustomContainerViewControllers.html#//apple_ref/doc/uid/TP40007457-CH18-SW6" rel="nofollow noreferrer">Design custom container view controller</a></p> <p>Here you are my <a href="https://github.com/gneil90/CustomContainerViewController" rel="nofollow noreferrer">Objective-C Github sample code</a></p> <p><strong>UPD:</strong> Thanks @Oliver Atkinson for clarifying that <code>addChildViewController:</code> method also calls the child’s <code>willMoveToParentViewController:</code> method automatically. </p> <p><strong>Results:</strong></p> <p><a href="https://i.stack.imgur.com/PrjPZ.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/PrjPZ.gif" alt="enter image description here"></a></p>
<p>Try this git repo, Using this repo you can create a view navigation like Snapchat/Tinder Main Pages.</p> <p><a href="https://github.com/goktugyil/EZSwipeController" rel="nofollow">https://github.com/goktugyil/EZSwipeController</a></p>
<pre><code> let obj1 = self.storyboard?.instantiateViewControllerWithIdentifier("DocumentsVC") as! DocumentsVC let obj2 = self.storyboard?.instantiateViewControllerWithIdentifier("AppointmentsVC") as! AppointmentsVC let obj3 = self.storyboard?.instantiateViewControllerWithIdentifier("DashboardVC") as! DashboardVC self.containerScrollView.frame = obj2.view.frame self.containerScrollView.addSubview(obj2.view) obj2.willMoveToParentViewController(self) self.addChildViewController(obj2) self.containerScrollView.addSubview(obj1.view) obj1.willMoveToParentViewController(self) self.addChildViewController(obj1) self.containerScrollView.addSubview(obj3.view) obj3.willMoveToParentViewController(self) self.addChildViewController(obj3) self.containerScrollView.contentSize = CGSizeMake(3*UIScreen.mainScreen().bounds.width, 0) obj1.view.frame.origin = CGPointMake(0, 0) obj2.view.frame.origin = CGPointMake(UIScreen.mainScreen().bounds.width, 0) obj3.view.frame.origin = CGPointMake(2*UIScreen.mainScreen().bounds.width, 0) </code></pre>
<p><strong>Swift 3.0</strong></p> <p>Based on Sachin answer - bit more generic - just add next element to views array</p> <pre><code>var views = [ViewController(), ViewController2(), ViewController3(), ViewController4()] func setupScrollView() { scrollView.frame = views.first!.view.frame scrollView.contentSize = CGSize(width: CGFloat(views.count) * width, height: 0) _ = views.map({ addViewToScrollView($0) }) _ = views.map({ $0.view.frame.origin = CGPoint(x: CGFloat(views.index(of: $0)!) * width, y: 0) }) } func addViewToScrollView(_ viewController: UIViewController) { scrollView.addSubview(viewController.view) views.willMove(toParentViewController: self) addChildViewController(viewController) } </code></pre>