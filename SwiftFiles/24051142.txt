Pattern variable binding cannot appear in an expression
<p>I've been looking at The Swift Programming Language guide provided by apple. Following sample is from the book:</p> <pre><code>class HTMLElement { let name :String; let text: String?; @lazy var asHTML : () -&gt; String = { if let text = self.text { return "&lt;\(self.name)&gt;\(self.text)&lt;/\(self.name)&gt;"; } else { return "&lt;\(self.name) /&gt;" } } } </code></pre> <p>I incorrectly wrote the closure as follow:</p> <pre><code> @lazy var asHTML : () -&gt; String = { if (let text = self.text) { return "&lt;\(self.name)&gt;\(self.text)&lt;/\(self.name)&gt;"; } else { return "&lt;\(self.name) /&gt;" } } </code></pre> <p>Notice the parentheses around <code>let text = self.text</code> and compiler complain about: </p> <blockquote> <p>Pattern variable binding cannot appear in an expression</p> </blockquote> <p>Just wondering what does <code>Pattern Variable Binding</code> mean, and why it cannot appear in an expression?</p>
<p>A "pattern variable binding" is the thing you're doing, i.e. using <code>let</code> in the middle of some code, not at the top level of a file or enum or struct or class as a way of declaring a constant variable.</p> <p>What makes it an expression is the parentheses. You've cut the "let" expression off from its surroundings and asked for evaluation of it as an expression separately. But you can't do that: you can't say "let" just anywhere.</p> <p>Another way of looking at it is simply this: <code>if let</code> is a fixed meaningful pattern, where the condition is an Optional being evaluated into a constant for use inside the if-code. The parenthesis broke up the pattern.</p> <p>The pattern is called a binding because you're defining this name very temporarily and locally, i.e. solely down into the if-code. I think it goes back to LISP (at least, that's where I've used "let" this way in the past).</p>