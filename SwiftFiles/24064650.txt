How to pass multiple enum values as a function parameter
<p>How would I do the following - passing two NSStringDrawing options as a function parameter in swift:</p> <pre><code>CGRect boundingRect = [string boundingRectWithSize:CGSizeMake(280.0, NSIntegerMax) options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:options context:nil]; </code></pre>
<p>Swift supports C's bitwise OR operator, but the enum's values are now in a specific scope instead of simply being global symbols:</p> <pre><code>let boundingRect = "fpp".boundingRectWithSize(CGSizeMake(280.0, CGFloat.max), options:NSStringDrawingOptions.UsesLineFragmentOrigin | NSStringDrawingOptions.UsesFontLeading, attributes:nil, context:nil) </code></pre>
<p>Edit: <strong>This is how you would use the options enum in Swift 2.0</strong>:</p> <pre><code>let options: NSStringDrawingOptions = [.UsesLineFragmentOrigin, .UsesFontLeading] </code></pre> <hr> <p>Edit: <strong>The issue <a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/iOS83APIDiffs/modules/UIKit.html">has been resolved in iOS 8.3 SDK Beta 1 (12F5027d)</a></strong>:</p> <blockquote> <p><strong>Modified <code>NSStringDrawingOptions</code> [struct]</strong></p> <ul> <li>From: <code>enum NSStringDrawingOptions : Int</code></li> <li>To: <code>struct NSStringDrawingOptions : RawOptionSetType</code></li> </ul> </blockquote> <p>You can now write:</p> <pre><code>let options : NSStringDrawingOptions = .UsesLineFragmentOrigin | .UsesFontLeading </code></pre> <hr> <p>After some research and and @Anton Tcholakov's "comment":</p> <ol> <li><p>If you're targeting OS X 10.10, this is as simple way to do it:</p> <pre><code>let size = CGSize(width: 280, height: Int.max) let options : NSStringDrawingOptions = .UsesLineFragmentOrigin | .UsesFontLeading let boundingRect = string.bridgeToObjectiveC().boundingRectWithSize(size, options: options, attributes: attributes, context: nil) </code></pre></li> <li><p>However, in iOS 8 SDK (in the current seed), there's a bug, where <code>NSStringDrawingOptions</code> is ported to Swift as <code>enum : Int</code>, instead of <code>struct : RawOptionSet</code>. You should send a bug report to Apple describing this serious problem.</p></li> </ol>
<p>Can't seem to comment to akashivskyy's post (not got 50+ reputation), but this seems to work on my end:</p> <pre><code>import Cocoa let drawingOpts : NSStringDrawingOptions = .UsesLineFragmentOrigin | .UsesFontLeading let boundingRect = "test".bridgeToObjectiveC().boundingRectWithSize(CGSize(width: 280, height: Int.max), options: drawingOpts, attributes: nil) </code></pre> <p>Also if I Cmd+click NSStringDrawingOptions I see it as inheriting from RawOptionSet.</p>
<p><strong>Updated answer for Xcode 6.3:</strong></p> <p>in Xcode 6.3 Beta (Swift 1.2) this is finally fixed, you can do it now like this:</p> <pre><code>let boundingRect = "string".boundingRectWithSize(size, options: .UsesLineFragmentOrigin | .UsesFontLeading, attributes:nil, context:nil) </code></pre> <p><strong>For old version:</strong></p> <p>It looks like a bug in current beta, for now I write Objective-C method and use it from Swift:</p> <pre><code>+ (NSStringDrawingOptions)combine:(NSStringDrawingOptions)option1 with:(NSStringDrawingOptions)option2 { return option1 | option2; } </code></pre> <p>and call form Swift:</p> <pre><code>let boundingRect = "string".boundingRectWithSize(size, options: StringDrawingOptions.combine(.UsesLineFragmentOrigin, with: .UsesFontLeading), attributes:nil, context:nil) </code></pre>
<p>Another solution, use <code>unsafeBitCast</code>.</p> <p>Like below:</p> <pre><code>let options = unsafeBitCast(NSStringDrawingOptions.UsesLineFragmentOrigin.rawValue | NSStringDrawingOptions.UsesFontLeading.rawValue, NSStringDrawingOptions.self) </code></pre>
<p>in swift 2.0 that will be something like</p> <pre><code>theStringDrawingOptions = [NSStringDrawingOptions.UsesLineFragmentOrigin, NSStringDrawingOptions.UsesFontLeading] </code></pre> <p>see lecture wwdc 2015 -> 106_hd_whats_new_in_swift in 6 min</p>
<p>In Swift 2.1 we may use, </p> <pre><code>calculatedRect = (text as NSString).boundingRectWithSize(bounds.size, options: NSStringDrawingOptions([.UsesLineFragmentOrigin, .UsesFontLeading]), attributes: [NSFontAttributeName : font], context: nil) </code></pre> <p>to pass multiple enum values for a parameter.</p>