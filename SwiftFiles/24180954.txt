How to hide keyboard in swift on pressing return key?
<p>I am using <code>UITextfied</code> while clicking on textfied keyboard appear but when i pressed the return key, keyboard is not disappearing.I used the following code.</p> <pre><code>func textFieldShouldReturn(textField: UITextField!) -&gt; Bool // called when 'return' key pressed. return NO to ignore. { return true; } </code></pre> <p>the method resignfirstresponder is not getting in function.</p>
<p>The return true part of this only tells the text field whether or not it is allowed to return. You have to manually tell the text field to dismiss the keyboard (or what ever its first responder is), and this is done through a call to resignFirstResponder().</p> <pre><code>func textFieldShouldReturn(textField: UITextField) -&gt; Bool // called when 'return' key pressed. return false to ignore. { textField.resignFirstResponder() return true } </code></pre>
<p>You can make the app dismiss the keyboard using the following function</p> <pre><code> func textFieldShouldReturn(textField: UITextField) -&gt; Bool { self.view.endEditing(true) return false } </code></pre> <p>Here is a full example to better illustrate that:</p> <pre><code>// // ViewController.swift // // import UIKit class ViewController: UIViewController, UITextFieldDelegate { @IBOutlet var myTextField : UITextField override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. self.myTextField.delegate = self; } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } func textFieldShouldReturn(textField: UITextField) -&gt; Bool { self.view.endEditing(true) return false } } </code></pre> <p>Code source: <a href="http://www.snip2code.com/Snippet/85930/swift-delegate-sample">http://www.snip2code.com/Snippet/85930/swift-delegate-sample</a></p>
<p>@RSC</p> <p>for me the critical addition in Xcode Version 6.2 (6C86e) is in <code>override func viewDidLoad()</code></p> <pre><code> self.input.delegate = self; </code></pre> <p>Tried getting it to work with the return key for hours till I found your post, RSC. Thank you!</p> <p>Also, if you want to hide the keyboard if you touch anywhere else on the screen:</p> <p><code>override func touchesBegan(touches: NSSet, withEvent event: UIEvent) { self.view.endEditing(true); }</code></p>
<p>I would sugest to init the Class from RSC:</p> <pre><code>import Foundation import UIKit // Don't forget the delegate! class ViewController: UIViewController, UITextFieldDelegate { required init(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } @IBOutlet var myTextField : UITextField? override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. self.myTextField.delegate = self; } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } func textFieldShouldReturn(textField: UITextField!) -&gt; Bool { self.view.endEditing(true); return false; } </code></pre> <p>}</p>
<p>To get automatic keyboard dismissal, I put this code inside one of the methods of my custom text field's class:</p> <pre><code>textField.addTarget(nil, action:"firstResponderAction:", forControlEvents:.EditingDidEndOnExit) </code></pre> <p>Substitute your outlet's name for <code>textField</code>.</p>
<ul> <li><p>Add <code>UITextFieldDelegate</code> to the class declaration:</p> <pre><code>class ViewController: UIViewController, UITextFieldDelegate </code></pre></li> <li><p>Connect the <code>textfield</code> or write it programmatically</p> <pre><code>@IBOutlet weak var userText: UITextField! </code></pre></li> <li><p>set your view controller as the text fields delegate in view did load:</p> <pre><code>override func viewDidLoad() { super.viewDidLoad() self.userText.delegate = self } </code></pre></li> <li><p>Add the following function</p> <pre><code>func textFieldShouldReturn(userText: UITextField!) -&gt; Bool { userText.resignFirstResponder() return true; } </code></pre> <p>with all this your keyboard will begin to dismiss by touching outside the textfield aswell as by pressing return key.</p></li> </ul>
<p>Another way of doing this which mostly uses the storyboard and easily allows you to have multiple text fields is:</p> <pre><code>@IBAction func resignKeyboard(sender: AnyObject) { sender.resignFirstResponder() } </code></pre> <p>Connect all your text fields for that view controller to that action on the <code>Did End On Exit</code> event of each field.</p>
<p>When the user taps the Done button on the text keyboard, a Did End On Exit event will be generated; at that time, we need to tell the text field to give up control so that the keyboard will go away. In order to do that, we need to add an action method to our controller class. Select ViewController.swift add the following action method:</p> <pre><code>@IBAction func textFieldDoneEditing(sender: UITextField) { sender.resignFirstResponder()} </code></pre> <p>Select Main.storyboard in the Project Navigator and bring up the connections inspector. Drag from the circle next to Did End On Exit to the yellow View Controller icon in the storyboard and let go. A small pop-up menu will appear containing the name of a single action, the one we just added. Click the textFieldDoneEditing action to select it and that's it.</p>
<p>Make sure that your textField delegate is set to the view controller from which you are writing your textfield related code in.</p> <pre><code>self.textField.delegate = self </code></pre>
<p>Swift 3</p> <p>Add this code below to your VC</p> <pre><code>//hide keyboard when user tapps on return key on the keyboard func textFieldShouldReturn(_ textField: UITextField) -&gt; Bool { self.view.endEditing(true); return false; } </code></pre> <p>Works for me</p>
<p>Simple Swift 3 Solution: Add this function to your view controllers that feature a text field:</p> <pre><code>@IBAction func textField(_ sender: AnyObject) { self.view.endEditing(true); } </code></pre> <p>Then open up your assistant editor and ensure both your Main.storyboard is on one side of your view and the desired view controller.swift file is on the other. Click on a text field and then select from the right hand side utilities panel 'Show the Connection Inspector' tab. Control drag from the 'Did End on Exit' to the above function in your swift file. Repeat for any other textfield in that scene and link to the same function.</p>
<p>Here's the Swift 3.0 update to peacetype's comment:</p> <pre><code>textField.addTarget(nil, action:Selector(("firstResponderAction:")), for:.editingDidEndOnExit) </code></pre>