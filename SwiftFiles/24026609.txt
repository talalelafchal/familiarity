Detect a Null value in NSDictionary
<p>I have an <code>NSDictionary</code> that's populated from a JSON response from an API server. Sometimes the values for a key in this dictionary are <code>Null</code></p> <p>I am trying to take the given value and drop it into the detail text of a table cell for display. </p> <p>The problem is that when I try to coerce the value into an <code>NSString</code> I get a crash, which I <em>think</em> is because I'm trying to coerce <code>Null</code> into a string.</p> <p>What's the right way to do this?</p> <p>What I want to do is something like this:</p> <pre><code>cell.detailTextLabel.text = sensor.objectForKey( "latestValue" ) as NSString </code></pre> <p>Here's an example of the Dictionary:</p> <pre><code>Printing description of sensor: { "created_at" = "2012-10-10T22:19:50.501-07:00"; desc = "&lt;null&gt;"; id = 2; "latest_value" = "&lt;null&gt;"; name = "AC Vent Temp"; "sensor_type" = temp; slug = "ac-vent-temp"; "updated_at" = "2013-11-17T15:34:27.495-07:00"; } </code></pre> <p>If I just need to wrap all of this in a conditional, that's fine. I just haven't been able to figure out what that conditional is. Back in the Objective-C world I would compare against <code>[NSNull null]</code> but that doesn't seem to be working in Swift.</p>
<p>You can use the <code>as?</code> operator, which returns an optional value (<code>nil</code> if the downcast fails)</p> <pre><code>if let latestValue = sensor["latestValue"] as? String { cell.detailTextLabel.text = latestValue } </code></pre> <p>I tested this example in a swift application</p> <pre><code>let x: AnyObject = NSNull() if let y = x as? String { println("I should never be printed: \(y)") } else { println("Yay") } </code></pre> <p>and it correctly prints <code>"Yay"</code>, whereas</p> <pre><code>let x: AnyObject = "hello!" if let y = x as? String { println(y) } else { println("I should never be printed") } </code></pre> <p>prints <code>"hello!"</code> as expected.</p>
<p>I had a very similar problem and solved it with casting to the correct type of the original NSDictionary value. If your service returns a mixed type JSON object like this </p> <pre><code>{"id":2, "name":"AC Vent Temp", ...} </code></pre> <p>you'll have to fetch it's values like that.</p> <pre><code>var id:int = sensor.valueForKey("id") as Int; var name:String? = sensor.valueForKey("name") as String; </code></pre> <p>This did solve my problem. See <a href="http://stackoverflow.com/questions/24040691/bad-instruction-within-swift-closure">BAD_INSTRUCTION within swift closure</a></p>
<p>NSNull is a class like any other. Thus you can use <code>is</code> or <code>as</code> to test an AnyObject reference against it.</p> <p>Thus, here in one of my apps I have an NSArray where every entry is either a Card or NSNull (because you can't put nil in an NSArray). I fetch the NSArray as an Array and cycle through it, switching on which kind of object I get:</p> <pre><code>for card:AnyObject in arr { switch card { // how to test for different possible types case let card as NSNull: // do one thing case let card as Card: // do a different thing default: fatalError("unexpected object in card array") // should never happen! } } </code></pre> <p>That is not identical to your scenario, but it is from a working app converted to Swift, and illustrates the full general technique.</p>
<p>I'm using those combination. Additionaly that combination checks if object is not <code>"null"</code>.</p> <pre><code>func isNotNull(object:AnyObject?) -&gt; Bool { guard let object = object else { return false } return (isNotNSNull(object) &amp;&amp; isNotStringNull(object)) } func isNotNSNull(object:AnyObject) -&gt; Bool { return object.classForCoder != NSNull.classForCoder() } func isNotStringNull(object:AnyObject) -&gt; Bool { if let object = object as? String where object.uppercaseString == "NULL" { return false } return true } </code></pre> <p>It's not that pretty as extension but work as charm :)</p>
<p>You could also use <code>is</code> to check for the presence of a null:</p> <pre><code>if sensor["latestValue"] is NSNull { // do something with null JSON value here } </code></pre>
<p>my solution for now:</p> <pre><code>func isNull(someObject: AnyObject?) -&gt; Bool { guard let someObject = someObject else { return true } return (someObject is NSNull) } </code></pre> <p>tests look good so far...</p> <p><a href="https://i.stack.imgur.com/Tgj2A.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Tgj2A.png" alt="tests look good so far"></a></p>