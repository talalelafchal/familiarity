How does swift handle deterministic finalization?
<p>I am coming from a C# background; as I understand it Swift have automatic memory management like C# does.</p> <p>An issue in C# that requires the use of “programming patterns” is the timely releasing of resources, as the garbage collector runs at an undefined time, and hence cannot be used to close files, release network connection etc. (Hence IDisposable and the “using” keyword)</p> <p>How is this dealt with when programming in Swift?</p>
<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-XID_50" rel="nofollow">Swift seems to use</a> there same memory management model like Objective-C with <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" rel="nofollow">ARC</a> enabled.</p> <p>That means there is no garbage collector. Instead ARC uses reference counting with compiler inserted increment and decrement operations when (strong) references are being set.</p> <p>The absence of a (threaded) collector means finalization is deterministic in Swift. Objects are deallocated when the last reference goes out of scope.</p>