Unit-testing superclass
<p>I'm trying to figure out how to rewrite the following <em>Objective-C</em> unit-test in <em>Swift</em>:</p> <pre><code>- (void)testSuperclass { Class superclass = [self.animatedView superclass]; Class expectedSuperclass = [BREAnimatedView class]; XCTAssertEqualObjects(superclass, expectedSuperclass); } </code></pre>
<p>I suppose you can do</p> <pre><code>func testSuperclass() { val superclass = self.animatedView.superclass val expectedSuperclass = BREAnimatedView.class() XCTAssertEqualObjects(superclass, expectedSuperclass) } </code></pre> <p>but I'd be glad to see if there's a better way.</p>
<p>I believe this should work:</p> <pre><code>func testSuperclass() { XCTAssert(self.animatedView is BREAnimatedView) } </code></pre> <p>It's slightly different than your original condition, which tests if <code>BREAnimatedView</code> is the <em>direct</em> superclass of the view, whereas this just tests if the view inherits from <code>BREAnimatedView</code>.</p>