Function Parameter Names don't behave according to documentation
<p>According to the manual: </p> <p>Function Parameter Names </p> <p>These parameter names are only used within the body of the function itself, and cannot be used when calling the function. These kinds of parameter names are known as local parameter names, because they are only available for use within the functionâ€™s body.</p> <pre><code> join("hello", "world", ", ") func join(s1: String, s2: String, joiner: String) -&gt; String { return s1 + joiner + s2 } </code></pre> <p>But the code doesn't compile:</p> <p>error: missing argument labels 's2:joiner:' in call join("hello", "world", ", ") ^ s2: joiner: </p> <p>Only when I try with one parameter, it becomes optional</p> <pre><code> join("hello") func join(s1: String) -&gt; String { return s1 } </code></pre> <p>Even more annoying, it's not even permissible to use the first one at all:</p> <pre><code> join(s1: "hello") </code></pre> <p>extraneous argument label 's1:' in call join(s1: "hello")</p> <p>Did I miss anything while reading the documentation covering functions?</p>
<p>I think they did this so that the default behavior of methods would match those in objective-c, but you can control it directly by <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_213" rel="nofollow">setting the external parameter name</a></p> <p>(note that you can use <code>_</code> for the external parameter name if you don't want callers of your function to name the argument)</p> <p>also note: it doesn't work the same way for bare functions as it does for methods</p>
<p>The behavior is different between functions and methods.</p> <p>For a method, the default behavior is to use the local name as the external name for all arguments after the first.</p> <p>You can think of methods defaulting to:</p> <pre><code>func method(_ arg1: AnyObject?, #arg2: AnyObject?, #arg3: AnyObject?) { } </code></pre> <p>You can always explicitly state how you want to handle arguments</p> <pre><code>func join(_ s1: String, _ s2: String, _ joiner: String) -&gt; String { return s1 + joiner + s2 } </code></pre> <h3><a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Methods.html#//apple_ref/doc/uid/TP40014097-CH15-XID_300">The Swift Programming Language | Language Guide | Methods</a></h3> <blockquote> <p>Specifically, Swift gives the first parameter name in a method a local parameter name by default, and gives the second and subsequent parameter names both local and external parameter names by default. This convention matches the typical naming and calling convention you will be familiar with from writing Objective-C methods, and makes for expressive method calls without the need to qualify your parameter names.</p> </blockquote>