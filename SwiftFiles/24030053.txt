Use of an optional value in Swift
<p>While reading the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html" rel="nofollow">The Swift Programming Language</a>, I came across this snippet:</p> <blockquote> <p>You can use <strong>if</strong> and <strong>let</strong> together to work with values that might be missing. These values are represented as <strong>optionals</strong>. An optional value either contains a value or contains nil to indicate that the value is missing. Write a question mark (?) after the type of a value to mark the value as optional.</p> </blockquote> <pre><code>// Snippet #1 var optionalString: String? = "Hello" optionalString == nil // Snippet #2 var optionalName: String? = "John Appleseed" var greeting = "Hello!" if let name = optionalName { greeting = "Hello, \(name)" } </code></pre> <p>Snippet #1 is clear enough, but what is happening in the Snippet #2? Can someone break it down and explain? Is it just an alternative to using an <code>if - else</code> block? what is the exact role of <code>let</code> in this case?</p> <p>I did read <a href="http://stackoverflow.com/questions/24003642/what-is-an-optional-value-in-swift">this</a> page, but still a little confused.</p>
<pre><code>if let name = optionalName { greeting = "Hello, \(name)" } </code></pre> <p>This does two things:</p> <ol> <li><p>it checks if <code>optionalName</code> has a value</p></li> <li><p>if it does, it "unwraps" that value and assigns it to the String called <code>name</code> (which is only available inside of the conditional block).</p></li> </ol> <p>Note that the type of <code>name</code> is <code>String</code> (not <code>String?</code>).</p> <p>Without the <code>let</code> (i.e. with just <code>if optionalName</code>), it would still enter the block only if there is a value, but you'd have to manually/explicitly access the String as <code>optionalName!</code>.</p>
<pre><code>// this line declares the variable optionalName which as a String optional which can contain either nil or a string. //We have it store a string here var optionalName: String? = "John Appleseed" //this sets a variable greeting to hello. It is implicity a String. It is not an optional so it can never be nil var greeting = "Hello!" //now lets split this into two lines to make it easier. the first just copies optionalName into name. name is now a String optional as well. let name = optionalName //now this line checks if name is nil or has a value. if it has a value it executes the if block. //You can only do this check on optionals. If you try using greeting in an if condition you will get an error if name{ greeting = "Hello, \(name)" } </code></pre>
<p><code>String?</code> is a boxed-type, variable <code>optionalName</code> either contains a <code>String</code> value or nothing(that is <code>nil</code>).</p> <p><code>if let name = optionalName</code> is an idiom, it unboxes the value out of <code>optionalName</code> and assign it to <code>name</code>. In the meanwhile, if the name is non-nil, the <code>if</code> branch is executed, otherwise the <code>else</code> branch is executed.</p>