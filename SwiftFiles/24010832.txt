In Swift is the programmer responsible for breaking loops between objects?
<p>As I understand it, Swift uses automatic reference counting for its garbage collection. </p> <p>This takes me back many years to when I was a COM programmer. </p> <p>VB6 (and before) automated the process of decimating the reference count when an object went out of scope, most of the time this was enough to allow a programmer to forget about memory management. </p> <p>However if there were loops between objects, .e.g</p> <pre><code>Car-&gt;WheelsCollection contains pointers to wheels Wheel-&gt;CurrentCar constrains a pointer to the car the wheel is currently installed on </code></pre> <p>Then when an instance of the car went out of scope, it would not be garbage collected as the car kept its wheels alive, and the wheels kept the car alive.</p> <p>What programmer patterns or otherwise are used in Swift to avoid or mitigate this problem?</p>
<p>This is a simple retain cycle, you have to solve it by using a weak reference.</p> <p>Assuming this as your current classes.</p> <pre><code>class Car { var wheel: Wheel? } class Wheel { var currentCar: Car? } </code></pre> <p>and your current situation</p> <pre><code>var myCar: Car? = Car() var myWheel: Wheel? = Wheel() myCar!.wheel = myWheel </code></pre> <p>To solve this, you have to declare one of them as <code>weak</code>, for example: <code>weak var currentCar: Car?</code>.</p> <p>The official Swift documentation, explains it <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-XID_54">here</a>.</p>