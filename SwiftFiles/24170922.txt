creating custom tableview cells in swift
<p>I have a custom cell class with a couple of IBOutlets. I have added the class to the storyboard. I have connected all my outlets. my cellForRowAtIndexPath function looks like this:</p> <pre><code>override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! { let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as SwipeableCell cell.mainTextLabel.text = self.venueService.mainCategoriesArray()[indexPath.row] return cell } </code></pre> <p>Here is my custom cell class:</p> <pre><code>class SwipeableCell: UITableViewCell { @IBOutlet var option1: UIButton @IBOutlet var option2: UIButton @IBOutlet var topLayerView : UIView @IBOutlet var mainTextLabel : UILabel @IBOutlet var categoryIcon : UIImageView init(style: UITableViewCellStyle, reuseIdentifier: String!) { super.init(style: style, reuseIdentifier: reuseIdentifier) } } </code></pre> <p>When I run the app, all my cell are empty. I have logged out <code>self.venueService.mainCategoriesArray()</code> and it contains all the correct strings. I have also tried putting an actual string equal to the label, and that produces the same result. </p> <p>What am I missing? Any help is appreciated.</p>
<p>I have the same problem.</p> <p>Generally what I did is the same with you.</p> <pre><code>class dynamicCell: UITableViewCell { @IBOutlet var testLabel : UILabel init(style: UITableViewCellStyle, reuseIdentifier: String) { super.init(style: style, reuseIdentifier: reuseIdentifier) } override func awakeFromNib() { super.awakeFromNib() } override func setSelected(selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) } } </code></pre> <p>and in the uitableviewcell method:</p> <pre><code>func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! { var cell :dynamicCell = tableView.dequeueReusableCellWithIdentifier("cell") as dynamicCell cell.testLabel.text = "so sad" println(cell.testLabel) return cell; } </code></pre> <p>and yeah the tableview show nothing! But guess what it actually show something...because the log I get from the println(cell.testLabel) shows that all the Labels are actually displayed out.</p> <p>BUT! their Frames is strange, which have something like this:</p> <blockquote> <p>frame = (0 -21; 42 21);</p> </blockquote> <p>so it has a (0,-21) as (x,y), so that means the label is just appear at somewhere outside the bound of the cell.</p> <p>so I try to add adjust the frame manually like this:</p> <blockquote> <p>cell.testLabel.frame = CGRectMake(10, 10, 42, 21)</p> </blockquote> <p>and sadly, it doesn't work.</p> <p>---------------update after 10 min -----------------</p> <p>I DID IT. so, it seems that the problem comes from the Size Classes.</p> <p>Click on your .storyboard file and go to the File Inspector Tab</p> <p><strong>UNCHECK THE Size Classes checkbox</strong></p> <p>and finally my "so sad"Label come out!</p>
<p>Uncheck "Size Classes" checkbox works for me as well, but you could also add the missing constraints in the interface builder. Just use the built-in function if you don't want to add the constraints on your own. Using constraints is - in my opinion - the better way because the layout is independent from the device (iPhone or iPad).</p>
<p>Thanks for all the different suggestions, but I finally figured it out. The custom class was set up correctly. All I needed to do, was in the storyboard where I choose the custom class: remove it, and select it again. It doesn't make much sense, but that ended up working for me.</p>
<p>Last Updated Version is with xCode 6.1</p> <pre><code>class StampInfoTableViewCell: UITableViewCell{ @IBOutlet weak var stampDate: UILabel! @IBOutlet weak var numberText: UILabel! override init?(style: UITableViewCellStyle, reuseIdentifier: String?) { super.init(style: style, reuseIdentifier: reuseIdentifier) } required init(coder aDecoder: NSCoder) { //fatalError("init(coder:) has not been implemented") super.init(coder: aDecoder) } override func awakeFromNib() { super.awakeFromNib() } override func setSelected(selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) } } </code></pre>
<p>It is Purely swift notation an working for me</p> <pre><code>func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var cellIdentifier:String = "CustomFields" var cell:CustomCell? = tableView.dequeueReusableCellWithIdentifier(cellIdentifier) as? CustomCell if (cell == nil) { var nib:Array = NSBundle.mainBundle().loadNibNamed("CustomCell", owner: self, options: nil) cell = nib[0] as? CustomCell } return cell! } </code></pre>
<p>This is for who are working custom cell with .xib </p> <pre><code>func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell{ let identifier = "Custom" var cell: CustomCell! = tableView.dequeueReusableCellWithIdentifier(identifier) as? CustomCel if cell == nil { tableView.registerNib(UINib(nibName: "CustomCell", bundle: nil), forCellReuseIdentifier: identifier) cell =tableView.dequeueReusableCellWithIdentifier(identifier) as? CustomCell }return cell} </code></pre>
<p>Set tag for imageview and label in cell</p> <pre><code>func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return self.tableData.count } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCellWithIdentifier("imagedataCell", forIndexPath: indexPath) as! UITableViewCell let rowData = self.tableData[indexPath.row] as! NSDictionary let urlString = rowData["artworkUrl60"] as? String // Create an NSURL instance from the String URL we get from the API let imgURL = NSURL(string: urlString!) // Get the formatted price string for display in the subtitle let formattedPrice = rowData["formattedPrice"] as? String // Download an NSData representation of the image at the URL let imgData = NSData(contentsOfURL: imgURL!) (cell.contentView.viewWithTag(1) as! UIImageView).image = UIImage(data: imgData!) (cell.contentView.viewWithTag(2) as! UILabel).text = rowData["trackName"] as? String return cell } </code></pre> <p><strong>OR</strong></p> <pre><code>func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell: UITableViewCell = UITableViewCell(style: UITableViewCellStyle.Default, reuseIdentifier: "imagedataCell") if let rowData: NSDictionary = self.tableData[indexPath.row] as? NSDictionary, urlString = rowData["artworkUrl60"] as? String, imgURL = NSURL(string: urlString), formattedPrice = rowData["formattedPrice"] as? String, imgData = NSData(contentsOfURL: imgURL), trackName = rowData["trackName"] as? String { cell.detailTextLabel?.text = formattedPrice cell.imageView?.image = UIImage(data: imgData) cell.textLabel?.text = trackName } return cell } </code></pre> <p>see also TableImage loader from <a href="https://github.com/JaleelNazir/MJTableImageSwift" rel="nofollow">github</a></p>
<h1>Custom Table View Cell Example</h1> <p><em>Updated for Swift 3</em></p> <p>The asker of the original question has solved their problem. I am adding this answer as a mini self contained example project for others who are trying to do the same thing.</p> <p>The finished project should look like this:</p> <p><a href="https://i.stack.imgur.com/nd8r3.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/nd8r3.png" alt="enter image description here"></a></p> <h1>Create a new project</h1> <p>It can be just a Single View Application.</p> <h1>Add the code</h1> <p>Add a new Swift file to your project. Name it MyCustomCell.swift. This class will hold the outlets for the views that you add to your cell in the storyboard. </p> <pre><code>import UIKit class MyCustomCell: UITableViewCell { @IBOutlet weak var myView: UIView! @IBOutlet weak var myCellLabel: UILabel! } </code></pre> <p>We will connect these outlets later.</p> <p>Open ViewController.swift and make sure you have the following content:</p> <pre><code>import UIKit class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { // These strings will be the data for the table view cells let animals: [String] = ["Horse", "Cow", "Camel", "Sheep", "Goat"] // These are the colors of the square views in our table view cells. // In a real project you might use UIImages. let colors = [UIColor.blue, UIColor.yellow, UIColor.magenta, UIColor.red, UIColor.brown] // Don't forget to enter this in IB also let cellReuseIdentifier = "cell" @IBOutlet var tableView: UITableView! override func viewDidLoad() { super.viewDidLoad() tableView.delegate = self tableView.dataSource = self } // number of rows in table view func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return self.animals.count } // create a cell for each table view row func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell:MyCustomCell = self.tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier) as! MyCustomCell cell.myView.backgroundColor = self.colors[indexPath.row] cell.myCellLabel.text = self.animals[indexPath.row] return cell } // method to run when table view cell is tapped func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print("You tapped cell number \(indexPath.row).") } } </code></pre> <h1>Setup the storyboard</h1> <p>Add a Table View to your view controller and use auto layout to pin it to the four sides of the View Controller. Then drag a Table View Cell onto the Table View. And then drag a View and a Label onto the Prototype cell. (You may need to pull the bottom of the prototype cell down so that it is a little bigger.) Use auto layout to fix the View and the Label how you want them arranged within the content view of the Table View Cell. For example, I made my View be 100x100.</p> <p><a href="https://i.stack.imgur.com/HJ5CD.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/HJ5CD.png" alt="enter image description here"></a></p> <h1>Other IB settings</h1> <p><strong>Custom class name and Identifier</strong></p> <p>Select the Table View Cell and set the custom class to be <code>MyCustomCell</code> (the name of the class in the Swift file we added). Also set the Identifier to be <code>cell</code> (the same string that we used for the <code>cellReuseIdentifier</code> in the code above.</p> <p><a href="https://i.stack.imgur.com/JyGEy.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/JyGEy.png" alt="enter image description here"></a></p> <p><strong>Hook Up the Outlets</strong></p> <ul> <li>Control drag from the Table View in the storyboard to the <code>tableView</code> variable in the <code>ViewController</code> code. </li> <li>Do the same for the View and the Label in your Prototype cell to the <code>myView</code> and <code>myCellLabel</code> variables in the <code>MyCustomCell</code> class.</li> </ul> <h1>Finished</h1> <p>That's it. You should be able to run your project now.</p> <h1>Notes</h1> <ul> <li>The colored views that I used here could be replaced with anything. An obvious example would be a <code>UIImageView</code>.</li> <li>If you are just trying to get a TableView to work, see <a href="http://stackoverflow.com/a/33234181/3681880">this even more basic example</a>.</li> <li>If you need a Table View with variable cell heights, see <a href="http://stackoverflow.com/a/36422189/3681880">this example</a>.</li> </ul>
<p><strong>[1] First Design your tableview cell in StoryBoard.</strong></p> <p><strong>[2] Put below table view delegate method</strong></p> <p><strong>//MARK: - Tableview Delegate Methods</strong></p> <pre><code>func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int { return 1 } func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return &lt;“Your Array”&gt; } func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat { var totalHeight : CGFloat = &lt;cell name&gt;.&lt;label name&gt;.frame.origin.y totalHeight += UpdateRowHeight(&lt;cell name&gt;.&lt;label name&gt;, textToAdd: &lt;your array&gt;[indexPath.row]) return totalHeight } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var cell : &lt;cell name&gt;! = tableView.dequeueReusableCellWithIdentifier(“&lt;cell identifire&gt;”, forIndexPath: indexPath) as! CCell_VideoCall if(cell == nil) { cell = NSBundle.mainBundle().loadNibNamed("&lt;cell identifire&gt;", owner: self, options: nil)[0] as! &lt;cell name&gt;; } &lt;cell name&gt;.&lt;label name&gt;.text = &lt;your array&gt;[indexPath.row] as? String return cell as &lt;cell name&gt; } </code></pre> <p>//MARK: - Custom Methods</p> <pre><code>func UpdateRowHeight ( ViewToAdd : UILabel , textToAdd : AnyObject ) -&gt; CGFloat{ var actualHeight : CGFloat = ViewToAdd.frame.size.height if let strName : String? = (textToAdd as? String) where !strName!.isEmpty { actualHeight = heightForView1(strName!, font: ViewToAdd.font, width: ViewToAdd.frame.size.width, DesignTimeHeight: actualHeight ) } return actualHeight } </code></pre>
<p>The actual Apple reference documentation is quite comprehensive </p> <p><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Lesson7.html" rel="nofollow noreferrer">https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Lesson7.html</a></p> <p>Scroll down until you see this part</p> <p><a href="https://i.stack.imgur.com/5ZxQl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/5ZxQl.png" alt="enter image description here"></a></p>