How to use NSMaxXEdge in Cocoa app with Swift (Xcode 6)?
<p>I've tried to create a Cocoa app which uses <code>NSPopover</code> internally. One of the popover's method is <code>showRelativeToRect: ofView: preferredEdge:</code>, which triggers an popover in Cocoa app.</p> <p>If you use Objective-C in Xcode 5.1, you can execute the method with the method above, like this:</p> <pre><code>[popover showRelativeToRect: sender.bounds ofView: sender preferredEdge: NSMaxXEdge]; </code></pre> <p>However, when I tried to use the method in Swift in Xcode 6, the message <code>Use of unresolved identifier 'NSMaxXEdge'</code> was shown when I wrote the following method, which is just a rewrite of the Objective-C method above:</p> <pre><code>popover.showRelativeToRect(sender.bounds, ofView: sender, preferredEdge: NSMaxXEdge </code></pre> <p>So where is the <code>NSMaxXEdge</code> gone? The official documentation says it is of type <code>NSRectEdge</code>, but what is the <code>NSRectEdge</code>? The doc doesn't link to <code>NSRectEdge</code> page.</p> <p>Also, Xcode 5 documentation also says it is <code>NSRectEdge</code>, but again, no link exists there. So how can I know about what it is all about?</p> <p>And finally, if <code>NSMaxXEdge</code> is no longer available in Xcode 6, what is the alternative?</p>
<p><code>NSRectEdge</code> has a static var called <code>max</code>. I think you should just use that. For example:</p> <pre><code>popover.showRelativeToRect(rect, ofView: view, preferredEdge: NSRectEdge.max) </code></pre>
<p>In <code>Foundation/NSGeometary.h</code> of 10.10 SDK:</p> <pre><code>typedef enum { NSMinXEdge = 0, NSMinYEdge = 1, NSMaxXEdge = 2, NSMaxYEdge = 3 } NSRectEdge; </code></pre> <p>So it should be <code>NSRectEdge.from(2)</code> or <code>NSRectEdge(2)</code> or just pass <code>2</code> will be fine.</p> <p>If you try this:</p> <pre><code> println("NSRectEdge.max: \(NSRectEdge.max)") // 9223372036854775807 println("NSRectEdge.from(2): \(NSRectEdge.from(2))") // 2 println("NSRectEdge(2): \(NSRectEdge(2))") //2 </code></pre> <p>You will know that <code>.max</code> was actually the max positive signed Int for 64-bit.</p> <p>(Tho, I can't be sure since it's not really mentioned in documentation anywhere.)</p>
<p>(The below is true for beta 5 (developing for 10.9). Your mileage may vary.)</p> <p>Above, you get a solution that works - passing 0-3 where the function calls for a NSRectEdge. I'd like to pick up on </p> <blockquote> <p>how can I know about what it is all about?</p> </blockquote> <p>The documentation indicates that NSRectEdge is bridged with CGRectEdge, but trying to pass in CGRectEdge led to an error of </p> <blockquote> <p>CGRectEdge is not convertible to NSRectEdge</p> </blockquote> <p>NSRectEdge.from(2) or NSRectEdge(2) - as suggested above - come back with the error that </p> <blockquote> <p>NSRectEdge has no accessible initializers</p> </blockquote> <p>When you type NSRectEdge into Xcode, however, it shows two types: CGRectEdge (which in this case is useless, see above) and Int.</p> <p>I'm afraid that you need to guess that NSRectEdge is an enum when you see it both called as a string and defined as an int; but from there to looking up its definition in the framework is a logical step; as is guessing that you will have four values, one for each edge.</p> <p>Incidentally, there seems to be an internal modulo operation going on somewhere - when you pass it '4', you get NSMinXEdge again and so on.</p>