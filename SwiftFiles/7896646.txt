How to pass object with NSNotificationCenter
<p>I am trying to pass an object from my app delegate to a notification receiver in another class.</p> <p>I want to pass integer <code>messageTotal</code>. Right now I have:</p> <p>In Receiver:</p> <pre><code>- (void) receiveTestNotification:(NSNotification *) notification { if ([[notification name] isEqualToString:@"TestNotification"]) NSLog (@"Successfully received the test notification!"); } - (void)viewDidLoad { [super viewDidLoad]; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(dismissSheet) name:UIApplicationWillResignActiveNotification object:nil]; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(receiveTestNotification:) name:@"eRXReceived" object:nil]; </code></pre> <p>In the class that is doing the notification:</p> <pre><code>[UIApplication sharedApplication].applicationIconBadgeNumber = messageTotal; [[NSNotificationCenter defaultCenter] postNotificationName:@"eRXReceived" object:self]; </code></pre> <p>But I want to pass the object <code>messageTotal</code> to the other class.</p>
<p>You'll have to use the "userInfo" variant and pass a NSDictionary object that contains the messageTotal integer:</p> <pre><code>NSDictionary* userInfo = @{@"total": @(messageTotal)}; NSNotificationCenter* nc = [NSNotificationCenter defaultCenter]; [nc postNotificationName:@"eRXReceived" object:self userInfo:userInfo]; </code></pre> <p>On the receiving end you can access the userInfo dictionary as follows:</p> <pre><code>-(void) receiveTestNotification:(NSNotification*)notification { if ([notification.name isEqualToString:@"TestNotification"]) { NSDictionary* userInfo = notification.userInfo; NSNumber* total = (NSNumber*)userInfo[@"total"]; NSLog (@"Successfully received test notification! %i", total.intValue); } } </code></pre>
<p>Building on the solution provided I thought it might be helpful to show an example passing your own custom data object (which I've referenced here as 'message' as per question).</p> <p><strong>Class A (sender):</strong></p> <pre><code>YourDataObject *message = [[YourDataObject alloc] init]; // set your message properties NSDictionary *dict = [NSDictionary dictionaryWithObject:message forKey:@"message"]; [[NSNotificationCenter defaultCenter] postNotificationName:@"NotificationMessageEvent" object:nil userInfo:dict]; </code></pre> <p><strong>Class B (receiver):</strong></p> <pre><code>- (void)viewDidLoad { [super viewDidLoad]; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(triggerAction:) name:@"NotificationMessageEvent" object:nil]; } #pragma mark - Notification -(void) triggerAction:(NSNotification *) notification { NSDictionary *dict = notification.userInfo; YourDataObject *message = [dict valueForKey:@"message"]; if (message != nil) { // do stuff here with your message data } } </code></pre>
<blockquote> <h2>Swift 2 Version</h2> </blockquote> <p>As @Johan Karlsson pointed out... I was doing it wrong. Here's the proper way to send and receive information with NSNotificationCenter.</p> <p>First, we look at the initializer for postNotificationName:</p> <pre><code>init(name name: String, object object: AnyObject?, userInfo userInfo: [NSObject : AnyObject]?) </code></pre> <p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNotification_Class/#//apple_ref/doc/uid/20000218-SW3">source</a></p> <p>We'll be passing our information using the <code>userInfo</code> param. The <code>[NSObject : AnyObject]</code> type is a hold-over from <em>Objective-C</em>. So, in Swift land, all we need to do is pass in a Swift dictionary that has keys that are derived from <code>NSObject</code> and values which can be <code>AnyObject</code>.</p> <p>With that knowledge we create a dictionary which we'll pass into the <code>object</code> parameter:</p> <pre><code> var userInfo = [String:String]() userInfo["UserName"] = "Dan" userInfo["Something"] = "Could be any object including a custom Type." </code></pre> <p>Then we pass the dictionary into our object parameter.</p> <p><strong>Sender</strong></p> <pre><code>NSNotificationCenter.defaultCenter() .postNotificationName("myCustomId", object: nil, userInfo: userInfo) </code></pre> <p><strong>Receiver Class</strong></p> <p>First we need to make sure our class is observing for the notification</p> <pre><code>override func viewDidLoad() { super.viewDidLoad() NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector("btnClicked:"), name: "myCustomId", object: nil) } </code></pre> <p>Then we can receive our dictionary:</p> <pre><code>func btnClicked(notification: NSNotification) { let userInfo : [String:String!] = notification.userInfo as! [String:String!] let name = userInfo["UserName"] print(name) } </code></pre>