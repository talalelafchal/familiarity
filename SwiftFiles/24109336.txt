How to call sqlite3_open (passing opaque pointers by reference)
<p>As an exercise, I'm trying to create a wrapper for <code>sqlite3</code>. I've got the bridging header set up, and I can see the tool tips for the <code>sqlite3</code> functions, but I can't figure out how to call <code>sqlite3_open</code></p> <p>sqlite3.h contains the following definitions of <code>sqlite3</code> and <code>sqlite3_open</code>:</p> <pre><code>typedef struct sqlite3 sqlite3; SQLITE_API int sqlite3_open( const char *filename, /* Database filename (UTF-8) */ sqlite3 **ppDb /* OUT: SQLite db handle */ ); </code></pre> <p>Which means that sqlite3_open takes as a trailing parameter a pointer to a pointer to an anonymous structure, which seems clear enough in the tooltip:</p> <pre><code>func sqlite3_open(filename: CString, ppDb: CMutablePointer&lt;COpaquePointer&gt;) -&gt; CInt </code></pre> <p>Knowing that CMutablePointer means to pass in &amp;T, the closest I've come is:</p> <pre><code>class Database { var handle:COpaquePointer init(file:String) { let error = sqlite3_open(file as CString, &amp;handle) } deinit { sqlite3_close(handle) } } </code></pre> <p>There's no error on the sqlite3_close line, so I think I'm at least close, but the sqlite3_open line yields:</p> <pre><code>Cannot convert the expression's type 'CInt' to type '$T9' </code></pre> <p>Any clues on how to do this?</p> <p>Please, no answers that say to use FMDB or other Objective-C based interfaces. As I said, this is at least partially an exercise in figuring out how to use C libraries from swift.</p>
<p>The problem is not with the handle parameter, but with the string conversion. The following worksâ€¦</p> <pre><code>class Database { var handle: COpaquePointer = nil init(file: NSString) { let error = sqlite3_open(file.cStringUsingEncoding(NSUTF8StringEncoding), &amp;handle) } } </code></pre> <p>I'm unsure as to why the 'as CString' doesn't work.</p>
<p>When you add <code>#import &lt;sqlite3.h&gt;</code> into Bridging-Header, the sqlite3 C/C++ API will be 'translated' into native swift function. So, the <code>sqlite3_open</code> will be like below. </p> <pre><code>func sqlite3_open(file:String, inout ppdb:COpaquePointer) -&gt; Int </code></pre> <p>And you can call this function with "String" type parameter instead of "CString". The swift compiler will translate "String" into UTF8 String data stream automatically. </p> <pre><code>let error = sqlite3_open(filePath, &amp;db) </code></pre>