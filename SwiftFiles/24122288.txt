Remove last character from string. Swift language
<p>How can I remove last character from String variable using Swift? Can't find it in documentation.</p> <p>Here is full example:</p> <pre><code>var expression = "45+22" expression = expression.substringToIndex(countElements(expression) - 1) </code></pre>
<p><strong>New Swift 3.0 Way</strong></p> <p>The APIs have gotten a bit more <em>swifty</em>, and as a result the Foundation extension has changed a bit:</p> <pre><code>var name: String = "Dolphin" var truncated = name.substring(to: name.index(before: name.endIndex)) print(name) // "Dolphin" print(truncated) // "Dolphi" </code></pre> <p>Or the in-place version:</p> <pre><code>var name: String = "Dolphin" name.remove(at: name.index(before: name.endIndex)) print(name) // "Dolphi" </code></pre> <p><em>Thanks Zmey, Rob Allen!</em></p> <p><strong>Swift 2.0+ Way</strong></p> <p>There are a few ways to accomplish this:</p> <p>Via the Foundation extension, despite not being part of the Swift library:</p> <pre><code>var name: String = "Dolphin" var truncated = name.substringToIndex(name.endIndex.predecessor()) print(name) // "Dolphin" print(truncated) // "Dolphi" </code></pre> <p>Using the <code>removeRange()</code> method (which <em>alters</em> the <code>name</code>):</p> <pre><code>var name: String = "Dolphin" name.removeAtIndex(name.endIndex.predecessor()) print(name) // "Dolphi" </code></pre> <p>Using the <code>dropLast()</code> function:</p> <pre><code>var name: String = "Dolphin" var truncated = String(name.characters.dropLast()) print(name) // "Dolphin" print(truncated) // "Dolphi" </code></pre> <p><strong>Old String.Index (Xcode 6 Beta 4 +) Way</strong></p> <p>Since <code>String</code> types in Swift aim to provide excellent UTF-8 support, you can no longer access character indexes/ranges/substrings using <code>Int</code> types. Instead, you use <code>String.Index</code>:</p> <pre><code>let name: String = "Dolphin" let stringLength = count(name) // Since swift1.2 `countElements` became `count` let substringIndex = stringLength - 1 name.substringToIndex(advance(name.startIndex, substringIndex)) // "Dolphi" </code></pre> <p>Alternatively (for a more practical, but less educational example) you can use <code>endIndex</code>:</p> <pre><code>let name: String = "Dolphin" name.substringToIndex(name.endIndex.predecessor()) // "Dolphi" </code></pre> <p><em>Note:</em> I found <a href="http://stackoverflow.com/a/24056932/88111">this</a> to be a great starting point for understanding <code>String.Index</code></p> <p><strong>Old (pre-Beta 4) Way</strong></p> <p>You can simply use the <code>substringToIndex()</code> function, providing it one less than the length of the <code>String</code>:</p> <pre><code>let name: String = "Dolphin" name.substringToIndex(countElements(name) - 1) // "Dolphi" </code></pre>
<p>The global <code>dropLast()</code> function works on sequences and therefore on Strings: </p> <pre><code>var expression = "45+22" expression = dropLast(expression) // "45+2" // in Swift 2.0 (according to cromanelli's comment below) expression = String(expression.characters.dropLast()) </code></pre>
<pre><code>let str = "abc" let substr = str.substringToIndex(str.endIndex.predecessor()) // "ab" </code></pre>
<p>This is a String <strong>Extension Form:</strong> </p> <pre><code>extension String { func removeCharsFromEnd(count_:Int) -&gt; String { let stringLength = count(self) let substringIndex = (stringLength &lt; count_) ? 0 : stringLength - count_ return self.substringToIndex(advance(self.startIndex, substringIndex)) } } </code></pre> <p>for versions of Swift earlier than 1.2:</p> <pre><code>... let stringLength = countElements(self) ... </code></pre> <hr> <p><em>Usage:</em></p> <pre><code>var str_1 = "Maxim" println("output: \(str_1.removeCharsFromEnd(1))") // "Maxi" println("output: \(str_1.removeCharsFromEnd(3))") // "Ma" println("output: \(str_1.removeCharsFromEnd(8))") // "" </code></pre> <hr> <p><em>Reference:</em></p> <blockquote> <p>Extensions add new functionality to an existing class, structure, or enumeration type. This includes the ability to extend types for which you do not have access to the original source code (known as retroactive modeling). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions do not have names.)</p> </blockquote> <p>See <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html#//apple_ref/doc/uid/TP40014097-CH24-XID_229">DOCS</a></p>
<p>Use the function <code>removeAtIndex(i: String.Index) -&gt; Character</code>:</p> <pre><code>var s = "abc" s.removeAtIndex(s.endIndex.predecessor()) // "ab" </code></pre>
<p>Use the function <code>advance(startIndex, endIndex)</code>:</p> <pre><code>var str = "45+22" str = str.substringToIndex(advance(str.startIndex, countElements(str) - 1)) </code></pre>
<pre><code>var str = "Hello, playground" extension String { var stringByDeletingLastCharacter: String { return dropLast(self) } } println(str.stringByDeletingLastCharacter) // "Hello, playgroun" </code></pre>
<p>Short answer (valid as of 2015-04-16): <strong><code>removeAtIndex(myString.endIndex.predecessor())</code></strong></p> <p>Example:</p> <pre><code>var howToBeHappy = "Practice compassion, attention and gratitude. And smile!!" howToBeHappy.removeAtIndex(howToBeHappy.endIndex.predecessor()) println(howToBeHappy) // "Practice compassion, attention and gratitude. And smile!" </code></pre> <p>Meta:</p> <p>The language continues its rapid evolution, making the half-life for many formerly-good S.O. answers dangerously brief. It's always best to learn the language and refer to real <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html" rel="nofollow">documentation</a>.</p>
<p>A swift category that's mutating:</p> <pre><code>extension String { mutating func removeCharsFromEnd(removeCount:Int) { let stringLength = count(self) let substringIndex = max(0, stringLength - removeCount) self = self.substringToIndex(advance(self.startIndex, substringIndex)) } } </code></pre> <p>Use: </p> <pre><code>var myString = "abcd" myString.removeCharsFromEnd(2) println(myString) // "ab" </code></pre>
<p>I'd recommend using NSString for strings that you want to manipulate. Actually come to think of it as a developer I've never run into a problem with NSString that Swift String would solve... I understand the subtleties. But I've yet to have an actual need for them. </p> <pre><code>var foo = someSwiftString as NSString </code></pre> <p>or </p> <pre><code>var foo = "Foo" as NSString </code></pre> <p>or</p> <pre><code>var foo: NSString = "blah" </code></pre> <p>And then the whole world of simple NSString string operations is open to you.</p> <p>As answer to the question</p> <pre><code>// check bounds before you do this, e.g. foo.length &gt; 0 // Note shortFoo is of type NSString var shortFoo = foo.substringToIndex(foo.length-1) </code></pre>
<p>In Swift 2, do this:</p> <pre><code>let choppedString = String(theString.characters.dropLast()) </code></pre> <p>I recommend <a href="https://www.mikeash.com/pyblog/friday-qa-2015-11-06-why-is-swifts-string-api-so-hard.html" rel="nofollow">this</a> link to get an understanding of Swift strings.</p>
<p>complimentary to the above code I wanted to remove the beginning of the string and could not find a reference anywhere. Here is how I did it:</p> <pre><code> var mac = peripheral.identifier.description let range = mac.startIndex..&lt;mac.endIndex.advancedBy(-50) mac.removeRange(range) // trim 17 characters from the beginning let txPower = peripheral.advertisements.txPower?.description </code></pre> <p>This trims 17 characters from the beginning of the string (he total string length is 67 we advance -50 from the end and there you have it. </p>
<p>The easiest way to trim the last character of the string is:</p> <pre><code>title = title[title.startIndex ..&lt; title.endIndex.advancedBy(-1)] </code></pre>
<p>Another way If you want to remove <strong>one or more</strong> than one character from the end. </p> <pre><code>var myStr = "Hello World!" myStr = (myStr as NSString).substringToIndex((myStr as NSString).length-XX) </code></pre> <p>Where <strong>XX</strong> is the number of characters you want to remove. </p>
<p>Swift 3 (according to the <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html" rel="nofollow noreferrer">docs</a>) 20th Nov 2016</p> <pre><code>let range = expression.index(expression.endIndex, offsetBy: -numberOfCharactersToRemove)..&lt;expression.endIndex expression.removeSubrange(range) </code></pre>