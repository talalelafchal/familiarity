Divide ints into doubles using Swift
<pre><code>func avg(numbers: Int...) -&gt; Double { var sum = 0; var i = 0; for number in numbers { sum += number; ++i; } return sum / i; } avg(42, 597, 12); </code></pre> <p>The line <code>return sum / i</code> results in an error <code>Could not find an overload for '/' that accepts the supplied arguments.</code></p> <p>What am I supposed to be doing here?</p>
<p>If you want to return a Double you should deal with Doubles in your function. Change sum and i to Doubles (0.0 vs 0) and convert each number to a double. Like this: </p> <pre><code>func avg(numbers: Int...) -&gt; Double { var sum = 0.0; //now implicitly a double var i = 0.0; for number in numbers { sum += Double(number); //converts number to a double and adds it to sum. ++i; } return sum / i; } avg(42, 597, 12); </code></pre> <hr> <p>Integer and Floating-Point Conversion</p> <p>Conversions between integer and floating-point numeric types must be made explicit:</p> <pre><code>let three = 3 let pointOneFourOneFiveNine = 0.14159 let pi = Double(three) + pointOneFourOneFiveNine // pi equals 3.14159, and is inferred to be of type Double </code></pre> <p>Here, the value of the constant three is used to create a new value of type Double, so that both sides of the addition are of the same type. Without this conversion in place, the addition would not be allowed.</p> <p>The reverse is also true for floating-point to integer conversion, in that an integer type can be initialized with a Double or Float value:</p> <pre><code>let integerPi = Int(pi) // integerPi equals 3, and is inferred to be of type Int </code></pre> <p>Floating-point values are always truncated when used to initialize a new integer value in this way. This means that 4.75 becomes 4, and -3.9 becomes -3.</p>
<p>Swift doesn't implicitly convert between value types, like we've been used to, so any product of your <code>sum</code> and <code>i</code> variables will have the same type they do. You've let them implicitly be defined as <code>Int</code>, so you'll need to cast their type during the final computation, like so:</p> <pre><code>return Double(sum) / Double(i) </code></pre>
<p>Here's an improved answer, using the friendly power of closures:</p> <pre><code>func avg(numbers: Int...) -&gt; Double { return Double(numbers.reduce(0, +)) / Double(numbers.count) } </code></pre>