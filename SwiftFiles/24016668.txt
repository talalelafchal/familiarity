How to use Implicitly Unwrapped Optionals?
<p>I'm porting an NSView to Swift and I need to use Quartz CGContextAddPath.</p> <pre><code>import Cocoa class MYView: NSView { init(frame: NSRect) { super.init(frame: frame) } override func drawRect(dirtyRect: NSRect) { super.drawRect(dirtyRect) NSColor .redColor() .set() NSRectFill(self.bounds) var p :CGMutablePathRef = CGPathCreateMutable() var ctx = NSGraphicsContext.currentContext().graphicsPort() CGContextAddPath(ctx, p) // compiler rejects this line } } </code></pre> <p>How do you understand this error message ?</p> <pre><code>Cannot convert the expression's type 'Void' to type 'CGContext!' </code></pre> <p>The Swift signature of CGContextAddPath is:</p> <pre><code>func CGContextAddPath(context: CGContext!, path: CGPath!) </code></pre> <p>What is my error ?</p> <p>When I use this: </p> <pre><code>let context = UnsafePointer&lt;CGContext&gt;(ctx).memory </code></pre> <p>I now have a runtime error:</p> <p><code>Jun 3 15:57:13 xxx.x SwiftTest[57092] &lt;Error&gt;: CGContextAddPath: invalid context 0x7fff73bd0060. This is a serious error. This application, or a library it uses, is using an invalid context and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.</code></p> <p>Here is the code that I'm currently using:</p> <pre><code>import Cocoa class MYView: NSView { init(frame: NSRect) { super.init(frame: frame) } override func drawRect(dirtyRect: NSRect) { super.drawRect(dirtyRect) var p :CGMutablePathRef = CGPathCreateMutableCopy( CGPathCreateWithRoundedRect(self.bounds, 10, 10, nil)) var ctx = NSGraphicsContext.currentContext().graphicsPort() let context = UnsafePointer&lt;CGContext&gt;(ctx).memory CGContextAddPath(context, p) // compiler no longer rejects this line var blueColor = NSColor.blueColor() CGContextSetStrokeColorWithColor(context, NSColor.blueColor().CGColor) CGContextSetLineWidth(context, 2) CGContextStrokePath(context) } } </code></pre>
<h3>As of Swift 1.0</h3> <p>If your deployment target is 10.10 you can use the convenience method introduced with Yosemite.</p> <pre><code>let context = NSGraphicsContext.currentContext().CGContext </code></pre> <p>If you have to support 10.9 you'll have to cast the context manually as per below.</p> <pre><code>let contextPtr = NSGraphicsContext.currentContext().graphicsPort let context = unsafeBitCast(contextPtr, CGContext.self) </code></pre>
<p>Use <code>NSGraphicsContext.currentContext().graphicsPort()</code>. It returns void*. You have to cast it to CGContextRef</p> <pre><code>let ctx = UnsafePointer&lt;CGContext&gt;(NSGraphicsContext.currentContext().‌​graphicsPort()).memo‌​ry </code></pre>