Variadic parameters and defaulted parameters
<p>I have this function:</p> <pre><code>func sum(#startingValue:Int, additionalValue:Int = 77, values:Int...) -&gt; Int { var total:Int = startingValue + additionalValue for v in values { total += v } return total } </code></pre> <p>Is there any way I can call it without specifying value for additionalValue argument?</p> <p>What I want is something like this:</p> <pre><code>sum(startingValue:10, 1, 2, 3, 4, 5, 6, 7) </code></pre>
<p>Although this may seem like a weird work around, it does work, you can use method overloading:</p> <pre><code>// Calling this will result in using the default value func sum(#startingValue:Int, values:Int...) -&gt; Int { return sum(startingValue: startingValue, values); } // Calling this will use whatever value you specified func sum(#startingValue:Int, #additionalValue:Int, values:Int...) -&gt; Int { return sum(startingValue: startingValue, additionalValue: additionalValue, values); } // The real function where you can set your default value func sum(#startingValue:Int, additionalValue:Int = 77, values:Int[]) -&gt; Int { var total:Int = startingValue + additionalValue for v in values { total += v } return total } // You can then call it either of these two ways: // This way uses will use the value 77 for additional value sum(startingValue:10, 1, 2, 3, 4, 5, 6, 7) // = 115 // This way sets additionalValue to the value of 1 sum(startingValue:10, additionalValue: 1, 2, 3, 4, 5, 6, 7) // = 38 </code></pre> <p>To be honest, I am not entirely sure why your first solution did not work automatically, in the docs I found <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_204" rel="nofollow">this</a>:</p> <blockquote> <p>If your function has one or more parameters with a default value, and also has a variadic parameter, place the variadic parameter after all the defaulted parameters at the very end of the list.</p> </blockquote> <p>But was unable to make it work, maybe a bug? I would guess it is supposed to work the same way I showed you. If you specify <code>additionalValue</code> it will use it, otherwise it will use the default. So maybe it will work automatically in the near future (making this solution irrelevant)?</p> <h3>Original Answer</h3> <p>The solution below works if you solely want to cease using the word <code>additionalValue</code> while calling the function but it still assigns <code>additionalValue</code> an argument (not what the OP was looking for).</p> <p>Put an underscore in front of <code>additionalValue</code>:</p> <pre><code>func sum(#startingValue:Int, _ additionalValue:Int = 77, values:Int...) -&gt; Int { // ... } </code></pre> <p>Then you can call it how you want without warnings:</p> <pre><code>sum(startingValue:10, 1, 2, 3, 4, 5, 6, 7) </code></pre> <p>In this case <code>additionalValue</code> automatically equals the second parameter, so it would be equal to <code>1</code></p>
<p>In Swift 2 (and 1.2) you can, as long as you use an argument label for “values”:</p> <pre><code>func sum(startingValue startingValue:Int, additionalValue:Int = 77, values:Int...) -&gt; Int { var total:Int = startingValue + additionalValue for v in values { total += v } return total } sum(startingValue:10, values: 1, 2, 3, 4, 5, 6, 7) sum(startingValue:10, values: 1, 2, 3, 4, 5, 6, 7, additionalValue: 177) sum(startingValue:10, additionalValue: 277, values: 1, 2, 3, 4, 5, 6, 7) </code></pre>