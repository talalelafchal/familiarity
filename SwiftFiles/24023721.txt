updateValue not working for Dictionary
<p> I'm creating a test app using Swift in Xcode, and I've run into an annoying issue. I'm writing a simple class that will act as a cache using a Dictionary object. My implementation is below:</p> <pre class="lang-swift prettyprint-override"><code>import Foundation import UIKit class ImageCache { var dict:Dictionary&lt;String,NSData&gt;?; init() { dict = Dictionary&lt;String,NSData&gt;(); } func exists(id:String) -&gt; Bool { return dict!.indexForKey(id)!==nil; } func getImage(id:String) -&gt; UIImage? { if(!exists(id)) { return nil; } return UIImage(data: (dict!)[id]); } func setData(id:String, data:NSData) { dict!.updateValue(data, forKey: id); } } </code></pre> <p>The issue is in the last method, with Xcode stating "Could not find member 'UpdateValue'". This is weird, because the code hint seems to show it just fine:</p> <p><img src="https://i.stack.imgur.com/ZHrfj.png" alt="Code hint"></p> <p>But when I try to compile:</p> <p><img src="https://i.stack.imgur.com/3KWPg.png" alt="Compilation error"></p> <p>Could this potentially be a bug in Xcode? Or am I missing something super-obvious?</p>
<p>Smells like a bug or a quirk in the compiler.</p> <p>I just tried something like</p> <pre><code>var d = dict! d.updateValue(data, forKey: id) </code></pre> <p>and it works as expected.</p>
<p>this is not a bug or a quirk in the compiler.</p> <p>it is how <code>Optional</code> implemented (which may be flawed or not)</p> <p>what happened is that the <code>Optional</code> store the <code>Dictionary</code> as immutable object (with <code>let</code> perhaps). So even <code>Optional</code> it is mutable, you can't modify the underlying <code>Dictionary</code>object directly (without reassign the Optional object).</p> <p><code>updateValue(forKey:)</code> is mutating method, you can't call it on immutable object and hence the error.</p> <p>you can workaround it by doing </p> <pre><code>var d = dict! d.updateValue(data, forKey: id) </code></pre> <p>because you copy the dictionary to another mutable variable, which then is mutable and able to call mutating method on it</p> <p>but without <code>dict = d</code>, your change won't be applied on <code>dict</code> because <code>Dictionary</code> is value type, it makes copy on every assignment</p> <p><a href="http://stackoverflow.com/a/24096455/642626">related answer</a> </p>