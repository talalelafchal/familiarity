Should I know Objective-C to use Swift today
<p>I want to try iOS development as my pet project. I have no <em>Objective-C</em> experience. And use Python as my main language at work. Is it possible to use only swift today? Also can I use third-party objective-c packages with swift?</p>
<p>Yes, you can start development with Swift only. You can safely add third party Obj-C package with swift.</p>
<p>There's no requirement to know Objective-C before learning to program with Swift.</p> <p>Apps written using Swift can't be submitted to the App Store before the official release of Xcode 6 in the Autumn, though you can play around all you like for yourself in the meantime.</p> <p>Check '<a href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11" rel="nofollow">The Swift Programming Language</a>' on the iBook store (Free) for more information on the language.</p>
<p>Yes, you can Swift to develop an iOS app without knowing Objective-C. The learning curve is not steep for the Swift language itself, but understanding of the SDK will surely be beneficial to those that have previously developed for iOS with Obj-C. But you can learn the Cocoa Touch frameworks as you go, and the multitude of Objective-C iOS tutorials out there can be easily translated into Swift.</p> <p>You can also use third-party Obj-C libraries with Swift. As soon as you import an Obj-C file or create one in your Swift project, Xcode will offer to create a bridging-header for you. In this file, you should <code>#import</code> all your Objective-C header files that you wish to be visible to Swift files.</p>
<p>IMO, the only issue is backward compatibility. Currently, Swift is known to support iOS7+. (well, this can be expanded later) Anyway, I believe this is not a problem for your pet project. </p> <p>Swift shares runtime and all frameworks(libraries) with Objective-C. You don't need to worry about <em>feature availability</em> on Swift. All of the <em>pure</em>(which means no C/C+ magic) Objective-C stuffs are expected to be available on Swift. I think we almost can treat Swift as a re-syntaxed Objective-C.</p> <p>The opposite case may be problematic. Not all of Swift features are available in Objective-C, then some Swift programs may not be available on Objective-C side.</p> <p>Cited from <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216" rel="nofollow">Apple website</a>:</p> <blockquote> <p>The model for importing Swift into Objective-C is similar to the one used for importing Objective-C into Swift. Swift vends its APIs—such as from a framework—as Swift modules. Alongside these Swift modules are generated Objective-C headers. These headers vend the APIs that can be mapped back to Objective-C. <strong>Some Swift APIs do not map back to Objective-C because they leverage language features that are not available in Objective-C.</strong> For more information on using Swift in Objective-C, see Swift and Objective-C in the Same Project.</p> </blockquote>