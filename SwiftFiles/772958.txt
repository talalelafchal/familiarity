Converting a CGPoint to NSValue
<p>in <code>CABasicAnimation.fromValue</code> i want to convert a <code>CGPoint</code> to a "class" so i used <code>NSValue</code> <code>valueWithPoint</code> but in device mode or simulator one is not working... need to use <code>NSMakePoint</code> or <code>CGPointMake</code> if in device or simulator... </p>
<p>Don't think of it as "converting" your point-- NSValue is a wrapper class that holds primitive structs like NSPoint. Anyway, here's the function you need. It's part of Cocoa, but not Cocoa Touch. You can add the entire function to your project, or just do the same conversion wherever you need it.</p> <pre><code>NSPoint NSPointFromCGPoint(CGPoint cgpoint) { return (*(NSPoint *)&amp;(cgpoint)); } </code></pre>
<p>There is a <code>UIKit</code> addition to <code>NSValue</code> that defines a function</p> <pre><code>+ (NSValue *)valueWithCGPoint:(CGPoint)point </code></pre> <p>See <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSValue_Class/#//apple_ref/occ/clm/NSValue/valueWithCGPoint:" rel="nofollow noreferrer">iPhone doc</a></p>
<p>&amp;(cgpoint) -> get a reference (address) to cgpoint (NSPoint *)&amp;(cgpoint) -> casts that reference to an NSPoint pointer *(NSPoint <em>)</em>(cgpoint) -> dereferences that NSPoint pointer to return an NSPoint to make the return type happy</p>
<pre><code>CGPoint VarPoint = CGPointMake(12.00556, 15.001450); CGPoint *point= (CGPoint *) &amp;VarPoint; NSLog(@"point-&gt;x: %2.10f", point-&gt;x); NSLog(@"point-&gt;y: %2.10f", point-&gt;y); NSLog(@"VarPoint.x: %2.10f", VarPoint.x); NSLog(@"VarPoint.y: %2.10f", VarPoint.y); </code></pre>
<p>@ashcatch 's answer is very helpful, but consider that those methods from addition copy values, when native <code>NSValue</code> methods store pointers! Here is my code checking it:</p> <pre><code>CGPoint point = CGPointMake(2, 4); NSValue *val = [NSValue valueWithCGPoint:point]; point.x = 10; CGPoint newPoint = [val CGPointValue]; </code></pre> <p>here <code>newPoint.x = 2; point.x = 10</code></p> <hr> <pre><code>CGPoint point = CGPointMake(2, 4); NSValue *val = [NSValue valueWithPointer:&amp;point]; point.x = 10; CGPoint *newPoint = [val pointerValue]; </code></pre> <p>here <code>newPoint.x = 10; point.x = 10</code></p>
<p>In Swift the static method is change to an initialiser method:</p> <pre><code>var pointValue = CGPointMake(10,10) NSValue(CGPoint: pointValue) </code></pre>
<p>In Swift, you can change a value like this:</p> <pre><code> var pointValueare = CGPointMake(30,30) NSValue(CGPoint: pointValueare) </code></pre>