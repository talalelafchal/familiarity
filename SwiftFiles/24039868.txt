Creating NSData from NSString in Swift
<p>I'm trying to ultimately have an <code>NSMutableURLRequest</code> with a valid <code>HTTPBody</code>, but I can't seem to get my string data (coming from a <code>UITextField</code>) into a usable <code>NSData</code> object.</p> <p>I've seen this method for going the other way:</p> <pre><code>NSString(data data: NSData!, encoding encoding: UInt) </code></pre> <p>But I can't seem to find any documentation for my use case. I'm open to putting the string into some other type if necessary, but none of the initialization options for <code>NSData</code> using Swift seem to be what I'm looking for.</p>
<p>In Swift 3</p> <pre><code>let data = string.data(using: .utf8) </code></pre> <hr> <p>In Swift 2 (or if you already have a <code>NSString</code> instance)</p> <pre><code>let data = string.dataUsingEncoding(NSUTF8StringEncoding) </code></pre> <hr> <p>In Swift 1 (or if you have a swift <code>String</code>):</p> <pre><code>let data = (string as NSString).dataUsingEncoding(NSUTF8StringEncoding) </code></pre> <hr> <p>Also note that <code>data</code> is an <code>Optional&lt;NSData&gt;</code> (since the conversion might fail), so you'll need to unwrap it before using it, for instance:</p> <pre><code>if let d = data { println(d) } </code></pre>
<p>Here very simple method</p> <pre><code>let data = string.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false) </code></pre>
<pre><code>// Checking the format var urlString: NSString = NSString(data: jsonData, encoding: NSUTF8StringEncoding) // Convert your data and set your request's HTTPBody property var stringData: NSString = NSString(string: "jsonRequest=\(urlString)") var requestBodyData: NSData = stringData.dataUsingEncoding(NSUTF8StringEncoding)! </code></pre>
<h1>Swift 3</h1> <p>Creating <code>Data</code> object from <code>String</code> object has been changed in Swift 3. Correct version now is:</p> <pre><code>let data = "any string".data(using: String.Encoding.utf8) </code></pre>