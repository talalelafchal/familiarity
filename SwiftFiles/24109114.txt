Set contentMode of UIImageView
<p>In Obj-C</p> <p><code>imageView.contentMode = UIViewContentModeScaleAspectFill;</code></p> <p>would set the contentMode.</p> <p>Why does </p> <p><code>imageView.contentMode = UIViewContentModeScaleAspectFill</code></p> <p>not work in Swift?</p>
<p>Somewhat confusingly, Swift drops the prefix for ObjC enum values:</p> <pre><code>imageView.contentMode = .ScaleAspectFill </code></pre> <p>This is because Swift already knows what enum type is being used. Alternatively, you can specify the enum too:</p> <pre><code>imageView.contentMode = UIViewContentMode.ScaleAspectFill </code></pre>
<p>In swift language we can set content mode of UIImage view like </p> <pre><code>var newImgThumb : UIImageView newImgThumb = UIImageView(frame:CGRectMake(0, 0, 100, 70)) newImgThumb.contentMode = .ScaleAspectFit </code></pre>
<p>In Swift Language we can set imageView in textField as given below.</p> <pre><code>let RightImageView = UIImageView() RightImageView.image = image let RightView = UIView() RightView.addSubview(RightImageView) RightView.frame = CGRectMake(0, 0, 30,30) </code></pre> <p>Give color to view &amp; imageView So that you can check your added imageView position in textField</p> <pre><code>RightView.backgroundColor = UIColor.redColor() RightImageView.backgroundColor = UIColor.blueColor() RightImageView.contentMode = UIViewContentMode.ScaleAspectFill RightImageView.frame = CGRectMake(0, 0,30,30) textFieldForCountry.rightView = RightView </code></pre>
<p><strong>tldr;</strong></p> <p>See the code answer for Swift 3 at the bottom. </p> <p><em>Note</em> - Please comment if more information is needed.</p> <p>Please checkout the longer answer below which includes how to use the solution for setting all other properties within your Storyboard or Xib/Nib file.</p> <p>There's nothing wrong with the other answers but I want to share how setting values on objects can be done in Interface Builder. I know the OP is asking for code, this example is just being shared for completeness. Of course if one wanted to animate property changes or needed the code versions then the other answers continue to apply.</p> <p><strong>Within Interface Builder</strong></p> <ol> <li>Select the ImageView (or any other control that has an embedded imageView) </li> <li>Check the base type of the attribute you want to set (in the case of contentMode this is UIViewContentMode)* see NB for how to...</li> <li>Note the type of valid values that can be assigned to the base type (in this case contentMode values correspond to a number)</li> <li>Go to the attributes inspector and see the User Defined Runtime Attributes (see image)</li> <li>Add a user defined attribute of type <strong>Number</strong> and the property name that you want to set (in this case it would be <strong>contentMode</strong>)</li> </ol> <p>NB - An easy way to explore the underlying types of properties is to Cmd+Click on the property in your source code editor, then Cmd+Click on the type for that property.</p> <p>Here is a simple example where I set some properties for a UIButton, which includes a UIImageView as one of its subviews. The example shows how one can set properties on the top object (UIButton) and the sub object (UIImageView). </p> <p><a href="https://i.stack.imgur.com/EHY2p.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/EHY2p.jpg" alt="UDA"></a></p> <p>If you have an imageView selected then just set the User Defined Runtime Attribute to contentMode of type Number and whatever value you want. This is a good method because it will work for both Objc and Swift.</p> <p>What's great is that you can use the same method to capture many other static property values for anything that appears within Interface Builder.</p> <p><a href="https://developer.apple.com/reference/uikit/uiviewcontentmode#" rel="nofollow noreferrer">Documented values for the UIViewContentMode enum</a></p> <p>BTW - Swift 3 changes the enum values to begin with a lower case so the following would work in Swift 3:</p> <pre><code>imageView.contentMode = .scaleAspectFill </code></pre>