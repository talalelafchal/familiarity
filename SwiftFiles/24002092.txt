What is the difference between `let` and `var` in swift?
<p>What is the difference between <code>let</code> and <code>var</code> in Apple's Swift language?</p> <p>In my understanding, it is a compiled language but it does not check the type at compile time. It makes me confused. How does the compiler know about the type error? If the compiler doesn't check the type, isn't it a problem with production environment?</p>
<p><code>let</code> defines a "constant". Its value is set once and only once, though not necessarily when you declare it. For example, you use <code>let</code> to define a property in a class that must be set during initialization:</p> <pre><code>class Person { let firstName: String let lastName: String init(first: String, last: String) { firstName = first lastName = last super.init() } } </code></pre> <p>With this setup, it's invalid to assign to <code>firstName</code> or <code>lastName</code> after calling (e.g.) <code>Person(first:"Malcolm", last:"Reynolds")</code> to create a <code>Person</code> instance.</p> <p>You <strong>must</strong> define a type for all variables (<code>let</code> or <code>var</code>) at compile time, and any code that attempts to set a variable may only use that type (or a subtype). You can assign a <em>value</em> at run time, but its <em>type</em> must be known at compile time.</p>
<p><code>let</code> is used to declare a constant value that means you won't change it after give it an initial value.<br> <code>var</code> is used to decalre a variable value that means you could change it's value as you wish.</p>
<p>Though currently I am still reading the manual, but I think this is very close to C/C++ <code>const</code> pointer. In other words, something like difference between <code>char const*</code> and <code>char*</code>. Compiler also refuses to update content, not only reference reassignment (pointer).</p> <p>For example, let's say you have this struct. Take care that this is a struct, not a class. AFAIK, classes don't have a concept of immutable state.</p> <pre><code>import Foundation struct AAA { var inner_value1 = 111 mutating func mutatingMethod1() { inner_value1 = 222 } } let aaa1 = AAA() aaa1.mutatingMethod1() // compile error aaa1.inner_value1 = 444 // compile error var aaa2 = AAA() aaa2.mutatingMethod1() // OK aaa2.inner_value1 = 444 // OK </code></pre> <p>Because the structs are immutable by default, you need to mark a mutator method with <code>mutating</code>. And because the name <code>aaa1</code> is constant, you can't call any mutator method on it. This is exactly what we expected on C/C++ pointers.</p> <p>I believe this is a mechanism to support a kind of <a href="http://en.wikipedia.org/wiki/Const-correctness" rel="nofollow"><em>const-correctness stuff</em></a>.</p>
<p>A value can be reassigned in case of var</p> <pre><code> //Variables var age = 42 println(age) //Will print 42 age = 90 println(age) //Will Print 90 </code></pre> <p>** the newAge constant cannot be reassigned to a new value. Trying to do so will give a compile time error**</p> <pre><code>//Constants let newAge = 92 //Declaring a constant using let println(newAge) //Will print 92. </code></pre>
<p>The: <code>let</code> keyword defines a constant:</p> <pre><code>let theAnswer = 42 </code></pre> <p>The <code>theAnswer</code> cannot be changed afterwards.</p> <p>The <code>var</code> defines an ordinary variable:</p> <p>What is interesting:</p> <blockquote> <p>The value of a constant <strong>doesn’t need to be known at compile time</strong>, but you must assign it a value exactly once.</p> </blockquote> <p>Another strange feature:</p> <blockquote> <p>You can use almost any character you like for constant and variable names, including Unicode characters:</p> </blockquote> <pre><code>let = "dogcow" </code></pre> <p>Excerpts From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=881256329">https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=881256329</a></p> <h2>EDIT</h2> <p>Because comments asking for adding other facts to the answer, converting this to <a href="http://meta.stackexchange.com/questions/11740/what-are-community-wiki-posts">community wiki answer</a>. Feel free edit the answer to make it better.</p>
<p><code>let</code> is used to define constants and <code>var</code> to define variables.</p>
<p>The</p> <p><a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_401" rel="nofollow">Declaring Constants and Variables</a> section of The Swift Programming Language documentation specifies the following:</p> <blockquote> <p>You declare constants with the let keyword and variables with the var keyword.</p> </blockquote> <p>Make sure to understand how this works for Reference types. Unlike Value Types, the object's underlying properties can change despite an instance of a reference type being declared as a constant. See the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_105" rel="nofollow">Classes are Reference Types</a> section of the documentation, and look at the example where they change the frameRate property.</p>
<p>It's maybe better to state this difference by the Mutability / Unmutability notion that is the correct paradigm of values and instances changeability in Objects space which is larger than the only "constant / variable" usual notions. And furthermore this is closer to Objective C approach.</p> <pre><code>let aInt = 1 // or let aPerson = Person(name:Foo, first:Bar) </code></pre> <p>define a value and an instance UNMUTABLE</p> <pre><code>var aInt = 1 // or var aPerson = Person(name:Foo, first:Bar) </code></pre> <p>define changeable / MUTABLE value and instance</p>
<p>One more difference, which I've encountered in other languages for Constants is : <strong><em>can't initialise the constant(let) for later</em></strong> , <em>should initialise as you're about to declare the constant.</em></p> <p>For instance :</p> <pre><code>let constantValue : Int // Compile error - let declarations require an initialiser expression </code></pre> <p>Variable </p> <pre><code>var variableValue : Int // No issues </code></pre>
<p>Declare constants with the let keyword and variables with the var keyword.</p> <pre><code>let maximumNumberOfLoginAttempts = 10 var currentLoginAttempt = 0 let maximumNumberOfLoginAttempts = 10 var currentLoginAttempt = 0 </code></pre> <p>Declare multiple constants or multiple variables on a single line, separated by commas:</p> <pre><code>var x = 0.0, y = 0.0, z = 0.0 </code></pre> <p>Printing Constants and Variables</p> <p>You can print the current value of a constant or variable with the println function:</p> <pre><code>println(friendlyWelcome) </code></pre> <p>Swift uses string interpolation to include the name of a constant or variable as a placeholder in a longer string</p> <p>Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:</p> <pre><code>println("The current value of friendlyWelcome is \(friendlyWelcome)") </code></pre> <p>Reference : <a href="http://iosswift.com.au/?p=17" rel="nofollow">http://iosswift.com.au/?p=17</a></p>
<p>“Use let to make a constant and var to make a variable”</p> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/us/jEUH0.l" rel="nofollow">https://itun.es/us/jEUH0.l</a></p>
<p>According to <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/">The Swift Programming Language Book</a></p> <blockquote> <p>Like C, Swift uses variables to store and <strong>refer</strong> to values by an identifying name. Swift also makes extensive use of variables whose values cannot be changed. These are known as constants, and are much more powerful than constants in C.</p> </blockquote> <p>Both <code>var</code> and <code>let</code> are <strong>references</strong>, therefore <code>let</code> is a <strong>const reference</strong>. Using fundamental types doesn't really show how <code>let</code> is different than <code>const</code>. The difference comes when using it with class instances (reference types):</p> <pre><code>class CTest { var str : String = "" } let letTest = CTest() letTest.str = "test" // OK letTest.str = "another test" // Still OK //letTest = CTest() // Error var varTest1 = CTest() var varTest2 = CTest() var varTest3 = CTest() varTest1.str = "var 1" varTest2.str = "var 2" varTest3 = varTest1 varTest1.str = "var 3" varTest3.str // "var 3" </code></pre>
<p><strong><em>let</em></strong> is used to define constants and <strong><em>var</em></strong> to define variables. You define the string using <strong><em>var</em></strong> then particular String can be modified (or mutated) by assigning it to a variable (in which case it can be modified), and if you define the string using <strong><em>let</em></strong> its a constant (in which case it cannot be modified):</p> <pre><code>var variableString = "Apple" variableString += " and Banana" // variableString is now "Apple and Banana" let constantString = "Apple" constantString += " and another Banana" // this reports a compile-time error - a constant string cannot be modified </code></pre>
<p><strong>let</strong> is a constant value, so it can never be changed.</p> <pre><code>let number = 5 number = 6 //This will not compile. </code></pre> <p><strong>Var</strong> is a variable, and can change (but after it is defined not to a different data type.)</p> <pre><code>var number = 5 number = 6 //This will compile. </code></pre> <p>If you try changing the variable to a different dataType, it will not work</p> <pre><code>var number = 5 number = "Hello World" //This will not compile. </code></pre>
<p>let keyword defines a constant</p> <pre><code>let myNum = 7 </code></pre> <p>so myNum can't be changed afterwards;</p> <p>But var defines an ordinary variable.</p> <p>The value of a constant doesn’t need to be known at compile time, but you must assign it a value exactly once.</p> <p>You can use almost any character you like for constant and variable names, including Unicode characters;</p> <p>e.g.</p> <pre><code>var x = 7 // here x is instantiated with 7 x = 99 // now x is 99 it means it has been changed. </code></pre> <p>But if we take let then...</p> <pre><code>let x = 7 // here also x is instantiated with 7 x = 99 // this will a compile time error </code></pre>
<p>The main difference is that <code>var</code> variable value can change, and <code>let</code> can't. If you want to have a user input data, you would use <code>var</code> so the value can be changed and use <code>let</code> datatype variable so the value can not be changed. </p> <pre><code>var str = "dog" // str value is "dog" str = "cat" // str value is now "cat" let strAnimal = "dog" // strAnimal value is "dog" strAnimal = "cat" // Error ! </code></pre>
<p>Found a good answer hope it can help :) <img src="https://i.stack.imgur.com/PMiNh.png" alt="enter image description here"> </p>
<p>Like Luc-Oliver, NullData, and a few others have said here, <code>let</code> defines immutable data while <code>var</code> defines mutable data. Any <code>func</code> that can be called on the variable that is marked <code>mutating</code> can only be called if it is a <code>var</code> variable (compiler will throw error). This also applies to <code>func</code>'s that take in an <code>inout</code> variable.</p> <p>However, <code>let</code> and <code>var</code> also mean that the variable cannot be reassigned. It has two meanings, both with very similar purposes</p>
<p><strong>Very simple:</strong></p> <ul> <li><code>let</code> is constant. </li> <li><code>var</code> is dynamic.</li> </ul> <p><strong>Bit of description:</strong></p> <p><code>let</code> creates a constant. (sort of like an <code>NSString</code>). You can't change its value once you have set it. You can still add it to other things and create new variables though.</p> <p><code>var</code> creates a variable. (sort of like <code>NSMutableString</code>) so you can change the value of it. But this has been answered several times.</p>
<p><strong>var</strong> value can be change, after initialize. But <strong>let</strong> value is not be change, when it is intilize once.</p> <p><strong>In case of var</strong></p> <pre><code> function variable() { var number = 5, number = 6; console.log(number); // return console value is 6 } variable(); </code></pre> <p><strong>In case of let</strong></p> <pre><code> function abc() { let number = 5, number = 6; console.log(number); // TypeError: redeclaration of let number } abc(); </code></pre>
<p>Everyone has pretty much answered this but here's a way you can remember what's what </p> <p>Let will always say the same think of "let" as let this work for once and always as for "var" variable's can always change hence them being called variable's </p>
<p>The keyword var is used to define a variable whose value you can easily change like this:</p> <pre><code>var no1 = 1 // declaring the variable no1 = 2 // changing the value since it is defined as a variable not a constant </code></pre> <p>However, the let keyword is only to create a constant used when you do not want to change the value of the constant again. If you were to try changing the value of the constant, you will get an error:</p> <pre><code>let no2 = 5 // declaring no2 as a constant no2 = 8 // this will give an error as you cannot change the value of a constant </code></pre>
<p>Let is an immutable variable, meaning that it cannot be changed, other languages call this a constant. In C++ it you can define it as const.</p> <p>Var is a mutable variable, meaning that it can be changed. In C++ (2011 version update), it is the same as using auto, though swift allows for more flexibility in the usage. This is the more well-known variable type to beginners.</p>
<p><code>var</code> is the only way to create a variables in swift. <code>var</code> doesn't mean dynamic variable as in the case of interpreted languages like javascript. For example,</p> <pre><code>var name = "Bob" </code></pre> <p>In this case, the type of variable <code>name</code> is inferred that name is of type <code>String</code>, we can also create variables by explicitly defining type, for example</p> <pre><code>var age:Int = 20 </code></pre> <p>Now if you assign a string to age, then the compiler gives the error. </p> <p><code>let</code> is used to declare constants. For example</p> <pre><code>let city = "Kathmandu" </code></pre> <p>Or we can also do,</p> <pre><code>let city:String = "Kathmandu" </code></pre> <p>If you try to change the value of city, it gives error at compile time.</p>