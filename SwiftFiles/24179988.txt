Call CGPatternCreate in Swift
<p>I'm wondering how to convert the following objective-c method to Swift function?</p> <pre><code>CGPatternRef pattern = CGPatternCreate(NULL, rect, CGAffineTransformIdentity, 24, 24, kCGPatternTilingConstantSpacing, true, &amp;callbacks); </code></pre> <p>My code:</p> <pre><code> let callbacks : CGPatternCallbacks = CGPatternCallbacks(version: 0) let pattern : CGPatternRef = CGPatternCreate(nil, rect, CGAffineTransformIdentity, 24, 24, kCGPatternTilingConstantSpacing, true, callbacks) </code></pre> <p>But I got an error message:</p> <blockquote> <p>'CGPatternCallbacks' is not convertible to 'CConstPointer'</p> </blockquote> <p>Is there any sample code for this? Thanks</p>
<p>Something like that </p> <pre><code>var callbacks : CGPatternCallbacks = CGPatternCallbacks(version: 0) var pattern = CGPatternCreate(nil, rect, CGAffineTransformIdentity, 24, 24, kCGPatternTilingConstantSpacing, true, &amp;callbacks) </code></pre>
<p>This solution is a problematic one:</p> <p>The pointer registered within CGPatternCallbacks (for a function that draws the pattern) should be CFunctionPointer&lt;(UnsafeMutablePointer, CGContext>)->Void) This means that the function pointer should be transformed to UnasfeMutablePointer then to COpaquePointer then to CFuncfionPointer </p> <p>And still anyway i'm getting an exception on function call, there is a simplier solution: [<a href="http://www.raywenderlich.com/90695/modern-core-graphics-with-swift-part-3][1]" rel="nofollow">http://www.raywenderlich.com/90695/modern-core-graphics-with-swift-part-3][1]</a></p>
<ol> <li><p>Option 1</p> <pre><code>//global function - outside of the class func myDrawColoredPattern(info: UnsafeMutablePointer&lt;Void&gt;, context: CGContextRef?) -&gt; Void { //draw pattern using context.... } var callbacks : CGPatternCallbacks = CGPatternCallbacks(version: 0, drawPattern: myDrawColoredPattern, releaseInfo: nil) let pattern: CGPatternRef? = CGPatternCreate(nil, rect, CGAffineTransformIdentity, 24, 24, CGPatternTiling.ConstantSpacing, true, &amp;callbacks) </code></pre></li> <li><p>Option 2 - the 'swift' way</p> <pre><code>let drawPattern: CGPatternDrawPatternCallback = { (_, context) in //draw pattern using context... } var callbacks = CGPatternCallbacks(version: 0, drawPattern: drawPattern, releaseInfo: nil) let pattern: CGPatternRef? = CGPatternCreate(nil, rect, CGAffineTransformIdentity, 24, 24, CGPatternTiling.ConstantSpacing, true, &amp;callbacks) </code></pre></li> </ol>