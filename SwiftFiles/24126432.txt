Swift nil values behaviour
<p>Can you send messages to <code>nil</code> in <code>Swift</code> the same way you can in <code>Objective-C</code> without causing a crash?</p> <p>I tried looking into the documentation and couldn't find anything relating to this.</p>
<p>Not exactly, you have to use <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/Swift_Programming_Language/OptionalChaining.html">Optional Chaining</a>. In swift, an instance can only be <code>nil</code> if it is declared as an "optional" type. Normally this looks like this:</p> <pre><code>var optionalString : String? </code></pre> <p><strong>Notice the <code>?</code> after the <code>String</code></strong> That is what makes it possible to be nil</p> <p>You cannot call a method on that variable unless you first "unwrap" it, unless you use the aforementioned Optional Chaining.</p> <p>With optional chaining you can call multiple methods deep, that all allow for a nil value to be returned:</p> <pre><code>var optionalResult = optionalString.method1()?.method2()?.method3() </code></pre> <p><code>optionalResult</code> can also be nil. If any of the methods in the chain return nil, methods after it are not called, instead optionalResult immediately gets set to nil.</p> <p>You cannot deal directly with an optional value until you explicitly handle the case that it is nil. You can do that in one of two ways:</p> <h2>Force it to unwrap blindly</h2> <pre><code>println(optionalString!) </code></pre> <p>This will throw a runtime error if it is nil, so you should be very sure that it is not nil</p> <h2>Test if it is nil</h2> <p>You can do this by using a simple if statement:</p> <pre><code>if optionalString { println(optionalString!) } else { // it was nil } </code></pre> <p>or you can assign it to a scoped variable so that you don't have to forcefully unwrap it:</p> <pre><code>if let nonoptionalString = optionalString { println(nonoptionalString) } else { // it was nil } </code></pre>