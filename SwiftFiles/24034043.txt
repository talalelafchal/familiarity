How do I check if a string contains another string in Swift?
<p>In <code>Objective-C</code> the code to check for a substring in an <code>NSString</code> is: </p> <pre><code>NSString *string = @"hello Swift"; NSRange textRange =[string rangeOfString:@"Swift"]; if(textRange.location != NSNotFound) { NSLog(@"exists"); } </code></pre> <p>But how do I do this in Swift?</p>
<p>You can just do what you have mentioned:</p> <pre><code>import Foundation ... string.containsString("Swift"); </code></pre> <p>From the docs:</p> <blockquote> <p>Swift’s <code>String</code> type is bridged seamlessly to Foundation’s <code>NSString</code> class. If you are working with the Foundation framework in Cocoa or Cocoa Touch, the entire <code>NSString</code> API is available to call on any <code>String</code> value you create, in addition to the String features described in this chapter. You can also use a String value with any API that requires an NSString instance.</p> </blockquote> <p>You need to <code>import Foundation</code> to bridge the <code>NSString</code> methods and make them available to Swift's String class.</p>
<p>Here is my first stab at this in the swift playground. I extend String by providing two new functions (contains and containsIgnoreCase)</p> <pre><code>extension String { func contains(other: String) -&gt; Bool{ var start = startIndex do{ var subString = self[Range(start: start++, end: endIndex)] if subString.hasPrefix(other){ return true } }while start != endIndex return false } func containsIgnoreCase(other: String) -&gt; Bool{ var start = startIndex do{ var subString = self[Range(start: start++, end: endIndex)].lowercaseString if subString.hasPrefix(other.lowercaseString){ return true } }while start != endIndex return false } } </code></pre> <p>Use it like this</p> <pre><code>var sentence = "This is a test sentence" sentence.contains("this") //returns false sentence.contains("This") //returns true sentence.containsIgnoreCase("this") //returns true "This is another test sentence".contains(" test ") //returns true </code></pre> <p>I'd welcome any feedback :)</p>
<p>From the docs, it seems that calling <code>containsString()</code> on a String should work:</p> <blockquote> <p>Swift’s String type is bridged seamlessly to Foundation’s NSString class. If you are working with the Foundation framework in Cocoa or Cocoa Touch, the entire NSString API is available to call on any String value you create, in addition to the String features described in this chapter. You can also use a String value with any API that requires an NSString instance.</p> </blockquote> <p>However, it doesn't seem to work that way.</p> <p>If you try to use <code>someString.containsString(anotherString)</code>, you will get a compile time error that states <code>'String' does not contain a member named 'containsString'</code>.</p> <p>So, you're left with a few options, one of which is to explicitly bridge your <code>String</code> to Objective-C by using <code>bridgeToObjectiveC()</code> other two involve explicitly using an <code>NSString</code> and the final one involves casting the <code>String</code> to an <code>NSString</code></p> <p>By bridging, you'd get:</p> <pre><code>var string = "hello Swift" if string.bridgeToObjectiveC().containsString("Swift") { println("YES") } </code></pre> <p>By explicitly typing the string as an <code>NSString</code>, you'd get:</p> <pre><code>var string: NSString = "hello Swift" if string.containsString("Swift") { println("YES") } </code></pre> <p>If you have an existing <code>String</code>, you can initialize an NSString from it by using NSString(string:):</p> <pre><code>var string = "hello Swift" if NSString(string: string).containsString("Swift") { println("YES") } </code></pre> <p>And finally, you can cast an existing <code>String</code> to an <code>NSString</code> as below</p> <pre><code>var string = "hello Swift" if (string as NSString).containsString("Swift") { println("YES") } </code></pre>
<p>You can do exactly the same call with Swift:</p> <pre><code>var string = "hello Swift" // renamed to range(of:"") in Swift 3.0 if string.rangeOfString("Swift") != nil{ println("exists") } // alternative: not case sensitive if string.lowercaseString.rangeOfString("swift") != nil { println("exists") } </code></pre> <p>I hope this is a helpful solution since some people, including me, encountered some strange problems by calling <code>containsString()</code>.</p> <p>PS. Don't forget to <code>import Foundation</code></p>
<p>string.containsString is only available in 10.10 Yosemite (and probably iOS8). Also bridging it to ObjectiveC crashes in 10.9. You're trying to pass a NSString to NSCFString. I don't know the difference, but I can say 10.9 barfs when it executes this code in a OS X 10.9 app. </p> <p>Here are the differences in Swift with 10.9 and 10.10: <a href="https://developer.apple.com/library/prerelease/mac/documentation/General/Reference/APIDiffsMacOSX10_10SeedDiff/index.html" rel="nofollow">https://developer.apple.com/library/prerelease/mac/documentation/General/Reference/APIDiffsMacOSX10_10SeedDiff/index.html</a> containsString is only available in 10.10</p> <p>Range of String above works great on 10.9. I am finding developing on 10.9 is super stable with Xcode beta2. I don't use playgrounds through or the command line version of playgrounds. I'm finding if the proper frameworks are imported the autocomplete is very helpful.</p>
<p>Just an addendum to the answers here.</p> <p>You can also do a local case insensitive test using: </p> <pre><code> - (BOOL)localizedCaseInsensitiveContainsString:(NSString *)aString </code></pre> <p>Example:</p> <pre><code> import Foundation var string: NSString = "hello Swift" if string.localizedCaseInsensitiveContainsString("Hello") { println("TRUE") } </code></pre> <p><strong>UPDATE</strong></p> <p>This is part of the Foundation Framework for iOS &amp; <strong>Mac OS X 10.10.x</strong> and was part of 10.10 at Time of my original Posting.</p> <blockquote> <p>Document Generated: 2014-06-05 12:26:27 -0700 OS X Release Notes Copyright © 2014 Apple Inc. All Rights Reserved.</p> <p><a href="https://developer.apple.com/library/mac/releasenotes/Foundation/RN-Foundation/#10_10StringEncodingDetection" rel="nofollow">OS X 10.10 Release Notes</a> Cocoa Foundation Framework</p> <p>NSString now has the following two convenience methods:</p> <p><code>- (BOOL)containsString:(NSString *)str;</code></p> <p><code>- (BOOL)localizedCaseInsensitiveContainsString:(NSString *)str;</code> </p> </blockquote>
<p>Of all of the answers here, I think they either don't work, or they're a bit of a hack (casting back to NSString). It's very likely that the correct answer to this has changed with the different beta releases.</p> <p>Here is what I use:</p> <pre><code>let string: String = "hello Swift" if string.rangeOfString("Swift") != nil { println("exists") } </code></pre> <p>The "!= nil" became required with Beta 5.</p>
<h2>Extension way</h2> <p>You can write extension <code>contains:</code> and <code>containsIgnoringCase</code> for <code>String</code></p> <pre><code>extension String { func contains(find: String) -&gt; Bool{ return self.rangeOfString(find) != nil } func containsIgnoringCase(find: String) -&gt; Bool{ return self.rangeOfString(find, options: NSStringCompareOptions.CaseInsensitiveSearch) != nil } } </code></pre> <hr> <p><em>Example:</em></p> <pre><code>var value = "Hello world" print(value.contains("Hello")) // true print(value.contains("bo")) // false print(value.containsIgnoringCase("hello")) // true print(value.containsIgnoringCase("Hello")) // true print(value.containsIgnoringCase("bo")) // false </code></pre>
<pre><code>// Search string exist in employee name finding. var empName:NSString! = employeeDetails[filterKeyString] as NSString Case sensitve search. let rangeOfSearchString:NSRange! = empName.rangeOfString(searchString, options: NSStringCompareOptions.CaseInsensitiveSearch) // Not found. if rangeOfSearchString.location != Foundation.NSNotFound { // search string not found in employee name. } // Found else { // search string found in employee name. } </code></pre>
<p>In iOS 8 and newer, you can use these two <code>NSString</code> methods:</p> <pre><code>@availability(iOS, introduced=8.0) func containsString(aString: String) -&gt; Bool @availability(iOS, introduced=8.0) func localizedCaseInsensitiveContainsString(aString: String) -&gt; Bool </code></pre>
<p>You can do this very easily in Swift using the code:</p> <pre><code>let string = "hello Swift"; let subString = (string as NSString).containsString("Swift") if(subString){println("Exist")} </code></pre>
<p>Another one. Supports case and diacritic options.</p> <p>Swift 3.0</p> <pre><code>struct MyString { static func contains(_ text: String, substring: String, ignoreCase: Bool = true, ignoreDiacritic: Bool = true) -&gt; Bool { var options = NSString.CompareOptions() if ignoreCase { _ = options.insert(NSString.CompareOptions.caseInsensitive) } if ignoreDiacritic { _ = options.insert(NSString.CompareOptions.diacriticInsensitive) } return text.range(of: substring, options: options) != nil } } </code></pre> <h2>Usage</h2> <pre><code>MyString.contains("Niels Bohr", substring: "Bohr") // true </code></pre> <h2>iOS 9+</h2> <p>Case and diacritic insensitive function available since iOS 9.</p> <pre><code>if #available(iOS 9.0, *) { "Für Elise".localizedStandardContains("fur") // true } </code></pre>
<p>You don't need to write any custom code for this. Starting from the 1.2 version Swift has already had all the methods you need:</p> <ul> <li>getting string length: <code>count(string)</code>;</li> <li>checking if string contains substring: <code>contains(string, substring)</code>;</li> <li>checking if string starts with substring: <code>startsWith(string, substring)</code></li> <li>and etc.</li> </ul>
<p>Here you are:</p> <pre><code>let s = "hello Swift" if let textRange = s.rangeOfString("Swift") { NSLog("exists") } </code></pre>
<p>I've found a couple of interesting use cases. These variants make use of the rangeOfString method and I include the equality example to show how one might best use the search and comparison features of Strings in Swift 2.0</p> <pre><code>//In viewDidLoad() I assign the current object description (A Swift String) to self.loadedObjectDescription self.loadedObjectDescription = self.myObject!.description </code></pre> <blockquote> <p>Later after I've made changes to self.myObject, I can refer to the following string comparison routines (setup as lazy variables that return a Bool). This allows one to check the state at any time.</p> </blockquote> <pre><code>lazy var objectHasChanges : Bool = { guard self.myObject != nil else { return false } return !(self.loadedObjectDescription == self.myObject!.description) }() </code></pre> <blockquote> <p>A variant of this happens when sometimes I need to analyze a missing property on that object. A string search allows me to find a particular substring being set to nil (the default when an object is created).</p> </blockquote> <pre><code> lazy var isMissingProperty : Bool = { guard self.myObject != nil else { return true } let emptyPropertyValue = "myProperty = nil" return (self.myObject!.description.rangeOfString(emptyPropertyValue) != nil) ? true : false }() </code></pre>
<p>As of Xcode 7.1 and Swift 2.1 <code>containsString()</code> is working fine for me.</p> <pre><code>let string = "hello swift" if string.containsString("swift") { print("found swift") } </code></pre>
<p>Xcode 8/Swift 3 version:</p> <pre><code>let string = "hello Swift" if let range = string.range(of: "Swift") { print("exists at range \(range)") } else { print("does not exist") } if let lowercaseRange = string.lowercased().range(of: "swift") { print("exists at range \(lowercaseRange)") } else { print("does not exist") } </code></pre> <p>You can also use <code>contains</code>:</p> <pre><code>string.contains("swift") // false string.contains("Swift") // true </code></pre>
<p>Here you go! Ready for Xcode 8 and Swift 3.</p> <pre><code>import UIKit let mString = "This is a String that contains something to search." let stringToSearchUpperCase = "String" let stringToSearchLowerCase = "string" mString.contains(stringToSearchUpperCase) //true mString.contains(stringToSearchLowerCase) //false mString.lowercased().contains(stringToSearchUpperCase) //false mString.lowercased().contains(stringToSearchLowerCase) //true </code></pre>
<blockquote> <p>IN SWIFT 3.0</p> </blockquote> <pre><code>let str = "Hello Swift" if str.lowercased().contains("Swift".lowercased()) { print("String Contains Another String") } else { print("Not Exists") } </code></pre> <p><strong><em>Output</em></strong></p> <pre><code>String Contains Another String </code></pre>
<p>In Swift 3</p> <pre><code>if((a.range(of: b!, options: String.CompareOptions.caseInsensitive, range: nil, locale: nil)) != nil){ print("Done") } </code></pre>