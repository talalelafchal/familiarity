Save images in NSUserDefaults?
<p>Is it possible to save images into <code>NSUserDefaults</code> as an object and then retrieve for further use?</p>
<p>It's technically possible, but it's not advisable. Save the image to disk instead. NSUserDefaults is meant for small settings, not big binary data files.</p>
<p>To save an image in NSUserDefaults:</p> <pre><code>[[NSUserDefaults standardUserDefaults] setObject:UIImagePNGRepresentation(image) forKey:key]; </code></pre> <p>To retrieve an image from NSUserDefaults:</p> <pre><code>NSData* imageData = [[NSUserDefaults standardUserDefaults] objectForKey:key]; UIImage* image = [UIImage imageWithData:imageData]; </code></pre>
<p>Yes, you can use. But since it is for storage of preferences, you can better save images to document folder.</p> <p>And you can have the path in the <code>NSUserDefaults</code>, if required.</p>
<p>Yes , technically possible as in </p> <p><code>[[NSUserDefaults standardUserDefaults] setObject:UIImagePNGRepresentation(image) forKey:@"foo"];</code></p> <p>But not advisable because plists are not appropriate places for large blobs of binary data especially User Prefs. It would be better to save image to user docs folder and store the reference to that object as a URL or path.</p>
<p>Save image to NSUserDefault:</p> <pre><code>NSData *imageData; // create NSData-object from image imageData = UIImagePNGRepresentation([dic objectForKey:[NSString stringWithFormat:@"%d",i]]); // save NSData-object to UserDefaults [[NSUserDefaults standardUserDefaults] setObject:imageData forKey:[NSString stringWithFormat:@"%d",i]]; </code></pre> <p>Load Image from NSUserDefault:</p> <pre><code>NSData *imageData; // Load NSData-object from NSUserDefault imageData = [[NSUserDefaults standardUserDefaults] valueForKey:[NSString stringWithFormat:@"%d",i]]; // get Image from NSData [image setObject:[UIImage imageWithData:imageData] forKey:[NSString stringWithFormat:@"%d",i]]; </code></pre>
<p>From apple documentation,</p> <blockquote> <p>The NSUserDefaults class provides convenience methods for accessing common types such as floats, doubles, integers, Booleans, and URLs. A default object must be a property list, that is, an instance of (or for collections a combination of instances of): NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary. If you want to store any other type of object, you should typically archive it to create an instance of NSData.</p> </blockquote> <p>You can save image like this:-</p> <pre><code>[[NSUserDefaults standardUserDefaults] setObject:UIImagePNGRepresentation([UIImage imageNamed:@"yourimage.gif"])forKey:@"key_for_your_image"]; </code></pre> <p>And read like this:-</p> <pre><code> NSData* imageData = [[NSUserDefaults standardUserDefaults]objectForKey:@"key_for_your_image"]; UIImage* image = [UIImage imageWithData:imageData]; </code></pre>
<p><strong>ATTENTION! IF YOU'RE WORKING UNDER iOS8/XCODE6 SEE MY UPDATE BELOW</strong></p> <p>For those who still looking for answer here is code of "advisable" way to save image in NSUserDefaults. You SHOULD NOT save image data directly into NSUserDefaults!</p> <p><strong>Write data:</strong></p> <pre><code>// Get image data. Here you can use UIImagePNGRepresentation if you need transparency NSData *imageData = UIImageJPEGRepresentation(image, 1); // Get image path in user's folder and store file with name image_CurrentTimestamp.jpg (see documentsPathForFileName below) NSString *imagePath = [self documentsPathForFileName:[NSString stringWithFormat:@"image_%f.jpg", [NSDate timeIntervalSinceReferenceDate]]]; // Write image data to user's folder [imageData writeToFile:imagePath atomically:YES]; // Store path in NSUserDefaults [[NSUserDefaults standardUserDefaults] setObject:imagePath forKey:kPLDefaultsAvatarUrl]; // Sync user defaults [[NSUserDefaults standardUserDefaults] synchronize]; </code></pre> <p><strong>Read data:</strong></p> <pre><code>NSString *imagePath = [[NSUserDefaults standardUserDefaults] objectForKey:kPLDefaultsAvatarUrl]; if (imagePath) { self.avatarImageView.image = [UIImage imageWithData:[NSData dataWithContentsOfFile:imagePath]]; } </code></pre> <p><strong>documentsPathForFileName:</strong></p> <pre><code>- (NSString *)documentsPathForFileName:(NSString *)name { NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsPath = [paths objectAtIndex:0]; return [documentsPath stringByAppendingPathComponent:name]; } </code></pre> <p><strong>For iOS8/XCODE6</strong> As tmr and DevC mentioned in comments below there is a problem with xcode6/ios8. The difference between xcode5 and xcode 6 installation process is that xcode6 <strong>changes apps UUID</strong> after each run in xcode (see hightlighted part in path: /var/mobile/Containers/Data/Application/<strong>B0D49CF5-8FBE-4F14-87AE-FA8C16A678B1</strong>/Documents/image.jpg).</p> <p>So there are 2 workarounds:</p> <ol> <li>Skip that problem, as once app installed on real device it's never changes UUID (in fact it does, but it is new app)</li> <li>Save relative path to required folder (in our case to app's root)</li> </ol> <p>Here is swift version of code as a bonus (with 2nd approach):</p> <p><strong>Write data:</strong></p> <pre><code>let imageData = UIImageJPEGRepresentation(image, 1) let relativePath = "image_\(NSDate.timeIntervalSinceReferenceDate()).jpg" let path = self.documentsPathForFileName(relativePath) imageData.writeToFile(path, atomically: true) NSUserDefaults.standardUserDefaults().setObject(relativePath, forKey: "path") NSUserDefaults.standardUserDefaults().synchronize() </code></pre> <p><strong>Read data:</strong></p> <pre><code>let possibleOldImagePath = NSUserDefaults.standardUserDefaults().objectForKey("path") as String? if let oldImagePath = possibleOldImagePath { let oldFullPath = self.documentsPathForFileName(oldImagePath) let oldImageData = NSData(contentsOfFile: oldFullPath) // here is your saved image: let oldImage = UIImage(data: oldImageData) } </code></pre> <p><strong>documentsPathForFileName:</strong></p> <pre><code>func documentsPathForFileName(name: String) -&gt; String { let paths = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true); let path = paths[0] as String; let fullPath = path.stringByAppendingPathComponent(name) return fullPath } </code></pre>
<p>While it is possible to save a <code>UIImage</code> to <code>NSUserDefaults</code>, it is often not recommended as it is not the most efficient way to save images; a more efficient way is to save your image in the application's <code>Documents Directory</code>.</p> <p>For the purpose of this question, I have attached the answer to your question, along with the more efficient way of saving a <code>UIImage</code>.</p> <hr> <h2>NSUserDefaults (Not Recommended)</h2> <p><strong>Saving to NSUserDefaults</strong></p> <p>This method allows you to save any <code>UIImage</code> to <code>NSUserDefaults</code>.</p> <pre><code>-(void)saveImageToUserDefaults:(UIImage *)image ofType:(NSString *)extension forKey:(NSString *)key { NSData * data; if ([[extension lowercaseString] isEqualToString:@"png"]) { data = UIImagePNGRepresentation(image); } else if ([[extension lowercaseString] isEqualToString:@"jpg"]) { data = UIImageJPEGRepresentation(image, 1.0); } NSUserDefaults * userDefaults = [NSUserDefaults standardUserDefaults]; [userDefaults setObject:data forKey:key]; [userDefaults synchronize]; } </code></pre> <p>This is how you call it:</p> <pre><code>[self saveImageToUserDefaults:image ofType:@"jpg" forKey:@"myImage"]; [[NSUserDefaults standardUserDefaults] synchronize]; </code></pre> <hr> <p><strong>Loading From NSUserDefaults</strong></p> <p>This method allows you to load any <code>UIImage</code> from <code>NSUserDefaults</code>.</p> <pre><code>-(UIImage *)loadImageFromUserDefaultsForKey:(NSString *)key { NSUserDefaults * userDefaults = [NSUserDefaults standardUserDefaults]; return [UIImage imageWithData:[userDefaults objectForKey:key]]; } </code></pre> <p>This is how you call it:</p> <pre><code>UIImage * image = [self loadImageFromUserDefaultsForKey:@"myImage"]; </code></pre> <hr> <h2>A Better Alternative</h2> <p><strong>Saving to Documents Directory</strong></p> <p>This method allows you to save any <code>UIImage</code> to the <code>Documents Directory</code> within the app.</p> <pre><code>-(void)saveImage:(UIImage *)image withFileName:(NSString *)imageName ofType:(NSString *)extension inDirectory:(NSString *)directoryPath { if ([[extension lowercaseString] isEqualToString:@"png"]) { [UIImagePNGRepresentation(image) writeToFile:[directoryPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.%@", imageName, @"png"]] options:NSAtomicWrite error:nil]; } else if ([[extension lowercaseString] isEqualToString:@"jpg"] || [[extension lowercaseString] isEqualToString:@"jpeg"]) { [UIImageJPEGRepresentation(image, 1.0) writeToFile:[directoryPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.%@", imageName, @"jpg"]] options:NSAtomicWrite error:nil]; } else { NSLog(@"Image Save Failed\nExtension: (%@) is not recognized, use (PNG/JPG)", extension); } } </code></pre> <p>This is how you call it:</p> <pre><code>NSString * documentsDirectory = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]; [self saveImage:image withFileName:@"Ball" ofType:@"jpg" inDirectory:documentsDirectory]; </code></pre> <hr> <p><strong>Loading From Documents Directory</strong></p> <p>This method allows you to load any <code>UIImage</code> from the application's <code>Documents Directory</code>.</p> <pre><code>-(UIImage *)loadImageWithFileName:(NSString *)fileName ofType:(NSString *)extension inDirectory:(NSString *)directoryPath { UIImage * result = [UIImage imageWithContentsOfFile:[NSString stringWithFormat:@"%@/%@.%@", directoryPath, fileName, [extension lowercaseString]]]; return result; } </code></pre> <p>This is how you call it:</p> <pre><code>NSString * documentsDirectory = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]; UIImage * image = [self loadImageWithFileName:@"Ball" ofType:@"jpg" inDirectory:documentsDirectory]; </code></pre> <hr> <h2>A Different Alternative</h2> <p><strong>Saving UIImage to Photo Library</strong></p> <p>This method allows you to save any <code>UIImage</code> to the device's <code>Photo Library</code>, and is called as follows:</p> <pre><code>UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil); </code></pre> <p><strong>Saving multiple UIImages to Photo Library</strong></p> <p>This method allows you to save multiple <code>UIImages</code> to the device's <code>Photo Library</code>.</p> <pre><code>-(void)saveImagesToPhotoAlbums:(NSArray *)images { for (int x = 0; x &lt; [images count]; x++) { UIImage * image = [images objectAtIndex:x]; if (image != nil) UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil); } } </code></pre> <p>This is how you call it:</p> <pre><code>[self saveImagesToPhotoAlbums:images]; </code></pre> <p>Where <code>images</code> is your <code>NSArray</code> composed of <code>UIImages</code>.</p>
<p><strong>For swift 2.2</strong></p> <p><strong>To store:</strong></p> <pre><code>NSUserDefaults.standardUserDefaults().setObject(UIImagePNGRepresentation(chosenImage), forKey: kKeyImage) </code></pre> <p><strong>To retrieve:</strong></p> <pre><code>if let imageData = NSUserDefaults.standardUserDefaults().objectForKey(kKeyImage), let image = UIImage(data: imageData as! NSData){ // use your image here... } </code></pre>