How do I get the current version of my ios project in code?
<p>I would like to be able to get the current version of my ios project/app as an NSString object without having to define a constant in a file somewhere. I don't want to change my version value in 2 places.</p> <p>The value needs to be updated when I bump my version in the Project target summary.</p>
<p>You can get the version and build numbers as follows:</p> <pre><code>NSString * version = [[NSBundle mainBundle] objectForInfoDictionaryKey: @"CFBundleShortVersionString"]; NSString * build = [[NSBundle mainBundle] objectForInfoDictionaryKey: (NSString *)kCFBundleVersionKey]; </code></pre> <p>or in Swift</p> <pre><code>let version = NSBundle.mainBundle().objectForInfoDictionaryKey("CFBundleShortVersionString") as! String let appBundle = NSBundle.mainBundle().objectForInfoDictionaryKey(kCFBundleVersionKey as String) as! String </code></pre> <p>I have the following methods in a category on <code>UIApplication</code>:</p> <pre><code>+ (NSString *) appVersion { return [[NSBundle mainBundle] objectForInfoDictionaryKey: @"CFBundleShortVersionString"]; } + (NSString *) build { return [[NSBundle mainBundle] objectForInfoDictionaryKey: (NSString *)kCFBundleVersionKey]; } + (NSString *) versionBuild { NSString * version = [self appVersion]; NSString * build = [self build]; NSString * versionBuild = [NSString stringWithFormat: @"v%@", version]; if (![version isEqualToString: build]) { versionBuild = [NSString stringWithFormat: @"%@(%@)", versionBuild, build]; } return versionBuild; } </code></pre> <p><strong>Gist:</strong> <a href="https://gist.github.com/ashleymills/c37efb46c9dbef73d5dd">https://gist.github.com/ashleymills/c37efb46c9dbef73d5dd</a></p> <hr> <p>Here's the equivalent in Swift:</p> <pre><code>extension UIApplication { class func appVersion() -&gt; String { return NSBundle.mainBundle().objectForInfoDictionaryKey("CFBundleShortVersionString") as! String } class func appBuild() -&gt; String { return NSBundle.mainBundle().objectForInfoDictionaryKey(kCFBundleVersionKey as String) as! String } class func versionBuild() -&gt; String { let version = appVersion(), build = appBuild() return version == build ? "v\(version)" : "v\(version)(\(build))" } } </code></pre> <p><strong>Gist:</strong> <a href="https://gist.github.com/ashleymills/6ec9fce6d7ec2a11af9b">https://gist.github.com/ashleymills/6ec9fce6d7ec2a11af9b</a></p>
<p>To do this in Swift use:</p> <pre><code>let version : AnyObject! = NSBundle.mainBundle().objectForInfoDictionaryKey("CFBundleShortVersionString") println("Version: " + version.description) </code></pre>
<p>In Swift, you can get bundle version by using:</p> <pre><code>let info:NSDictionary = NSBundle.mainBundle().infoDictionary! let version:String = info.objectForKey("CFBundleShortVersionString") as! String versionLabel.text = "Version:" + version </code></pre>
<p>An open source project of mine, <a href="https://github.com/Stunner/App-Update-Tracker/blob/master/AppUpdateTracker/AppUpdateTracker.h" rel="nofollow">App Update Tracker</a>, offers this functionality (and more) in the form of class methods: </p> <ul> <li><code>+ (NSString *)getShortVersionString</code></li> <li><code>+ (NSString *)getLongVersionString</code></li> </ul> <p>You would use it like so:</p> <pre><code>#import "AppUpdateTracker.h" NSLog(@"short version: %@", [AppUpdateTracker getShortVersionString]); NSLog(@"long version: %@", [AppUpdateTracker getLongVersionString]); </code></pre>
<p>So heres a Swift version for both of these separately:</p> <pre><code>let versionNumber = NSBundle.mainBundle().objectForInfoDictionaryKey("CFBundleShortVersionString") as! String let buildNumber = NSBundle.mainBundle().objectForInfoDictionaryKey("CFBundleVersion") as! String </code></pre> <p>Its included in this repo, check it out:</p> <p><a href="https://github.com/goktugyil/EZSwiftExtensions" rel="nofollow">https://github.com/goktugyil/EZSwiftExtensions</a></p>
<p>In Objective C: </p> <p>1)For getting App version you have to use a:</p> <pre><code>NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"]; </code></pre> <p>2)For getting Build version you have to use a:</p> <pre><code>NSString *buildVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"]; </code></pre>
<p>Here's what worked on <strong>Xcode 8, Swift 3:</strong></p> <pre><code>let gAppVersion = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") ?? "0" let gAppBuild = Bundle.main.object(forInfoDictionaryKey: "CFBundleVersion") ?? "0" print("Version: \(gAppVersion)") print("Build: \(gAppBuild)") </code></pre>