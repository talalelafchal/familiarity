iOS Swift 3 - UIDatePicker
I have a UIDatePicker that shows the day, month and the year. But I don't know how to get those parameters. So What is the best way to get the day, month and year from UIDatePicker using Swift 3?
Create IBOutlet of UIDatePicker and connect it properly then use below code to get day, month, year ect. var comp = NSDateComponents() @IBOutlet weak var datePicker: UIDatePicker! override func viewDidLoad() { super.viewDidLoad() datePicker.addTarget(self, action: Selector("datePickerChanged:"), forControlEvents: UIControlEvents.ValueChanged) } func datePickerChanged(datePicker:UIDatePicker){ let dateFormatter = NSDateFormatter() dateFormatter.dateStyle = NSDateFormatterStyle.ShortStyle dateFormatter.timeStyle = NSDateFormatterStyle.ShortStyle let cal = NSCalendar.currentCalendar() comp = cal.components([.Era, .Day, .Month, .Year, .Hour, .Minute] , fromDate: datePicker.date) // getting day, month, year ect print ("Era:\(comp.era) Date:\(comp.day) Month:\(comp.month) Month:\(comp.year) Hours: \(comp.hour) Minuts:\(comp.minute)") }
Suppose if you want to show datePicker on tapping textfield and when user select some date from it then it will automatically populate on your textfield .  @IBOutlet weak var dateTextField: UITextField! let datePickerView:UIDatePicker = UIDatePicker() datePickerView.datePickerMode = UIDatePickerMode.date dateTextField.inputView = datePickerView datePickerView.addTarget(self, action: #selector(ViewController.datePickerValueChanged), for: UIControlEvents.valueChanged) // Make a dateFormatter in which format you would like to display the selected date in the textfield. func datePickerValueChanged(sender:UIDatePicker) { let dateFormatter = DateFormatter() dateFormatter.dateStyle = DateFormatter.Style.medium dateFormatter.timeStyle = DateFormatter.Style.none dateTextField.text = dateFormatter.string(from: sender.date) } Here Sender.date which is the instance of UIDatePicker pick up the date from the datepicker and populate on your textfield.
The problem can be solved in numerous way. If you are looking for a solution only using code:  class Foo: UIViewController { // Lets create your picker - Can be IBOutlet too lazy var datePicker: UIDatePicker = { let picker = UIDatePicker() picker.datePickerMode = .date return picker }() override func viewDidLoad() { super.viewDidLoad() //Observe the value changes in datePickerValueChanged function for example datePicker.addTarget(self, action: #selector(datePickerValueChanged), for: .valueChanged) } func datePickerValueChanged(sender: UIDatePicker) { // Function will be called every time picker changes it's value // You can access to it the following way print(sender.date) } } The other way if you have your UIDatePicker in Interface Builder. You pretty much need to the same thing, like above, but i a slightly different way. Click on your UIDatePicker in Interface Builder: You see the Value Changed option at the buttom. Now you grab and drag an IBAction to your viewController, and set up your connection like this: This way you achive the same as the first example, because you end up with pretty much the same function: @IBAction func datePickerValueChanged(sender: UIDatePicker) { print(sender.date) }
In Swift 3 you can use DateComponents for that like this way. First add action on datepicker for .valueChanged events. datepicker.addTarget(self, action: #selector(dateChanged(_:)), for: .valueChanged) Then get selected day, month and year using DateComponents in the action. func dateChanged(_ sender: UIDatePicker) { let componenets = Calendar.current.dateComponents([.year, .month, .day], from: sender.date) if let day = componenets.day, let month = componenets.month, let year = componenets.year { print("\(day) \(month) \(year)") } }