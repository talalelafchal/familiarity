'SKNode!' is not a subtype of 'SKNode'
<p>I can't figure out why I am getting this error on the last line: 'SKNode!' is not a subtype of 'SKNode'</p> <pre><code>func move_background(){ let enumerationBlock: (SKNode, CMutablePointer&lt;ObjCBool&gt;) -&gt; Void = { bg, stop in var bg_velocity = CGPointMake(0,CGFloat(-self.bg_velocity)) var distance_to_move = self.point_multiply_scalar(bg_velocity, b: self.dt!) bg.position = self.point_add(bg.position, b: distance_to_move) if bg.position.y &lt;= -bg.frame.height { bg.position = CGPointMake(bg.position.x, bg.position.y + bg.frame.height * 2) } } self.enumerateChildNodesWithName("bg", usingBlock: enumerationBlock) } </code></pre> <p>Can any of you help me out?</p>
<p>In the SKNode class, the block argument to this message is of the type <code>(void (^)(SKNode *node, BOOL *stop))</code></p> <p>When Swift imports an Objective-C class, all of its message arguments and return values are imported as optionals -- arguments you pass to functions are always <code>NSString?</code> or <code>NDSData?</code>, not just <code>NSString</code> or <code>NSData</code>. They do this because all pointers in Obj-C can be nil, but a <code>var</code> in Swift <em>can't</em> be nil unless it has a question mark at the end, thus making it an "optional" type.</p> <p>So when you define your <code>enmuerationBlock</code>, it should be of the type</p> <pre><code>(SKNode?, CMutablePointer&lt;ObjCBool&gt;) -&gt; Void </code></pre> <hr> <h3>EDIT answering flainez's question below:</h3> <p>When you have a mutable pointer, you dereference it by obtaining an <code>UnsafePointer</code> thus</p> <pre><code>var val :CMutablePointer&lt;Bool&gt; = /* get this from somewhere */ val.withUnsafePointer() { (p :UnsafePointer&lt;Bool&gt;) in p.memory = true /* or whatever */ } </code></pre> <p><code>.withUnsafePointer</code> yields an <code>UnsafePointer&lt;T&gt;</code> to the block, and <code>UnsafePointer&lt;T&gt;</code> has a memory property that is assignable.</p> <p><strong>Annoying:</strong> You can't test this in the Playground's REPL, it always fails, but it works when you compile it to a proper target.</p>