Swift - Split string over multiple lines
<p>How could I split a string over multiple lines such as below?</p> <pre><code>var text:String = "This is some text over multiple lines" </code></pre>
<p>Unfortunately, swift doesn't appear to allow you to have a single literal over multiple lines but you can add literals together over multiple lines:</p> <pre><code>var text:String = "This is some text " + "over multiple lines" </code></pre>
<p>This was the first disappointing thing about Swift which I noticed. Almost all scripting languages allow for multi-line strings.</p> <p>C++11 added raw string literals which allow you to <a href="http://stackoverflow.com/questions/19075999/what-is-the-rationale-for-parenthesis-in-c11s-raw-string-literals-r">define your own terminator</a></p> <p>C# has its <a href="http://dotnetslackers.com/CSharp/re-51752_The_Chash_String_Literal.aspx">@literals</a> for multi-line strings.</p> <p>Even plain C and thus old-fashioned C++ and Objective-C allow for concatentation simply by putting multiple literals adjacent, so quotes are collapsed. Whitespace doesn't count when you do that so you can put them on different lines (but need to add your own newlines):</p> <pre><code>const char* text = "This is some text\n" "over multiple lines"; </code></pre> <p>As swift doesn't know you have put your text over multiple lines, I have to fix connor's sample, similarly to my C sample, explictly stating the newline:</p> <pre><code>var text:String = "This is some text \n" + "over multiple lines" </code></pre>
<p>I used an extension on String to achieve multiline strings while avoiding the compiler hanging bug. It also allows you to specify a separator so you can use it a bit like Python's join function</p> <pre><code>extension String { init(sep:String, _ lines:String...){ self = "" for (idx, item) in lines.enumerate() { self += "\(item)" if idx &lt; lines.count-1 { self += sep } } } init(_ lines:String...){ self = "" for (idx, item) in lines.enumerate() { self += "\(item)" if idx &lt; lines.count-1 { self += "\n" } } } } println( String( "Hello", "World!" ) ) "Hello World!" println( String(sep:", ", "Hello", "World!" ) ) "Hello, World!" </code></pre>
<p>As pointed out by litso, repeated use of the <code>+</code>-Operator in one expression can lead to XCode Beta hanging (just checked with XCode 6 Beta 5): <a href="http://stackoverflow.com/questions/24310246/xcode-6-beta-not-compiling">Xcode 6 Beta not compiling</a></p> <p>An alternative for multiline strings for now is to use an array of strings and <code>reduce</code> it with <code>+</code>:</p> <pre><code>var text = ["This is some text ", "over multiple lines"].reduce("", +) </code></pre> <p>Or, arguably simpler, using <code>join</code>:</p> <pre><code>var text = "".join(["This is some text ", "over multiple lines"]) </code></pre>
<p>The following example depicts a multi-line continuation, using parenthesis as a simple workaround for the Swift bug as of Xcode 6.2 Beta, where it complains the expression is too complex to resolve in a reasonable amount time, and to consider breaking it down into smaller pieces:</p> <pre><code> . . . return String(format:"\n" + (" part1: %d\n" + " part2: %d\n" + " part3: \"%@\"\n" + " part4: \"%@\"\n" + " part5: \"%@\"\n" + " part6: \"%@\"\n") + (" part7: \"%@\"\n" + " part8: \"%@\"\n" + " part9: \"%@\"\n" + " part10: \"%@\"\n" + " part12: \"%@\"\n") + " part13: %f\n" + " part14: %f\n\n", part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14) . . . </code></pre>
<p>You can using unicode equals for enter or <code>\n</code> and implement them inside you string. For example: <code>\u{0085}</code>.</p>
<p>Adding to @Connor answer, there needs to be \n also. Here is revised code:</p> <pre><code>var text:String = "This is some text \n" + "over multiple lines" </code></pre>
<p>Another way if you want to use a string variable with some predefined text,</p> <pre><code>var textFieldData:String = "John" myTextField.text = NSString(format: "Hello User, \n %@",textFieldData) as String myTextField.numberOfLines = 0 </code></pre>
<p>Sample</p> <pre><code>var yourString = "first line \n second line \n third line" </code></pre> <p>In case, you don't find the + operator suitable</p>
<p>I tried several ways but found an even better solution: Just use a "Text View" element. It's text shows up multiple lines automatically! Found here: <a href="http://stackoverflow.com/questions/13475961/uitextfield-multiple-lines">UITextField multiple lines</a></p>
<p><strong>Swift:</strong></p> <p>@connor is the right answer, but if you want to add lines in a print statement what you are looking for is <code>\n</code> and/or <code>\r</code>, these are called Escape Sequences or Escaped Characters, <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html" rel="nofollow">this is a link to Apple documentation on the topic.</a>.</p> <p>Example:</p> <pre><code>print("First line\nSecond Line\rThirdLine...") </code></pre>
<p>One approach is to set the label text to attributedText and update the string variable to include the HTML for line break (<code>&lt;br /&gt;</code>).</p> <p>For example:</p> <pre><code>var text:String = "This is some text&lt;br /&gt;over multiple lines" label.attributedText = text </code></pre> <p>Output:</p> <pre><code>This is some text over multiple lines </code></pre> <p>Hope this helps!</p>