Does Swift have documentation comments or tools?
<p>Many languages support <strong>documentation comments</strong> to allow a generator (like <code>javadoc</code> or <a href="http://www.stack.nl/~dimitri/doxygen/">doxygen</a>), generate the code documentation by parsing the same code.</p> <p>Does Swift have any type documentation comments or documentation generation tools?</p>
<p>I've found something interesting, digging in the Xcode binary. Files with the ending <code>.swiftdoc</code>. It definitely has docs, because these files contain the docs for the Swift UIKit / Foundation API, unfortunately it seems to be a proprietary file format, for use in the Documentation viewer in Xcode.</p>
<p>Maybe it's a good idea to have an eye on AppleDoc or Apple's own <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/HeaderDoc/tags/tags.html" rel="nofollow">HeaderDoc</a> which isn't recognized very much. I can still find some HeaderDoc hints in 10.9 Mavericks terminal (headerdoc2html)</p> <p>I recommend to read the latest "<a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/WhatsNewXcode.pdf" rel="nofollow">What's New In Xcode</a>"* (not sure if it's still under NDA) *The link points to the Xcode 5.1 version wich contains infos about HeaderDoc too.</p>
<p>Swift includes "///" comment handling (although probably not everything yet).</p> <p>Write something like:</p> <pre><code>/// Hey! func bof(a: Int) { } </code></pre> <p>Then option-click on the func name and voilà :)</p>
<p>As of Xcode 5.0, Doxygen and HeaderDoc structured comments are supported.</p> <p><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_5_0.html" rel="nofollow" title="What's New in Xcode 5.0">Source</a></p>
<p>Here are some things that work for documenting swift code in Xcode 6. It is very buggy and sensitive to colons, but it's better than nothing:</p> <pre><code>class Foo { /// This method does things. /// Here are the steps you should follow to use this method /// /// 1. Prepare your thing /// 2. Tell all your friends about the thing. /// 3. Call this method to do the thing. /// /// Here are some bullet points to remember /// /// * Do it right /// * Do it now /// * Don't run with scissors (unless it's tuesday) /// /// :param: name The name of the thing you want to do /// :returns: a message telling you we did the thing func doThing(name : String) -&gt; String { return "Did the \(name) thing"; } } </code></pre> <p>The above is rendered in Quick Help as you would expect with formatted numeric lists, bullet points, parameter and return value documentation.</p> <p>None of this is documented - file a Radar to help them along.</p>
<p>I can confirm that ShakenManChild has provided peopr solution</p> <p>Just make sure, you have an empty line below the description!</p> <p><img src="https://i.stack.imgur.com/qE37F.jpg" alt="An invalid situation"></p> <p><img src="https://i.stack.imgur.com/hMj45.jpg" alt="Proper way"></p> <p><img src="https://i.stack.imgur.com/b4gSO.jpg" alt="Another way"></p> <p><img src="https://i.stack.imgur.com/pdmbL.jpg" alt="Another commenting style"></p>
<p>Documentation comments are supported natively in Xcode, producing smartly rendered documentation in Quick Help (both in the popover when <kbd>&#8997;</kbd>-clicking symbols, and in the Quick Help Inspector <kbd>&#8997;&#8984;2</kbd>).</p> <p>Symbol documentation comments are now based on the same <a href="http://daringfireball.net/projects/markdown/syntax#list" rel="nofollow noreferrer">Markdown syntax</a> used by rich playground comments, so a lot of what you can do in playgrounds can now be used directly in source code documentation.</p> <p>For full details of the syntax, see <a href="https://developer.apple.com/library/prerelease/ios/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html#//apple_ref/doc/uid/TP40016497-CH2-SW1" rel="nofollow noreferrer"><em>Markup Formatting Reference</em></a>. Note that there are some discrepancies between the syntax for rich playground comments &amp; symbol documentation; these are pointed out in the document (e.g. block quotes can only be used in playgrounds).</p> <p>Below is an example and a list of the syntax elements that currently work for symbol documentation comments.</p> <hr> <h1>Updates</h1> <p><strong>Xcode 7 beta 4 ~</strong> Added "<code>- Throws: ...</code>" as a top-level list item which appears alongside parameters and return descriptions in Quick Help.</p> <p><strong>Xcode 7 beta 1 ~</strong> Some significant changes to syntax with Swift 2 - documentation comments now based on Markdown (same as playgrounds).</p> <p><strong>Xcode 6.3 (6D570) ~</strong> Indented text is now formatted as code blocks, with subsequent indentations being nested. It doesn't appear to be possible to leave a blank line in such a code block - trying to do so results in the text being tacked onto the end of the last line with any characters in it.</p> <p><strong>Xcode 6.3 beta ~</strong> Inline code can now be added to documentation comments using backticks.</p> <hr> <h1>Example for Swift 2</h1> <pre><code>/// Text like this appears in "Description". /// /// Leave a blank line to separate further text into paragraphs. /// /// You can use bulleted lists (use `-`, `+` or `*`): /// /// - Text can be _emphasised_ /// - Or **strong** /// /// Or numbered lists: /// /// 7. The numbers you use make no difference /// 0. The list will still be ordered, starting from 1 /// 5. But be sensible and just use 1, 2, 3 etc… /// /// --- /// /// More Stuff /// ========== /// /// Code /// ---- /// /// Use backticks for inline `code()`. Indentations of 4 spaces or more will create a code block, handy for example usage: /// /// // Create an integer, and do nothing with it /// let myInt = 42 /// doNothing(myInt) /// /// // Also notice that code blocks scroll horizontally instead of wrapping. /// /// Links &amp; Images /// -------------- /// /// Include [links](https://en.wikipedia.org/wiki/Hyperlink), and even images: /// /// ![Swift Logo](/Users/Stuart/Downloads/swift.png "The logo for the Swift programming language") /// /// - note: That "Note:" is written in bold. /// - requires: A basic understanding of Markdown. /// - seealso: `Error`, for a description of the errors that can be thrown. /// /// - parameters: /// - int: A pointless `Int` parameter. /// - bool: This `Bool` isn't used, but its default value is `false` anyway… /// - throws: A `BadLuck` error, if you're unlucky. /// - returns: Nothing useful. func doNothing(int: Int, bool: Bool = false) throws -&gt; String { if unlucky { throw Error.BadLuck } return "Totally contrived." } </code></pre> <p><img src="https://i.stack.imgur.com/yFPHB.png" alt="Swift Documentation Quick Help"></p> <hr> <h1>Syntax for Swift 2 (based on <a href="http://daringfireball.net/projects/markdown/syntax" rel="nofollow noreferrer">Markdown</a>)</h1> <p><br></p> <h2>Comment Style</h2> <p>Both <code>///</code> (inline) and <code>/** */</code> (block) style comments are supported for producing documentation comments. While I personally prefer the visual style of <code>/** */</code> comments, Xcode's automatic indentation can ruin formatting for this comment style when copying/pasting as it removes leading whitespace. For example:</p> <pre><code>/** See sample usage: let x = method(blah) */ </code></pre> <p>When pasting, the code block indentation is removed and it is no longer rendered as code:</p> <pre><code>/** See sample usage: let x = method(blah) */ </code></pre> <p>For this reason, I generally use <code>///</code>, and will use it for the rest of the examples in this answer.</p> <p><br></p> <h2>Block Elements</h2> <p><strong>Heading:</strong></p> <pre><code>/// # My Heading </code></pre> <p>or </p> <pre><code>/// My Heading /// ========== </code></pre> <p><br> <strong>Subheading:</strong></p> <pre><code>/// ## My Subheading </code></pre> <p>or</p> <pre><code>/// My Subheading /// ------------- </code></pre> <p><br> <strong>Horizontal rule:</strong></p> <pre><code>/// --- </code></pre> <p><br> <strong>Unordered (bulleted) lists:</strong></p> <pre><code>/// - An item /// - Another item </code></pre> <p>You can also use <code>+</code> or <code>*</code> for unordered lists, it just has to be consistent.</p> <p><br> <strong>Ordered (numbered) lists:</strong></p> <pre><code>/// 1. Item 1 /// 2. Item 2 /// 3. Item 3 </code></pre> <p><br> <strong>Code blocks:</strong></p> <pre><code>/// for item in array { /// print(item) /// } </code></pre> <p>An indentation of at least four spaces is required.</p> <p><br></p> <h2>Inline Elements</h2> <p><strong>Emphasis (italics):</strong></p> <pre><code>/// Add like *this*, or like _this_. </code></pre> <p><br> <strong>Strong (bold):</strong></p> <pre><code>/// You can **really** make text __strong__. </code></pre> <p>Note that you cannot mix asterisks (<code>*</code>) and underscores (<code>_</code>) on the same element.</p> <p><br> <strong>Inline code:</strong></p> <pre><code>/// Call `exampleMethod(_:)` to demonstrate inline code. </code></pre> <p><br> <strong>Links:</strong></p> <pre><code>/// [Link Text](https://en.wikipedia.org/wiki/Hyperlink) </code></pre> <p><br> <strong>Images:</strong></p> <pre><code>/// ![Alt Text](http://www.example.com/alt-image.jpg) </code></pre> <p>The URL can be either a web URL (using "http://") or an absolute file path URL (I can't seem to get relative file paths to work).</p> <p>The URLs for links and images can also be separated from the inline element in order to keep all URLs in one, manageable place:</p> <pre><code>/// A [link][1] an an ![image][2] /// /// ... /// /// [1]: http://www.example.com /// [2]: http://www.example.com/image.jpg </code></pre> <p><br></p> <h2>Keywords</h2> <p>In addition to the Markdown formatting, Xcode recognises other markup keywords to display prominently in Quick Help. These markup keywords mostly take the format <code>- &lt;keyword&gt;:</code> (the exception is <code>parameter</code>, which also includes the parameter name before the colon), where the keyword itself can be written with any combination of uppercase/lowercase characters.</p> <h3>Symbol Section keywords</h3> <p>The following keywords are displayed as prominent sections in the help viewer, below the "Description" section, and above the "Declared In" section. When included, their order is fixed as displayed below even though you can include them in whatever order you like in your comments.</p> <p><em>See the fully documented list of section keywords and their intended uses in the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Xcode/Reference/xcode_markup_formatting_ref/Parameter.html#//apple_ref/doc/uid/TP40016497-CH28-SW1" rel="nofollow noreferrer">Symbol Section Commands section of the Markup Formatting Reference</a>.</em></p> <pre><code>/// - parameters: /// - &lt;#parameter name#&gt;: /// - &lt;#parameter name#&gt;: /// - throws: /// - returns: </code></pre> <p>Alternatively, you can write each parameter this way:</p> <pre><code>/// - parameter &lt;#parameter name#&gt;: </code></pre> <h3>Symbol Description Field keywords</h3> <p>The following list of keywords are displayed as <strong>bold headings</strong> in the body of the "Description" section of the help viewer. They will appear in whatever order you write them in, as with the rest of the "Description" section.</p> <p><em>Full list paraphrased from <a href="http://ericasadun.com/2015/06/14/swift-header-documentation-in-xcode-7/" rel="nofollow noreferrer">this excellent blog article</a> by Erica Sadun. Also see the fully documented list of keywords and their intended uses in the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Xcode/Reference/xcode_markup_formatting_ref/Attention.html#//apple_ref/doc/uid/TP40016497-CH29-SW1" rel="nofollow noreferrer">Symbol Description Field Commands section of the Markup Formatting Reference</a>.</em></p> <p>Attributions:</p> <pre><code>/// - author: /// - authors: /// - copyright: /// - date: </code></pre> <p>Availability:</p> <pre><code>/// - since: /// - version: </code></pre> <p>Admonitions:</p> <pre><code>/// - attention: /// - important: /// - note: /// - remark: /// - warning: </code></pre> <p>Development State:</p> <pre><code>/// - bug: /// - todo: /// - experiment: </code></pre> <p>Implementation Qualities:</p> <pre><code>/// - complexity: </code></pre> <p>Functional Semantics:</p> <pre><code>/// - precondition: /// - postcondition: /// - requires: /// - invariant: </code></pre> <p>Cross Reference:</p> <pre><code>/// - seealso: </code></pre> <hr> <h1> Exporting Documentation</h1> <p>HTML documentation (designed to mimic Apple's own documentation) can be generated from inline documentation using <a href="https://github.com/realm/jazzy" rel="nofollow noreferrer">Jazzy</a>, an open-source command-line utility.</p> <pre><code>$ [sudo] gem install jazzy $ jazzy Running xcodebuild Parsing ... building site jam out ♪♫ to your fresh new docs in `docs` </code></pre> <p><em>Console example taken from <a href="http://nshipster.com/swift-documentation/" rel="nofollow noreferrer">this NSHipster article</a></em></p>
<p>If you're only using Swift then Jazzy is worth looking at.</p> <p><a href="https://github.com/realm/jazzy">https://github.com/realm/jazzy</a></p>
<p>You can do <a href="http://en.wikipedia.org/wiki/Literate_programming" rel="nofollow">Literate Programming</a> in Swift with <a href="http://jashkenas.github.io/docco/" rel="nofollow">Docco</a>.</p>
<p>Yes. Base common (I made snippets for it with Obj-C equivalent)</p> <p><strong>Objective-C:</strong></p> <pre><code>/** @brief &lt;#Short description - what it is doing#&gt; @discussion &lt;#Description#&gt; @param &lt;#paramName#&gt; &lt;#Description#&gt;. @return &lt;#dataType#&gt; &lt;#Description#&gt;. */ </code></pre> <p><strong>Swift</strong></p> <pre><code>/** &lt;#Short inline description - what it is doing#&gt; &lt;#Description#&gt; :param: &lt;#paramName#&gt; &lt;#Description#&gt;. :returns: &lt;#dataType#&gt; &lt;#Description#&gt;. */ </code></pre>
<p><strong>New in Xcode 8</strong>, you can select a method like this</p> <pre><code>func foo(bar: Int) -&gt; String { ... } </code></pre> <p>Then press <strong><code>command</code> + <code>option</code> + <code>/</code></strong> or choose <strong>"Structure" - "Add documentation"</strong> from Xcode's "Editor" menu, and it will generate the following comments template for you:</p> <pre><code>/// &lt;#Description#&gt; /// /// - parameter bar: &lt;#bar description#&gt; /// /// - returns: &lt;#return value description#&gt; </code></pre>