Dismissing the keyboard in a UIScrollView
<p>Alright, I have a couple of <code>UITextFields</code> and <code>UITextViews</code> inside a <code>UIScrollView</code>, and I'd like to set the keyboard to disappear whenever the <code>scrollview</code> is touched or scrolled (except when you touch down inside the text field/view, of course).</p> <p>My current attempt at doing this is replacing the <code>UIScrollView</code> with a subclass, and setting it to call a removeKeyboard function (defined inside the main view controller) inside the <em>touchesBegan</em> method. However, this only removes the keyboard for a normal touch, not when the view is simply scrolled. So, what's the best way to remove the keyboard inside a <code>UIScrollView</code>?</p> <p>Thanks in advance for your help.</p>
<p>Bit late but if anyone else is searching an answer to this problem, this is how I have gone about solving it:</p> <p>1) Create a tap gesture recognizer with a target callback method to dismiss your keyboard using resignFirstResponder on all your fields.</p> <p>2) Add the tap gesture to the scrollview.</p> <p>Here's an example:</p> <pre><code>UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hideKeyboard)]; // prevents the scroll view from swallowing up the touch event of child buttons tapGesture.cancelsTouchesInView = NO; [pageScrollView addGestureRecognizer:tapGesture]; [tapGesture release]; ... // method to hide keyboard when user taps on a scrollview -(void)hideKeyboard { [myTextFieldInScrollView resignFirstResponder]; } </code></pre>
<p>Try this scroll view delegate method - </p> <p>link delegate in IB to scroll view and then cop this code (modify as per your need). </p> <pre><code>- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate { //sample code [challengeABallotComponent.voterNameTextField resignFirstResponder]; [challengeABallotComponent.ballotNumberTextField resignFirstResponder]; [locationInformation.pollingLocation resignFirstResponder]; } </code></pre> <p>This should work. You can try other delegate methods too like </p> <pre><code> -(void)scrollViewDidScroll: (UIScrollView *)scrollView { //do your stuff } </code></pre>
<p>Try This</p> <p><code>[self.selectedViewController.view endEditing:YES]</code>;</p>
<p>When I added the gesture to a subclass of <code>UIScrollView</code>, I was having problems with the various gestures in my view tree interfering with each other, such as being able to click on subviews, scroll the view, and have the keyboard dismiss in all cases. I came up with this solution, which can be setup from a superclass of <code>UIScrollView</code> or from a <code>UIViewController</code>.</p> <p>The <code>DismissKeyboardTapGesture</code> class uses ARC, works with any text fields under the view, and doesn't take over any clicks from subviews like buttons. Also takes advantage of iOS7 scrolling effect to dismiss keyboard. </p> <p>Setting up from UISScrollView superclass:</p> <pre><code> _dismissKeyboard = [[DismissKeyboardTapGesture alloc] initWithView:self]; </code></pre> <p>or from UIViewController:</p> <pre><code> _dismissKeyboard = [[DismissKeyboardTapGesture alloc] initWithView:self.view]; </code></pre> <p>Here is the class: </p> <pre><code>@interface DismissKeyboardTapGesture : NSObject &lt;UIGestureRecognizerDelegate&gt; @end @implementation DismissKeyboardTapGesture - (id)initWithView:(UIView *)view { self = [super init]; if (self) { UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(singleTap:)]; singleTap.cancelsTouchesInView = NO; singleTap.delegate = self; [view addGestureRecognizer:singleTap]; if ([view respondsToSelector:@selector(setKeyboardDismissMode:)]) { // Bonus effect to dismiss keyboard by scrolling ((UIScrollView *)view).keyboardDismissMode = UIScrollViewKeyboardDismissModeInteractive; } } return self; } - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer { // Don't stop any existing gestures in our view from working if (otherGestureRecognizer.view == gestureRecognizer.view) { return YES; } return NO; } - (void)singleTap:(UIGestureRecognizer*)gestureRecognizer { // Close keyboard for any text edit views that are children of the main view [gestureRecognizer.view endEditing:YES]; } @end </code></pre>
<p>Here is the cleanest way to achieve this in iOS 7.0.</p> <pre><code>scrollView.keyboardDismissMode = UIScrollViewKeyboardDismissModeOnDrag; </code></pre> <p>Or</p> <pre><code>scrollView.keyboardDismissMode = UIScrollViewKeyboardDismissModeInteractive; </code></pre> <p>Swift:</p> <pre><code>scrollView.keyboardDismissMode = .OnDrag </code></pre> <p>Or</p> <pre><code>scrollView.keyboardDismissMode = .Interactive </code></pre>
<p>In <strong>Swift</strong>:</p> <p>Bit late but if anyone else is searching an answer to this problem, this is how I have gone about solving it:</p> <p>1) Create a tap gesture recognizer with a target callback method to dismiss your keyboard using resignFirstResponder on all your fields.</p> <p>2) Add the tap gesture to the scrollview.</p> <p>Here's an example:</p> <pre><code>import UIKit class ViewController: UIViewController { @IBOutlet var t1: UITextField! @IBOutlet var t2: UITextField! @IBOutlet var t3: UITextField! @IBOutlet var t4: UITextField! @IBOutlet var srcScrollView: UIScrollView! override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. let tapGesture: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: "hideKeyboard") // prevents the scroll view from swallowing up the touch event of child buttons tapGesture.cancelsTouchesInView = false srcScrollView.addGestureRecognizer(tapGesture) } func hideKeyboard() { t1.resignFirstResponder() t2.resignFirstResponder() t3.resignFirstResponder() t4.resignFirstResponder() } } </code></pre>
<p>Although the essence is the same, I prefer less code.</p> <p>Setting the keyboard to disappear when the scrollView is scrolled in Attributes inspector:</p> <p><img src="https://i.stack.imgur.com/RAwa2.png" alt="make keyboard disappear when scrollView is scrolled"></p> <p>Then disappear keyboard when scrollView is tapped:</p> <ol> <li>Drag a Tap Gesture Recognizer onto your scrollView</li> <li><img src="https://i.stack.imgur.com/JsGxv.png" alt="Ctrl-Drag"></li> <li><img src="https://i.stack.imgur.com/4nEkb.png" alt="Make an action"></li> <li>Only one line in the action —— <code>scrollView.endEditing(true)</code>. If you are using Objective-C, <code>[self.scrollView endEditing: YES];</code></li> </ol>
<p>A bit late but if anyone else is searching an answer to this problem with <strong>Swift 3</strong>:</p> <pre><code>func scrollViewDidScroll(_ scrollView: UIScrollView) { view.endEditing(true) } </code></pre>
<p>Look at keyboard dismiss mode of UIScrollView property.</p> <pre><code>// will hide keyboard when your text field is about to go beyond the keyboard. vwScrollView.keyboardDismissMode = UIScrollViewKeyboardDismissModeInteractive; // will hide keyboard instantly once the scroll view started scrolling by user. vwScrollView.keyboardDismissMode = UIScrollViewKeyboardDismissOnDrag; // If you need to hide keyboard on tap of scroll view,consider adding a tap gesture or sub class and override touchesbegan: method. </code></pre> <p>Happy to help!</p>