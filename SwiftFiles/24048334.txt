Swift: Errors when using different integer sizes
<p>I've been trying out Swift, since it's obviously the direction that Apple wants us to go in. However, I've been really annoyed with the fact that you can't seem to add integers of different sizes:</p> <pre><code> var a: Int64 = 1500 var b: Int32 = 12349 var c = a + b if a &lt; b { ... } </code></pre> <p>The yielded error is "Could not find an overload for '+' that accepts the supplied argument' — obviously since they are object types. None of the class methods seem to be of any help in up/down-converting integers.</p> <p>Same situation applies with any of the type aliases, obviously, (CInt + CLong).</p> <p>I can see a lot of real-world situations where it is immensely practical to be able to do integer arithmetic let alone comparisons or bitwise operations on two disparately-sized integers.</p> <p>How to solve this? Explicit casting with the <b>as</b> operator doesn't seem to work. The Swift language book isn't much help either as it doesn't really discuss this scenario.</p>
<p>The Swift language book does discuss this scenario in the chapter “Numeric Type Conversion”:</p> <pre><code>let twoThousand: UInt16 = 2_000 let one: UInt8 = 1 let twoThousandAndOne = twoThousand + UInt16(one) </code></pre> <blockquote> <p>Because both sides of the addition are now of type UInt16, the addition is allowed. The output constant (twoThousandAndOne) is inferred to be of type UInt16, because it is the sum of two UInt16 values.</p> </blockquote>
<pre><code>let a: Int64 = 1500 let b: Int32 = 12349 let c = a + Int64(b) println("The value of c is \(c)") </code></pre>