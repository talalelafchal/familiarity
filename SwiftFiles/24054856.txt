How to share (MVC) model between controllers in Swift / XCode?
<p>I am currently creating my first Swift / Mac application and I have the problem of sharing a model (in the MVC sense) between several controllers.</p> <p>In C# for example one would first create a model, then a number of view models, and then plug that model into them like this:</p> <pre><code>var gameEngine = new MyGameEngine() var vm1 = new ViewModelCockpit(gameEngine); var vm2 = new ViewModelOptionsDialog(gameEngine); </code></pre> <p>However, in XCode it seems that my controllers I am supposed to place into the <code>.xib</code>, which are, in turn, automatically instantiated. </p> <p>What is given Swift's language features and XCode / Objective-C existing standards the best and most professional way have a number of <em>heavyweight</em> models that can be shared and accessed from several controllers? (Heavyweight in the sense that they take some time, memory or complex logic / dependencies) to load and might not easily be put into the <code>.xib</code> themselves.</p> <p>Potential answers could be: global variables, some <em>magic</em> / static properties, ... Ideally the solution should feel <em>solid</em> in a software engineering sense and take Swift's language features into account. </p>
<p>Depending on how complex your data model is, here are some things to consider:</p> <ol> <li>For complex data models, consider using Core Data</li> <li>Create a singleton DataController class that gives you access to your models from any controller in your app. In Swift it could be done like this: <a href="http://stackoverflow.com/questions/24024549/dispatch-once-singleton-model-in-swift">dispatch_once singleton model in swift</a></li> </ol> <p>You only use XIBs/Storyboards for the <strong>UI</strong>, never for your models.</p>
<p>I like to create the model(s) first, then pass them into each view's initialiser code, very similar to what you describe in C#. It's also similar to how you would do this in JavaScript (for example, in Backbone JS).</p> <pre><code>let gameEngine = MyGameEngine() let vm1 = ViewModelCockpit(nibName: "ViewModelCockpit", bundle: NSBundle.mainBundle(), gameEngine: gameEngine) let vm2 = ViewModelOptionsDialog(nibName: "ViewModelOptionsDialog", bundle: NSBundle.mainBundle(), gameEngine: gameEngine) class ViewModelCockpit: NSViewController { var myGameEngineModel: GameEngineModel init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!, myGameEngineModel: GameEngineModel) { self.myGameEngineModel = myGameEngineModel super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil) } } </code></pre> <p>Note â€” you have to call the <code>super.init()</code> of the parent class, and if you forget, Xcode very nicely reminds you! I use Xcode's autocompletion to provide me with the usual init function and its exact args.</p>