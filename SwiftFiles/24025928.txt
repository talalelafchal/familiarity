Why does Swift allow non-constant switch labels?
<p>I was encouraged at first by Swift, because finally you can write <code>switch</code> statements using strings, which means that dictionary-based code is now almost readable.</p> <pre><code>let kMyDictionaryKey1 = "one" // use 'let' to declare constant dictionary key let kMyDictionaryKey2 = "two" // use 'let' to declare constant dictionary key println( "hello world" ); if ( true ) { var dictionary = [kMyDictionaryKey1: 1, "two": 2, "three": 3] for val in dictionary.keys { switch val { case kMyDictionaryKey1: println( "yay switch on Key1" ) break case kMyDictionaryKey2: println( "yay switch on Key2" ) break default : println("world" ) break } // end switch } } </code></pre> <p>The above code works great.</p> <p>However, I also notice that you can have variables as case labels. For example, you can declare</p> <pre><code>var kMyDictionaryKey1 = "one" </code></pre> <p>There have been situations where I've wanted to do this, but it also seems dangerous. It could lead to sloppy code, and duplicate switch labels. Most languages don't allow this, and duplicate labels are compile time errors.</p> <p>Do any other languages allow variables for case labels?</p>
<p>Switch statements are meant to be a more expressive form of what you might have previously used a long chain of <code>if... else if... else if...</code> statements, hence the ability to use variables, strings, and expressions in case statements. </p> <p>You can have multiple case statements that have the same case, but the first matching case is always the one that is executed.</p> <p>Also, in Swift there is no fall-through on switch statements, so using <code>break</code> statements is unnecessary. </p> <pre><code>var testVal = "one" var result = 0 switch(testVal) { case "one": result = 1 case "one": result = 2 default: result = 3 } result // the result is 1 </code></pre>