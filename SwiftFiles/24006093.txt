Variable Number of Parameters in Swift Method
<p>I want to make a method that can take variable number of parameters. Kind of like in javascript where I can get all the parameters using <code>arguments</code> keyword inside the function. How can I do this in Swift? </p> <p>My main purpose is to allow all overloaded constructors to go to one method even if it has no parameters passed in it at all.</p> <pre><code>class Counter { var count: Int = 0 func incrementBy(amount: Int, numberOfTimes: Int) { count += amount * numberOfTimes } } </code></pre>
<p>They call them Variadic Parameters in Swift, and the notation is as follows:</p> <pre><code>func aFunction(args: String...) { println(args[0]) // do other stuff } aFunction("something", "something else") </code></pre> <p>I've given the parameters the name "args" here, but that isn't part of the syntax, it can be called what ever you want. The important part is the trailing periods (...). You can access the individual arguments via their subscript.</p> <p>More info can be found in <a href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11" rel="nofollow">The Swift Programming Language</a> on page 227.</p>
<p>You can overload functions in Swift.</p> <pre><code>func test(amount: Int) { test(amount, nil) } func test(amount: Int, name: String?) { println("Amount: \(amount)") if let name = name { println("Name: \(name)") } } test(1, "Leandros") test(1) </code></pre> <p>This example would print:</p> <pre><code>Amount: 1 Name: Leandros Amount: 1 </code></pre>
<p>There is an example of that in the Swift iBook, page 17:</p> <pre><code>func sumOf(numbers: Int...) -&gt; Int { var sum = 0 for number in numbers { sum += number } return sum } sumOf() // returns 0 sumOf(1,2) // returns 3 sumOf(42, 597, 12) // returns 651 </code></pre>
<p>Varargs are great, but they aren't really for optional parameters that mean different things, as seen in the <code>Counter</code> example in the question. Function overloading can be kind of excessive, though: it breaks the coupling between a function definition and its true implementation.</p> <p>What you might want here is default values for parameters:</p> <pre><code>func incrementBy(amount: Int, numberOfTimes num: Int = 1) { count += amount * num } </code></pre> <p>Now you'll get the same behavior calling either <code>incrementBy(2, numberOfTimes:1)</code> or <code>incrementBy(2)</code> (incrementing by two, once).</p> <p>Parameters with default values must come last in in the func/method signature, and must be labeled. This is discussed a few subsections down under <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_213">Function Parameter Names</a> in the book.</p>