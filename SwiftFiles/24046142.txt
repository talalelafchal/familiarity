How to forward functions with variadic parameters?
<p>In Swift, how do you convert an Array to a Tuple? </p> <p>The issue came up because I am trying to call a function that takes a variable number of arguments inside a function that takes a variable number of arguments.</p> <pre><code>// Function 1 func sumOf(numbers: Int...) -&gt; Int { var sum = 0 for number in numbers { sum += number } return sum } // Example Usage sumOf(2, 5, 1) // Function 2 func averageOf(numbers: Int...) -&gt; Int { return sumOf(numbers) / numbers.count } </code></pre> <p>This <code>averageOf</code> implementation seemed reasonable to me, but it does not compile. It gives the following error when you try to call <code>sumOf(numbers)</code>: </p> <pre><code>Could not find an overload for '__converstion' that accepts the supplied arguments </code></pre> <p>Inside <code>averageOf</code>, <code>numbers</code> has the type <code>Int[]</code>. I believe <code>sumOf</code> is expecting a Tuple rather than an Array. </p> <p>Thus, in Swift, how do you convert an Array to a Tuple? </p>
<p>This has nothing to do with tuples. Anyway, it isn't possible to convert from an array to a tuple in the general case, as the arrays can have any length, and the arity of a tuple must be know at compile time.</p> <p>However, you can solve your problem by providing overloads:</p> <pre><code>// This function does the actual work func sumOf(numbers: Int[]) -&gt; Int { return numbers.reduce(0, +) // functional style with reduce } // This overloads allows the variadic notation and // forwards its args to the function above func sumOf(numbers: Int...) -&gt; Int { return sumOf(numbers) } sumOf(2, 5, 1) func averageOf(numbers: Int...) -&gt; Int { // This calls the first function directly return sumOf(numbers) / numbers.count } averageOf(2, 5, 1) </code></pre> <p>Maybe there is a better way (e.g., Scala uses a special type ascription to avoid needing the overload; you could write in Scala <code>sumOf(numbers: _*)</code> from within <code>averageOf</code> without defining two functions), but I haven't found it in the docs.</p>
<p>I don't think he needs to use .reduce. Instead just change the parameter definition in his sumOf function. Instead of:</p> <pre><code>func sumOf(numbers: Int...) -&gt; Int { var sum = 0 for number in numbers { sum += number } return sum } </code></pre> <p>write:</p> <pre><code>func sumOf(numbers: [Int]) -&gt; Int { var sum = 0 for number in numbers { sum += number } return sum } </code></pre>