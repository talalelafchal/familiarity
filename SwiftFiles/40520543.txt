Switch from facebook-ios-sdk to facebook-swift-sdk, use of FBSDKAppInviteDialogDelegate in new code
I am switching from Facebook iOS SDK to Facebook Swift SDK. I want to be notified of the results of app invite. This is what I have in old code: extension VolumesListViewController: FBSDKAppInviteDialogDelegate { public func appInviteDialog(_ appInviteDialog: FBSDKAppInviteDialog!, didFailWithError error: Error!) { ... } func appInviteDialog(_ appInviteDialog: FBSDKAppInviteDialog!, didCompleteWithResults results: [AnyHashable: Any]!) { ... } } It seems that in Swift SDK, this DialogDelegate is encapsulated into the framework and not opened for implementation: So, this is the SDKDelegate: extension AppInvite { internal class SDKDelegate: NSObject, FBSDKAppInviteDialogDelegate { internal var completion: ((Result) -> Void)? func setupAsDelegateFor(_ dialog: FBSDKAppInviteDialog) { // We need for the connection to retain us, // so we can stick around and keep calling into handlers, // as long as the connection is alive/sending messages. objc_setAssociatedObject(dialog, Unmanaged.passUnretained(self).toOpaque(), self, .OBJC_ASSOCIATION_RETAIN) dialog.delegate = self } func appInviteDialog(_ appInviteDialog: FBSDKAppInviteDialog?, didCompleteWithResults results: [AnyHashable: Any]?) { completion?(.success(results?.keyValueFlatMap { ($0 as? String, $1 as? String) } ?? [:])) } func appInviteDialog(_ appInviteDialog: FBSDKAppInviteDialog?, didFailWithError error: Error) { completion?(.failed(error)) } } } How to achieve the same with notifications, without using the old framework? My reason is this: The frameworks for the Facebook SDK in Swift are organized in the same way as the Facebook SDK for iOS . They also depend upon the Facebook SDK for iOS, although this may change at some point in the future.
So, for everything to become clear I just have to post a question on SO: This is what I've found: I can use trailing closure for the AppInvite.Dialog.show(from:invite:) to have feedback from the Dialog: let appInvite = AppInvite(appLink: URL(string: "http://eggheadgames.com/cryptograms")!) do { try AppInvite.Dialog.show(from: self, invite: appInvite) { result in switch result { case .success(_): Logger.logUIEvent("InviteFriend", label: "called") case .failed(_): Logger.logUIEvent("InviteFriend", label: "unavailable") } } } catch _ { Logger.logUIEvent("InviteFriend", label: "unavailable") }