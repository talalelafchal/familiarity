Add an element to an array in Swift
<p>Suppose I have an array, for example:</p> <pre><code>var myArray = ["Steve", "Bill", "Linus", "Bret"] </code></pre> <p>And later I want to push/append an element to the end of said array, to get:</p> <p><code>["Steve", "Bill", "Linus", "Bret", "Tim"]</code></p> <p>What method should I use?</p> <p>And what about the case where I want to add an element to the <strong>front</strong> of the array? Is there a constant time unshift?</p>
<p>From page 143 of The Swift Programming Language:</p> <blockquote> <p>You can add a new item to the end of an array by calling the array’s append method</p> <p>Alternatively, add a new item to the end of an array with the addition assignment operator (+=)</p> </blockquote> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/us/jEUH0.l" rel="nofollow">https://itun.es/us/jEUH0.l</a></p>
<p>You had a couple of options for appending an element to an array. In early betas, you could use the += operator to append an individual element, but this is no longer the case. You can however still use the append function.</p> <pre><code>anArray.append("This String") </code></pre> <p>If you're looking to append more elements from a different array to your array, you can still use the += operator, or the extend method.</p> <pre><code>anArray += ["Moar", "Strings"] anArray.extend(["Moar", "Strings"]) </code></pre> <p>To insert a single object at the beginning of the array, you can use the insert method.</p> <pre><code>anArray.insert("This String", atIndex: 0) </code></pre> <p>To insert the contents of a different array at the beginning of an array, you can use the splice method.</p> <pre><code>anArray.insertContentsOf(["So", "Many", "Strings"], at: 0) </code></pre> <p>In the case of insert and insertContentsOf, the seconds argument can be any valid index of the receiving array.</p> <p>More information can be found in the "Collection Types" chapter of "<a href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11">The Swift Programming Language</a>", starting on page 110.</p> <hr> <p>As of <strong>Swift 3</strong>, the above examples must be written as follows.</p> <p>To add a new element to the end of an Array.</p> <pre><code>anArray.append("This String") </code></pre> <p>To append a different Array to the end of your Array.</p> <pre><code>anArray += ["Moar", "Strings"] anArray.append(contentsOf: ["Moar", "Strings"]) </code></pre> <p>To insert a new element into your Array.</p> <pre><code>anArray.insert("This String", at: 0) </code></pre> <p>To insert the contents of a different Array into your Array.</p> <pre><code>anArray.insert(contentsOf: ["Moar", "Strings"], at: 0) </code></pre>
<p>To add to the end, use the <code>+=</code> operator:</p> <pre><code>myArray += ["Craig"] myArray += ["Jony", "Eddy"] </code></pre> <p>That operator is equivalent to the <code>append()</code> method.</p> <p>There's also <code>insert(:, atIndex:)</code> for inserting at any index. (See <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/SwiftStandardLibraryReference/Array.html#//apple_ref/doc/uid/TP40014608-CH5-SW28">Array Reference</a>.)</p> <p>If, say, you'd like a convenience function for inserting at the beginning, you could add it to the <code>Array</code> class with an <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html#//apple_ref/doc/uid/TP40014097-CH24-XID_191">extension</a>.</p>
<p>You could use </p> <pre><code>Myarray.insert("Data #\(index)", atIndex: index) </code></pre>
<p>You can also pass in a variable and/or object if you wanted to.</p> <pre><code>var str1:String = "John" var str2:String = "Bob" var myArray = ["Steve", "Bill", "Linus", "Bret"] //add to the end of the array with append myArray.append(str1) myArray.append(str2) </code></pre> <p>To add them to the front:</p> <pre><code>//use 'insert' instead of append myArray.insert(str1, atIndex:0) myArray.insert(str2, atIndex:0) //Swift 3 myArray.insert(str1, at: 0) myArray.insert(str2, at: 0) </code></pre> <p>As others have already stated, you can no longer use '+=' as of xCode 6.1</p>
<p>If you want to append unique object, you can expand <strong>Array</strong> struct</p> <pre><code>extension Array where Element: Equatable { mutating func appendUniqueObject(object: Generator.Element) { if contains(object) == false { append(object) } } } </code></pre>
<p>To add to the <a href="http://stackoverflow.com/a/24002784/2547229">solutions suggesting <code>append</code></a>, it's useful to know that this is an <strong>amortised constant time</strong> operation in many cases:</p> <blockquote> <p>Complexity: Amortized O(1) unless self's storage is shared with another live array; O(count) if self does not wrap a bridged NSArray; otherwise the efficiency is unspecified.</p> </blockquote> <p>I'm looking for a <code>cons</code> like operator for Swift. It should return a <em>new</em> immutable array with the element tacked on the end, in constant time, without changing the original array. I've not yet found a standard function that does this. I'll try to remember to report back if I find one! </p>
<p>Here is a small extension if you wish to insert at the beginning of the array without loosing the item at the first position</p> <pre><code>extension Array{ mutating func appendAtBeginning(newItem : Element){ let copy = self self = [] self.append(newItem) self.appendContentsOf(copy) } } </code></pre>
<p>Use += and + operators :</p> <pre><code>extension Array { } func += &lt;V&gt; (inout left: [V], right: V) { left.append(right) } func + &lt;V&gt;(left: Array&lt;V&gt;, right: V) -&gt; Array&lt;V&gt; { var map = Array&lt;V&gt;() for (v) in left { map.append(v) } map.append(right) return map } </code></pre> <p>then use :</p> <pre><code>var list = [AnyObject]() list += "hello" list += ["hello", "world!"] var list2 = list + "anything" </code></pre>