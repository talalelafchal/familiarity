Creating a function with generics that returns another function in Swift
<p>My question is based on the Swift's book's Guided Tour chapter where the following code is given:</p> <pre><code>func anyCommonElements &lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element: Equatable, T.GeneratorType.Element == U.GeneratorType.Element&gt; (lhs: T, rhs: U) -&gt; Bool { for lhsItem in lhs { for rhsItem in rhs { if lhsItem == rhsItem { return true } } } return false } anyCommonElements([1, 2, 3], [3]) </code></pre> <p>The book asked to experiment with modifying the function to return an array of common elements instead, which I was able to do. </p> <p>But I began experimenting with trying to modify the function to return another function that builds up the array and that's what I'm having problems with. </p> <p>Here is what I have:</p> <pre><code>func myCommonElements&lt;T, U where T: Sequence, U: Sequence, T.GeneratorType.Element: Equatable, T.GeneratorType.Element == U.GeneratorType.Element&gt; (lhs: T) -&gt; (U -&gt; Array&lt;U.GeneratorType.Element&gt;) { func makeCommon (rhs: U) -&gt; Array&lt;U.GeneratorType.Element&gt; { var commonArray = Array&lt;U.GeneratorType.Element&gt;() for lhsItem in lhs { for rhsItem in rhs { if lhsItem == rhsItem { commonArray.append(lhsItem) } } } return commonArray } return makeCommon } let gatherCommon = myCommonElements([3, 4, 5, 6]) let result = gatherCommon([1, 2, 3, 4]) println(result) </code></pre> <p>The error that I get is:</p> <pre><code>cannot convert the expression's type '(rhs: $T2 -&gt; Array&lt;$T4&gt;)' to type 'Generator' </code></pre> <p>I understand the error but I'm not sure why I'm getting this error. What did I do wrong?</p>
<p>When you call myCommonElements you pass the type T as an argument. How can the compiler infer the type for U?? Declare the return type and you will be fine.</p> <pre><code>let gc: Array&lt;Int&gt; -&gt; Array&lt;Int&gt; = myCommonElements([3,4,5,6]) </code></pre>