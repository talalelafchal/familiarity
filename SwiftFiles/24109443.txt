Arabic text stripper / parser
<p>I'm new to programming. I made a function that removes the vowels on Arabic text input. My question is if I used the best loop for the task or is there a better and more concise way to write this?</p> <p>It would be nice to improve the code. Thank you.</p> <pre><code>// It seems to work now. I solved it. // What do you think? :) Happy that I managed to solve it. // Programming is fun!!! :D var arabic:String = "الْعَرَبِيَّةُ لُغَةٌ جَمِيلَةٌ" func txtStripper(arabic: String) -&gt; String { var strippedTxt = "" for character in arabic { if character != "َ" &amp;&amp; character != "ِ" &amp;&amp; character != "ّ" &amp;&amp; character != "ْ" &amp;&amp; character != "ُ" &amp;&amp; character != "ٌ" &amp;&amp; character != "ً" &amp;&amp; character != "ٍ" { strippedTxt += toString(print(character)) } } return strippedTxt } txtStripper(arabic) </code></pre>
<p>First of all you can clean up the <code>if</code> statement by using <code>contains</code> function.</p> <pre><code>func txtStripper(arabic: String) -&gt; String { var strippedTxt = "" let vowels : Character[] = ["َ", "ِ", "ّ", "ْ", "ُ", "ٌ", "ً", "ٍ"] for character in arabic { if !contains (vowels, character) { strippedTxt += toString(character) } } return strippedTxt } </code></pre> <p>Next, if you are comfortable with closures, you can rewrite the whole function in much more concise way as follows:</p> <pre><code>func txtStripperWithClosures(arabic:String) -&gt; String { let vowels : Character[] = ["َ", "ِ", "ّ", "ْ", "ُ", "ٌ", "ً", "ٍ"] return Array(arabic).filter({!contains(vowels, $0)}).reduce("",+) } </code></pre> <p>It works as follows:</p> <ul> <li><code>Array(arabic)</code> turns the String into Character[]</li> <li><code>filter({!contains(vowels, $0)})</code> removes the vowel characters from the array</li> <li><code>reduce("",+)</code> joins the character list back into a String</li> </ul>