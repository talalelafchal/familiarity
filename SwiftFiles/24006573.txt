Why do I need to specify what type a variable is in a class in Swift?
<p>I'm just wondering. As I understand, <code>var</code> and <code>let</code> can be anything and <code>Swift</code> automates the right type like in <code>JavaScript</code>. But when I try to set properties in a class I get an error when I don't specify the type.</p> <pre><code>var value1, value2 // Error: missing annotations </code></pre> <p>Well, I've read some references and the variable requires a type on declaration like <code>var foo = 0</code>. But in my class I have an <code>init()</code> which will set the variables to whatever I input when creating the object of the class.</p> <p><strong>So how should I achieve this? Is it even possible?</strong></p> <p>I saw the type <code>typealias</code> but that didn't work either.</p>
<p>The types are only inferred if you assign a default value initially. From an example in the Language Reference, either declare the type:</p> <pre><code>var welcomeMessage: String </code></pre> <p>or assign an initial value that allows Swift to infer the type:</p> <pre><code>welcomeMessage = "Hello" </code></pre> <blockquote> <p>In the welcomeMessage example above, no initial value is provided, and so the type of the welcomeMessage variable is specified with a type annotation rather than being inferred from an initial value.</p> </blockquote>
<p>While both Swift and Javascript allow you to assign constants to variables without defining their type, there is a fundamental difference in the two languages. Swift is a type-safe language while Javascript is not. From <em>The Swift Programming Language</em> -</p> <blockquote> <p>“Swift is a type safe language. A type safe language encourages you to be clear about the types of values your code can work with. If part of your code expects a String, you can’t pass it an Int by mistake.”</p> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11">https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11</a></p> </blockquote> <p>So when you say</p> <pre><code>var welcomeMessage = "Hello" </code></pre> <p>Swift infers that you want welcomeMessage to be a string and sets its type accordingly. Subsequently trying </p> <pre><code>welcomeMessage=3 </code></pre> <p>will give run a compile-time error because you are assigning the incorrect type. </p> <p>If you don't assign an initial value then Swift can't infer the type and you must specify it.</p> <p>Javascript, on the other hand, will quite happily accept</p> <pre><code>var welcomeMessage="Hello" welcomeMessage=3 </code></pre> <p>because it isn't type safe and just tries to do the best it can with values it has. For example, if a string operation is performed on welcomeMessage after assigning 3 to it, Javascript would convert the value to "3" and then perform the operation. </p> <p>(OK, there are type safe extensions to Javascript, but it isn't a fundamental part of the language the way it is with Swift)</p>
<p>JavaScript is <strong>dynamically</strong> typed, meaning <strong>variables don't have a type</strong> assigned to them. Types are only associated with objects. So a variable can contain objects of any type.</p> <p>Swift is <strong>statically</strong> typed on the other hand. Meaning <strong>variables have type</strong>. You can't place any object you want into a variable. The compiler will make sure you only place compatible objects into variables.</p> <p>Swift has type inference which allow the compiler to figure out the type if you write:</p> <pre><code>var value1 = "foobar" </code></pre> <p>But just writing <code>var value1</code> wouldn't let the compiler figure out what type the <code>value1</code> variable is. JavaScript doesn't have this problem since variables don't have types.</p> <p>Remember similar looking syntax does not mean the same <strong>semantics</strong>. Swift might look a bit like JavaScript syntax wise, but the meaning (semantics) of the keywords is quite different. If you want to simulate JavaScript:</p> <pre><code>var value1, value2 </code></pre> <p>In Swift you would write:</p> <pre><code>var value1: AnyObject var value2: AnyObject </code></pre> <p>That would allow you to put any object into the <code>value1</code> and <code>value2</code> variables.</p>