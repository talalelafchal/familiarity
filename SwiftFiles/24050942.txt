Swift use c struct
<p>Sorry for the title, I can't find words to describe my question in few words.</p> <p>I already know that swift can use struct written in c. For example</p> <p>In Bridging-Header.h </p> <pre><code>typedef struct { int x; int y; } Pointer; </code></pre> <p>then I can use Pointer directly.</p> <p>But in my case, I have a library written in C. There are many structs with hidden implement. For example:<br> In Briding-Header.h</p> <pre><code>typedef struct Pointer Pointer; </code></pre> <p>I can't use Pointer any more, got unknown type. In my library Pointer is used as</p> <pre><code>create_pointer(Pointer **pointer); </code></pre> <p>Any help is appreciated!</p> <p>P.S I have no .h file which define struct Pointer. All details about Pointer is hide, access them by function, for example</p> <pre><code>int getx(Pointer *pointer); </code></pre> <p>Here is my full test code:<br> user_input.c</p> <pre><code>#include &lt;stdio.h&gt; #include "user_input.h" struct Pointer { int x; int y; }; void get_user_input(int *user_input) { scanf("%i", user_input); } void init_pointer(Pointer *point) { point-&gt;x = 20; point-&gt;y = 20; } </code></pre> <p>user_input.h</p> <pre><code>#ifndef __user_input_h__ #define __user_input_h__ typedef struct Pointer Pointer; void init_pointer(Pointer *p); #endif </code></pre> <p>Bridging-Header.h</p> <pre><code>#include "user_input.h" </code></pre> <p>main.swift</p> <pre><code>import Foundation var pointer:Pointer = Pointer(x:10, y:20) </code></pre> <p>Xcode give me this error: Pointer undefined</p>
<p>You should be OK if you include the original header where Pointer is typedef-ed in ___Bridging-Header.h</p> <p>So for example if you have foo.h where you declare your struct and your functions, then instead of doing any additional typdef calls in your bridging header just <code>#import foo.h</code></p> <p>Then your Swift code should be able to see the symbols declared in foo.h</p> <p>Update:</p> <p>What you need:</p> <ol> <li>Say "foo.h" is the header file where Pointer is typedef-ed. Also say that "foo.c" is the file where createPointer() is implemented.</li> <li>You'll need to create a Swift project in Xcode. Add "foo.h" and "foo.c" to the project.</li> <li>Add a header file to the project called "foo-Bridging-Header.h" (Sometimes Xcode asks if you want to create a Bridging Header when you add a .c or .m file to the project, but with the Developer Seed I haven't observed this to be consistent yet).</li> <li>In "foo-Bridging-Header.h", you'll need to <code>#include foo.h</code></li> <li>Once you have done this, you should be able to call any of the symbols from "foo.h" from the "main.swift" file in your project.</li> </ol> <p>For example, I have a Swift project. In this project I have a Swift file (main.swift), a C header (test.h), a C source file (test.c), and a Bridging Header (test-Bridging-Header.h).</p> <p>Their contents are as follows:</p> <ol> <li>test.h:</li> </ol> <blockquote> <pre><code>void printFoo(); </code></pre> </blockquote> <ol> <li>test.c:</li> </ol> <blockquote> <pre><code>#include &lt;stdio.h&gt; #include "test.h" void printFoo() { printf("foo\n"); } </code></pre> </blockquote> <ol> <li>test-Bridging-Header.h:</li> </ol> <blockquote> <pre><code>#import "test.h" </code></pre> </blockquote> <ol> <li>main.swift:</li> </ol> <blockquote> <pre><code>import Foundation println("Hello, World!") printFoo() </code></pre> </blockquote> <p>When run, this outputs:</p> <blockquote> <pre><code>Hello, World! foo </code></pre> </blockquote>
<p>After change my question, I got an answer.</p> <p>When the struct implements in hidden, this is called "opaque"</p> <p>so I can use COpaquePointer.</p> <pre><code>var pointer: COpaquePointer = COpaquePointer.null() // some init code. init_pointer(pointer); </code></pre>
<p><strong>Bridging-Header.h</strong></p> <pre class="lang-c prettyprint-override"><code>#include "user_input.h" </code></pre> <p><strong>user_input.c</strong></p> <pre><code>#include &lt;stdlib.h&gt; struct Pointer { int x; int y; }; Pointer *create_pointer() { Pointer *p = malloc(sizeof(struct Pointer)); if (p) { p-&gt;x = 20; p-&gt;y = 20; } return p; } void delete_pointer(Pointer *p) { free(p); } int pointer_x(Pointer *p) { return p-&gt;x; } int pointer_y(Pointer *p) { return p-&gt;y; } </code></pre> <p><strong>user_input.h</strong></p> <pre><code>#ifndef __user_input_h__ #define __user_input_h__ typedef struct Pointer Pointer; Pointer *create_pointer(); void delete_pointer(Pointer *p); int pointer_x(Pointer *p); int pointer_y(Pointer *p); #endif </code></pre> <p><strong>main.swift</strong></p> <pre class="lang-swift prettyprint-override"><code>import Foundation var pointer: COpaquePointer = create_pointer() println("\(pointer_x(pointer)), \(pointer_y(pointer))") delete_pointer(pointer) // Writing the wrapper class could be helpful. class CPointer { var _ptr: COpaquePointer init() { _ptr = create_pointer() assert(_ptr, "Failed on create_pointer()") } deinit { delete_pointer(_ptr) } var x: Int { get { return Int(pointer_x(_ptr)) } } var y: Int { get { return Int(pointer_y(_ptr)) } } } var p = CPointer() println("\(p.x), \(p.y)") </code></pre>