Closures return value (previously completionBlock)
<p>I'd like to return some values after the long term operation is completed. But furthermore I'd like to split the logic and the gui.</p> <p>For example; I have two classes </p> <ol> <li>SomeServices.swift which has a method named "getDataFromService..."</li> <li>MyTableViewController.swift which will display the result from "getDataFromService"</li> </ol> <p>So, previously in Objective-C I've just add a method in SomeServices like this:</p> <pre><code>(void)getDataFromService:(void (^)(NSArray *, NSError *))completionBlock{ ...... } </code></pre> <p>In this method I've just called <code>completionBlock(myData, myError)</code> to return my values to the tableviewcontroller.</p> <p>What would be the equivalent closure which I have to define in SomeServices.swift and how will it be called in MyTableViewController?</p> <p>I know how to call a simple closures like this one:</p> <pre><code> ....({ responseData, error in if(!error){ //Do something } }) </code></pre> <p>But I don't have any ideas how to define a closure with a completionBlock equivalent.</p> <p>Any help would be appreciated</p>
<p>The plus of closures are, that you can pass everything you want. Methods or functions - it doesn't matter.</p> <p>You can pass a function within the parameters and just call it.</p> <pre><code>func someFunctionThatTakesAClosure(completionClosure: () -&gt; ()) { // function body goes here if(error = false) { completionClosure() } } //Call it someFunctionThatTakesAClosure({ //Completions Stuff println("someFunctionThatTakesAClosure") }); </code></pre> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/ch/jEUH0.l">https://itun.es/ch/jEUH0.l</a></p>
<p>The answer is in the language guide:</p> <p>Assume you want to return a String. This is the syntax</p> <pre><code>({(responseData: DataClass, error: ErrorClass) -&gt; String in //do stuff - calculations etc.. return calculatedString }) </code></pre> <p>Here is an example that takes two strings and concatenates them, and returns the result:</p> <pre><code>let sumStrings = ({(first: String, second: String) -&gt; String in return first + " " + second }) </code></pre> <p>then you can do the following:</p> <pre><code>sumStrings("Hello","Swift") // "Hello Swift" </code></pre>