Delete all keys from a NSUserDefaults dictionary iOs
<p>I use the NSUserDefaults dictionary to store basic information such as high scores etc so that when the user closes the app data is not lost. Anyways I use:</p> <pre><code>NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults]; </code></pre> <p>to store data. If I wish to store a new high score for example then I would do:</p> <pre><code>[prefs setInteger:1023 forKey:@"highScore"]; [prefs synchronize]; //this is needed in case the app is closed. </code></pre> <p>and later if I wish to retrieve the high score I would do:</p> <pre><code>[prefs integerForKey:@"highScore"]; </code></pre> <p>anyways the point is that I store a lot of other things because the <code>NSUserDefaults enable</code> you to store <code>booleans</code>, <code>integers</code>, <code>objects</code> etc. what method would I have to execute to delete all keys so that NSUserDefaults becomes like the fist time I launch the app?</p> <p>I am looking for something like:</p> <pre><code>NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults]; [prefs deleteAllKeysAndObjectsInTheDictionary]; </code></pre> <p>or maybe there is a way of getting all keys and I have to loop through each object but I don't know how to remove them. </p> <p>EDIT:</p> <p>I have tried :</p> <pre><code>NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults]; [NSUserDefaults resetStandardUserDefaults]; [prefs synchronize]; </code></pre> <p>and I still am able to retrieve a high score....</p>
<p>Does this method not do that:</p> <pre><code>+ (void)resetStandardUserDefaults </code></pre> <p>From the documentation for <code>NSUserDefaults</code>:</p> <blockquote> <p><strong>resetStandardUserDefaults</strong></p> <p>Synchronizes any changes made to the shared user defaults object and releases it from memory.</p> <p><code>+ (void)resetStandardUserDefaults</code></p> <p><strong>Discussion</strong></p> <p>A subsequent invocation of standardUserDefaults creates a new shared user defaults object with the standard search list.</p> </blockquote> <p>Based on this, you can do:</p> <pre><code>[NSUserDefaults resetStandardUserDefaults]; [NSUserDefaults standardUserDefaults]; </code></pre> <p>and now the defaults should be reset.</p>
<p>If you have a look at the <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html">NSUserDefaults documentation</a> you will see a method <code>- (NSDictionary *) dictionaryRepresentation</code>. Using this method on the standard user defaults, you can get a list of all keys in the user defaults. You can then use this to clear the user defaults:</p> <pre><code>- (void)resetDefaults { NSUserDefaults * defs = [NSUserDefaults standardUserDefaults]; NSDictionary * dict = [defs dictionaryRepresentation]; for (id key in dict) { [defs removeObjectForKey:key]; } [defs synchronize]; } </code></pre>
<p><code>+ (void) resetStandardUserDefaults</code> doesn't persist the changes, it simply resets the in-memory user defaults object so that the next <code>synchronize</code> call will read from the on-disk copy, instead of overwriting existing in-memory values with the on-disk versions.</p> <p>Iterating over the keys is better, but there's actually a function that does this for you: <a href="http://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html#//apple_ref/doc/uid/20000318-CIHCDBFJ" rel="nofollow"><code>removePersistentDomainForName:</code></a>.</p> <pre><code>// you can usually get the domain via [[NSBundle mainBundle] bundleIdentifier] [[NSUserDefaults standardUserDefaults] removePersistentDomainForName:[[NSBundle mainBundle] bundleIdentifier]]; // or use a string for any other settings domains you use //[[NSUserDefaults standardUserDefaults] // removePersistentDomainForName:@"com.mycompany.myappname"]; [[NSUserDefaults standardUserDefaults] synchronize]; </code></pre> <p>At the end of the <code>synchronize</code> operation, both the disk and memory copies of user defaults will contain none of the values set by your application.</p>
<p><strong>Shortest way to do this with the same results</strong> like in Alex Nichol's top answer:</p> <pre><code>NSString *appDomain = [[NSBundle mainBundle] bundleIdentifier]; [[NSUserDefaults standardUserDefaults] removePersistentDomainForName:appDomain]; </code></pre>
<p>One liner</p> <pre><code>[[NSUserDefaults standardUserDefaults] removePersistentDomainForName:[[NSBundle mainBundle] bundleIdentifier]]; </code></pre>
<p>Swift version:</p> <pre><code>if let bid = NSBundle.mainBundle().bundleIdentifier { NSUserDefaults.standardUserDefaults().removePersistentDomainForName(bid) } </code></pre>
<p><strong>Swift 2.3:</strong></p> <pre><code>if let bundleIdentifierBinded = NSBundle.mainBundle().bundleIdentifier{ NSUserDefaults.standardUserDefaults().removePersistentDomainForName(bundleIdentifierBinded) } </code></pre>
<p>Oneliner in Swift:</p> <pre><code>NSUserDefaults.standardUserDefaults().removePersistentDomainForName(NSBundle.mainBundle().bundleIdentifier!) </code></pre>
<p><strong>Simple Solution</strong> </p> <p><strong><em>Objective C:</em></strong> </p> <pre><code>NSString *appDomain = [[NSBundle mainBundle] bundleIdentifier]; [[NSUserDefaults standardUserDefaults] removePersistentDomainForName:appDomain]; </code></pre> <p>In <strong>Swift 3.0 :</strong></p> <pre><code>if let appDomain = Bundle.main.bundleIdentifier { UserDefaults.standard.removePersistentDomain(forName: appDomain) } </code></pre>
<p>For Swift 3:</p> <pre><code>let appDomain = Bundle.main.bundleIdentifier! UserDefaults.standardUserDefaults.removePersistentDomainForName(appDomain) } </code></pre>