How do I make a private function in Swift?
<p>How do I make a private function in Swift?</p> <p>Here is an example:</p> <pre><code>import UIKit class AnotherClass { var someVar = 1 let someConst = 2 func somePrivateFunc() -&gt; Bool { return true } func someFunc() -&gt; (Int -&gt; Bool) { var someInnerFuncVar = { (num: Int)-&gt;Bool in return true } return someInnerFuncVar } init() { var vc = ViewController() } } </code></pre> <p>But if this is the only way to do it....</p>
<p>At the moment there are no visibility modifiers in swift.</p> <p>On the developers forum, the language authors said it's on the top of their priority list.</p> <p>Quoting greg parker from <a href="https://devforums.apple.com/thread/227288?tstart=90">here</a>:</p> <blockquote> <p>We don't usually promise anything for the future, but in this case we are making an exception. Swift will have access control mechanisms.</p> </blockquote> <p>In the same forum they suggest you can use nested classes, in this fashion, but this is really only for preventing the code-completion to catch the inner methods. They're not really private in the sense that anyone can instantiate the nested class and access those methods.</p> <pre><code>import Foundation class KSPoint { class _KSPointInner { class func distance(point p1 : KSPoint, toPoint p2 : KSPoint) -&gt; Double { return sqrt(pow(Double(p2.x - p1.x), 2) + pow(Double(p2.y - p1.y), 2)) } } var x : Int func distance(point : KSPoint, toPoint : KSPoint) -&gt; Double { return _KSPointInner.distance(point: point, toPoint: toPoint) } } </code></pre>
<p>Alternatively, you can use <code>Nested Classes</code> like so:</p> <pre><code>// Public interface class Bakery { // Private implementation class Baker { func prepareToMakeBread(numberOfLoafs:Int) { println("Preparing to make \(numberOfLoafs) loafs of bread...") } func bakeBread() { println("Baking the bread...") } func packageBread() { println("Packaging the freshly baked bread...") } } // Public method func buyBread(numberOfLoafs:Int) { println("Customer requests \(numberOfLoafs) loafs of bread!") let baker = Bakery.Baker() baker.prepareToMakeBread(numberOfLoafs) baker.bakeBread() baker.packageBread() } } let bakery = Bakery() let numberOfLoafs = Int(arc4random() % 10) + 1 bakery.buyBread(numberOfLoafs) </code></pre> <p>Output:</p> <pre><code>Customer requests 4 loafs of bread! Preparing to make 4 loafs of bread... Baking the bread... Packaging the freshly baked bread... </code></pre> <p>However, technically they are not private as someone can instantiate a <code>Bakery.Baker</code> and call the methods. Functions inside functions do work but are ugly...</p>
<p>See my answer <a href="http://stackoverflow.com/a/24205782/90413">over here</a>.</p> <p>In short, when you talk about making a "private method" or "private function" in Swift or ObjC (or ruby or java orâ€¦) those methods aren't really "private". There's no actual access control around them. Any language that offers even a little introspection lets developers get to those value from outside the class if they really want to.</p> <p>So what we're talking about, then, is a way to define a public-facing interface that shows only the functionality we want it to, and "hides" the rest that we consider "private".</p> <p>The swift mechanism for declaring interfaces is the <code>protocol</code>, and it can be used for this purpose.</p>