What is the difference between functions and closures?
<p>I have been reading the swift programming guide in iBooks. Could someone explain to me what is the difference between a function and a closure. Is it just that it has no name and can be used in expressions?</p>
<p>Functions are, in fact, just named closures. The following are at least conceptually equivalent:</p> <pre><code>let foo = { println("hello") } func foo()-&gt;(){ println("hello") } </code></pre> <p>This gets a little more complicated in the case of using <code>func</code> to declare methods, as there's some interesting bits of sugar added regarding the automatic insertion of public named parameters, etc. <code>func myMethod(foo:Int, bar:Int, baz:Int)</code> becomes <code>func myMethod(foo:Int, #bar:Int, #baz:Int)</code>, for example. </p> <p>But it's still true that even methods are just a specific case of closures, and if it's true of closures, it's true of functions and methods as well.</p>
<p>First, let's start with <a href="http://en.wikipedia.org/wiki/Closure_%28computer_programming%29" rel="nofollow">definition of Closure</a>, as found in Wikipedia:</p> <blockquote> <p>In programming languages, a closure (also lexical closure or function closure) is a function or reference to a function together with a referencing environmentâ€”a table storing a reference to each of the non-local variables (also called free variables or upvalues) of that function.</p> </blockquote> <p>Closure is the term that is used to refer to a function along with the variables from its environment that it "closes".</p> <p>The definition of Closure in Swift is inline with <em>lambdas</em> and <em>blocks</em> in other languages like C# and Ruby.</p> <p>As for the difference from functions, from the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/Swift_Programming_Language/Closures.html" rel="nofollow">Swift documentation</a>:</p> <blockquote> <p>Global and nested functions, as introduced in Functions, are actually special cases of closures</p> </blockquote> <p>So all functions are essentially closures that store references to variables in their context.</p> <p><code>Closure expressions</code> are convenient way of writing closures, and provides more terse syntax.</p>