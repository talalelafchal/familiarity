Easy way to see saved NSUserDefaults?
<p>Is there a way to see what's been saved to <code>NSUserDefaults</code> directly? I'd like to see if my data saved correctly. </p>
<p>You could NSLog each value you set, like:</p> <pre><code>NSLog(@"%@",[[NSUserDefaults standardDefaults] stringForKey:@"WhateverTheKeyYouSet"]); </code></pre>
<p>You can check the values for each key in the array, returned by</p> <pre><code>[[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys] </code></pre>
<p>You can find the pList file for your app in the simulator if you go to:</p> <p>/users/<em>your user name</em>/Library/Application Support/iPhone Simulator/&lt;Sim Version&gt;/Applications</p> <p>This directory has a bunch of GUID named directories. If you are working on a few apps there will be a few of them. So you need to find your app binary:</p> <pre><code>find . -name foo.app ./1BAB4C83-8E7E-4671-AC36-6043F8A9BFA7/foo.app </code></pre> <p>Then go to the Library/Preferences directory in the GUID directory. So:</p> <pre><code>cd 1BAB4C83-8E7E-4671-AC35-6043F8A9BFA7/Library/Preferences </code></pre> <p>You should find a file that looks like:</p> <pre><code>&lt;Bundle Identifier&gt;.foo.pList </code></pre> <p>Open this up in the pList editor and browse persisted values to your heart's content.</p>
<p>I sometimes use the following snippet to print out the location of my NSUserDefaults file when running in the simulator</p> <pre> NSArray *path = NSSearchPathForDirectoriesInDomains( NSLibraryDirectory, NSUserDomainMask, YES); NSString *folder = [path objectAtIndex:0]; NSLog(@"Your NSUserDefaults are stored in this folder: %@/Preferences", folder); </pre> <p>It yields the path to the preferences folder</p> <blockquote> <p>Your NSUserDefaults are stored in this folder: /Users/castle/Library/Application Support/iPhone Simulator/User/Applications/BC5056A0-F46B-4AF1-A6DC-3A7DAB984960/Library/Preferences</p> </blockquote> <p>Your NSUserDefaults file is located in the preferences folder and named according to your prefix and appliation name e.g.</p> <pre><code>dk.castleandersen.dreamteam.grid.plist </code></pre> <p>I expect the same to be true for the actual device.</p>
<p>I keep a shortcut on my desktop to the simulator's folder where it keeps the apps, ie:</p> <pre><code>/Users/gary/Library/Application Support/iPhone Simulator/User/Applications </code></pre> <p>Sorted by most recent date, then just go into the most recent app folder Library/Preferences and view the file in the plist editor.</p>
<p>You can print all current NSUserDefaults to the log:</p> <p>Just keys:</p> <pre><code>NSLog(@"%@", [[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys]); </code></pre> <p>Keys and values:</p> <pre><code>NSLog(@"%@", [[NSUserDefaults standardUserDefaults] dictionaryRepresentation]); </code></pre>
<p>I built this method based on Morion's suggestion for better presentation. Use it by calling <code>[self logAllUserDefaults]</code></p> <pre><code>- (void) logAllUserDefaults { NSArray *keys = [[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys]; NSArray *values = [[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allValues]; for (int i = 0; i &lt; keys.count; i++) { NSLog(@"%@: %@", [keys objectAtIndex:i], [values objectAtIndex:i]); } } </code></pre>
<p>After reading this question's accepted answer, I put together this simple script that opens the plist files used by the iOS simulator to store the <code>NSUserDefaults</code> preferences, and while it assumes a certain setup (fits mine perfectly), it may work as a starting point for others.</p> <pre><code>$ cat open-prefs-plist.sh #!/bin/sh # The project name based on the workspace path, e.g. "MyProject" from "./MyProject.xcworkspace" WORKSPACE_NAME=$(echo `find . -name *.xcworkspace -type d -exec basename {} \;` | cut -d'.' -f1) SIMULATOR_PATH="$HOME/Library/Application Support/iPhone Simulator" # The App's bundle ID taken from its info plist, e.g "com.myproject" from "./MyProject/MyProject-Info.plist" BUNDLE_ID=`/usr/libexec/PlistBuddy -c Print:CFBundleIdentifier $WORKSPACE_NAME/$WORKSPACE_NAME"-Info.plist"` # Open all plist files in the simulator path that match the app's bundle ID # normally one per iOS version find "$SIMULATOR_PATH" -name $BUNDLE_ID".plist" -type f -print0 \ | while IFS= read -r -d '' PLIST; do echo $PLIST open "$PLIST" done </code></pre> <p>Example placement:</p> <pre><code>$ ls -1 MyProject MyProject Tests MyProject.xcodeproj MyProject.xcworkspace Podfile open-prefs-plist.sh </code></pre>
<h1>In Swift we can use the following:-</h1> <h1>Swift 3.x</h1> <h3>For getting all keys & values:</h3> <pre><code>for (key, value) in UserDefaults.standard.dictionaryRepresentation() { print("\(key) = \(value) \n") } </code></pre> <h3>For retrieving the complete dictionary representation of user defaults:</h3> <pre><code>print(Array(UserDefaults.standard.dictionaryRepresentation())) </code></pre> <h3>For retrieving the keys:</h3> <pre><code>// Using dump since the keys are an array of strings. dump(Array(UserDefaults.standard.dictionaryRepresentation().keys)) </code></pre> <h3>For retrieving the values:</h3> <p>We can use dump here as well, but that will return the complete inheritance hierarchy of each element in the values array. If more information about the objects is required, then use dump, else go ahead with the normal print statement.</p> <pre><code>// dump(Array(UserDefaults.standard.dictionaryRepresentation().values)) print(Array(UserDefaults.standard.dictionaryRepresentation().values)) </code></pre> <h1>Swift 2.x</h1> <h3>For retrieving the complete dictionary representation of user defaults:</h3> <pre><code>print(NSUserDefaults.standardUserDefaults().dictionaryRepresentation()) </code></pre> <h3>For retrieving the keys:</h3> <pre><code>print(NSUserDefaults.standardUserDefaults().dictionaryRepresentation().keys.array) </code></pre> <h3>For retrieving the values:</h3> <pre><code>print(NSUserDefaults.standardUserDefaults().dictionaryRepresentation().values.array) </code></pre>
<p>Easy, since the plist file name is <code>&lt;app-bundle-identifier&gt;.plist</code>, you can use <code>find</code> command to find its path. But it will take very long if you search your whole computer, so you have to pick a good scope, like <code>~/Library/Developer/CoreSimulator</code> for Xcode 6.</p> <p>example:</p> <p><code>find ~/Library/Developer/CoreSimulator -type f -name com.awesome.app.plist</code></p> <p>the output will be something like this...</p> <p><code>/Users/hlung/Library/Developer/CoreSimulator/Devices/B61913F6-7D7C-4E45-AE2F-F45220A71823/data/Containers/Data/Application/E4CC51CF-11E5-4168-8A74-6BAE3B89998F/Library/Preferences/com.awesome.app.plist </code></p> <p>And from there you can use <code>open</code> command. Or if you use <strong>iTerm2</strong>, just command-click on the path to open it.</p>
<p>Look for the Mac app called <strong>SimPholders2</strong>. It lives in the menu bar, and lists all of the simulators you've used, and then shows each of your apps. Select one and you get a new Finder window, already open to the app's directory. This makes it super easy to find your app and all of it's directories. It's a <strong>huge time saver</strong> (and I readily donated to the author).</p>
<p>In Swift 2.0</p> <pre><code>//func dictionaryRepresentation() -&gt; [String : AnyObject] </code></pre> <p>because dictionaryRepresentation of NSUserDefaults.standardUserDefaults() returns <strong>[String : AnyObject]</strong></p> <p>We cast it into an <code>NSDictionary</code>. Then by surrounding it in parenthesis '()' will allow us to to call .allKeys or .allValues just as you would on any NSDictionary</p> <pre><code> print((NSUserDefaults.standardUserDefaults().dictionaryRepresentation() as NSDictionary).allKeys) </code></pre>
<h1>Simulator App</h1> <p>This shell script search for the <strong>name</strong> of the app, obtain the <strong>bundle id</strong>, and <strong>open folders containing the Plist files</strong>.</p> <pre><code>#!/bin/bash appname="$1" [ -z $appname ] &amp;&amp; read -p "Application name : " appname apppath=$(find ~/Library/Developer/CoreSimulator/Devices/ -name "$appname.app" -print -quit) if [[ ! -z $apppath ]]; then appbundle=$(osascript -e "id of app \"$apppath\"") find ~/Library/Developer/CoreSimulator/Devices/ -name "$appbundle.plist" -exec bash -c 'open "$(dirname "$1")"' -- {} \; else echo "No application found by that name: $appname.app" fi </code></pre> <h1>Mac App</h1> <pre><code>defaults read com.bundleid.app </code></pre>
<p>In Swift 2.2</p> <pre><code>let path = NSSearchPathForDirectoriesInDomains(.LibraryDirectory, .UserDomainMask, true) let folder = path[0] NSLog("Your NSUserDefaults are stored in this folder: \(folder)/Preferences") </code></pre> <p>will print out NSUserDefaults's plist file folder location in Xcode debug console. Copy the path string. Open your Finder, select Go to Folder in Go menu item, Paste the path string. Double click the plist file. You will see the contents in your Xcode editor.</p> <p>Only work in Simulator</p> <p>Thanks @Niels Castle</p>
<p>Swift 3</p> <pre><code>print(UserDefaults.standard.dictionaryRepresentation()) </code></pre>
<p>NSLog(@"NSUserDefault: %@", [[NSUserDefaults standardUserDefaults] dictionaryRepresentation]);</p>
<p>For Xcode 7</p> <p>NSUserDefaults <strong>standardDefaults</strong> are stored here:</p> <p><code>/Users/{USER}/Library/Developer/CoreSimulator/Devices/{UUID}/data/Containers/Data/Application/{UUID}</code></p> <p>NSUserDefaults for <strong>a suite/app group</strong> are stored here:</p> <p><code>/Users/{USER}/Library/Developer/CoreSimulator/Devices/{UUID}/data/Containers/Shared/AppGroup/{UUID}/Library/Preferences/{GROUP_NAME}.plist</code></p> <p>I would recommend using <a href="https://github.com/scinfu/NCSimulatorPlugin" rel="nofollow noreferrer">https://github.com/scinfu/NCSimulatorPlugin</a> because these days everything is behind UUIDs and are a pain to find. It allows easy access to your simulator app directories.</p>