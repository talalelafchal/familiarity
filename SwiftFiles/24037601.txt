Parallel for loop in Swift
<p>What is the closest Swift equivalent of the following C &amp; OpenMP code (assume that <code>n</code> is huge and <code>f</code> is simple):</p> <pre><code>#openmp parallel for for (int i = 0; i &lt; n; ++i) { a[i] = f(b[i]); } </code></pre> <p>Parallelising a for loop with striding and <code>dispatch_apply</code> seems like a lot of work for such a routine task. Is there any clever shortcut?</p>
<p>It appears (from the iBook) that there's not yet a swift-specific API/language feature for parallelism. Using GCD seems like the best option at this point, performance-wise. If you're looking for code brevity, you can just use the standard Objective-C idiom for concurrent array enumeration:</p> <pre><code> var array : Int[] = [1,2,3,4] array.bridgeToObjectiveC().enumerateObjectsWithOptions(NSEnumerationOptions.Concurrent, {(obj: AnyObject!, index: Int, outStop: CMutablePointer&lt;ObjCBool&gt;) -&gt; Void in // Do stuff }); </code></pre>
<p>You can convert a Swift array to <code>NSArray</code> and use <code>enumerateObjectsWithOptions</code> without bridging - see simple example below: </p> <pre><code>let kCompanyListFileNames :[String] = [ "nyse_companylist", "nasdaq_companylist", "amex_companylist" ] let companyListFileNames:NSArray = kCompanyListFileNames as NSArray companyListFileNames.enumerateObjectsWithOptions(NSEnumerationOptions.Concurrent) { (companyName:AnyObject!, index:Int, stop:UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Void in println(companyName) } </code></pre>