How to make a mutating function in an extension return Int using Swift?
<p>Why doesn't this code work?</p> <pre><code>protocol ExampleProtocol { var simpleDescription: String { get } mutating func adjust() } extension Int: ExampleProtocol { var simpleDescription: String { return "The number \(self)" } mutating func adjust() { self += 42 } } var x:Int = 7 let y:Int = x.adjust() </code></pre> <p>here is what I get on XCODE</p> <p><img src="https://i.stack.imgur.com/6TrQ4.png" alt="enter image description here"></p> <p>is there a way to make adjust() return Int without changing its definition in the protocol?</p>
<p>Yes, you can give adjust a return value. Define it to return an Int in the protocol and class, then have it return itself in the mutating method:</p> <pre><code>protocol ExampleProtocol { var simpleDescription: String { get } mutating func adjust() -&gt; Int } extension Int: ExampleProtocol { var simpleDescription: String { return "The number \(self)" } mutating func adjust() -&gt; Int { self += 42 return self } } var x:Int = 7 let y:Int = x.adjust() //49 </code></pre>
<p>Because the adjust() function does not return value (it just change the value of its instance), you can achieve this by this orders:</p> <pre><code>var x:Int = 7 x.adjust() //adjust x self value let y:Int = x //assigne x value to y </code></pre> <p>Hope this helps.</p>
<p>Ques : <em>is there a way to make adjust() return Int without changing its definition in the protocol?</em> </p> <p>Ans : <strong>No</strong></p> <p>The definition/signature of a method tells us what it's going to take as input and what data type it's going to return.</p> <p>You need to return an Int from a method then it's signature should end with <code>-&gt; Int</code>. That's the syntax ! Can't change it.</p> <p><a href="http://stackoverflow.com/users/754604/connor">connor</a> has provided the right piece of code you need. </p>