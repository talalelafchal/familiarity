Swift - Sorting By Date Issue
I'm using NSSortDescriptors to sort an Array by the date element. The date is set as String using a formatter which formats in the style : "dd/MM/yy HH:mm". This date element is stored inside dictionaries which are all stored in the array. Parts of my code for this are below: // Date Formatting let currentTime = Date() let timeFormatter = DateFormatter() timeFormatter.locale = Locale.current timeFormatter.dateFormat = "HH:mm dd/MM/yy" let convertedTime:String! = timeFormatter.string(from: currentTime) // Descriptor let descriptorD: NSSortDescriptor = NSSortDescriptor(key: "Date", ascending: false) // Dictionary let newUserRecord = [ "Name" : enteredName!, "Score" : self.gameScore, "Date" : convertedTime ] as [String : Any] // Sorting newUserArray.sort(using: [descriptorD]) However my problem is the date is only being sorted by the time (HH:mm) and not taking in account the (dd/MM/yy) part. For example if I sort by the date and have a date of 13:12 19/11/16 and a date of 09:12 18/11/16 the 09:12 date will appear first even though it should be the 13:12 as it is a day later. How do I fix this?
This is the object oriented Swift way: Declare a struct rather than a dictionary and include the time formatter struct User { let timeFormatter : DateFormatter = { let formatter = DateFormatter() formatter.locale = Locale.current formatter.dateFormat = "HH:mm dd/MM/yy" return formatter }() let name : String let score : Int let time : Date var convertedTime : String { return timeFormatter.string(from: time) } } Declare an array of the User type and add two instances var newUserArray = [User]() newUserArray.append(User(name: "Foo", score: 12, time: Date().addingTimeInterval(1000.0))) newUserArray.append(User(name: "Bar", score: 78, time: Date())) Sort the array by time descending newUserArray.sort(by: {$0.time > $1.time }) And print the formatted date print(newUserArray[0].convertedTime)