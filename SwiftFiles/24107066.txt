NSString boundingRectWithSize:options:attributes:context: not usable in Swift?
<p>I get the error...</p> <p><code>Could not find an overload for 'init' that accepts the supplied arguments</code> </p> <p>...when I try to use...</p> <pre><code>extension UIFont { func sizeOfString (string: String, constrainedToWidth width: Double) -&gt; CGSize { NSString(string).boundingRectWithSize(CGSize(width, DBL_MAX), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: [NSFontAttributeName: self], context: nil).size } } </code></pre> <p>Does <code>NSString</code> not support this method anymore, or am I messing up on the syntax?</p>
<p>The initializers expect named arguments.</p> <pre><code>extension UIFont { func sizeOfString (string: String, constrainedToWidth width: Double) -&gt; CGSize { return NSString(string: string).boundingRectWithSize(CGSize(width: width, height: DBL_MAX), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: [NSFontAttributeName: self], context: nil).size } } </code></pre> <p>Note: <code>String</code>s can be cast to <code>NSString</code>s.</p> <pre><code>extension UIFont { func sizeOfString (string: String, constrainedToWidth width: Double) -&gt; CGSize { return (string as NSString).boundingRectWithSize(CGSize(width: width, height: DBL_MAX), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: [NSFontAttributeName: self], context: nil).size } } </code></pre> <p>or </p> <pre><code>extension UIFont { func sizeOfString (string: NSString, constrainedToWidth width: Double) -&gt; CGSize { return string.boundingRectWithSize(CGSize(width: width, height: DBL_MAX), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: [NSFontAttributeName: self], context: nil).size } } </code></pre>
<p>Alternatively you could cast it into an NSString</p> <pre><code>if let ns_str:NSString = str as NSString? { let sizeOfString = ns_str.boundingRectWithSize( CGSizeMake(self.titleLabel.frame.size.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: [NSFontAttributeName: lbl.font], context: nil).size } </code></pre>
<p>You can use objective-c bridging</p> <pre><code>let lblRegisterlinkWidth: CGFloat = lblRegisterLink.text!._bridgeToObjectiveC().boundingRectWithSize(lblRegisterLink.frame.size, options: .UsesLineFragmentOrigin, attributes: [NSFontAttributeName : lblRegisterLink.font], context: nil).size.width </code></pre>