Calculating MAX and MIN Latitude and Longitude with distance from Location - Objective C
<p>I need to compute MAX and MIN Latitude and Longitude values from a location with certain distance.</p> <p>I have thousands of locations stored in CoreData, and I want to show only the ones within 5km from users location.</p> <p>How can I approach this problem?</p>
<p>Here's a possible solution:</p> <ol> <li><p>macros to convert Degrees to Radians</p> <pre><code>#define deg2rad(degrees) ((degrees) / 180.0 M_PI) </code></pre></li> <li><p>macros to hold my searching distance</p> <pre><code>#define searchDistance 5.00 //float value in KM </code></pre></li> <li><p>set the minimum and maximum Latitude, Longitude values</p> <pre><code>float minLat = userLocation.coordinate.latitude - (searchDistance / 69); float maxLat = userLocation.coordinate.latitude + (searchDistance / 69); float minLon = userLocation.coordinate.latitude - searchDistance / fabs(cos(deg2rad(userLocation.coordinate.latitude))*69); float maxLon = userLocation.coordinate.longitude + searchDistance / fabs(cos(deg2rad(userLocation.coordinate.latitude))*69); </code></pre></li> <li><p>create predicate as follows</p> <pre><code>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"latitude &lt;= %f AND latitude &gt;= %f AND longitude &lt;= %f AND longitude &gt;= %f", maxLat, minLat, maxLon, minLon]; </code></pre></li> </ol> <p>This will create a square around <code>userLocation</code> and check if a given location falls into its coordinates.</p> <blockquote> <p>Update: Swift 2.* implementation</p> </blockquote> <p>First create a function to compute degrees to radians</p> <pre><code>func deg2rad(degrees:Double) -&gt; Double{ return degrees * M_PI / 180 } </code></pre> <p>Compute and create minimum and maximum <code>Latitude</code> and <code>Longitude</code> values</p> <pre><code>let searchDistance:Double = 5.00 //float value in KM let minLat = userLocation.coordinate.latitude - (searchDistance / 69) let maxLat = userLocation.coordinate.latitude + (searchDistance / 69) let minLon = userLocation.coordinate.longitude - searchDistance / fabs(cos(deg2rad(userLocation.coordinate.latitude))*69) let maxLon = userLocation.coordinate.longitude + searchDistance / fabs(cos(deg2rad(userLocation.coordinate.latitude))*69) </code></pre> <p>Last create <code>NSPredicate</code> to query <code>CoreData</code> for locations. In my case I am querying for values <code>latitude</code> and <code>longitude</code> but you should change this to match your <code>CoreData</code> object</p> <pre><code>let predicate = NSPredicate(format: "latitude &lt;= \(maxLat) AND latitude &gt;= \(minLat) AND longitude &lt;= \(maxLon) AND longitude &gt;= \(minLon)") </code></pre>
<p>Use the CoreLocation method <code>distanceFromLocation:</code> which returns the distance (in meters) between two points as such:</p> <pre><code>CLLocation* location = [[CLLocation alloc] initWithLatitude:lat longitude:lon]; if([userLocation distanceFromLocation:location) &lt; searchDistance) // do something with close point </code></pre> <p>A suitable predicate can be constructed as:</p> <pre><code>NSPredicate* predicate = [NSPredicate predicateWithBlock:(BOOL (^)(NSDictionary* target, NSDictionary *bindings)) { CLLocation* location = [[CLLocation alloc] initWithLatitude:[target[@"lat"] doubleValue] longitude:[target[@"lon"] doubleValue]]; return [userLocation distanceFromLocation:location] &lt; searchDistance; }]; </code></pre> <p>This has the advantage that it returns the items actually within range, as opposed to the items in a square approximating the range. It's also (probably, we don't know the details) using a more accurate approximation of the range itself. It has the disadvantage that the predicate requires loading every object since it can't be expressed as an sqlite query.</p>