How to bind table view with multiple sections that represent different data types using RxSwift and RxSwiftDataSources?
I am trying to create a table view with multiple sections using RxSwift. Each section displays data representing a different type. I found the RxSwiftDataSources library and implemented the example from their documentation. Here is a quick runthrough of how that example is implemented: A custom data type CustomData is defined: struct CustomData { var anInt: Int var aString: String var aCGPoint: CGPoint } Then, the representations for the section are added (note that SectionModelType is implemented here): struct SectionOfCustomData { var header: String var items: [Item] } extension SectionOfCustomData: SectionModelType { typealias Item = CustomData init(original: SectionOfCustomData, items: [Item]) { self = original self.items = items } } Finally, some sample data is created and bound to the table view: let sections: [SectionOfCustomData] = [ SectionOfCustomData(header: "First section", items: [CustomData(anInt: 0, aString: "zero", aCGPoint: CGPoint.zero), CustomData(anInt: 1, aString: "one", aCGPoint: CGPoint(x: 1, y: 1)) ]), SectionOfCustomData(header: "Second section", items: [CustomData(anInt: 2, aString: "two", aCGPoint: CGPoint(x: 2, y: 2)), CustomData(anInt: 3, aString: "three", aCGPoint: CGPoint(x: 3, y: 3)) ]) ] I now want to modify the example and only want to display Strings rather than instances of CustomData in the second section, so somewhat like this: let sections = [ SectionOfCustomData(header: "First section", items: [CustomData(anInt: 0, aString: "zero", aCGPoint: CGPoint.zero), CustomData(anInt: 1, aString: "one", aCGPoint: CGPoint(x: 1, y: 1)) ]), SectionOfString(header: "Second section", items: ["a", "b", "c"]) ] This will obviously not compile as sections now contains elements of different types SectionOfCustomData an SectionOfString. I tried to work around this by trying to declare sections as [SectionModelType] but this doesn't work, the compiler complains with: Protocol 'SectionModelType' can only be used as a generic constraint because it has Self or associated type requirements