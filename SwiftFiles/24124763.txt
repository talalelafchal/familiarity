Can't Unwrap Optional.None when using CoreData in Swift
<p>Ok so the problem actually occurs once the code bit var context: NSManagedObjectContext = appDel.managedObjectContext is run I commented it out to confirm that it was that line and it was please note this is my first time learning iOS programming so please try to be as specific as possible in your answer thank you :)</p> <pre><code>import UIKit import CoreData class SecondViewController: UIViewController, UITextFieldDelegate { @IBOutlet var txtName : UITextField @IBOutlet var txtDesc : UITextField override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } override func touchesBegan(touches: NSSet!, withEvent event: UIEvent!) { self.view.endEditing(true) } @IBAction func hitAdd(sender : UIButton) { glTask.newTask(txtName.text, desc: txtDesc.text) txtName.text = "" txtDesc.text = "" self.view.endEditing(true) self.tabBarController.selectedIndex = 0 var appDel: AppDelegate = (UIApplication.sharedApplication().delegate as AppDelegate) </code></pre> <blockquote> <p><strong>Right here</strong> V</p> </blockquote> <pre><code> var context: NSManagedObjectContext = appDel.managedObjectContext </code></pre> <blockquote> <p><strong>This crashes the app once button is pressed</strong> ^</p> <blockquote> <p><strong>The code error message is</strong> <em>fatal error Cant unwrap Optional.None</em></p> </blockquote> </blockquote> <pre><code> var newTask = NSEntityDescription.insertNewObjectForEntityForName("Tasks", inManagedObjectContext: context) as NSManagedObject newTask.setValue("test task", forKey: "myTask") newTask.setValue("test Description", forKey: "myDesc") context.save(nil) //println(newTask) println("Task was saved.") } // UITextField Delegate func textFieldShouldReturn(textField: UITextField!) -&gt; Bool { textField.resignFirstResponder() return true } </code></pre> <p>}</p>
<p>Looking at the Core Data stack in Swift, <code>managedObjectContext</code> is implemented like this:</p> <pre><code>var managedObjectContext: NSManagedObjectContext { if !_managedObjectContext { let coordinator = self.persistentStoreCoordinator if coordinator != nil { _managedObjectContext = NSManagedObjectContext() _managedObjectContext!.persistentStoreCoordinator = coordinator } } return _managedObjectContext! } var _managedObjectContext: NSManagedObjectContext? = nil </code></pre> <p>As you can see it is backed by an Optional.</p> <p>The place where this can go wrong is here:</p> <pre><code> _managedObjectContext = NSManagedObjectContext() _managedObjectContext!.persistentStoreCoordinator = coordinator </code></pre> <p>if <code>NSManagedObjectContext()</code> returns a <code>nil</code>, then the backing <code>_managedObjectContext</code> will be nil and you will get this crash at the line where you unwrap it <code>return _managedObjectContext!</code></p> <p>To debug this, dig deeper down the stack, its most likely failing to initialize the object model or persistant store, and thus returning <code>nil</code> to you.</p> <p><strong>Edit</strong>: In the definiton of the getter for <code>var persistentStoreCoordinator: NSPersistentStoreCoordinator</code></p> <p>They provide a location (the wall of comments) where you should debug this exact type of issue.</p>
<p>Not sure if OP ever figured this out, but I had a similar issue and realized that the code I copied from another app's <code>AppDelegate</code> was using the project name of that app and that I had forgot to change this line: <code>let modelURL = NSBundle.mainBundle().URLForResource("CoreData", withExtension: "momd")</code> to use "CoreData" instead of the "test" it had from another project.</p>