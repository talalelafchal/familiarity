Function returning function and calling a function that takes Variadic parameters using an array in Swift
<p>I am trying to make a curry function like in Lodash <a href="http://lodash.com/docs#curry" rel="nofollow">http://lodash.com/docs#curry</a></p> <p>Unfortunately I am getting two compile errors. </p> <pre><code>func curry(fun: (Any...)) -&gt; ((Any...) -&gt; (Any)) { let count = fun.0.count var resultArgs: Any[] = [] func generator(newArgs: Any...) -&gt; ((Any...) -&gt; (Any))? { for (index, elem) in enumerate(newArgs) { if resultArgs.count &gt;= count { break } else { resultArgs += elem } } if resultArgs.count &gt;= count { // fun(resultArgs) // Commenting fun now cause that throws a compile error saying array cannot be passed in Variadic parameter function return nil } else { return generator } } return generator } </code></pre> <p>There are two issues here:</p> <ol> <li>Segmentation faults for some reason on the generator function. Idea behind this function is to take parameters and return a new function or not return nothing at all and evaluate the function <code>fun</code> passed in the curry function</li> <li>Passing array of arguments to a function that accepts Variadic parameters. This should be a given in a language as we can do this using the <code>performSelector</code> in Objective-C</li> </ol> <p>How can I solve these two problems?</p> <p>I am getting the following error for the generator function which is a segmentation fault during compile time</p> <pre><code>1. While emitting IR SIL function @_TTRXFt_oGSaP__oBolGSaP__dSioXFo_oGSaP___oGSqFtGSaP___P____oGSqFtGSaP___P___XFo_oGSaP___oGSqFtGSaP___P___ for 'generator' &lt;unknown&gt;:0: error: unable to execute command: Segmentation fault: 11 &lt;unknown&gt;:0: error: swift frontend command failed due to signal (use -v to see invocation) Command /Applications/Xcode6-Beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift failed with exit code 254 </code></pre>
<p>This is the closest I got at accepting multiple arguments. It looks like it treats arguments as tuples, according to the error message given for <code>curry2</code>...</p> <pre><code>func curry&lt;T, U&gt;(fun: (T) -&gt; U) -&gt; (T)-&gt;U { return fun } func curry2(fun: (Any...) -&gt; Any) -&gt; (Any...)-&gt;Any { return fun } func to_curry(a: Int, b: Int) -&gt; Int { return a + b } func test() { curry(to_curry)(3, 5) // returns 8 curry2(to_curry)(3, 5) // tuple types '(Any...)' and '(Int, Int)' have a // different number of elements (1 vs. 2) } </code></pre> <p>And I can't find any way to count tuples other than doing something like this:</p> <pre><code>let tuple = (1, 2) let count = sizeofValue(tuple)/sizeof(Int) </code></pre>