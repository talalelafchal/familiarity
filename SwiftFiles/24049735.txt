Xcode 6, Swift and mock verification without exceptions
<p>Anyone know how to verify an OCMock expect in Swift? Swift Doesn't use Exceptions so XCTest no longer includes <code>XCTAssertNoThrow</code>. Is There any other way to verify a method was called with OCMock? I noticed in OCMock the verify function checks the <code>expectations</code> array so I assume we could do <code>XCTAssertTrue(mock.expectations == 0)</code> if we had access. </p> <p>Trying to figure some of these more complicated things out since there is little to no docs around XCTests in Swift</p>
<p>Ok so Not a real answer but a work around for ObjC / Swift Projects. Write an Object Wrapper that will run <code>[mock verify]</code> and return a bool.</p> <p>Create an Obj-c H and M file. In the .h</p> <p><code>+ (BOOL)verifyMock:(id)mock;</code></p> <p>In the .m</p> <pre><code>+ (BOOL)verifyMock:(id)mock { BOOL called = YES; @try { [mock verify]; } @catch (NSException *exception) { called = NO; } @finally { return called; } return called; } </code></pre> <p>Now add this Obj-c file to your Bridging-Header file so swift has access.</p> <p>In your Swift XCTest file</p> <p><code>XCTAssertTrue(YourWrapperClassName.verifyMock(mock), "Method was not called")</code></p>