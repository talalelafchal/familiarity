Ranges in Swift3
I'm struggling with one of the Swift3 changes. Earlier they treated ... and ..< as Range, but now they have a ton of new "sub-ranges". I would like to have a function taking both range variants. struct Test { var data = [1,2,3,4,5] subscript(r:Range<Int>) -> [Int] { return Array(data[r]) } } let t = Test() print(t[0...1]) // fails because now this is a ClosedRange print(t[0..<2]) I'd like to have a  subscript(r:TakesAnyRange<Int>) -> [Int] {
You can avoid the duplication by instead using CountableRange and CountableClosedRange, since one is convertible to the other: struct Test { var data = [1,2,3,4,5] subscript(r: CountableRange<Int>) -> [Int] { return Array(data[r]) } subscript(r: CountableClosedRange<Int>) -> [Int] { return self[CountableRange(r)] } } This works fine for an Int range, which is what you specified in your question. From the Apple documentation: You can create a countable range over any type that conforms to the Strideable protocol and uses an integer as its associated Stride type. By default, Swiftâ€™s integer and pointer types are usable as the bounds of a countable range.