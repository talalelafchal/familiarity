Why does my extension method cause a type error?
<p>I have the following Playground code:</p> <pre><code>// Playground - noun: a place where people can play import Cocoa extension Array { func toHexString&lt;CUnsignedChar&gt;() -&gt; String { var returnString = NSMutableString(capacity: self.count * 2) for i in self { let val = i as Int // if someone would like to answer why casting this as a CUnsignedChar throws an error, I'd appreciate it -- but that's a separate question returnString.appendFormat("%02X", val) } return returnString } } var hashedString: String? { get { let x: CUnsignedChar[] = [0xA, 0xB, 0xC] return x.toHexString() } } println(hashedString) </code></pre> <p>This causes the error, "NSString is not a subtype of 'String'"</p> <p>However, if I rewrite this code to be:</p> <pre><code>var hashedString: String? { get { let x: CUnsignedChar[] = [0xA, 0xB, 0xC] var returnString = NSMutableString(capacity: x.count * 2) for i in x { returnString.appendFormat("%02X", i) } return returnString } } println(hashedString) </code></pre> <p>I get no error.</p>
<p>I think it has to do with the fact that your extension does not return an optional, but your hashedString does.</p> <p>However, the playground crashes like crazy when I try to mess around with the above code. =)</p>
<p>Couple things I would recommend.</p> <p>First, use <code>UInt8</code> instead of <code>CUnsignedChar</code> for an array of bytes. Also, I would stay away from <code>NSMutableString</code> and use standard string concatenation and interpolation via Swift. I have not had much success trying to use <code>CVarArgs</code> inside Swift.</p> <p>Here is my implementation:</p> <pre><code>extension Array { func toHexString() -&gt; String { var hexString = "" for value in self { if let integerValue = value as? UInt8 { let stringValue = String(integerValue, radix: 16) if integerValue &lt; 0x10 { hexString += "0\(stringValue)" } else { hexString += stringValue } } } return hexString; } } let arrayOfBytes : Array&lt;UInt8&gt; = [ 0x0A, 0x13, 0x02, 0x2F, 0x22, 0x7A, 0xF1 ] let hash = arrayOfBytes.toHexString() let hashUppercase = hash.uppercaseString </code></pre> <p>It is unfortunate that you cannot create an <code>extension</code> solely for <code>Array&lt;UInt8&gt;</code> and must extend all <code>Arrays</code>, even if your method is only valid for one type.</p>