How to create a string with format?
<p>I need to create a string with format which can convert int, long, double etc. types into string. Using Obj-C, I can do it via below way.</p> <pre><code>NSString *str = [NSString stringWithFormat:@"%d , %f, %ld, %@", INT_VALUE, FLOAT_VALUE, DOUBLE_VALUE, STRING_VALUE]; </code></pre> <p>How to do same with swift?</p>
<p>I think this could help you:</p> <pre><code>let timeNow = time(nil) let aStr = String(format: "%@%x", "timeNow in hex: ", timeNow) print(aStr) </code></pre>
<p>nothing special</p> <pre><code>let str = NSString(format:"%d , %f, %ld, %@", INT_VALUE, FLOAT_VALUE, DOUBLE_VALUE, STRING_VALUE) </code></pre>
<pre><code>let str = "\(INT_VALUE), \(FLOAT_VALUE), \(DOUBLE_VALUE), \(STRING_VALUE)" </code></pre>
<pre><code>var str = "\(INT_VALUE) , \(FLOAT_VALUE) , \(DOUBLE_VALUE), \(STRING_VALUE)" </code></pre>
<p>Use this following code:</p> <pre><code> let intVal=56 let floatval:Double=56.897898 let doubleValue=89.0 let explicitDaouble:Double=89.56 let stringValue:"Hello" let stringValue="String:\(stringValue) Integer:\(intVal) Float:\(floatval) Double:\(doubleValue) ExplicitDouble:\(explicitDaouble) " </code></pre>
<p>First read <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1" rel="nofollow">Official documentation for Swift language.</a></p> <p>Answer should be</p> <pre><code>var str = "\(INT_VALUE) , \(FLOAT_VALUE) , \(DOUBLE_VALUE), \(STRING_VALUE)" println(str) </code></pre> <p>Here </p> <p>1) Any floating point value by default <code>double</code> </p> <pre><code>EX. var myVal = 5.2 // its double by default; </code></pre> <p>-> If you want to display floating point value then you need to explicitly define such like a</p> <pre><code> EX. var myVal:Float = 5.2 // now its float value; </code></pre> <p>This is far more clear.</p>
<pre><code>let INT_VALUE=80 let FLOAT_VALUE:Double= 80.9999 let doubleValue=65.0 let DOUBLE_VALUE:Double= 65.56 let STRING_VALUE="Hello" let str = NSString(format:"%d , %f, %ld, %@", INT_VALUE, FLOAT_VALUE, DOUBLE_VALUE, STRING_VALUE); println(str); </code></pre>
<p>Success to try it:</p> <pre><code> var letters:NSString = "abcdefghijkl" var strRendom = NSMutableString.stringWithCapacity(strlength) for var i=0; i&lt;strlength; i++ { let rndString = Int(arc4random() % 12) //let strlk = NSString(format: &lt;#NSString#&gt;, &lt;#CVarArg[]#&gt;) let strlk = NSString(format: "%c", letters.characterAtIndex(rndString)) strRendom.appendString(String(strlk)) } </code></pre>
<pre><code>No NSString required! String(format: "Value: %3.2f\tResult: %3.2f", arguments: [2.7, 99.8]) or String(format:"Value: %3.2f\tResult: %3.2f", 2.7, 99.8) </code></pre>
<p>I would argue that both</p> <pre><code>let str = String(format:"%d, %f, %ld", INT_VALUE, FLOAT_VALUE, DOUBLE_VALUE) </code></pre> <p>and</p> <pre><code>let str = "\(INT_VALUE), \(FLOAT_VALUE), \(DOUBLE_VALUE)" </code></pre> <p>are both acceptable since the user asked about formatting and both cases fit what they are asking for:</p> <blockquote> <p>I need to create a string with format which can convert int, long, double etc. types into string. </p> </blockquote> <p>Obviously the former allows finer control over the formatting than the latter, but that does not mean the latter is not an acceptable answer.</p>
<p>I know a lot's of time has passed since this publish, but I've fallen in a similar situation and create a simples class to simplify my life.</p> <pre><code>public struct StringMaskFormatter { public var pattern : String = "" public var replecementChar : Character = "*" public var allowNumbers : Bool = true public var allowText : Bool = false public init(pattern:String, replecementChar:Character="*", allowNumbers:Bool=true, allowText:Bool=true) { self.pattern = pattern self.replecementChar = replecementChar self.allowNumbers = allowNumbers self.allowText = allowText } private func prepareString(string:String) -&gt; String { var charSet : NSCharacterSet! if allowText &amp;&amp; allowNumbers { charSet = NSCharacterSet.alphanumericCharacterSet().invertedSet } else if allowText { charSet = NSCharacterSet.letterCharacterSet().invertedSet } else if allowNumbers { charSet = NSCharacterSet.decimalDigitCharacterSet().invertedSet } let result = string.componentsSeparatedByCharactersInSet(charSet) return result.joinWithSeparator("") } public func createFormattedStringFrom(text:String) -&gt; String { var resultString = "" if text.characters.count &gt; 0 &amp;&amp; pattern.characters.count &gt; 0 { var finalText = "" var stop = false let tempString = prepareString(text) var formatIndex = pattern.startIndex var tempIndex = tempString.startIndex while !stop { let formattingPatternRange = formatIndex ..&lt; formatIndex.advancedBy(1) if pattern.substringWithRange(formattingPatternRange) != String(replecementChar) { finalText = finalText.stringByAppendingString(pattern.substringWithRange(formattingPatternRange)) } else if tempString.characters.count &gt; 0 { let pureStringRange = tempIndex ..&lt; tempIndex.advancedBy(1) finalText = finalText.stringByAppendingString(tempString.substringWithRange(pureStringRange)) tempIndex = tempIndex.advancedBy(1) } formatIndex = formatIndex.advancedBy(1) if formatIndex &gt;= pattern.endIndex || tempIndex &gt;= tempString.endIndex { stop = true } resultString = finalText } } return resultString } } </code></pre> <p>The follow link send to the complete source code: <a href="https://gist.github.com/dedeexe/d9a43894081317e7c418b96d1d081b25" rel="nofollow">https://gist.github.com/dedeexe/d9a43894081317e7c418b96d1d081b25</a></p> <p>This solution was base on this article: <a href="http://vojtastavik.com/2015/03/29/real-time-formatting-in-uitextfield-swift-basics/" rel="nofollow">http://vojtastavik.com/2015/03/29/real-time-formatting-in-uitextfield-swift-basics/</a></p>
<p>There is a simple solution I learned with "We &lt;3 Swift" if you can't either <strong>import Foundation</strong>, use <strong>round()</strong> and/or does not want a <strong>String</strong>:</p> <pre><code>var number = 31.726354765 var intNumber = Int(number * 1000.0) var roundedNumber = Double(intNumber) / 1000.0 </code></pre> <p><strong>result: 31.726</strong></p>