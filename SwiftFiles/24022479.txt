How would I create a UIAlertView in Swift?
<p>I have been working to create a UIAlertView in Swift, but for some reason I can't get the statement right because I'm getting this error: </p> <blockquote> <p>Could not find an overload for 'init' that accepts the supplied arguments</p> </blockquote> <p>Here is how I have it written:</p> <pre><code>let button2Alert: UIAlertView = UIAlertView(title: "Title", message: "message", delegate: self, cancelButtonTitle: "Ok", otherButtonTitles: nil) </code></pre> <p>Then to call it I'm using:</p> <pre><code>button2Alert.show() </code></pre> <p>As of right now it is crashing and I just can't seem to get the syntax right. </p>
<p>From the <code>UIAlertView</code> class:</p> <blockquote> <p>// UIAlertView is deprecated. Use <strong>UIAlertController</strong> with a preferredStyle of UIAlertControllerStyleAlert instead</p> </blockquote> <p>On iOS 8, you can do this:</p> <pre><code>let alert = UIAlertController(title: "Alert", message: "Message", preferredStyle: UIAlertControllerStyle.Alert) alert.addAction(UIAlertAction(title: "Click", style: UIAlertActionStyle.Default, handler: nil)) self.presentViewController(alert, animated: true, completion: nil) </code></pre> <p>Now <code>UIAlertController</code> is a single class for creating and interacting with what we knew as <code>UIAlertView</code>s and <code>UIActionSheet</code>s on iOS 8.</p> <p><strong>Edit:</strong> To handle actions:</p> <pre><code>alert.addAction(UIAlertAction(title: "Ok", style: .Default, handler: { action in switch action.style{ case .Default: print("default") case .Cancel: print("cancel") case .Destructive: print("destructive") } })) </code></pre> <p><strong>Edit for Swift 3:</strong></p> <pre><code>let alert = UIAlertController(title: "Alert", message: "Message", preferredStyle: UIAlertControllerStyle.alert) alert.addAction(UIAlertAction(title: "Click", style: UIAlertActionStyle.default, handler: nil)) self.present(alert, animated: true, completion: nil) </code></pre>
<p>You can create a UIAlert using the standard constructor, but the 'legacy' one seems to not work:</p> <pre><code>let alert = UIAlertView() alert.title = "Alert" alert.message = "Here's a message" alert.addButtonWithTitle("Understod") alert.show() </code></pre>
<p>I found this one,</p> <pre><code>var alertView = UIAlertView(); alertView.addButtonWithTitle("Ok"); alertView.title = "title"; alertView.message = "message"; alertView.show(); </code></pre> <p>not good though, but it works :)</p> <p>Update:</p> <p>but I have found on header file as:</p> <pre><code>extension UIAlertView { convenience init(title: String, message: String, delegate: UIAlertViewDelegate?, cancelButtonTitle: String?, otherButtonTitles firstButtonTitle: String, _ moreButtonTitles: String...) } </code></pre> <p>somebody may can explain this.</p>
<p>The reason it doesn't work because some value you passed to the function isn't correct. swift doesn't like Objective-C, you can put nil to arguments which are class type without any restriction(might be). Argument otherButtonTitles is defined as non-optional which its type do not have (?)at its end. so you must pass a concrete value to it.</p>
<p>Show UIAlertView in swift language :-</p> <p>Protocol UIAlertViewDelegate</p> <pre><code>let alert = UIAlertView(title: "alertView", message: "This is alertView", delegate:self, cancelButtonTitle:"Cancel", otherButtonTitles: "Done", "Delete") alert.show() </code></pre> <p>Show UIAlertViewController in swift language :-</p> <pre><code>let alert = UIAlertController(title: "Error", message: "Enter data in Text fields", preferredStyle: UIAlertControllerStyle.Alert) alert.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.Default, handler: nil)) self.presentViewController(alert, animated: true, completion: nil) </code></pre>
<pre><code>@IBAction func Alert(sender: UIButton) { var alertView:UIAlertView = UIAlertView() alertView.title = "Alert!" alertView.message = "Message" alertView.delegate = self alertView.addButtonWithTitle("OK") alertView.show() } </code></pre> <p>Try this</p>
<p>Simply do not provide otherButtonTitles in the constructor.</p> <pre><code>let alertView = UIAlertView(title: "Oops!", message: "Something happened...", delegate: nil, cancelButtonTitle: "OK") alertView.show() </code></pre> <p>But I do agree with Oscar, this class is deprecated in iOS 8, so there won't be no use of UIAlertView if you're doing an iOS 8 only app. Otherwise the code above will work.</p>
<p>If you're targeting iOS 7 <em>and</em> 8, you need something like this to make sure you're using the right method for each version, because <code>UIAlertView</code> is deprecated in iOS 8, but <code>UIAlertController</code> is not available in iOS 7:</p> <pre><code>func alert(title: String, message: String) { if let getModernAlert: AnyClass = NSClassFromString("UIAlertController") { // iOS 8 let myAlert: UIAlertController = UIAlertController(title: title, message: message, preferredStyle: .Alert) myAlert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil)) self.presentViewController(myAlert, animated: true, completion: nil) } else { // iOS 7 let alert: UIAlertView = UIAlertView() alert.delegate = self alert.title = title alert.message = message alert.addButtonWithTitle("OK") alert.show() } } </code></pre>
<p>Here is a funny example in Swift:</p> <pre><code>private func presentRandomJoke() { if let randomJoke: String = jokesController.randomJoke() { let alertController: UIAlertController = UIAlertController(title:nil, message:randomJoke, preferredStyle: UIAlertControllerStyle.Alert) alertController.addAction(UIAlertAction(title:"Done", style:UIAlertActionStyle.Default, handler:nil)) presentViewController(alertController, animated:true, completion:nil) } } </code></pre>
<p><strong>Click of View</strong> </p> <pre><code>@IBAction func testClick(sender: UIButton) { var uiAlert = UIAlertController(title: "Title", message: "Message", preferredStyle: UIAlertControllerStyle.Alert) self.presentViewController(uiAlert, animated: true, completion: nil) uiAlert.addAction(UIAlertAction(title: "Ok", style: .Default, handler: { action in println("Click of default button") })) uiAlert.addAction(UIAlertAction(title: "Cancel", style: .Cancel, handler: { action in println("Click of cancel button") })) } </code></pre> <p><strong>Done with two buttons OK &amp; Cancel</strong></p>
<pre><code> class Preview: UIViewController , UIAlertViewDelegate { @IBAction func MoreBtnClicked(sender: AnyObject) { var moreAlert=UIAlertView(title: "Photo", message: "", delegate: self, cancelButtonTitle: "No Thanks!", otherButtonTitles: "Save Image", "Email", "Facebook", "Whatsapp" ) moreAlert.show() moreAlert.tag=111; } func alertView(alertView: UIAlertView, didDismissWithButtonIndex buttonIndex: Int) { if alertView.tag==111 { if buttonIndex==0 { println("No Thanks!") } else if buttonIndex==1 { println("Save Image") } else if buttonIndex == 2 { println("Email") } else if buttonIndex == 3 { println("Facebook") } else if buttonIndex == 4 { println("Whatsapp") } } } } </code></pre>
<p>I got the following <code>UIAlertView</code> initialization code to compile without errors (I thing the last, varyadic part is tricky perhaps). But I had to make sure the class of <code>self</code> (which I am passing as the delegate) was adopting the <code>UIAlertViewDelegate</code> protocol for the compile errors to go away:</p> <pre><code>let alertView = UIAlertView( title: "My Title", message: "My Message", delegate: self, cancelButtonTitle: "Cancel", otherButtonTitles: "OK" ) </code></pre> <p>By the way, this is the error I was getting (as of Xcode 6.4):</p> <blockquote> <p>Cannot find an initializer for type 'UIAlertView' that accepts an argument list of type '(title: String, message: String, delegate: MyViewController, cancelButtonTitle: String, otherButtonTitles: String)'</p> </blockquote> <p>As others mentioned, you should migrate to UIAlertController if you can target iOS 8.x+. To support iOS 7, use the code above (iOS 6 is not supported by Swift).</p>
<p>I have another trick. Suppose you have 5 classes where a logout alert to be applied. Try with swift class extension.</p> <p>File- New- Swift class- Name it.</p> <p>Add the following: </p> <pre><code>public extension UIViewController { func makeLogOutAlert() { var refreshAlert = UIAlertController(title: "Log Out", message: "Are You Sure to Log Out ? ", preferredStyle: UIAlertControllerStyle.Alert) refreshAlert.addAction(UIAlertAction(title: "Confirm", style: .Default, handler: { (action: UIAlertAction!) in self.navigationController?.popToRootViewControllerAnimated(true) })) refreshAlert.addAction(UIAlertAction(title: "Cancel", style: .Default, handler: { (action: UIAlertAction!) in refreshAlert .dismissViewControllerAnimated(true, completion: nil) })) presentViewController(refreshAlert, animated: true, completion: nil) } } </code></pre> <p>Implement using : self.makeLogOutAlert(). Hope it helps.</p>
<p>With the protocol extensions of Swift 2, you can make a protocol that provides a default implementation to your view controllers:</p> <p>ShowsAlert.swift</p> <pre><code>import UIKit protocol ShowsAlert {} extension ShowsAlert where Self: UIViewController { func showAlert(title: String = "Error", message: String) { let alertController = UIAlertController(title: title, message: message, preferredStyle: .Alert) alertController.addAction(UIAlertAction(title: "Ok", style: .Default, handler: nil)) presentViewController(alertController, animated: true, completion: nil) } } </code></pre> <p>ViewController.swift</p> <pre><code>class ViewController: UIViewController, ShowsAlert { override func viewDidLoad() { super.viewDidLoad() showAlert(message: "Hey there, I am an error message!") } } </code></pre>
<p><em>Updated for Swift 3</em></p> <h1>One Button</h1> <p><a href="https://i.stack.imgur.com/H9fox.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/H9fox.png" alt="One Button Screenshot"></a></p> <pre><code>class ViewController: UIViewController { @IBAction func showAlertButtonTapped(_ sender: UIButton) { // create the alert let alert = UIAlertController(title: "My Title", message: "This is my message.", preferredStyle: UIAlertControllerStyle.alert) // add an action (button) alert.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.default, handler: nil)) // show the alert self.present(alert, animated: true, completion: nil) } } </code></pre> <h1>Two Buttons</h1> <p><a href="https://i.stack.imgur.com/6wt7I.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/6wt7I.png" alt="Two Button Alert Screenshot"></a></p> <pre><code>class ViewController: UIViewController { @IBAction func showAlertButtonTapped(_ sender: UIButton) { // create the alert let alert = UIAlertController(title: "UIAlertController", message: "Would you like to continue learning how to use iOS alerts?", preferredStyle: UIAlertControllerStyle.alert) // add the actions (buttons) alert.addAction(UIAlertAction(title: "Continue", style: UIAlertActionStyle.default, handler: nil)) alert.addAction(UIAlertAction(title: "Cancel", style: UIAlertActionStyle.cancel, handler: nil)) // show the alert self.present(alert, animated: true, completion: nil) } } </code></pre> <h1>Three Buttons</h1> <p><a href="https://i.stack.imgur.com/2exn4.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2exn4.png" alt="Three button alert screenshot"></a></p> <pre><code>class ViewController: UIViewController { @IBAction func showAlertButtonTapped(_ sender: UIButton) { // create the alert let alert = UIAlertController(title: "Notice", message: "Lauching this missile will destroy the entire universe. Is this what you intended to do?", preferredStyle: UIAlertControllerStyle.alert) // add the actions (buttons) alert.addAction(UIAlertAction(title: "Remind Me Tomorrow", style: UIAlertActionStyle.default, handler: nil)) alert.addAction(UIAlertAction(title: "Cancel", style: UIAlertActionStyle.cancel, handler: nil)) alert.addAction(UIAlertAction(title: "Launch the Missile", style: UIAlertActionStyle.destructive, handler: nil)) // show the alert self.present(alert, animated: true, completion: nil) } } </code></pre> <h1>Handling Button Taps</h1> <p>The <code>handler</code> was <code>nil</code> in the above examples. You can replace <code>nil</code> with a <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html" rel="nofollow noreferrer">closure</a> to do something when the user taps a button. For example:</p> <pre><code>alert.addAction(UIAlertAction(title: "Launch the Missile", style: UIAlertActionStyle.destructive, handler: { action in // do something like... self.launchMissile() })) </code></pre> <h1>Notes</h1> <ul> <li>Multiple buttons do not necessarily need to use different <code>UIAlertActionStyle</code> types. They could all be <code>.default</code>.</li> <li>For more than three buttons consider using an Action Sheet. The setup is very similar. <a href="http://stackoverflow.com/a/32991999/3681880">Here is an example.</a></li> </ul>
<p>I have made a singleton class to make this convenient to use from anywhere in your app: <a href="https://github.com/Swinny1989/Swift-Popups" rel="nofollow">https://github.com/Swinny1989/Swift-Popups</a></p> <p>You can then create a popup with multiple buttons like this:</p> <pre><code>Popups.SharedInstance.ShowAlert(self, title: "Title goes here", message: "Messages goes here", buttons: ["button one" , "button two"]) { (buttonPressed) -&gt; Void in if buttonPressed == "button one" { //Code here } else if buttonPressed == "button two" { // Code here } } </code></pre> <p>or popups with a single button like this:</p> <pre><code>Popups.SharedInstance.ShowPopup("Title goes here", message: "Message goes here.") </code></pre>
<p><strong>Here is a pretty simple function of AlertView in Swift :</strong></p> <pre><code>class func globalAlertYesNo(msg: String) { let alertView = UNAlertView(title: "Title", message: msg) alertView.messageAlignment = NSTextAlignment.Center alertView.buttonAlignment = UNButtonAlignment.Horizontal alertView.addButton("Yes", action: { print("Yes action") }) alertView.addButton("No", action: { print("No action") }) alertView.show() } </code></pre> <p><em>You have to pass message as a String where you use this function.</em></p>
<p>The Old Way: UIAlertView</p> <pre><code>let alertView = UIAlertView(title: "Default Style", message: "A standard alert.", delegate: self, cancelButtonTitle: "Cancel", otherButtonTitles: "OK") alertView.alertViewStyle = .Default alertView.show() // MARK: UIAlertViewDelegate func alertView(alertView: UIAlertView, clickedButtonAtIndex buttonIndex: Int) { switch buttonIndex { // ... } } </code></pre> <p>The New Way: UIAlertController</p> <pre><code>let alertController = UIAlertController(title: "Default Style", message: "A standard alert.", preferredStyle: .Alert) let cancelAction = UIAlertAction(title: "Cancel", style: .Cancel) { (action) in // ... } alertController.addAction(cancelAction) let OKAction = UIAlertAction(title: "OK", style: .Default) { (action) in // ... } alertController.addAction(OKAction) self.presentViewController(alertController, animated: true) { // ... } </code></pre>
<p><strong>Swift 3</strong></p> <p>The following is a simple example of how to create a simple alert with one button with Swift 3.</p> <pre><code>let alert = UIAlertController(title: "Title", message: "Message", preferredStyle: .alert) alert.addAction(UIAlertAction(title: "Ok", style: .default)) present(alert, animated: true) </code></pre> <p>In the above example the handle callback of the action has been omitted because the default behaviour of an alert view with one button is to disappear when the button is clicked.</p> <p>Here is how to create another action, which could be added to the alert with "alert.addAction(action)". The different styles are .default, .destructive and .cancel.</p> <pre><code>let action = UIAlertAction(title: "Ok", style: .default) { action in // Handle when button is clicked } </code></pre>
<p>Use this code to display an alertview </p> <pre><code> let alertController = UIAlertController(title: "Hello Coders", message: "your alert message", preferredStyle: .Alert) let defaultAction = UIAlertAction(title: "Close Alert", style: .Default, handler: nil) alertController.addAction(defaultAction) presentViewController(alertController, animated: true, completion: nil) </code></pre> <p>Reference: <a href="https://www.simplifiedios.net/ios-show-alert-using-uialertcontroller/" rel="nofollow">Swift Show Alert using UIAlertController</a></p>