No need to unwrap optionals in Swift?
<p>I think I'm confused about the concept of 'unwrapping' an optional value, and any guidance would be much appreciated!</p> <p>According to the Swift Programming Language Guide, an optional requires unwrapping before it can be used, unless it is implicitly unwrapped using an !. </p> <p>From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/gb/jEUH0.l" rel="nofollow">https://itun.es/gb/jEUH0.l</a>: </p> <pre><code>let possibleString: String? = "An optional string." println(possibleString!) // requires an exclamation mark to access its value </code></pre> <p>whereas</p> <pre><code>let assumedString: String! = "An implicitly unwrapped optional string." println(assumedString) // no exclamation mark is needed to access its value </code></pre> <p>However, in Xcode, I can do the following and still print the value of an optional string:</p> <pre><code>let teamname: String? = "Liverpool!" println("Come on \(teamname)") </code></pre> <p>What am I missing?</p>
<p>An optional requires unwrapping, but you don't always have to do it yourself.</p> <pre><code>var teamname: String? = "Liverpool" println("Come on \(teamname)") </code></pre> <p>In this case, the string interpolation will check the optional then unwrap it and add its value to the String. If the Optional is nil, it will add "nil" to the String instead.</p> <p>In order to access the properties and methods of String you will have to explicitly unwrap it. If you don't know if it is nil or not, you should check with an if statement.</p> <pre><code>if teamname != nil { var newName = teamname!.capitalizedString } </code></pre>
<p>First of all, an optional requires unwrapping only if you are using it somewhere that does not allow an optional. (e.g. assigning a <code>String?</code> to a <code>String</code>)</p> <pre><code>var optionalString: String? = "Some string" var absolutelyAString: String = "Another string" // absolutelyAString = optionalString // Error. Needs to unwrap absolutelyAString = optionalString! // OK. </code></pre> <p>"Unwrap" basically means to "guarantee that the value is not nil". Just think of it as casting to a non-nullable type.</p> <p>Second, <code>println()</code> accepts optionals just fine but because it checks your variable for you. If the value of your variable is <code>nil</code>, it prints "nil"; otherwise it prints the string implemented by the <code>Streamable</code>, <code>Printable</code>, or <code>DebugPrintable</code> protocols.</p>