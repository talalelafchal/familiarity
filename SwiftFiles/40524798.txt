Slide menu - move from right to left and back
I have slide menu when I click on screen menu comes out from right to left. How can I write code if I click button to move back from left to right? My slide menu: My code: private void UpdateTableViewPosition(CGPoint positon) { // set the position of the button based on the provided argument _buttonToggleVisibility.Frame = new CoreGraphics.CGRect(positon.X , _buttonToggleVisibility.Frame.Y, _buttonToggleVisibility.Frame.Width, _buttonToggleVisibility.Frame.Height); // TODO: // if button is outside of the screen // move it back into the screen // then move tableview so it is right aligned of the button _tableView.Frame = new CoreGraphics.CGRect(_buttonToggleVisibility.Frame.Right, _tableView.Frame.Y, _tableView.Frame.Width, _tableView.Frame.Height); } public override void TouchesEnded(NSSet touches, UIEvent evt) { base.TouchesEnded(touches, evt); UITouch touch = (UITouch)touches.AnyObject; _moving = false; // TODO: fix so that only the button is clickable // if the touch clicked the button // open (or close) the view with the following animation code UIView.Animate(0.9f, () => { // TODO: this animation code is incorrect. Currently it moves the view 100px relatively to the // current position, but it should rather either set the button to the left corner or the right // corner at fixed positions UpdateTableViewPosition(new CGPoint(_buttonToggleVisibility.Frame.X - _buttonToggleVisibility.Frame.Left, 0)); }, null); } public override void TouchesCancelled(NSSet touches, UIEvent evt) { base.TouchesCancelled(touches, evt); _moving = false; } public override void TouchesBegan(Foundation.NSSet touches, UIEvent evt) { base.TouchesBegan(touches, evt); UITouch touch = (UITouch)touches.AnyObject; CoreGraphics.CGPoint pos = touch.LocationInView(this); if (pos.X > _buttonToggleVisibility.Frame.X && pos.X < _buttonToggleVisibility.Frame.Right && pos.Y > _buttonToggleVisibility.Frame.Y && pos.Y < _buttonToggleVisibility.Frame.Bottom) { // did click on the view _moving = true; } _buttonToggleVisibility.TouchUpInside += (sender, e) => { }; } }
I use AutoLayout and UIView animation to move a view of controls up and down. (Think a keyboard but with more flexibility.) The board has a "Done" button, which animatedly moves the board (and it's subviews) out of view. Since I have an array of boards, there's extra code here addressing the tag property. That's where I find which board to work with. The key things are to: (1) Change the heightAnchor (or in your case the widthAnchor) (2) Animate by call the superview's layoutIfNeeded .. private var boardIn:[NSLayoutConstraint] = [] private var boardOut:[NSLayoutConstraint] = [] private var tabBoards:[TabBoard] = [] public func createControlBoard( _ tag:Int ) -> ControlBoard { let newBoard = ControlBoard(tag) boardOut.append(newBoard.heightAnchor.constraint(equalToConstant: 100)) boardIn.append(newBoard.heightAnchor.constraint(equalToConstant: 0)) newBoard.doneButton.addTarget(self, action: #selector(hideTabBoard), for: .touchUpInside) tabBoards.append(newBoard) return newBoard } public func showTabBoard(_ tag:Int) { for i in 0...tabBoards.count-1 { NSLayoutConstraint.deactivate([boardOut[i]]) NSLayoutConstraint.activate([boardIn[i]]) tabBoards[i].makeControlsHidden(true) } NSLayoutConstraint.deactivate([boardIn[tag-1]]) NSLayoutConstraint.activate([boardOut[tag-1]]) tabBoards[tag-1].makeControlsHidden(false) UIView.animate(withDuration: 0.3) { self.superview?.layoutIfNeeded() } } public func hideTabBoard(_ tag:Int) { NSLayoutConstraint.deactivate([boardOut[tag-1]]) NSLayoutConstraint.activate([boardIn[tag-1]]) tabBoards[tag-1].makeControlsHidden(true) UIView.animate(withDuration: 0.3) { self.superview?.layoutIfNeeded() } }