UIAlertController and memory usage
I have a very simple project: there's only one ViewController and a UIButton. The IBAction for the button is: var alertViewControllerTextField: UITextField? var promptController = UIAlertController(title: "Type Something", message: nil, preferredStyle: .alert) let ok = UIAlertAction(title: "OK", style: .default, handler: { (action) -> Void in print("\(alertViewControllerTextField?.text)") }) let cancel = UIAlertAction(title: "Cancel", style: .cancel) { (action) -> Void in //promptController = nil } promptController.addAction(ok) promptController.addAction(cancel) promptController.addTextField { (textField) -> Void in alertViewControllerTextField = textField } self.present(promptController, animated: true, completion: nil) When the app finishes launching, memory usage is 14,4 Mb. When I click the button it reaches 18,4 Mb (if I click again and again the button, it finally reaches 20 Mb). Anyway, I thought when I clicked the UIAlertController's cancel or ok button, memory would have returned to 14,4, even slowly, but this is not the case. I thought to make the UIAlertController an optional to have the chance to assign it a nil on close, but the UIAlertController can't be nil because you can't declare it as an optional. I thought to make it a member and declare it with the weak keyword (no luck). So, is there any way to reduce the memory usage when I click one of the buttons of a UIAlertController?
PLease Put DispatchQueue this code than try i solved this issue by this DispatchQueue.global(qos: .userInitiated).async { self.present(promptController, animated: true, completion: nil) }