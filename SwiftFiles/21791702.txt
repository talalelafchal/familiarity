NSXMLParser Simple Example
<p>Most of the examples of how to invoke the NSXMLParser are contained within complex projects involving Apps. What does a simple example that demonstrates the callbacks look like.</p>
<p>As part of exploring the NSXMLParser I created the following really simple code.</p> <p>main.m</p> <pre><code>int main(int argc, const char * argv[]) { @autoreleasepool { NSLog(@"Main Started"); NSError *error = nil; // Load the file and check the result NSData *data = [NSData dataWithContentsOfFile:@"/Users/Tim/Documents/MusicXml/Small.xml" options:NSDataReadingUncached error:&amp;error]; if(error) { NSLog(@"Error %@", error); return 1; } // Create a parser and point it at the NSData object containing the file we just loaded NSXMLParser *parser = [[NSXMLParser alloc] initWithData:data]; // Create an instance of our parser delegate and assign it to the parser MyXmlParserDelegate *parserDelegate = [[MyXmlParserDelegate alloc] init]; [parser setDelegate:parserDelegate]; // Invoke the parser and check the result [parser parse]; error = [parser parserError]; if(error) { NSLog(@"Error %@", error); return 1; } // All done NSLog(@"Main Ended"); } return 0; } </code></pre> <p>MyXmlParserDelegate.h</p> <pre><code>#import &lt;Foundation/Foundation.h&gt; @interface MyXmlParserDelegate : NSObject &lt;NSXMLParserDelegate&gt; @end </code></pre> <p>MyXmlParserDelegate.m</p> <pre><code>#import "MyXmlParserDelegate.h" @implementation MyXmlParserDelegate - (void) parserDidStartDocument:(NSXMLParser *)parser { NSLog(@"parserDidStartDocument"); } - (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict { NSLog(@"didStartElement --&gt; %@", elementName); } -(void) parser:(NSXMLParser *)parser foundCharacters:(NSString *)string { NSLog(@"foundCharacters --&gt; %@", string); } - (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName { NSLog(@"didEndElement --&gt; %@", elementName); } - (void) parserDidEndDocument:(NSXMLParser *)parser { NSLog(@"parserDidEndDocument"); } @end </code></pre> <p>I've posted it in the hope that it helps someone else.</p>
<p>Here is a Swift version of the original Objective-C code below.</p> <p>It was built and tested using XCode 7.3. In writing the delegate I found it quite handy to copy the function prototypes from the documentation. It is worth noting that Swift is currently a fairly rapidly moving target.</p> <p>main.swift</p> <pre><code>import Foundation // Let's go print("Main: Started") // Try to load the file. Display the description of the error if one occurs var xmlData : NSData do { xmlData = try NSData(contentsOfFile: "/Users/amt/Documents/TestXml/Test.xml", options: .DataReadingMappedIfSafe) } catch let error as NSError { print("Main: \(error.description)") exit(1) } // Create a parser and point it at the NSData object containing // the file we just loaded var parser : NSXMLParser! = NSXMLParser(data: xmlData) // Create a parser delegate object and assign it to the parser // Beware the "weak" reference and don't try to combine the two lines // of code into one unless you like EXC_BAD_ACCESS exceptions var parserDelegate : MyXmlParserDelegate = MyXmlParserDelegate() parser.delegate = parserDelegate // This example also illustrates some of the namespace functions defined in // the delegate protocol so enable namespace reporting to see them invoked parser.shouldReportNamespacePrefixes = true // Parse the document if !parser.parse() { // If parse() returned false then an error occurred so display is location // and details let error = parser.parserError let line = parser.lineNumber let col = parser.columnNumber print("Parsing failed at \(line):\(col): \(error?.localizedDescription)") } // All done print("Main: Ended") exit(0) </code></pre> <p>MyXmlParserDelegate.swift</p> <pre><code>import Foundation class MyXmlParserDelegate:NSObject, NSXMLParserDelegate { @objc func parserDidStartDocument(parser: NSXMLParser) { print("parserDidStartDocument") } @objc func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) { print("didStartElement --&gt; \(elementName)") } @objc func parser(parser: NSXMLParser, foundCharacters string: String) { print("foundCharacters --&gt; \(string)") } @objc func parser(parser: NSXMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) { print("didEndElement --&gt; \(elementName)") } @objc func parser(parser: NSXMLParser, didStartMappingPrefix prefix: String, toURI namespaceURI: String) { print("didStartMappingPrefix --&gt; Prefix: \(prefix) toURI: \(namespaceURI)") } @objc func parser(parser: NSXMLParser, didEndMappingPrefix prefix: String) { print("didEndMappingPrefix --&gt; Prefix: \(prefix)") } @objc func parserDidEndDocument(parser: NSXMLParser) { print("parserDidEndDocument") } } </code></pre>