Swift Assertions behaviour in production applications
<p>I'm reading the Assertions section in the <a href="https://itun.es/il/jEUH0.l" rel="nofollow">Swift e-book</a> and it looks like assertions work very similarly to their Objective-C counterparts. However, nowhere in the docs can I find anything about runtime behaviour while running as a production app. Objective-C's <code>NSAssert</code> promises never to terminate a production application as a result of an assertion failure. Is it the same case in Swift?</p>
<p>Based upon the language Apple use in <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html">their documentation</a>, I'd say assertions are ignored in a production environment.</p> <blockquote> <p>If your code triggers an assertion while running <strong>in a debug environment</strong>, such as when you build and run an app in Xcode, you can see exactly where the invalid state occurred and query the state of your app at the time that the assertion was triggered. An assertion also lets you provide a suitable debug message as to the nature of the assert.</p> </blockquote> <p>And in the "Note" block:</p> <blockquote> <p>Assertions cause your app to terminate and are not a substitute for designing your code in such a way that invalid conditions are unlikely to arise. Nonetheless, in situations where invalid conditions are possible, an assertion is an effective way to ensure that such conditions are highlighted and <strong>noticed during development, before your app is published.</strong></p> </blockquote>
<p>The difference between debug and release is the difference between compiler arguments. The most likely answer is that there will be some special compiler settings (similar to <code>-ea</code> in Java).</p> <p><b>EDIT</b><br> The Swift compiler has an argument called <code>-assert-config</code></p> <blockquote> <p>-assert-config Specify the assert_configuration replacement. Possible values are Debug, Release, Replacement.</p> </blockquote> <p>In <code>Release</code>, the assertions are ignored. Not sure about the difference between <code>Debug</code> and <code>Replacement</code>.</p> <p><img src="https://i.stack.imgur.com/BB9iq.png" alt="enter image description here"></p>
<p>Asserts are documented along with preconditions in the Swift standard library documentation.</p> <ul> <li>Debug -> Stop on assertion failure.</li> <li>Release -> Compile with assertions ignored</li> <li>Release and "Disable safety checks" -> Assume all assertion statements are statements of truth and hints to the compiler so that following and preceding code may be removed if only reached in conditions where the assertion would have failed. This means that if you follow the assertion by code on handle the exceptional case it may be ignored. If the assertion would ever have failed the behaviour is completely undefined.</li> </ul> <p>I've not checked but the "Disable safety checks" may correlate with the -assert-config Replacement that @Sulthan mentions.</p>