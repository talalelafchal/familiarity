Implement CLLocationManagerDelegate methods in Swift
<p>I've been trying to get this to work for awhile now, and I've come here to ask- how do I go about with using the CLLocationManagerDelegate methods in Swift? I've put this at the top of my class:</p> <pre><code>var locationManager = CLLocationManager() </code></pre> <p>I've put the following into my <code>viewDidLoad</code> method:</p> <pre><code>locationManager.delegate = self locationManager.distanceFilter = kCLDistanceFilterNone locationManager.desiredAccuracy = kCLLocationAccuracyBest locationManager.startUpdatingLocation() </code></pre> <p>And I've tried using these delegate methods with no avail:</p> <pre><code>func locationManager(manager: CLLocationManager!, didUpdateLocations locations: AnyObject[]!) { locationReceived = true } func locationManager(manager: CLLocationManager!, didFailWithError error: NSError!) { locationReceived = false } </code></pre> <p>I've also tried using @optional in front of the functions, but Xcode then throws a compiler error. Any ideas?</p>
<p>You need to add the <code>NSLocationAlwaysUsageDescription</code> or <code>NSLocationWhenInUseUsageDescription</code> key to your plist if you haven't already, they are now mandatory,</p> <hr> <p>iOS8+ requires one of these two strings to be set to use locations. Which one you use depends on how you intend ask for the location.</p> <ul> <li><p>Use <code>NSLocationAlwaysUsageDescription</code> for apps that want to use the device's location even when the app is not open and being used. </p></li> <li><p>Use <code>NSLocationWhenInUseUsageDescription</code> for apps that want to use the device's location only when the app is open and in use. </p></li> </ul> <p><strong>Note:</strong> When you add the strings, before you build and run, delete the app off your device and let it do a fresh install. It seems that if the app was authorized to use locations before you upgraded to iOS8 it doesn’t ask for your permission again and doesn’t see that you set those strings. Doing a delete and clean install solves this. </p> <p>Setting either of the strings prompts a pop up on install/first use along the lines of: "Allow "ThisApp" to access your location even when you are not using the App" </p> <p>Here's a <strong>Screenshot</strong> of the <strong>plist</strong> file.</p> <p><a href="https://i.stack.imgur.com/6COR4.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/6COR4.png" alt="enter image description here"></a></p>
<p>I had the same issue. didUpdateLocations - was not working. Run your app. Go to the Settings page -> Privacy -> Location and turn off Location Services. didFailWithError will catch the error about absent Location Services. Then turn it on. Since that moment didUpdateLocations will catch locations.</p>
<p>First add this two line in plist file</p> <p>1) NSLocationWhenInUseUsageDescription</p> <p>2) NSLocationAlwaysUsageDescription</p> <pre><code>import CoreLocation class ViewController: UIViewController, CLLocationManagerDelegate var seenError : Bool = false var locationFixAchieved : Bool = false var locationStatus : NSString = "Not Started" var locationManager: CLLocationManager! override func viewDidLoad() { super.viewDidLoad() } func initLocationManager() { seenError = false locationFixAchieved = false locationManager = CLLocationManager() locationManager.delegate = self locationManager.locationServicesEnabled locationManager.desiredAccuracy = kCLLocationAccuracyBest locationManager.requestAlwaysAuthorization() } func locationManager(manager: CLLocationManager!, didFailWithError error: NSError!) { locationManager.stopUpdatingLocation() if (error) { if (seenError == false) { seenError = true print(error) } } } func locationManager(manager: CLLocationManager!, didUpdateLocations locations: AnyObject[]!) { if (locationFixAchieved == false) { locationFixAchieved = true var locationArray = locations as NSArray var locationObj = locationArray.lastObject as CLLocation var coord = locationObj.coordinate println(coord.latitude) println(coord.longitude) } } func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) { var shouldIAllow = false switch status { case CLAuthorizationStatus.Restricted: locationStatus = "Restricted Access to location" case CLAuthorizationStatus.Denied: locationStatus = "User denied access to location" case CLAuthorizationStatus.NotDetermined: locationStatus = "Status not determined" default: locationStatus = "Allowed to location Access" shouldIAllow = true } NSNotificationCenter.defaultCenter().postNotificationName("LabelHasbeenUpdated", object: nil) if (shouldIAllow == true) { NSLog("Location to Allowed") // Start location services locationManager.startUpdatingLocation() } else { NSLog("Denied access: \(locationStatus)") } } </code></pre>
<p>To get User Current Location :-</p> <p><strong>Step 1:</strong> <code>let locationManager = CLLocationManager() // make object of CLLocationManager class.</code></p> <p><strong>Step 2:</strong> <code>In viewDidLoad instantiate the CLLocationManager class like,</code></p> <p>// For use in background</p> <pre><code>self.locationManager.requestAlwaysAuthorization() // For use in foreground self.locationManager.requestWhenInUseAuthorization() if (CLLocationManager.locationServicesEnabled()) { locationManager.delegate = self locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters locationManager.startUpdatingLocation() } </code></pre> <p><strong>Step 3:</strong> Now implement the delegate methods of <code>CLLocationManager</code></p> <pre><code> func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) { var locValue:CLLocationCoordinate2D = manager.location.coordinate println("locations = \(locValue.latitude) \(locValue.longitude)") } </code></pre> <p><strong>Step 4:</strong> Don't forget to add <code>NSLocationAlwaysUsageDescription</code> in the Info.plist as in iOS 8 it is mandatory to add this. This will ask permission to use user's location.</p>
<p>This is a bit of an old thread, yet none of the above worked for me on Swift 2.2 xCode 7.3.1.</p> <p>The problem is I was using:</p> <pre><code>func locationManager(manager: CLLocationManager!, didUpdateLocation locations: [AnyObject]!) { print("Got location") locationManager.stopUpdatingLocation() } </code></pre> <p>And this never got called. When I changed to:</p> <pre><code>func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) { print("Got location") locationManager.stopUpdatingLocation() } </code></pre> <p>It all worked out. Seems like the delegate is not called when using [AnyObject]</p>