How to determine device type from Swift? (OS X or iOS)
<p>I know Swift is relatively new, but I was wondering if there was a way to determine the device type?</p> <p>(Like you used to be able to do with a <code>#define</code>)?</p> <p>Mainly I would like to know how to differentiate OS X or iOS. I have found nothing on the subject.</p>
<pre><code>import UIKit var device = UIDevice.currentDevice().model </code></pre>
<p>If you're building for both iOS and OS X (and maybe now for watchOS and tvOS, too), you're building your code at least twice: once for each platform. If you want different code to execute on each platform, you want a build-time conditional, not a run-time check. </p> <p>Swift has no preprocessor, but it does have conditional build directives — and for the most part, they look like the C equivalent.</p> <pre><code>#if os(iOS) || os(watchOS) || os(tvOS) let color = UIColor.redColor() #elseif os(OSX) let color = NSColor.redColor() #else println("OMG, it's that mythical new Apple product!!!") #endif </code></pre> <p>You can also use build configurations to test for architecture (<code>x86_64</code>, <code>arm</code>, <code>arm64</code>, <code>i386</code>) or <code>-D</code> compiler flags (including the <code>DEBUG</code> flag defined by the standard Xcode templates).</p> <p>See <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_21">Preprocessor Directives</a> in <em>Using Swift with Cocoa and Objective-C</em>.</p> <p>(If you want to distinguish which kind of iOS device you're on at runtime, use the <code>UIDevice</code> class just like you would from ObjC. It's typically more useful and safe to look at the device attributes that are important to you rather than a device name or idiom — e.g. use traits and size classes to lay out your UI, query OpenGL for the GPU capabilities you require, etc.)</p>
<p>I've implemented a <strong>super-lightweight library to detect the used device</strong>: <a href="https://github.com/schickling/Device.swift" rel="nofollow">https://github.com/schickling/Device.swift</a></p> <p>It can be installed via <a href="https://github.com/Carthage/Carthage" rel="nofollow">Carthage</a> and be used like this:</p> <pre><code>import Device let deviceType = UIDevice.currentDevice().deviceType switch deviceType { case .IPhone6: print("Do stuff for iPhone6") case .IPadMini: print("Do stuff for iPad mini") default: print("Check other available cases of DeviceType") } </code></pre>
<pre><code>var device = UIDevice.currentDevice().model </code></pre> <p>This code worked for me. I have implemented that on textfield and keyboard dismissing part. See below.</p> <pre><code>func textFieldShouldBeginEditing(textField: UITextField) -&gt; Bool { print(device) if (textField.tag == 1 &amp;&amp; (device == "iPhone" || device == "iPhone Simulator" )) { var scrollPoint:CGPoint = CGPointMake(0,passwordTF.frame.origin.y/2); LoginScroll!.setContentOffset(scrollPoint, animated: true); } else if (textField.tag == 2 &amp;&amp; (device == "iPhone" || device == "iPhone Simulator")) { var scrollPoint:CGPoint = CGPointMake(0,passwordTF.frame.origin.y/1.3); LoginScroll!.setContentOffset(scrollPoint, animated: true); } return true } </code></pre>