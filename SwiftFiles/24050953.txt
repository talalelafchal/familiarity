EXC_BAD_INSTRUCTION in NSCoding of Swift
<pre><code> func encodeWithCoder(aCoder: NSCoder!){ aCoder.encodeObject(title.bridgeToObjectiveC(), forKey: "title") aCoder.encodeObject(self.artist.bridgeToObjectiveC(), forKey: "artist") } init(coder aDecoder: NSCoder!) { NSLog("title: %@", aDecoder.decodeObjectForKey("title") as NSString); //&lt;---|Causes crash here but still logs the title self.title = String.bridgeFromObjectiveC(aDecoder.decodeObjectForKey("title") as NSString) } </code></pre> <p>I have an NSObject conforming to NSCoding above but when it initializes and decodes calling <code>decodeObjectForKey</code> and halts the code with a EXC_BAD_INSTRUCTION</p>
<p>Double check you're inheriting from NSObject. Turns out you DO need a superclass if you want to do foundation-y things. That was my problem anyway.</p>
<p>Try doing this without the bridge calls. It should still seamlessly bridge to NSString.</p>
<p>Maybe you can try this.</p> <pre><code>import Foundation class AnyClass:NSObject, NSCoding{ var title : String var artist : String init() { self.title = "TitleName" self.artist = "ArtistName" } init(coder aDecoder: NSCoder!) { title = aDecoder.decodeObjectForKey("title") as String artist = aDecoder.decodeObjectForKey("artist") as String println(title) } func encodeWithCoder(_aCoder: NSCoder!){ _aCoder.encodeObject(self.title, forKey: "title") _aCoder.encodeObject(self.artist, forKey: "artist") } } </code></pre>
<p>Below is a working sample that I built (as a command line utility) after reading the documentation located at the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Archiving/Archiving.pdf" rel="nofollow">Mac Developer site</a> or <a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/Archiving/Archiving.pdf" rel="nofollow">iOS Developer site</a>. Note: I converted this from Objective-C since that is what is in the PDFs that I linked to.</p> <p>As Bill stated above, there should be no need to do bridging.</p> <pre><code>import Foundation class Gloppo2 : NSObject, NSCoding { var Dorf2:String = "" var Druben2:String = "" func encodeWithCoder(aCoder: NSCoder!) { aCoder.encodeObject(self.Dorf2, forKey: "Dorf2") aCoder.encodeObject(self.Druben2, forKey: "Druben2") } init(coder aDecoder: NSCoder!) { Dorf2 = aDecoder.decodeObjectForKey("Dorf2") as NSString! Druben2 = aDecoder.decodeObjectForKey("Druben2") as NSString! } init() { } } var newGloppo = Gloppo2() newGloppo.Dorf2 = "Sue" newGloppo.Druben2 = "Perman" NSKeyedArchiver.archiveRootObject(newGloppo, toFile: "gloppo2.bin") var newGloppo2 = NSKeyedUnarchiver.unarchiveObjectWithFile("gloppo2.bin") as Gloppo2 println(newGloppo2.Dorf2) println(newGloppo2.Druben2) </code></pre>