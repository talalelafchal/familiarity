Swift Framework does not include symbols from extensions to generic structs
<p>I am having trouble linking my framework with code that takes advantage of that framework. Specifically, the linker isn't able to find the symbols for extensions for generics structs.</p> <p>This is what one of the extensions looks like for Optional:</p> <pre><code>extension Optional { /// Unwrap the value returning 'defaultValue' if the value is currently nil func or(defaultValue: T) -&gt; T { switch(self) { case .None: return defaultValue case .Some(let value): return value } } } </code></pre> <p>This method works great in a playground or in an app if the code is compiled within the main part of the app. However, when I try to compile this into a Framework, apps (and even the tests for the framework) produce the following linker error:</p> <blockquote> <p>Undefined symbols for architecture i386: "__TFSq2orU__fGSqQ__FQQ", referenced from: __TFC18SwiftPlusPlusTests27Optional_SwiftPlusPlusTests13testOrWithNilfS0_FT_T_ in Optional+SwiftPlusPlusTests.o</p> </blockquote> <p>Similar methods like the one following, link fine (notice, it is not on a generic)</p> <pre><code>extension String { /// Returns a string by repeating it 'times' times func repeat(times: Int) -&gt; String { var result = "" for i in 0..times { result += self } return result } } </code></pre> <p>There are two other extensions within my repository on github: <a href="https://github.com/drewag/SwiftPlusPlus">SwiftPlusPlus</a> that also do not link (both on generic strucs). You will reproduce the errors if you pull the latest commit, build the framework, and then try to run the unit tests.</p> <p>So far I have tried to run "strings" on the outputted framework and intermediate files and I do not see the symbols for these extensions but I do see the symbols for the <code>repeat</code> method extension on <code>String</code>. So it doesn't even seem to be compiling them into the library.</p> <p>Does anyone know why the symbols are not defined in the framework?</p> <p><strong>Edit</strong></p> <ul> <li><a href="https://github.com/drewag/SwiftPlusPlus/blob/master/SwiftPlusPlus/Optional%2BSwiftPlusPlus.swift">Here</a> is a link to my Optional Extension</li> <li><a href="https://github.com/drewag/SwiftPlusPlus/blob/master/SwiftPlusPlusTests/Optional%2BSwiftPlusPlusTests.swift">Here</a> is a link to the test file that causes the linker error when trying to compile the test target</li> </ul>
<p>I <a href="https://devforums.apple.com/message/983747#983747">posted on the Apple Developer forums</a> and an Apple employee responded that this is a known bug.</p> <blockquote> <p>It looks like the compiler gets the mangled symbol names of methods in generic extensions wrong when they live in a different framework.</p> </blockquote>
<p>In case you are looking for a temporary fix, you can wrap the extension in a class method: </p> <pre><code>// In your framework public class OptionalOperator { public class func or&lt;T&gt;(optional:Optional&lt;T&gt;,defaultValue:T) -&gt;T { return optional.or(defaultValue) } } // Outside the framework var maybeText:String? let text = OptionalOperator.or(maybeText, defaultValue: "Apple, please fix this") </code></pre> <p>Of course, this is not ideal and defeats the purpose of extensions. So if you plan on calling this method frequently, we could <a href="http://nshipster.com/swift-operators/" rel="nofollow">overload/define an operator</a>.</p> <pre><code>// In your framework infix operator ||| {} public func |||&lt;T&gt;(left:Optional&lt;T&gt;, right:T) -&gt; T { return left.or(right) } // Outside the framework var maybeText:String? let text = maybeText ||| "Apple, please fix this" </code></pre> <p>In my case, I have multiple applications using the framework, so I'd like to keep the method implementation inside the framework. However, overloading an operator (or just using a global function) would be awkward, so I have to go with the first option until that bug is fixed.</p> <p>Hope this helps.</p> <p>UPDATE</p> <p>Funny thing is that Swift already has an operator for that (<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html" rel="nofollow">??</a>).</p> <pre><code>var maybeText:String? let text = maybeText ?? "Nice!" </code></pre> <p>It's called - Nil Coalescing Operator</p>