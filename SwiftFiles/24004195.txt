How is character represented in Swift strings?
<p>Like some other emoji characters, the 0x0001F1E9 0x0001F1EA combination (German flag) is represented as a single character on screen although it is really two different Unicode character points combined. Is it represented as one or two different characters in Swift?</p>
<p>Swift doesn't tell you what the internal representation of a <code>String</code> is. You interact with a <code>String</code> as a list of full-size (32-bit) Unicode code points:</p> <pre><code>for character in "Dog!" { println(character) } // prints D, o, g, !, </code></pre> <p>If you want to work with a string as a sequence of UTF-8 or UTF-16 code points, use its <code>utf8</code> or <code>utf16</code> properties. See <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-XID_368" rel="nofollow">Strings and Characters</a> in the docs.</p>
<p>Support for "extended grapheme clusters" has been added to Swift in the meantime. Iterating over the characters of a string produces a single character for the "flags":</p> <pre><code>let string = "Hi!" for char in string.characters { print(char) } </code></pre> <p>Output:</p> <pre> H i ! </pre>
<pre><code>let flag = "\u{1f1e9}\u{1f1ea}" </code></pre> <p>then <code>flag</code> is .</p> <p>For more regional indicator symbols, see:<br> <a href="http://en.wikipedia.org/wiki/Regional_Indicator_Symbol">http://en.wikipedia.org/wiki/Regional_Indicator_Symbol</a></p>