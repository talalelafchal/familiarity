Import Framework in Swift Project, Xcode
<p>I'm trying to import <code>myFramework</code> into a project. I've added <code>myFramework</code> in Build Phases->Link Binary With Libraries.</p> <p>Objective-c works:</p> <pre><code>#import &lt;UIKit/UIKit.h&gt; #import &lt;myFramework/myFramework.h&gt; </code></pre> <p>But with in Swift, I get a <code>No such module myFramework</code> error:</p> <pre><code>import UIKit import myFramework </code></pre> <p>According to the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-ID134">Swift documentation</a>:</p> <blockquote> <p><strong>Importing External Frameworks</strong></p> <p>You can import external frameworks that have a pure Objective-C codebase, a pure Swift codebase, or a mixed-language codebase. The process for importing an external framework is the same whether the framework is written in a single language or contains files from both languages. When you import an external framework, make sure the Defines Module build setting for the framework you’re importing is set to Yes.</p> <p>You can import a framework into any Swift file within a different target using the following syntax:</p> <p><strong>SWIFT</strong></p> <pre><code>import FrameworkName </code></pre> <p>You can import a framework into any Objective-C .m file within a different target using the following syntax:</p> <p><strong>OBJECTIVE-C</strong></p> <pre><code>@import FrameworkName; </code></pre> </blockquote> <p>I created <code>myFramework</code> using Xcode 5. Xcode 5 doesn't have a "Defines Module" build setting.</p> <p>Where is the problem?</p>
<p>According to the <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_75" rel="nofollow">Swift documentation</a></p> <blockquote> <p>To import Objective-C code into Swift from the same target</p> <ol> <li><p>In your Objective-C bridging header file, import every Objective-C header you want to expose to Swift. For example:</p> <p><code>#import "XYZCustomCell.h"</code></p> <p><code>#import "XYZCustomView.h"</code></p> <p><code>#import "XYZCustomViewController.h"</code></p></li> <li><p>Under Build Settings, make sure the Objective-C Bridging Header build setting under Swift Compiler - Code Generation has a path to the header. The path must be directly to the file itself, not the directory that it’s in. The path should be relative to your project, similar to the way your Info.plist path is specified in Build Settings. In most cases, you should not need to modify this setting.</p></li> </ol> <p>Any public Objective-C headers listed in this bridging header file will be visible to Swift. The Objective-C functionality will be available in any Swift file within that target automatically, without any import statements. Use your custom Objective-C code with the same Swift syntax you use with system classes.</p> <pre><code>let myCell = XYZCustomCell() myCell.subtitle = "A custom cell" </code></pre> </blockquote> <p>Also, make sure the "Defines Module" build setting under "Packaging" is set to "Yes."</p>
<p>If I get you correctly you don't have a separate build target for your framework (you already built it with XCode 5) and included the framework into your project's build target.</p> <p>The part of the documentation you're referring to is about frameworks within <strong><em>different</em></strong> targets. Since your framework is in the project's target this part of the documentation doesn't apply here. </p> <p>In your case you can't do an import of the framework in your Swift file. That's why you get the error message <strong>"No such module myFramework"</strong>. myFramework is no module -- it is part of your project's module (which is by default determined by your product name). As such the classes in your framework should be accessible.</p> <p>However your framework is written in Objective-C. So what you have to do is to import the Swift facing classes in your bridging-header as described <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html">here</a>.</p> <p>Please note that this has nothing to do with the Swift import of a module. The import directive in the bridging-header file just notifies the compiler to 'translate' Objective-C header files to Swift syntax and makes the public header visible to Swift. </p> <p><strong>So what should you do now?</strong></p> <ul> <li><p>First import the header files you're interested in in the bridging-header. You only need to import the headers you will interact with in Swift.</p></li> <li><p>Try to compile your project in this stage. If XCode can't find the header files of the framework your problem is probably not related to Swift or XCode 6 but a problem with including frameworks in general.</p></li> <li>After that try to instantiate a class you imported in the bridging-header, maybe in your AppDelegate.swift. XCode auto-completion should offer you the type names.</li> </ul> <p>Hope this helps.</p>
<p>you need in your objective c project a public header with the same name of you app, in you case FrameworkName.h and add all the classes that you want to expose (those classes should be added as public header in the project properties) Once you do that, you add the framework and add the reference to your public header import FrameworkName</p>
<p>Follow the steps here:</p> <p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html" rel="nofollow">Swift Docs</a></p> <p>And then go here:</p> <p><a href="https://www.youtube.com/watch?v=9us3uijFFpo" rel="nofollow">Youtube video on creating frameworks</a></p> <p>Pay attention:</p> <p>Make sure you set the "Target Membership" of the headers to all be the same (project should be ok).</p>
<p>You can import external objC framework into swift project using below syntax:</p> <p><code>#import "objCExternalFramework-name/headerfilename.h"</code></p>
<p>Okay, it's Xcode 7.2 now. And what I observed is, swift import is case sensitive. Example - <code>import uikit</code> will not work. You'll have to type it as <code>import UIKit</code>.</p> <p>just my two cents.</p>
<p>Latest XCode provides option to embed framework into other projects. This link (<a href="http://stackoverflow.com/a/37328591/1084174">http://stackoverflow.com/a/37328591/1084174</a>) worked well for me.</p>
<p><strong>On Swift:</strong></p> <p><em>Create Framework:-</em></p> <ol> <li><p>Start Xcode -> Create a new Xcode Project -> iOS -> Framework &amp; Library -> Cocoa Touch Framework -> Name the framework(ex. sampleCocoaFramework) -> Create.</p></li> <li><p>Set Taget -> General -> Deployment info -> Deployment Target.</p></li> <li><p>Add a public class: File -> New File -> iOS -> Swift File -> Name it (ex. openCocoaClass) -> Create.</p></li> <li><p>Now add some code to the openCocoaClass.swift.</p> <pre><code>import Foundation public class openCocoaClass { public init() { } public var samplePublicVariable = "samplePublicVariable @ openCocoaClass" public func samplePublicFunction() { print("samplePublicFunction @ openCocoaClass") } </code></pre> <p>}</p></li> <li><p>Clean the project : Product -> Clean</p></li> <li><p>Configure the scheme settings : Product -> Scheme -> Edit Scheme -> Run -> Build Configuration -> Release.</p></li> <li><p>Build the framework : Product -> Build.</p></li> <li>Export the framework : Products -> Select the framework -> Identity and type -> Full Path -> Released Framework.</li> </ol> <p><em>Adding Framework to Project:-</em></p> <ol> <li><p>Start a Xcode project and name it (ex. CocoaFrameworkTest).</p></li> <li><p>Drag and drop the sampleCocoaFramework.framework to the CocoaFrameworkTest's project folder.</p></li> <li><p>Target -> General -> Embed Binaries -> Add Other -> Select Framework -> Copy Items if needed -> Done.</p></li> </ol> <p><em>Accessing Framework on ViewController:</em>-</p> <pre><code>import UIKit import sampleCocoaFramework class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let frameworkObject = openCocoaClass.init() frameworkObject.samplePublicFunction() print(frameworkObject.samplePublicVariable) } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } } </code></pre>