Immutable/Mutable Collections in Swift
<p>I was referring to Apple's Swift programming guide for understanding creation of Mutable/ immutable objects(Array, Dictionary, Sets, Data) in Swift language. But I could't understand how to create a immutable collections in Swift. </p> <p>I would like to see the equivalents in Swift for the following in Objective-C</p> <p><strong>Immutable Array</strong></p> <pre><code>NSArray *imArray = [[NSArray alloc]initWithObjects:@"First",@"Second",@"Third",nil]; </code></pre> <p><strong>Mutable Array</strong></p> <pre><code>NSMutableArray *mArray = [[NSMutableArray alloc]initWithObjects:@"First",@"Second",@"Third",nil]; [mArray addObject:@"Fourth"]; </code></pre> <p><strong>Immutable Dictionary</strong></p> <pre><code>NSDictionary *imDictionary = [[NSDictionary alloc] initWithObjectsAndKeys:@"Value1", @"Key1", @"Value2", @"Key2", nil]; </code></pre> <p><strong>Mutable Dictionary</strong></p> <pre><code>NSMutableDictionary *mDictionary = [[NSMutableDictionary alloc]initWithObjectsAndKeys:@"Value1", @"Key1", @"Value2", @"Key2", nil]; [mDictionary setObject:@"Value3" forKey:@"Key3"]; </code></pre>
<p>Just declare your (any)object or variable with </p> <pre><code>'let' key word -&gt; for "constan/Immutable" array, dictionary, variable, object..etc. </code></pre> <p>and</p> <pre><code>'var' key word -&gt; for "Mutable" array, dictionary, variable, object..etc. </code></pre> <p>For more deeply information </p> <blockquote> <p>“Use <strong>let</strong> to make a constant and <strong>var</strong> to make a variable. The value of a constant doesn’t need to be known at compile time, but you must assign it a value exactly once. This means you can use constants to name a value that you determine once but use in many places."</p> </blockquote> <pre><code>var myVariable = 42 myVariable = 50 let myConstant = 42 </code></pre> <p><a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_399" rel="nofollow">Read “The Swift Programming Language.”</a></p>
<p>There is only one <code>Array</code> and one <code>Dictionary</code> type in Swift. The mutability depends on how you construct it:</p> <pre><code>var mutableArray = [1,2,3] let immutableArray = [1,2,3] </code></pre> <p>i.e. if you create an assign to a variable it is mutable, whereas if you create an assign to constant it is not.</p> <p><strong>WARNING:</strong> Immutable arrays are not entirely immutable! You can still change their contents, just not their overall length!</p>
<h1>Arrays<br></h1> <p><strong>Create immutable array</strong></p> <p>First way:</p> <pre><code>let array = NSArray(array: ["First","Second","Third"]) </code></pre> <p>Second way:</p> <pre><code>let array = ["First","Second","Third"] </code></pre> <p><strong>Create mutable array</strong></p> <pre><code>var array = ["First","Second","Third"] </code></pre> <p><strong>Append object to array</strong></p> <pre><code>array.append("Forth") </code></pre> <p><br></p> <h1>Dictionaries</h1> <p><strong>Create immutable dictionary</strong></p> <pre><code>let dictionary = ["Item 1": "description", "Item 2": "description"] </code></pre> <p><strong>Create mutable dictionary</strong></p> <pre><code>var dictionary = ["Item 1": "description", "Item 2": "description"] </code></pre> <p><strong>Append new pair to dictionary</strong></p> <pre><code>dictionary["Item 3"] = "description" </code></pre> <p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html"><sub><strong><em>More information on Apple Developer</em></strong></sub></a></p>
<p>Swift does not have any drop in replacement for <code>NSArray</code> or the other collection classes in Objective-C.</p> <p>There are array and dictionary classes, but it should be noted these are "value" types, compared to NSArray and NSDictionary which are "object" types.</p> <p>The difference is subtle but can be very important to avoid edge case bugs.</p> <p>In swift, you create an "immutable" array with:</p> <pre><code>let hello = ["a", "b", "c"] </code></pre> <p>And a "mutable" array with:</p> <pre><code>var hello = ["a", "b", "c"] </code></pre> <p>Mutable arrays can be modified just like <code>NSMutableArray</code>:</p> <pre><code>var myArray = ["a", "b", "c"] myArray.append("d") // ["a", "b", "c", "d"] </code></pre> <p>However you can't pass a mutable array to a function:</p> <pre><code>var myArray = ["a", "b", "c"] func addToArray(myArray: [String]) { myArray.append("d") // compile error } </code></pre> <p>But the above code does work with an NSMutableArray:</p> <pre><code>var myArray = ["a", "b", "c"] as NSMutableArray func addToArray(myArray: NSMutableArray) { myArray.addObject("d") } addToArray(myArray) myArray // ["a", "b", "c", "d"] </code></pre> <p>You can achieve <code>NSMutableArray</code>'s behaviour by using an <code>inout</code> method parameter:</p> <pre><code>var myArray = ["a", "b", "c"] func addToArray(inout myArray: [String]) { myArray.append("d") } addToArray(&amp;myArray) myArray // ["a", "b", "c", "d"] </code></pre> <p><strong><em>Re-wrote this answer 2015-08-10 to reflect the current Swift behaviour.</em></strong></p>
<p>If you want to work with <code>Array</code> (Swift) as with <code>NSArray</code>, you can use a simple bridge function. Example:</p> <pre><code>var arr1 : Array = [] arr1.bridgeToObjectiveC().count </code></pre> <p>It works the same for <code>let</code>.</p>
<p>From Apple's own docs:</p> <blockquote> <p>Mutability of Collections</p> <p>If you create an array, a set, or a dictionary and assign it to a variable, the collection that is created will be mutable. This means that you can change (or mutate) the collection after it is created by adding, removing, or changing items in the collection. Conversely, if you assign an array, a set, or a dictionary to a constant, that collection is immutable, and its size and contents cannot be changed.</p> </blockquote> <p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-ID105" rel="nofollow">https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-ID105</a></p> <p>Other uses of immutable/mutable collections depend on why you want them to be mutable/immutable. Collections are <em>value</em> types in Swift, which means their contents is copied when they are assigned to another value, or passed to another function/method. Therefore, you do not need to worry about whether a receiving method function might change the original array. Therefore you don't need to ensure to return an immutable collection if your class is holding a mutable collection, for instance.</p>
<p>There’s no built-in cast for this. But instead you can use NSMutableDictionary’s initializer that takes a dictionary:</p> <pre><code>var foundationDictionary = NSMutableDictionary(dictionary: dictionary) </code></pre>