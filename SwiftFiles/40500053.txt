unexpected results while writing to buffer in compute shader
Here is a simple metal compute shader: kernel void test(uint k [[ thread_position_in_grid ]], device float* a [[buffer(1)]]){ a[k] = 2; }; On the CPU I access the data like so: let size = floatArray.count * MemoryLayout.size(ofValue: floatArray[0]) metalBuffer = device.makeBuffer(bytes: floatArray, length: size, options: []) data = metalBuffer.contents().assumingMemoryBound(to: Float.self) floatArray is all zeros. I dispatch with encoder.dispatchThreadgroups(MTLSize(width:32, height:1, depth:1), threadsPerThreadgroup: MTLSize(width:32, height:1, depth:1)) When the shader has finished I print the contents: print(data[0]) Now data[0] and data[1] both give a value of 2 as expected, but the rest are not 2. For example data[2] is about 1.477. I feel like I must be making a simple mistake.