Get System Volume iOS
<p>My case is simple: I need to play a warning signal and want to make sure the user will hear it, so I want to check the system volume.</p> <p>How can I find out what the current system volume is?</p>
<p>Try this:</p> <pre><code> MPMusicPlayerController *iPod = [MPMusicPlayerController iPodMusicPlayer]; float volumeLevel = iPod.volume; </code></pre> <p>You need to import the MediaPlayer framework.</p>
<p>This works fine:</p> <pre><code>Float32 volume; UInt32 dataSize = sizeof(Float32); AudioSessionGetProperty ( kAudioSessionProperty_CurrentHardwareOutputVolume, &amp;dataSize, &amp;volume ); </code></pre>
<p>You can use the default system's volume View and add to wherever you need it. In my case I required it in my own music player. It's easy and hassle free. Just add the view, and everything is done. This is explained in Apple's <a href="https://developer.apple.com/library/ios/#DOCUMENTATION/MediaPlayer/Reference/MPVolumeView_Class/Reference/Reference.html" rel="nofollow">MPVolume Class Reference</a>.</p> <pre><code>mpVolumeViewParentView.backgroundColor = [UIColor clearColor]; MPVolumeView *myVolumeView = [[MPVolumeView alloc] initWithFrame: mpVolumeViewParentView.bounds]; [mpVolumeViewParentView addSubview: myVolumeView]; [myVolumeView release]; </code></pre>
<p>The audio session can provide output volume (iOS >= 6.0). </p> <pre><code>float vol = [[AVAudioSession sharedInstance] outputVolume]; NSLog(@"output volume: %1.2f dB", 20.f*log10f(vol+FLT_MIN)); </code></pre>
<p>I have prepared a class with static methods in order to deal with the volume of ios devices. Let me share with you :)</p> <pre><code>import AVFoundation class HeadPhoneDetectHelper { class func isHeadPhoneConnected() -&gt; Bool { do{ let audioSession = AVAudioSession.sharedInstance() try audioSession.setActive(true) let currentRoute = audioSession.currentRoute let headPhonePortDescriptionArray = currentRoute.outputs.filter{$0.portType == AVAudioSessionPortHeadphones} let isHeadPhoneConnected = headPhonePortDescriptionArray.count != 0 return isHeadPhoneConnected }catch{ print("Error while checking head phone connection : \(error)") } return false } class func isVolumeLevelAppropriate() -&gt; Bool { let minimumVolumeLevelToAccept = 100 let currentVolumeLevel = HeadPhoneDetectHelper.getVolumeLevelAsPercentage() let isVolumeLevelAppropriate = currentVolumeLevel &gt;= minimumVolumeLevelToAccept return isVolumeLevelAppropriate } class func getVolumeLevelAsPercentage() -&gt; Int { do{ let audioSession = AVAudioSession.sharedInstance() try audioSession.setActive(true) let audioVolume = audioSession.outputVolume let audioVolumePercentage = audioVolume * 100 return Int(audioVolumePercentage) }catch{ print("Error while getting volume level \(error)") } return 0 } } </code></pre>
<p>For <strong>Swift 2</strong>:</p> <pre><code>let volume = AVAudioSession.sharedInstance().outputVolume print("Output volume: \(volume)") </code></pre>
<p>Swift 2.2, make sure to import MediaPlayer</p> <pre><code>private func setupVolumeListener() { let frameView:CGRect = CGRectMake(0, 0, 0, 0) let volumeView = MPVolumeView(frame: frameView) //self.window?.addSubview(volumeView) //use in app delegate self.view.addSubview(volumeView) //use in a view controller NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(volumeChanged(_:)), name: "AVSystemController_SystemVolumeDidChangeNotification", object: nil) }//eom func volumeChanged(notification:NSNotification) { let volume = notification.userInfo!["AVSystemController_AudioVolumeNotificationParameter"] let category = notification.userInfo!["AVSystemController_AudioCategoryNotificationParameter"] let reason = notification.userInfo!["AVSystemController_AudioVolumeChangeReasonNotificationParameter"] print("volume: \(volume!)") print("category: \(category!)") print("reason: \(reason!)") print("\n") }//eom </code></pre>