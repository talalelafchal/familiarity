Returning Tuple From Delegate (Value of optional type not unwrapped)
<p>I have defined a protocol with a method to return a tuple:</p> <pre><code>protocol SMCalculatorDelegate { func numbersToAdd() -&gt; (Int, Int) } </code></pre> <p>When i try to call this against the delegate method in my class like this:</p> <pre><code>class SMCalculator: NSObject { var delegate : SMCalculatorDelegate? func add() { let myTuple : (n1: Int, n2: Int) = delegate?.numbersToAdd() } } </code></pre> <p>I get the following error on the line starting <code>let myTuple...</code> referring to the <code>.numbersToAdd()</code> section of that line of code.</p> <pre><code>"Value of optional type '(Int, Int)?' not unwrapped; did you mean to use '!' or '?'?" </code></pre> <p>Why doesn't this work when I can extract the tuple without error like this?</p> <pre><code>let tuple = delegate?.numbersToAdd() println(tuple) //Prints (5,5) </code></pre>
<p>I'm still trying to get grips with everything, but it seems like correct behaviour.</p> <p>Should <code>delegate</code> be nil, you would assign nil to myTuple, thus you need to make myTuple optional as well...</p> <pre><code>class SMCalculator: NSObject { var delegate : SMCalculatorDelegate? func add() { let myTuple : (n1: Int, n2: Int)? = delegate?.numbersToAdd() // this works, because we're saying that myTuple definitely isn't nil println(myTuple!.n1) // this works because we check the optional value if let n1 = myTuple?.n1 { println(n1) } else { println("damn, it's nil!") } // doesn't work because you're trying to access the value of an optional structure println(myTuple.n1) } } </code></pre> <p>works for me </p>