How to get the current time as datetime
<p>Just started with the playground. I'm trying to create a simple app.</p> <p>I've created a date object like this:</p> <pre><code>var date = NSDate() </code></pre> <p>How can I get the current hour? In other languages I can do something like this:</p> <pre><code>var hour = date.hour </code></pre> <p>But I can't find any properties/methods like that. I've found a method, <code>dateWithCalendarFormat</code>. Should I use that? If so, HOW?</p>
<p><strong>Update for Swift 3:</strong></p> <pre><code>let date = NSDate() let calendar = NSCalendar.current let hour = calendar.component(.hour, from: date as Date) let minutes = calendar.component(.minute, from: date as Date) </code></pre> <hr> <p>I do this:</p> <pre><code>let date = NSDate() let calendar = NSCalendar.currentCalendar() let components = calendar.components(.CalendarUnitHour | .CalendarUnitMinute, fromDate: date) let hour = components.hour let minutes = components.minute </code></pre> <p>See the same question in objective-c <a href="http://stackoverflow.com/questions/2927028/how-do-i-get-hour-and-minutes-from-nsdate">How do I get hour and minutes from NSDate?</a></p> <p>Compared to Nate’s answer, you’ll get numbers with this one, not strings… pick your choice! </p>
<p>You could also use NSDateFormatter's convenience method, e.g.,</p> <pre><code>func printTimestamp() { let timestamp = NSDateFormatter.localizedStringFromDate(NSDate(), dateStyle: .MediumStyle, timeStyle: .ShortStyle) print(timestamp) } printTimestamp() // Prints "Sep 9, 2014, 4:30 AM" </code></pre>
<p>Swift makes it really easy to create and use extensions. I create a <code>sharedCode.swift</code> file and put enums, extensions, and other fun stuff in it. I created a <code>NSDate</code> extension to add some typical functionality which is laborious and ugly to type over and over again:</p> <pre><code>extension NSDate { func hour() -&gt; Int { //Get Hour let calendar = NSCalendar.currentCalendar() let components = calendar.components(.Hour, fromDate: self) let hour = components.hour //Return Hour return hour } func minute() -&gt; Int { //Get Minute let calendar = NSCalendar.currentCalendar() let components = calendar.components(.Minute, fromDate: self) let minute = components.minute //Return Minute return minute } func toShortTimeString() -&gt; String { //Get Short Time String let formatter = NSDateFormatter() formatter.timeStyle = .ShortStyle let timeString = formatter.stringFromDate(self) //Return Short Time String return timeString } } </code></pre> <p>using this extension you can now do something like:</p> <pre><code> //Get Current Date let currentDate = NSDate() //Test Extensions in Log NSLog("(Current Hour = \(currentDate.hour())) (Current Minute = \(currentDate.minute())) (Current Short Time String = \(currentDate.toShortTimeString()))") </code></pre> <p>Which for 11:51 AM would write out:</p> <blockquote> <p>(Current Hour = 11) (Current Minute = 51) (Current Short Time String = 11:51 AM)</p> </blockquote>
<p>Swift 2 answer : </p> <pre><code> let date = NSDate() let calendar = NSCalendar.currentCalendar() let components = calendar.components([.Hour, .Minute], fromDate: date) let hour = components.hour let minutes = components.minute </code></pre>
<p>if you just need the hour of the day</p> <pre><code>let calendar = NSCalendar.currentCalendar() var hour = calendar.component(.Hour,fromDate: NSDate()) </code></pre>
<p><em>Updated for Swift 3</em></p> <h1>Getting the Current Date and Time</h1> <p>You can get the current date and time as simply as this:</p> <pre><code>let currentDateTime = Date() </code></pre> <p>However, <code>Date</code> is a 64-bit floating point number measuring the number of seconds since the reference date of January 1, 2001 at 00:00:00 <a href="http://www.timeanddate.com/time/aboututc.html">UTC</a>. I can see that number for the current datetime by using </p> <pre><code>Date().timeIntervalSinceReferenceDate </code></pre> <p>At the time of this writing, it returned <code>497626515.185066</code>, probably not exactly what you are looking for. Keep reading.</p> <h1>Creating Another Date and Time</h1> <p><strong>Method 1</strong></p> <p>If you know the number of seconds before or after the reference date, you can use that.</p> <pre><code>let someOtherDateTime = Date(timeIntervalSinceReferenceDate: -123456789.0) // Feb 2, 1997, 10:26 AM </code></pre> <p><strong>Method 2</strong></p> <p>Of course, it would be easier to use things like years, months, days and hours (rather than relative seconds) to make a <code>Date</code>. For this you can use <code>DateComponents</code> to specify the components and then <code>Calendar</code> to create the date. The <code>Calendar</code> gives the <code>Date</code> context. Otherwise, how would it know what time zone or calendar to express it in?</p> <pre><code>// Specify date components var dateComponents = DateComponents() dateComponents.year = 1980 dateComponents.month = 7 dateComponents.day = 11 dateComponents.timeZone = TimeZone(abbreviation: "JST") // Japan Standard Time dateComponents.hour = 8 dateComponents.minute = 34 // Create date from components let userCalendar = Calendar.current // user calendar let someDateTime = userCalendar.date(from: dateComponents) </code></pre> <p>Other time zone abbreviations can be found <a href="https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations">here</a>. If you leave that blank, then the default is to use the user's time zone.</p> <p><strong>Method 3</strong></p> <p>The most succinct way (but not necessarily the best) could be to use <code>DateFormatter</code>.</p> <pre><code>let formatter = DateFormatter() formatter.dateFormat = "yyyy/MM/dd HH:mm" let someDateTime = formatter.date(from: "2016/10/08 22:31") </code></pre> <p>The <a href="http://www.unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns">Unicode technical standards show other formats</a> that <code>DateFormatter</code> supports.</p> <h1>Displaying the Date and Time</h1> <p><strong>Method 1</strong></p> <p>If you want to just display certain components of the date or time you can use <code>CalendarUnit</code> to specify the components that you want to extract from <code>Date</code>.</p> <pre><code>// get the current date and time let currentDateTime = Date() // get the user's calendar let userCalendar = Calendar.current // choose which date and time components are needed let requestedComponents: Set&lt;Calendar.Component&gt; = [ .year, .month, .day, .hour, .minute, .second ] // get the components let dateTimeComponents = userCalendar.dateComponents(requestedComponents, from: currentDateTime) // now the components are available dateTimeComponents.year // 2016 dateTimeComponents.month // 10 dateTimeComponents.day // 8 dateTimeComponents.hour // 22 dateTimeComponents.minute // 42 dateTimeComponents.second // 17 </code></pre> <p>See <a href="http://stackoverflow.com/a/38248942/3681880">this answer</a> also.</p> <p><strong>Method 2</strong></p> <p>Method 1 gave you the components, but it would be a lot of work to format those numbers for every style, language, and region. And you don't need to. This has already been done for you with the <code>DateFormatter</code> class.</p> <pre><code>// get the current date and time let currentDateTime = Date() // initialize the date formatter and set the style let formatter = DateFormatter() formatter.timeStyle = .medium formatter.dateStyle = .long // get the date time String from the date object formatter.string(from: currentDateTime) // October 8, 2016 at 10:48:53 PM </code></pre> <p>Here is a continuation of the above code that shows more formatting options: </p> <pre><code>// "10/8/16, 10:52 PM" formatter.timeStyle = .short formatter.dateStyle = .short formatter.string(from: currentDateTime) // "Oct 8, 2016, 10:52:30 PM" formatter.timeStyle = .medium formatter.dateStyle = .medium formatter.string(from: currentDateTime) // "October 8, 2016 at 10:52:30 PM GMT+8" formatter.timeStyle = .long formatter.dateStyle = .long formatter.string(from: currentDateTime) // "October 8, 2016" formatter.timeStyle = .none formatter.dateStyle = .long formatter.string(from: currentDateTime) // "10:52:30 PM" formatter.timeStyle = .medium formatter.dateStyle = .none formatter.string(from: currentDateTime) </code></pre> <p>Keep in mind, though, that this is for English with the region set to the US. For other languages and regions the formatting will look different.</p> <h1>Further study</h1> <ul> <li><a href="http://www.globalnerdy.com/2016/08/18/how-to-work-with-dates-and-times-in-swift-3-part-1-dates-calendars-and-datecomponents/">How to work with dates and times in Swift 3, part 1: Dates, Calendars, and DateComponents</a></li> <li><a href="http://www.globalnerdy.com/2016/08/22/how-to-work-with-dates-and-times-in-swift-3-part-2-dateformatter/">How to work with dates and times in Swift 3, part 2: DateFormatter</a></li> <li><a href="http://www.globalnerdy.com/2016/08/29/how-to-work-with-dates-and-times-in-swift-3-part-3-date-arithmetic/">How to work with dates and times in Swift 3, part 3: Date arithmetic</a></li> </ul>
<p>You can try this</p> <pre><code>func getTime() -&gt; (hour:Int, min:Int, sec:Int) { let currentDateTime = NSDate() let calendar = NSCalendar.currentCalendar() let components = calendar.components([.Hour,.Minute,.Second], fromDate: currentDateTime) let hour = components.hour let min = components.minute let sec = components.second return (hour,min,sec) } </code></pre> <p>Now call that method and receive the date with hour,min and second</p> <pre><code> let currentTime = self.getTime() print("Hour: \(currentTime.hour) Min: \(currentTime.min) Sec: \(currentTime.sec))") </code></pre>
<p>In Swift 3,</p> <pre><code> let date = Date() let calendar = Calendar.current() let hour = calendar.component(.hour, from: date) </code></pre>
<p><strong>Swift 3:</strong></p> <pre><code>static func currentTime() -&gt; String { let date = Date() let calendar = Calendar.current let hour = calendar.component(.hour, from: date) let minutes = calendar.component(.minute, from: date) return "\(hour):\(minutes)" } </code></pre> <p>PS - not sure what the question means exactly by getting current time (and hour) as date time, but hopefully the above should explain enough to answer the question.</p>