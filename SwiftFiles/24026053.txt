Simple program in Swift. How is this fixed?
<p>How is this fixed? The idea is to return 0 when it is even, and return 1 when it isn't. I am not sure how to fix this. I have looked and there is nothing since this is such a new language.</p> <p><strong>CODE:</strong></p> <pre><code>let numbers = 79 numbers({ (number: Int) -&gt; Int in if number % 2 == 0 { return 0 } return 1 }) </code></pre>
<p>Define an <code>isEven()</code> function as such: </p> <pre><code> 9&gt; func isEven (number:Int) -&gt; Bool { return 0 == number % 2 } 10&gt; isEven(10) $R6: Bool = true 11&gt; isEven(11) $R7: Bool = false </code></pre> <p>If you are looking to <code>map</code> then:</p> <pre><code>numbers.map (isEven) </code></pre> <p>or, with a <code>lambda</code>:</p> <pre><code>numbers.map {(number:Int) -&gt; Bool in return 0 == number % 2 } </code></pre> <p>as such:</p> <pre><code> 13&gt; let numbers = [0, 1, 2] 14&gt; numbers.map { (n:Int) -&gt; Bool in return 0 == n % 2 } $R8: Bool[] = size=3 { [0] = true [1] = false [2] = true } </code></pre> <p>In Swift, when a function is provided as the last argument in a function, like <code>map</code>, you don't need to enclose the lambda in parens.</p>
<p>It looks like you set this up like you wanted to use the <code>map</code> function, but you never actually used map, or used an array as your variable. Try this.</p> <pre><code>let numbers = [79] numbers.map({(number: Int) -&gt; Int in if number % 2 == 0 { return 0 } return 1 }) </code></pre>