Since there is no preprocressor in Swift, what replaces C macros?
<p>Is there a way to do #define, #ifdef and the other powerful macros in Swift?</p>
<blockquote> <p>Simple Macros Where you typically used the #define directive to define a primitive constant in C and Objective-C, in Swift you use a global constant instead. For example, the constant definition #define FADE_ANIMATION_DURATION 0.35 can be better expressed in Swift with let FADE_ANIMATION_DURATION = 0.35. Because simple constant-like macros map directly to Swift global variables, the compiler automatically imports simple macros defined in C and Objective-C source files</p> </blockquote> <p>reference: Page 40, Simple Macros</p> <p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/BuildingCocoaApps.pdf" rel="nofollow">https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/BuildingCocoaApps.pdf</a></p>
<p>Swift doesn't have a preprocessor and can't use C macros. There are some alternatives though. For constants you can just use a let statement. For example:</p> <pre><code>let defaultHeight = 100 </code></pre> <p>There is also some support for build configurations. They have this format. </p> <pre><code>#if build configuration &amp;&amp; !build configuration statements #elseif build configuration statements #else statements #endif </code></pre> <p>You can replace "build configuration" with the functions <code>os()</code> and <code>arch()</code> that return true or false. <code>os()</code> can take OSX or iOS as arguments while <code>arch()</code> can take x86_64, arm, arm64 and i386 as arguments.</p> <p>You can see more about how Swift replaces C macros <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_21" rel="nofollow">here</a></p>