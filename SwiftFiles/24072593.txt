How to change value of parameters in enum (Swift)
<p>As all of you i'm new in Swift. I have no idea how to change parameter in enum, after it's creating. So. There are SimpleProtocol and SimpleEnum, which conforms this protocol. </p> <pre><code>//SimpleProto goes here protocol ExampleProtocol { var simpleDescription: String { get } mutating func adjust() } //And SimpleEnum goes here enum SimpleEnum : ExampleProtocol { case first(Int) case second(Int) case third(Int) var simpleDescription: String { get { var begining = "This is SimpleEnum with arg value : " switch self { case let .first(arg): begining += "One" case let .second(arg): begining += "Two" case let .third(arg): begining += "Three" } return begining } } mutating func adjust() { //here i want to increase the value of enum's parameter on five } } </code></pre> <p>I can really imagine one solution, but i don't think it's good enough. Main idea is that will recreate self with increased value:</p> <pre><code>case let .first(arg): self = SimpleEnum.first(arg + 5) </code></pre> <p>Any idea? </p>
<p>Don't treat enums as mutable types. You'll be much happier. In the <code>adjust</code> function, just return a new enum value:</p> <pre><code>enum SimpleEnum { ... func adjust() -&gt; SimpleEnum { switch self { case let .first(arg): return .first(arg + 5) case let .second(arg): return .second(arg + 5) case let .third(arg): return .third(arg + 5) } } } </code></pre>