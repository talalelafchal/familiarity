Is it possible to use multiple trailing closures in swift?
<p>I know it is possible to define methods which accept closures like this:</p> <p>A. Single closure as input parameter</p> <pre><code>func testOfClosures (flag: Int, closure1: () -&gt; ()) { closure1() } </code></pre> <p>B. Multiple closures as input parameters</p> <pre><code>func testOfClosures (flag: Int, closure1: () -&gt; (), closure2: () -&gt; (), closure3: () -&gt; ()) { switch flag { case 1: closure1() case 2: closure2() default: closure3() } } </code></pre> <p>Interestingly in first case we can invoke it like this:</p> <pre><code>testOfClosures(1){ println("print closure 1") } </code></pre> <p>but in second case, we cannot invoke it like this:</p> <pre><code>testOfClosures(1,{ println("print closure 1") }, { println("print closure 2") }) { println("print closure 3") } </code></pre> <p>and we have to invoke it like this:</p> <pre><code>testOfClosures(1,{ println("print closure 1") }, { println("print closure 2") }, { println("print closure 3") }) </code></pre> <p>Any reasons?</p>
<p>It looks like the trailing closure syntax is very specific about the position of the opening <code>{</code> and requires it to be on the same line as the closing <code>)</code></p> <p>The below works</p> <pre><code>testOfClosures(1,{ println("print closure 1") }, { println("print closure 2") }) { println("print closure 3") } </code></pre> <p>As far as multiple trailing closures, that is not possible. The documentation specifically states only the final closure as using the special syntax. </p>