How to import own classes from your own project into a Playground
<p>Assume a setup like this:</p> <ul> <li>You have an Xcode 6 project, where you've implemented your own classes (say MyView and MyViewController) with both Objective-C and Swift</li> <li>You have added a Playground into your project</li> </ul> <p>In the Playground, it's possible to import modules (frameworks) like <code>UIKit</code> with the <code>import</code> keyword. How do you enable access to the project's other classes from the Playground?</p> <p>Just trying to access project classes directly results with an error message: <em>Use of unresolved identifier 'MyView'</em></p>
<p>As of Xcode 6.0 Beta 5, it is now possible to import your own frameworks into a playground. This provides a way to share code between your applications and playgrounds, which can both import your frameworks. To do this:</p> <ol> <li><p>Your playground must be in the same workspace as the project that produces your framework. Your workspace must contain a target that produces the framework, instead of using a pre-built framework.</p></li> <li><p>You must have already built your framework. If it is an iOS framework, it must be built for a 64-bit run destination (e.g. iPhone 5s), and must be built for the Simulator.</p></li> <li><p>You must have an active scheme which builds at least one target (that target's build location will be used in the framework search path for the playground). </p></li> <li><p>Your "Build Location" preference (in advanced "Locations" settings of Xcode) should not be set to "Legacy". </p></li> <li><p>If your framework is not a Swift framework the "Defines Module" build setting must be set to "Yes". </p></li> <li><p>You must add an import statement to your playground for the framework.</p></li> </ol> <p>Once all these conditions are fulfilled, importing your framework will work in a playground.</p> <p>In Xcode 7 we introduced another mechanism that you can use to import your own classes as source, instead of importing a framework; you can read about this "Auxiliary Sources" support at <a href="http://help.apple.com/xcode/mac/8.0/#/devfa5bea3af" rel="nofollow">http://help.apple.com/xcode/mac/8.0/#/devfa5bea3af</a></p>
<p>I actually managed to refer to other Swift files in the current project by doing this:</p> <ul> <li>Create an empty Playground and place is somewhere under your project.</li> <li>Open the <code>YourPlayground.playground</code> bundle (yes, it's a bundle = directory) in Terminal.</li> <li>Edit <code>contents.xcplayground</code> for example with <code>vi</code> and add another section like this:</li> </ul> <blockquote> <pre><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt; &lt;playground version='3.0' sdk='iphonesimulator'&gt; &lt;sections&gt; &lt;code source-file-name='section-1.swift'/&gt; &lt;code source-file-name='section-2.swift'/&gt; &lt;/sections&gt; &lt;timeline fileName='timeline.xctimeline'/&gt; &lt;/playground&gt; </code></pre> </blockquote> <ul> <li>Rename <code>section-1.swift</code> to <code>section-2.swift</code> (if you created the Playground from scratch, there should be an example <code>section-1.swift</code> in your bundle)</li> <li>Add a <em>hard link</em> (symbolic link doesn't seem to work) named <code>section-1.swift</code> which will point outside the bundle to your Swift class file like:</li> </ul> <blockquote> <pre><code>ln ../../Classes/MyView.swift section-1.swift </code></pre> </blockquote> <ul> <li>Close Xcode and open the Playground again.</li> <li>Now there should be two sections, one with the contents of your Swift class file and the other one with the example content you got from creating the Playground from scratch.</li> </ul> <p>This way I can actually run code lying outside the Playground, but Xcode seems to crash more often when doing it like this.</p> <p><strong>Edit:</strong></p> <p>As of Xcode 6 beta 5 you're now able to refer to project files, as Rick Ballard instructs in his <a href="http://stackoverflow.com/a/24049021/2155985">answer</a>.</p>
<p>Since Beta 5 of Xcode 6 it is possible to import your code if it is in a framework. What you need to do is create a framework target, add the Swift files there and in your playground do</p> <pre><code>import ModuleName </code></pre> <p>You can look up the module name in the build settings. It's usually the same as the target name.</p> <p>Remember to make the code you want to see <code>public</code>. You'll need to build the project before changes are available in the playground. (You'll also need to edit the playground to trigger re-execution.)</p> <h3>Important</h3> <p>Do not give the playground file the same name as the target! If you do, importing seems to work but you'll get the following error when the playground tries to execute:</p> <blockquote> <p>Playground execution failed: error: Couldn't lookup symbols:</p> </blockquote> <p>I wasted an hour on figuring that out. :)</p>
<p>Ok. I check the accepted answer - it's not necessary to do such complicated things!</p> <p>All you have to do - is write in the beginning:</p> <pre><code>import ModuleName </code></pre> <p>(assuming your playground placed in the same workspace as framework/project)</p> <h2>If it's doesn't work:</h2> <ol> <li><p>Rebuild your project</p></li> <li><p><strong>Recreate playground and copy all from old playground there</strong></p></li> </ol> <p>It solves a lot of strange <strong>errors with failed init's and imports</strong> of whatever!</p>
<p>I wasn't able to get it working using any of the answers here, so I started playing around and found a simple way that worked for me to import a swift class into a playground.</p> <p>Just create a playground in your project, theres a directory inside it called 'sources', just drag a copy of the swift class into that folder and the playground then will have access to it. </p> <p><strong>For example:</strong></p> <p><a href="https://i.stack.imgur.com/AcTBJ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/AcTBJ.png" alt="enter image description here"></a></p>