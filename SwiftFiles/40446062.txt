Why this class makes memory leaks
I checked in Instruments and referred me to this class that will occure about 3 or 4 leak on every call, but not mentiond what line of code. I use this class for JSON parssing with a loadData function that have a completion handeler inside a dispatch_async. I realy stucked! I checked everything and seems like all of code are OK but It's not OK :D I use Xcode 7.3.1  class Thing { private var _uuid: String private var _name: String private var _icon: String private var _tags: [String] private var _secured: Bool private var _enabled: Bool private var _meta: KeyValue private var _organization: String private var _project: String private var _createdAt: String private var _updatedAt: String private var _lastAcceptance: [String: AnyObject] private var _hm: Float private var _tempc: Float private var _tempf: Float private var _loc: Location class Location { private var _x: Float private var _y: Float private var _z: Float private var _v: Float var x: Float { set{ _x = newValue } get { return _x } } var y: Float { set{ _y = newValue } get { return _y } } var z: Float { set{ _z = newValue } get { return _z } } var v: Float { set{ _v = newValue } get { return _v } } init(x: Float, y: Float, z: Float, v: Float){ if x < 90 && x > -90 { _x = x } else { _x = 0 } if y < 180 && y > -180 { _y = y } else { _y = 0 } if z < 74000 && z > -10916 { _z = z } else { _z = 0 } _v = v } } var uuid: String { return _uuid } var name: String{ return _name } var icon: String{ return _icon } var tags: [String]{ return _tags } var secured: Bool{ return _secured } var enabled: Bool{ return _enabled } var meta: KeyValue{ get { return _meta } set { _meta = newValue } } var organization: String{ return _organization } var project: String{ return _project } var createdAt: String{ return _createdAt } var updatedAt: String{ return _updatedAt } var lastAcceptance: [String: AnyObject]{ return _lastAcceptance } var tempc: Float { return _tempc } var tempf: Float { return _tempf } var hm: Float { return _hm } var loc: Location { return _loc } init(data: JSONDictionaty){ if let uuid = data["uuid"] as? String { _uuid = uuid } else { _uuid = "" } if let name = data["name"] as? String { _name = name } else { _name = "" } if let icon = data["icon"] as? String { _icon = icon } else { _icon = "" } if let tags = data["tags"] as? [String] { _tags = tags } else { _tags = [""] } if let secured = data["secured"] as? Bool { _secured = secured } else { _secured = false } if let enabled = data["enabled"] as? Bool { _enabled = enabled } else { _enabled = false } if let meta = data["meta"] as? JSONDictionaty{ if let subMeta = meta as? [String: String] { _meta = KeyValue(keyValue: subMeta) } else { _meta = KeyValue(keyValue: ["" : ""]) } } else { _meta = KeyValue(keyValue: ["" : ""]) } if let organization = data["organization"] as? String { _organization = organization } else { _organization = "" } if let project = data["project"] as? String { _project = project } else { _project = "" } if let createdAt = data["createdAt"] as? String { _createdAt = createdAt } else { _createdAt = "" } if let updatedAt = data["updatedAt"] as? String { _updatedAt = updatedAt } else { _updatedAt = "" } if let lastAcceptance = data["lastAcceptance"] as? [String: AnyObject] { _lastAcceptance = lastAcceptance } else { _lastAcceptance = ["":""] } if let lastAcc = data["lastAcceptance"] as? JSONDictionaty, content = lastAcc["content"] as? JSONDictionaty, loc = content["loc"] as? JSONDictionaty, x = loc["x"] as? Float, y = loc["y"] as? Float, z = loc["z"] as? Float, v = loc["v"] as? Float{ _loc = Location(x: x, y: y, z: z, v: v) } else { _loc = Location(x: 0, y: 0, z: 0, v: 0) } if let lastAcc = data["lastAcceptance"] as? JSONDictionaty, content = lastAcc["content"] as? JSONDictionaty, tempc = content["tempc"] as? Float { _tempc = tempc } else { _tempc = 0 } if let lastAcc = data["lastAcceptance"] as? JSONDictionaty, content = lastAcc["content"] as? JSONDictionaty, tempf = content["tempf"] as? Float { _tempf = tempf } else { _tempf = 0 } if let lastAcc = data["lastAcceptance"] as? JSONDictionaty, content = lastAcc["content"] as? JSONDictionaty, hm = content["hm"] as? Float { _hm = hm } else { _hm = 0 } } }