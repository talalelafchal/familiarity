In absence of preprocessor macros, is there a way to define practical scheme specific flags at project level in Xcode project
<p>Before swift I would define a set of schemes for alpha, beta, and distribution builds. Each of these schemes would have a set of macros that were defined to gate certain behaviors at the project level. The simplest example is the DEBUG=1 macro that is defined by default for all Xcode projects in the default scheme for the Run build. One could query #ifdef DEBUG ... and make decisions in the code accordingly, even compiling out non-necessary code.</p> <p>It seems that this type of configurational gating is not as easy using swift, as macros are not supported. Can someone suggest a comparable approach, I don't care if the code is compiled out, per se. I would like to gate features based on build scheme, though.</p>
<p>In Swift you can still use the "#if/#else/#endif" preprocessor macros (although more constrained), as per <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_13" rel="nofollow noreferrer">Apple docs</a>. Here's an example:</p> <pre><code>#if DEBUG let a = 2 #else let a = 3 #endif </code></pre> <p>Now, you must set the "DEBUG" symbol elsewhere, though. Set it in the "Swift Compiler - Custom Flags" section, "Other Swift Flags" line. You add the DEBUG symbol with the <code>-D DEBUG</code> entry.</p> <p>(Build Settings -> Swift Compiler - Custom Flags) <img src="https://i.stack.imgur.com/dqp5H.png" alt="enter image description here"></p> <p>As usual, you can set a different value when in Debug or when in Release.</p> <p>I tested it in real code; it doesn't seem to be recognized in a playground. </p>
<p>We ran into an issue with not wanting to set swift compiler flags because we didn't want to have to set them and keep them up to date for different targets etc. Also, in our mixed codebase, we didn't want to make remember to set our flags appropriately all the time for each language.</p> <p>For ours, we declared a file in ObjC</p> <p><code>PreProcessorMacros.h</code></p> <pre><code>extern BOOL const DEBUG_BUILD; </code></pre> <p>In the .m</p> <p><code>PreProcessorMacros.m</code></p> <pre><code>#ifdef DEBUG BOOL const DEBUG_BUILD = YES; #else BOOL const DEBUG_BUILD = NO; #endif </code></pre> <p>Then, in your Objective-C Bridging Header</p> <pre><code>#import "PreProcessorMacros.h" </code></pre> <p>Now, use this in your Swift codebase</p> <pre><code>if DEBUG_BUILD { println("debug") } else { println("release") } </code></pre> <p>This is definitely a workaround, but it solved our problem so I posted it here in the hopes that it will help. It is not meant to suggest that the existing answers are invalid.</p>