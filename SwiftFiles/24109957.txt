Check if two arrays share the same elements
<p>I've written this code in a .playgraound</p> <pre><code>var a = [1, 2, 3] var b = a var c = a if b === c { "b and c still share the same array elements." } else { "b and c now refer to two independent sets of array elements." } </code></pre> <p>The result is "b and c now refer to two independent sets of array elements" but in "The Swift Programming Language" Apple says that</p> <blockquote> <p>The example below uses the “identical to” operator (===) to check whether b and c still share the same array elements. </p> </blockquote> <p>Can you explain me why they are different?</p>
<p>The reason the book says</p> <blockquote> <p>The result is "b and c now refer to two independent sets of array elements"</p> </blockquote> <p>is that the code earlier in the book stopped array sharing between <code>b</code> and <code>c</code> established by the assignment of <code>a</code> to both of them:</p> <pre><code>b.unshare() // Page 306, line 3 </code></pre> <p>Array <code>a</code> has been unshared from <code>b</code> and <code>c</code> implicitly by appending an element to it on page 305, line 1.</p> <p>With the code as you show the <code>"b and c still share the same array elements."</code> message will be printed.</p>
<p><code>b === c</code> tests what will happen to <code>c</code> if you change one of the elements of <code>b</code> or vice versa. In your example, <code>b === c</code> evaluates to true, so when you change an element of <code>b</code>:</p> <pre><code>var a = [1, 2, 3] var b = a var c = a b[1] = 10 </code></pre> <p>you see the change reflected in <code>c</code>:</p> <pre><code>c[1] // returns 10 </code></pre> <p>You can use the <code>unshare()</code> method to ensure that <code>b</code> refers to an independent array instance:</p> <pre><code>b.unshare() b === c // returns false b[2] = 10 c[2] // returns 3 </code></pre>