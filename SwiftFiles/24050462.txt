Class instance variable initialization order?
<p>Currently, I am seeing something strange behavior.</p> <pre><code>class DataManager1 { let THE_ID = "SOME_ID_STRING" let _con1 = CKContainer(identifier: THE_ID) // error // error: 'DataManager1.Type' does not have a member named 'THE_ID' } class DataManager2 { let THE_ID = "SOME_ID_STRING" let _con1:CKContainer? init() { _con1 = CKContainer(identifier: THE_ID) // no error. } } </code></pre> <p>In C++ we have a defined initialization order between instance member variables. I expected something similar, but actually I couldn't find a mention for that form the manual.</p> <p>Does Swift has a defined initialization order of properties? If it does, what is the rule, and where can I find the rule?</p>
<p>This is due to the fact that you're using a <code>Closure</code> (a <code>Function</code> is just a special case of <code>Closure</code> that is unnamed) to initialize the <code>_con1</code> property with a default value.</p> <p>From the Apple provided iBook:</p> <blockquote> <p>If you use a closure to initialize a property, remember that the rest of the instance has not yet been initialized at the point that the closure is executed. This means that you cannot access any other property values from within your closure, even if those properties have default values. You also cannot use the implicit self property, or call any of the instanceâ€™s methods.</p> </blockquote> <p>Even though the note above refers specifically to closures, it seems that trying to set the default value for a property to be that of another property directly also does not work.</p>