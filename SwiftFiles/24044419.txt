Compiler Warning in XCode6 Beta - “Shorthand External Parameter Names”
<p>I'm playing with Swift on Xcode6 Beta, and when I'm using in a func definition '#', just like in apple's Swift programing guide, i'm getting the following compiler error:</p> <p>Extraneous '#' in parameter: 'characterToFind' is already the keyword argument name</p> <pre><code>// this code is a copy-paste code from apple's Swift language programing guide func containsCharacter(#string: String, #characterToFind: Character) -&gt; Bool { for character in string { if character == characterToFind { return true } } return false } </code></pre> <p>Is it just a bug with the new Xcode?</p>
<p>If it's a method (a <code>func</code> within a class), then the <code>#</code> is redundant and I suppose this is what the compiler means.</p> <p>In methods, the first argument name is assumed to be only local, whereas the others are automatically assumed as both external and local names, as if you had written the <code>#</code> in front of them.</p> <p>So, instead of</p> <pre><code>func containsCharacter(#string: String, #characterToFind: Character) -&gt; Bool </code></pre> <p>you can write</p> <pre><code>func containsCharacter(#string: String, characterToFind: Character) -&gt; Bool </code></pre> <p>and it's going to be exactly the same thing.</p> <p>To further prove this point, I tried this in the playground</p> <pre><code>func foo(#x: Int, #y: Int) { } class foobar { func foo(#x: Int, #y: Int) func bar(#x: Int, y: Int) } </code></pre> <p>The three functions are identical, but the compiler raises a warning on the second <code>foo</code></p> <blockquote> <p>Extraneous '#' in parameter: 'characterToFind' is already the keyword argument name</p> </blockquote> <p>Again, the parameters after the first in <strong>methods</strong> are already automatically considered external names.</p>