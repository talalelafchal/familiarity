Using a Swift String with NSData without NSString
<p>Is it possible to init a Swift string (not <code>NSString</code>) with the contents of an NSData object without creating an NSString first?</p> <p>I know I can use this with NSString:</p> <pre><code>var datastring = NSString(data data: NSData!, encoding encoding: UInt) </code></pre> <p>But how can I use a basic Swift String type? I thought Swift strings and NSStrings were interchangeable, do I really have to get the data out of NSData using NSString and then assign that value to a Swift string?</p>
<p>As of Swift 1.2 they aren't quite interchangeable, but they are convertible, so there's really no reason not to use <code>NSString</code> and its constructors when you need to. This will work fine:</p> <pre><code>var datastring = NSString(data:data, encoding:NSUTF8StringEncoding) as! String </code></pre> <p>The <code>as!</code> is needed because <code>NSString(...)</code> can return <code>nil</code> for invalid input - if you aren't sure that the data represents a valid UTF8 string, you may wish to use the following instead to return a <code>String?</code> (aka <code>Optional&lt;String&gt;</code>).</p> <pre><code>var datastring = NSString(data:data, encoding:NSUTF8StringEncoding) as String? </code></pre> <p>Once constructed, you can then use <code>datastring</code> just like any other Swift string, e.g.</p> <pre><code>var foo = datastring + "some other string" </code></pre>
<pre><code>var buffer = [UInt8](count:data.length, repeatedValue:0) data.getBytes(&amp;buffer, length:data.length) var datastring = String(bytes:buffer, encoding:NSUTF8StringEncoding) </code></pre>
<p>In Swift 2.0 You can do something like this:- </p> <pre><code>import Foundation var dataString = String(data: YourData, encoding: NSUTF8StringEncoding) </code></pre>