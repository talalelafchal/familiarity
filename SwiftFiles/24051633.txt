How to remove an element from an array in Swift
<p>How can I unset/remove an element from an array in Apple's new language Swift?</p> <p>Here's some code:</p> <pre><code>let animals = ["cats", "dogs", "chimps", "moose"] </code></pre> <p>How could the element <code>animals[2]</code> be removed from the array?</p>
<p>This should do it (not tested):</p> <pre><code>animals[2..3] = [] </code></pre> <p>Edit: and you need to make it a <code>var</code>, not a <code>let</code>, otherwise it's an immutable constant.</p>
<p>The <code>let</code> keyword is for declaring constants that can't be changed. If you want to modify a variable you should use <code>var</code> instead, e.g:</p> <pre><code>var animals = ["cats", "dogs", "chimps", "moose"] animals.removeAtIndex(2) //["cats", "dogs", "moose"] </code></pre> <p>Update to Swift 3 </p> <pre><code>animals.remove(at: 2) </code></pre>
<p>Few Operation relates to Array in Swift</p> <p>Create Array</p> <pre><code>var stringArray = ["One", "Two", "Three", "Four"] </code></pre> <p>Add Object in Array</p> <pre><code>stringArray = stringArray + ["Five"] </code></pre> <p>Get Value from Index object</p> <pre><code>let x = stringArray[1] </code></pre> <p>Append Object</p> <pre><code>stringArray.append("At last position") </code></pre> <p>Insert Object at Index</p> <pre><code>stringArray.insert("Going", atIndex: 1) </code></pre> <p>Remove Object </p> <pre><code>stringArray.removeAtIndex(3) </code></pre> <p>Concat Object value</p> <pre><code>var string = "Concate Two object of Array \(stringArray[1]) + \(stringArray[2])" </code></pre>
<p>The above answers seem to presume that you know the index of the element that you want to delete.</p> <p>Often you know the reference to the object you want to delete in the array. (You iterated through your array and have found it, e.g.) In such cases it might be easier to work directly with the object reference without also having to pass everywhere its index. Hence, I suggest this solution. It uses the identity operator <code>!==</code>, which you use to test whether two object references both refer to the same object instance.</p> <pre><code>func delete(element: String) { list = list.filter() { $0 !== element } } </code></pre> <p>Of course this doesn't just work for <code>String</code>s.</p>
<p>If you don't know the index of the element that you want to remove, and the element is conform the Equatable protocol, you can do:</p> <p><code>animals.removeAtIndex(animals.indexOf("dogs")!)</code></p> <p>See Equatable protocol answer:<a href="http://stackoverflow.com/questions/24010700/how-do-i-do-indexofobject-or-a-proper-containsobject">How do I do indexOfObject or a proper containsObject</a></p>
<p>You could do that. First make sure <code>Dog</code> really exists in the array, then remove it. Add the <code>for</code> statement if you believe <code>Dog</code> may happens more than once on your array.</p> <pre><code>var animals = ["Dog", "Cat", "Mouse", "Dog"] let animalToRemove = "Dog" for object in animals { if object == animalToRemove{ animals.removeAtIndex(animals.indexOf(animalToRemove)!) } } </code></pre> <p>If you are sure <code>Dog</code> exits in the array and happened only once just do that:</p> <pre><code>animals.removeAtIndex(animals.indexOf(animalToRemove)!) </code></pre> <p><strong>If you have both, strings and numbers</strong></p> <pre><code>var array = [12, 23, "Dog", 78, 23] let numberToRemove = 23 let animalToRemove = "Dog" for object in array { if object is Int { // this will deal with integer. You can change to Float, Bool, etc... if object == numberToRemove { array.removeAtIndex(array.indexOf(numberToRemove)!) } } if object is String { // this will deal with strings if object == animalToRemove { array.removeAtIndex(array.indexOf(animalToRemove)!) } } } </code></pre>
<p>I came up with the following extension that takes care of removing elements from an <code>Array</code>, assuming the elements in the <code>Array</code> implement <code>Equatable</code>:</p> <pre><code>extension Array where Element: Equatable { mutating func removeEqualItems(item: Element) { self = self.filter { (currentItem: Element) -&gt; Bool in return currentItem != item } } mutating func removeFirstEqualItem(item: Element) { guard var currentItem = self.first else { return } var index = 0 while currentItem != item { index += 1 currentItem = self[index] } self.removeAtIndex(index) } } </code></pre> <h3>Usage:</h3> <pre><code>var test1 = [1, 2, 1, 2] test1.removeEqualItems(2) // [1, 1] var test2 = [1, 2, 1, 2] test2.removeFirstEqualItem(2) // [1, 1, 2] </code></pre>
<p>Given</p> <pre><code>var animals = ["cats", "dogs", "chimps", "moose"] </code></pre> <h2>Remove first element</h2> <pre><code>animals.removeFirst() // "cats" print(animals) // ["dogs", "chimps", "moose"] </code></pre> <h2>Remove last element</h2> <pre><code>animals.removeLast() // "moose" print(animals) // ["cats", "dogs", "chimps"] </code></pre> <h2>Remove element at index</h2> <pre><code>animals.remove(at: 2) // "chimps" print(animals) // ["cats", "dogs", "moose"] </code></pre> <h2>Remove element of unknown index</h2> <p>For only one element</p> <pre><code>if let index = animals.index(of: "chimps") { animals.remove(at: index) } print(animals) // ["cats", "dogs", "moose"] </code></pre> <p>For multiple elements</p> <pre><code>var animals = ["cats", "dogs", "chimps", "moose", "chimps"] animals = animals.filter(){$0 != "chimps"} print(animals) // ["cats", "dogs", "moose"] </code></pre> <h2>Notes</h2> <ul> <li>The above methods modify the array in place (except for <code>filter</code>) and return the element that was removed.</li> <li>If you don't want to modify the original array, you can use <code>dropFirst</code> or <code>dropLast</code> to create a new array.</li> </ul> <p><em>Updated to Swift 3</em></p>
<p>Regarding @Suragch's Alternative to "Remove element of unknown index": </p> <p>There is a more powerful version of "indexOf(element)" that will match on a predicate instead of the object itself. It goes by the same name but it called by myObjects.indexOf{$0.property = valueToMatch}. It returns the index of the first matching item found in myObjects array.</p> <p>If the element is an object/struct, you may want to remove that element based on a value of one of its properties. Eg, you have a Car class having car.color property, and you want to remove the "red" car from your carsArray.</p> <pre><code>if let validIndex = (carsArray.indexOf{$0.color == UIColor.redColor()}) { carsArray.removeAtIndex(validIndex) } </code></pre> <p>Foreseeably, you could rework this to remove "all" red cars by embedding the above if statement within a repeat/while loop, and attaching an else block to set a flag to "break" out of the loop.</p>