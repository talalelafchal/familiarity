Why sample iOS app in XCode 6 checks for nil of a non-optional variable?
<p>In "Master-Details" sample Swift app that comes with XCode 6 in <code>MasterViewController.swift</code> file they define <code>objects</code> like this:</p> <pre><code>var objects = NSMutableArray() </code></pre> <p>Then in <code>insertNewObject</code> method they check against <code>nil</code> before using it:</p> <pre><code>func insertNewObject(sender: AnyObject) { if objects == nil { objects = NSMutableArray() } objects.insertObject(NSDate.date(), atIndex: 0) let indexPath = NSIndexPath(forRow: 0, inSection: 0) self.tableView.insertRowsAtIndexPaths([indexPath], withRowAnimation: .Automatic) } </code></pre> <p>If <code>objects</code> is not optional and <code>objects = nil</code> throws an error, why do they need to guard against <code>nil</code>?</p>
<p>You don't need to guard against <code>nil</code>. That's the entire point of optionals (or non-optionals). Also, in Swift, when you <em>are</em> testing for <code>nil</code>, if the variable is an optional (which is the only time it could be <code>nil</code> anyhow), you can just say:</p> <pre><code>if optionalVar { // do stuff } </code></pre> <p>This is probably just translated from the Objective-C version by Xcode and isn't made "Swifty."</p> <p>Another instance of this kind of thing:</p> <pre><code>init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) { super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil) // Custom initialization } </code></pre> <p>The <code>// Custom initialization</code> should go above the <code>super.init()</code> in Swift, but this is just translated from the Objective-C version.</p>
<p>That is a bug; I find it surprising that it compiles without an error or warning. (I guess it's probably being turned into a call to isEqual:, passing nil?) Interestingly, the more idiomatic version:</p> <pre><code>if objects { objects = NSMutableArray() } </code></pre> <p>Does actually fail; you get an error on the <code>if objects</code> line because you can't test an NSMutableArray for boolean-ness.</p>