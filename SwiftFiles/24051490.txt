Multidimensional arrays in Swift
<p>Edit: As Adam Washington points out, as from Beta 6, this code works as is, so the question is no longer relevant. </p> <p>I am trying to create and iterate through a two dimensional array:</p> <pre><code> var array = Array(count:NumColumns, repeatedValue:Array(count:NumRows, repeatedValue:Double())) array[0][0] = 1 array[1][0] = 2 array[2][0] = 3 array[0][1] = 4 array[1][1] = 5 array[2][1] = 6 array[0][2] = 7 array[1][2] = 8 array[2][2] = 9 for column in 0...2 { for row in 0...2 { println("column: \(column) row: \(row) value:\(array[column][row])") } } </code></pre> <p>However, this is the output I get:</p> <pre><code>column: 0 row: 0 value:3.0 column: 0 row: 1 value:6.0 column: 0 row: 2 value:9.0 column: 1 row: 0 value:3.0 column: 1 row: 1 value:6.0 column: 1 row: 2 value:9.0 column: 2 row: 0 value:3.0 column: 2 row: 1 value:6.0 column: 2 row: 2 value:9.0 </code></pre> <p>It looks as if the last column in the row is overwriting the other column values.</p> <p>Am I declaring it wrong?</p> <p>Edit: Perhaps a picture from the Playground would help:</p> <p><img src="https://i.stack.imgur.com/ytAiC.png" alt="Captured from Playground"></p>
<pre><code>var array: Int[][] = [[1,2,3],[4,5,6],[7,8,9]] for first in array { for second in first { println("value \(second)") } } </code></pre> <p>To achieve what you're looking for you need to initialize the array to the correct template and then loop to add the row and column arrays:</p> <pre><code>var NumColumns = 27 var NumRows = 52 var array = Array&lt;Array&lt;Int&gt;&gt;() var value = 1 for column in 0..NumColumns { var columnArray = Array&lt;Int&gt;() for row in 0..NumRows { columnArray.append(value++) } array.append(columnArray) } println("array \(array)") </code></pre>
<p>You are creating an array of three elements and assigning all three to the same thing, which is itself an array of three elements (three Doubles).</p> <p>When you do the modifications you are modifying the floats in the internal array.</p>
<p>As stated by the other answers, you are adding the same array of rows to each column. To create a multidimensional array you must use a loop</p> <pre><code>var NumColumns = 27 var NumRows = 52 var array = Array&lt;Array&lt;Double&gt;&gt;() for column in 0..NumColumns { array.append(Array(count:NumRows, repeatedValue:Double())) } </code></pre>
<p>Your problem may have been due to a deficiency in an earlier version of Swift or of the XCode Beta. Working with Xcode Version 6.0 (6A279r) on August 21, 2014, your code works as expected with this output:</p> <pre> column: 0 row: 0 value:1.0 column: 0 row: 1 value:4.0 column: 0 row: 2 value:7.0 column: 1 row: 0 value:2.0 column: 1 row: 1 value:5.0 column: 1 row: 2 value:8.0 column: 2 row: 0 value:3.0 column: 2 row: 1 value:6.0 column: 2 row: 2 value:9.0 </pre> <p>I just copied and pasted your code into a Swift playground and defined two constants:</p> <pre>let NumColumns = 3, NumRows = 3</pre>
<p>Using <a href="http://blog.trolieb.com/trouble-multidimensional-arrays-swift/" rel="nofollow">http://blog.trolieb.com/trouble-multidimensional-arrays-swift/</a> as a start, I added generics to mine:</p> <pre><code>class Array2DTyped&lt;T&gt;{ var cols:Int, rows:Int var matrix:[T] init(cols:Int, rows:Int, defaultValue:T){ self.cols = cols self.rows = rows matrix = Array(count:cols*rows,repeatedValue:defaultValue) } subscript(col:Int, row:Int) -&gt; T { get{ return matrix[cols * row + col] } set{ matrix[cols * row + col] = newValue } } func colCount() -&gt; Int { return self.cols } func rowCount() -&gt; Int { return self.rows } } </code></pre>
<p>Your original logic for creating the matrix is indeed correct, and it even works in Swift 2. The problem is that in the print loop, you have the row and column variables reversed. If you change it to:</p> <pre><code>for row in 0...2 { for column in 0...2 { print("column: \(column) row: \(row) value:\(array[column][row])") } } </code></pre> <p>you will get the correct results. Hope this helps!</p>
<p>For future readers, here is an elegant solution(5x5):</p> <pre><code>var matrix:[[Int]] = [[Int]](count:5, repeatedValue:[Int](count: 5, repeatedValue:0)) </code></pre> <p>and a dynamic approach:</p> <pre><code>var matrix:[[Int]] = [[Int]]() //creates an empty matrix var row = [Int]() //fill this row matrix.append(row) //add this row </code></pre>