Word Count in Swift
<p>What is a more elegant way of writing a simple word count function in Swift?</p> <pre><code>//Returns a dictionary of words and frequency they occur in the string func wordCount(s: String) -&gt; Dictionary&lt;String, Int&gt; { var words = s.componentsSeparatedByString(" ") var wordDictionary = Dictionary&lt;String, Int&gt;() for word in words { if wordDictionary[word] == nil { wordDictionary[word] = 1 } else { wordDictionary.updateValue(wordDictionary[word]! + 1, forKey: word) } } return wordDictionary } wordCount("foo foo foo bar") // Returns =&gt; ["foo": 3, "bar": 1] </code></pre>
<p>Your method was pretty solid, but this makes a couple improvements. I store the value count using Swifts "if let" keyword to check for an optional value. Then I can use count when updating the dictionary. I used the shorthand notation for updateValue (dict[key] = val). I also split the original string on all whitespace instead of just a single space.</p> <pre><code>func wordCount(s: String) -&gt; Dictionary&lt;String, Int&gt; { var words = s.componentsSeparatedByCharactersInSet(NSCharacterSet.whitespaceCharacterSet()) var wordDictionary = Dictionary&lt;String, Int&gt;() for word in words { if let count = wordDictionary[word] { wordDictionary[word] = count + 1 } else { wordDictionary[word] = 1 } } return wordDictionary } </code></pre>
<p>Couldn't find any traces of a Counter type class in the Collections library. You can improve the code slightly by using optional chaining.</p> <pre><code>func wordCount(s: String) -&gt; Dictionary&lt;String, Int&gt; { var words = s.componentsSeparatedByString(" ") var wordDictionary = Dictionary&lt;String, Int&gt;() for word in words { if wordDictionary[word]? { wordDictionary[word] = wordDictionary[word]! + 1 } else { wordDictionary[word] = 1 } } return wordDictionary } wordCount("foo foo foo bar") </code></pre>
<p>I don't think this is more elegant because the readability is terrible and it requires and extension on Dictionary but it was really fun to write and shows you the potential power of swift:</p> <pre><code>extension Dictionary { func merge(with other: [KeyType:ValueType], by merge: (ValueType, ValueType) -&gt; ValueType) -&gt; [KeyType:ValueType] { var returnDict = self for (key, value) in other { var newValue = returnDict[key] ? merge(returnDict[key]!, value) : value returnDict.updateValue(newValue, forKey: key) } return returnDict } } func wordCount(s: String) -&gt; [String:Int] { return s.componentsSeparatedByString(" ").map { [$0: 1] }.reduce([:]) { $0.merge(with: $1, +) } } wordCount("foo foo foo bar") </code></pre> <p>I do think that merge extension would be useful in other circumstances though</p>
<p>maybe not elegant but was fun to implement</p> <pre><code>let inString = "foo foo foo bar" func wordCount(ss: String) -&gt; Dictionary&lt;String, Int&gt; { var dict = Dictionary&lt;String, Int&gt;() var tempString = "";var s = ss + " " for each in s{ if each == " "{ if dict[tempString] { var tempNumber = Int(dict[tempString]!) dict[tempString] = Int(tempNumber+1) tempString = "" } else {dict[tempString] = 1;tempString = ""} } else { tempString += each}} return dict } println(wordCount(inString)) </code></pre>