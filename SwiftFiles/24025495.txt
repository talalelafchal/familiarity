Using ? (optionals) in Swift variables
<p>What exactly is the difference between a property definition in Swift of:</p> <pre><code>var window: UIWindow? </code></pre> <p>vs</p> <pre><code>var window: UIWindow </code></pre> <p>I've read it's basically an "optional" but I don't understand what it's for.</p> <p>This is creating a class property called window right? so what's the need for the '?'</p>
<p><code>UIWindow?</code> means that the value may be absent. It's either an <code>UIWindow</code> instance or nothing.</p>
<p>The ? identifier means that the variable is <em>optional</em>, meaning its value can be nil. If you have a value in your code, declaring it as non-optional allows the compiler to check at build time if it has a chance to become nil.</p> <p>You can check whether it is nil in an if statement:</p> <pre><code>var optionalName: String? = "John Appleseed" if optionalName { // &lt;-- here we know it's not nil, for sure! } </code></pre> <p>Many methods that require a parameter to be non-nil will declare that they explicitly need a non-optional value. If you have an optional value, you can convert it into non-optional (for example, <code>UIWindow?</code> -> <code>UIWindow</code>) by <em>unwrapping</em> it. One of the primary methods for unwrapping is an <code>if let</code> statement:</p> <pre><code>var greeting = "Hello!" // at this point in the code, optionalName could be nil if let name = optionalName { // here, we've unwrapped it into name, which is not optional and can't be nil greeting = "Hello, \(name)" } </code></pre> <p>See <a href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11" rel="nofollow">The Swift Programming Language</a>, page 11 for a brief introduction, or page 46 for a more detailed description.</p>