Why use an extra let statement here?
<p>I'm looking at apple's iBook on the swift language and they use this snippet:</p> <pre><code>var optionalName: String? = "John Appleseed" var greeting = "Hello!" if let name = optionalName { greeting = "Hello, \(name)" } </code></pre> <p>If I'm understanding correctly, this is just setting name to be the same as optionalName. Why then does Apple use <code>let name = optionalName</code>? Would it not be easier just to use <code>if optionalName {...</code>? From playing around it seems to have the behavior.</p>
<p>The <code>if-let</code> construction is sort of superfluous in a simple case like this, but in a more complicated piece of code it can be useful. You can use it in a lot of the same ways you'd use an assignment in a conditional in (Obj)C (remember <code>if (self = [super init])</code>).</p> <p>For example, if the optional being tested is a computed property:</p> <pre><code>var optionalName: String? { get { if checkTouchID() { return "John Appleseed" } else { return nil } } } var greeting = "Hello!" if optionalName { greeting = "Hello, \(optionalName)" } </code></pre> <p>Paste that into a playground, along with a stub implementation of <code>checkTouchID()</code> that returns <code>true</code>, and you'll immediately see in the results area that the <code>optionalName</code> getter is executing twice. If you use an <code>if-let</code> construction instead, you'll only execute the getter once.</p> <p>This also true — and perhaps more commonly useful — if you have a series of chained optional calls, as in the <code>if let johnsStreet = john.residence?.address?.street</code> example from <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-XID_312" rel="nofollow">the docs</a>. You don't want to rewrite the whole chain in the body of the <code>if</code> statement, much less recompute it.</p>
<p>No, you can't use <code>if optionalName</code>.</p> <blockquote> <p>In an if statement, the conditional must be a Boolean expression—this means that code such as if score { ... } is an error, not an implicit comparison to zero.</p> </blockquote> <p>It's mentioned <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1" rel="nofollow">here</a> in the <code>Guided Tour</code> of Swift.</p>