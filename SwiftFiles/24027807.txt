Assigning value of an item in an array gives Bound value in a conditional binding must be an Optional type
<p>I am getting a compile error saying </p> <pre><code>Bound value in a conditional binding must be an Optional type </code></pre> <p>Below is a screenshot of the code</p> <p><img src="https://i.stack.imgur.com/l6RYo.png" alt="enter image description here"></p>
<p>You can convert the value of array[index] to an Optional doing something like this:</p> <pre><code>if let value = Int?(array[index]){ result += value } </code></pre> <p>That's if your array contains Ints. You could also use AnyObject?, but you'll get a warning from xcode.</p>
<p>if the type of the value of array[index] is of optional, you could simple do like this:</p> <pre><code>if let value = array[index]{ result += value } </code></pre>
<p>In this case the compiler is complaining because array <em>isn't</em> a collection of Optional (nil-able) types. If it truly doesn't need to be, you don't actually need that <code>if</code>, since everything inside the array is guaranteed to be the same type, and that <code>if</code> statement won't protect you from a out-of-bounds error anyway. So just go with:</p> <pre><code>while ++index &lt; length { result += array[index] } </code></pre> <p>or perhaps better:</p> <pre><code>for value in array { result += value } </code></pre> <p>or even better:</p> <pre><code>result = array.reduce(0) { $0 + $1 } </code></pre>
<p>The <code>array</code> should be declared as <code>Optional type</code>, take <code>Int?[]</code> as an example,</p> <pre><code>let array:Int?[] = [nil, 2, 3] let index = 0 let count = array.count for index in 0..count { if let value = array[index] { println(value) } else { println("no value") } } </code></pre>