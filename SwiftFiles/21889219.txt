Intersect Nodes ---- Objective-C - Swift - iOS - SpriteKit Node
<p>I'm wondering why the following thing does not work correctly.</p> <p>Before the nodes are drawn, I analyze if two specific nodes intersect by using:</p> <pre><code>[[self playerSpriteNode] intersectsNode: [self pSKLabelNode]] </code></pre> <p>When pSKLabelNode touches desiredSpriteNode it works perfect! (By returning true, or false when it doesn't intersect)</p> <p>But when it "passes" by a few pixels away from the SKLabel it still intersects and returns true.</p> <p>Is there some setup that are recommended to fix the frame size of the nodes, or solutions that you think that will fix the problem?</p>
<p>I have the same problem when I try to intersects static node (that located left) with node that have rotation (and flying from the right side). I fix it like this</p> <pre><code>if ([ninja intersectsNode:node] &amp;&amp; CGRectGetMinX(node.frame) &lt;= CGRectGetMaxX(ninja.frame) &amp;&amp; CGRectGetMaxX(node.frame) &gt;= CGRectGetMinX(ninja.frame)) { //and here I have intersects } </code></pre> <p>So I fix it by adding additional parameters </p>
<p>The intersectNode method is optimized for running fast on devices with lots of iterations per second. Due to this, it actually "estimates" collision based on math, which sometimes goes wrong at a margin of a few pixels, specially when we are speaking of square corners of PNGs.</p> <p>I had this problem once too, and since i used circles I calculated distance between circles as a second verification.</p> <p>So, what you can do is a custom verification INSIDE the intersectsNode if case. Assuming you handle squares, you could verify wether the x or y collides after the intersectNode. It could be something like like:</p> <pre><code> if([[self playerSpriteNode] intersectsNode: [self pSKLabelNode]]){ if(distance between x1 and x2 &lt; size1.width/2 + size2.width/2 || distance between y1 y2 &lt; size1.height/2 + size2.height/2){ //Your code goes here } } </code></pre> <p>Note that we compare central x distances with half each widths summed. This is only an example that works with squares, and most generic sprites.</p> <p>I would like to point out that, while intersectsNode is slightly imprecise, this is NEEDED in order to run your game swiftly, as perfect and precise calculations per update can be very exhaustive to your device. So, should you do a custom verification, ALWAYS call it after intersectsNode returns true, as a second verification rather than the only one.</p> <p>The answer provided above by Roman pretty much does what i said, in shorter code; I just wanted to leave an explanation about why.</p>
<p>Swift 2.1:</p> <p>For increased results do your check in the <code>update( _:)</code> loop, is where things happen <strong>before</strong> the next drawing:</p> <pre><code>override func update(currentTime: CFTimeInterval) { /* Called before each frame is rendered */ if goodDude.intersectsNode(badDude){ print("bad dude v.s. Ninja") }else{ print("not dude at all") } } </code></pre>