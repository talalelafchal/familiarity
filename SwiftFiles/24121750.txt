Trouble calling NSFetchedResultsControllerDelegate methods
<p>I've managed to create my <code>UICollectionViewController</code> with swift, and implement the <code>NSFetchedResultsController</code> and fetch stuff from my CoreData model. All good there... But... I can't seem to call any of the <code>NSFetchedResultsControllerDelegate</code> methods from within my extension. Code is as follows:</p> <pre><code>extension MainsViewController: NSFetchedResultsControllerDelegate { func fetchedResultsController() -&gt; NSFetchedResultsController { // if(fetchedResultsController != nil){ // return fetchedResultsController() // } var fetchRequest = NSFetchRequest() var context: NSManagedObjectContext = RKObjectManager.sharedManager().managedObjectStore.mainQueueManagedObjectContext var entity = NSEntityDescription.entityForName("Dessert", inManagedObjectContext: context) fetchRequest.entity = entity fetchRequest.fetchBatchSize = 20 var sortDescriptor = NSSortDescriptor(key: "createdAt", ascending: false) let sortDescriptors = [sortDescriptor] fetchRequest.sortDescriptors = sortDescriptors fetchedResultsController().delegate = self var aFetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: nil, cacheName: "Master") var error: NSError? if !aFetchedResultsController.performFetch(&amp;error){ println("An error:\(error) occured.") } return aFetchedResultsController } //Here is where i would call *@optional func controllerWillChangeContent(_ controller: NSFetchedResultsController!)* etc. etc. } </code></pre> <p>But swift doesnt recognise theese methods. I can't figure out what it is I am missing.</p> <p>Would be great if someone could help me out.</p> <p>Thanks in advance</p> <p>Chris</p>
<p>I think it should something like this:</p> <pre><code>var fetchedResultsController: NSFetchedResultsController { get { var fetchRequest = NSFetchRequest() var context: NSManagedObjectContext = RKObjectManager.sharedManager().managedObjectStore.mainQueueManagedObjectContext var entity = NSEntityDescription.entityForName("Dessert", inManagedObjectContext: context) fetchRequest.entity = entity fetchRequest.fetchBatchSize = 20 var sortDescriptor = NSSortDescriptor(key: "createdAt", ascending: false) let sortDescriptors = [sortDescriptor] fetchRequest.sortDescriptors = sortDescriptors self.fetchedResultsController.delegate = self var aFetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: context, sectionNameKeyPath: nil, cacheName: "Master") var error: NSError? if !aFetchedResultsController.performFetch(&amp;error){ println("An error:\(error) occured.") } return aFetchedResultsController } } </code></pre> <p>So your MainsViewController is a class, as I said in the comment above, so the first line has to look like this:</p> <pre><code>class MainsViewController: UIViewController, NSFetchedResultsControllerDelegate { </code></pre> <p>Unfortunatly I cannot test the code, but this can be understood like this: You have a property called fetchedResultsController and this will execute, when the fetchedResultsController is getting. So in the getter like you would do it in objective-c with a lazy getting method.</p>
<p>I found out that it was simply the auto complete feature that wasn't suggesting the method to me. Typing it out manually 'fixed' the issue. Sorry for wasting everybody's time...</p> <p>Chris</p>