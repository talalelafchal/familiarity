How to include optional in array in Swift
<p>I want to insert an optional in an array as follows</p> <pre><code>let arr: AnyObject[] = [1, 2, nil, 4, 5] </code></pre> <p>The following expression throws a compile error saying</p> <pre><code>Cannot convert the expression's type 'AnyObject[]' to type 'AnyObject' </code></pre> <p>How can I made this work? I need optional or nil value in the array even though I know I shouldn't.</p>
<p>Just like this:</p> <pre><code>let arr: AnyObject?[] = [1, 2, nil, 4, 5] </code></pre> <p>it makes the Array of type <code>AnyObject?</code></p>
<p>You can't use <code>AnyObject</code>:</p> <pre><code> 18&gt; let ar : AnyObject?[] = [1, 2, nil, 4, 5] &lt;REPL&gt;:18:25: error: cannot convert the expression's type 'AnyObject?[]' to type 'AnyObject?' let ar : AnyObject?[] = [1, 2, nil, 4, 5] ^~~~~~~~~~~~~~~~~ </code></pre> <p>But you can use <code>Any</code>:</p> <pre><code> 18&gt; let ar : Any?[] = [1, 2, nil, 4, 5] ar: Any?[] = size=5 { [0] = Some { Some = &lt;read memory from 0x7f8d4b841dc0 failed (0 of 8 bytes read)&gt; } [1] = Some { Some = &lt;read memory from 0x7f8d50da03c0 failed (0 of 8 bytes read)&gt; } [2] = Some { Some = nil } [3] = Some { Some = &lt;read memory from 0x7f8d4be77160 failed (0 of 8 bytes read)&gt; } [4] = Some { Some = &lt;read memory from 0x7f8d4be88480 failed (0 of 8 bytes read)&gt; } } </code></pre> <p>The Apple documentation makes this clear:</p> <blockquote> <p>“Swift provides two special type aliases for working with non-specific types:<br> o AnyObject can represent an instance of any class type.<br> o Any can represent an instance of any type at all, apart from function types.”</p> <p>Excerpt From: Apple Inc. “The Swift Programming Language.” iBooks. <a href="https://itun.es/us/jEUH0.l" rel="nofollow">https://itun.es/us/jEUH0.l</a></p> </blockquote> <p>It appears that <code>Int</code> and probably other primitive types are not subtypes of a class type and thus <code>AnyObject</code> won't work.</p>
<p>It's a cheat, but if you're using the nil as a sentinel it might be advisable to just use Tuples, one element being a <code>Bool</code> to rep the validity of the second.</p> <pre><code>var arr = [(true, 1), (true, 2) , (false, 0) , (true, 4),(true,5)] </code></pre>
<p>If you're just going to be inserting either Ints or nils, use</p> <p>(pre swift 2.0)</p> <pre><code>var arr: Int?[] = [1, 2, nil, 4, 5] </code></pre> <p>(swift > 2.0)</p> <pre><code>var arr: [Int?] = [1, 2, nil, 4, 5] </code></pre> <p>or</p> <pre><code>var arr: Array&lt;Int?&gt; = [1, 2, nil, 4, 5] </code></pre> <p>This can be done for any type (not just Int; that is, if you want an array to hold a specific type but allow it to be empty in some indices, like say a carton of eggs.)</p>
<p><code>let ar: AnyObject[] = [1,2,nil,3]</code> is illegal because <code>nil</code> is not convertible to <code>AnyObject</code>. </p> <p><code>let a: AnyObject?[] = [1,3,nil,2]</code> or <code>let a: Int?[] = [1,3,nil,2]</code> works.</p> <p>If you need an Objective-C bridgeable Array use</p> <p><code>let a: AnyObject[] = [1, 2, NSNull(), 4, 5]</code></p>