Computed read-only property vs function in Swift
<p>In the Introduction to Swift WWDC session, a read-only property <code>description</code> is demonstrated:</p> <pre><code>class Vehicle { var numberOfWheels = 0 var description: String { return "\(numberOfWheels) wheels" } } let vehicle = Vehicle() println(vehicle.description) </code></pre> <p>Are there any implications to choosing the above approach over using a method instead:</p> <pre><code>class Vehicle { var numberOfWheels = 0 func description() -&gt; String { return "\(numberOfWheels) wheels" } } let vehicle = Vehicle() println(vehicle.description()) </code></pre> <p>It seems to me that the most obvious reasons you would choose a read-only computed property are:</p> <ul> <li><strong>Semantics</strong> - in this example it makes sense for <code>description</code> to be a property of the class, rather than an action it performs.</li> <li><strong>Brevity/Clarity</strong> - prevents the need to use empty parentheses when getting the value.</li> </ul> <p>Clearly the above example is overly simple, but are there other good reasons to choose one over the other? For example, are there some features of functions or properties that would guide your decision of which to use?</p> <hr> <p><em>N.B. At first glance this seems like quite a common OOP question, but I'm keen to know of any Swift-specific features that would guide best practice when using this language.</em></p>
<p>It seems to me that it's mostly a matter of style: I strongly prefer using <strong>properties</strong> for just that: properties; meaning simple values that you can get and/or set. I use <strong>functions</strong> (or methods) when actual work is being done. Maybe something has to be computed or read from disk or from a database: In this case I use a function, even when only a simple value is returned. That way I can easily see whether a call is cheap (properties) or possibly expensive (functions). </p> <p>We will probably get more clarity when Apple publishes some Swift coding conventions.</p>
<p>Since the runtime is the same, this question applies to Objective-C as well. I'd say, with properties you get </p> <ul> <li>a possibility of adding a setter in a subclass, making the property <code>readwrite</code></li> <li>an ability to use KVO/<code>didSet</code> for change notifications</li> <li>more generally, you can pass property to methods that expect key paths, e.g. fetch request sorting</li> </ul> <p>As for something specific to Swift, the only example I have is that you can use <code>@lazy</code> for a property.</p>
<p>Historically description is a property on NSObject and many would expect that it continues the same in Swift. Adding parens after it will only add confusion.</p> <p>EDIT: After furious downvoting I have to clarify something - if it is accessed via dot syntax, it can be considered a property. It doesn't matter what's under the hood. You can't access usual methods with dot syntax.</p> <p>Besides, calling this property did not require extra parens, like in the case of Swift, which may lead to confusion.</p>
<p>There is a difference: If you use a property you can then eventually override it and make it read/write in a subclass.</p>
<p>While a question of computed properties vs methods in general is hard and subjective, currently there is one important argument in the Swift's case for preferring methods over properties. You can use methods in Swift as pure functions which is not true for properties (as of Swift 2.0 beta). This makes methods much more powerful and useful since they can participate in functional composition.</p> <pre><code>func fflat&lt;A, R&gt;(f: (A) -&gt; () -&gt; (R)) -&gt; (A) -&gt; (R) { return { f($0)() } } func fnot&lt;A&gt;(f: (A) -&gt; Bool) -&gt; (A) -&gt; (Bool) { return { !f($0) } } extension String { func isEmptyAsFunc() -&gt; Bool { return isEmpty } } let strings = ["Hello", "", "world"] strings.filter(fnot(fflat(String.isEmptyAsFunc))) </code></pre>
<p>There are situations where you would prefer computed property over normal functions. Such as: returning the full name of an person. You already know the first name and the last name. So really the <code>fullName</code> property is a property not a function. In this case, it is computed property (because you can't set the full name, you can just extract it using the firstname and the lastname)</p> <pre><code>class Person{ let firstName: String let lastName: String init(firstName: String, lastName: String){ self.firstName = firstName self.lastName = lastName } var fullName :String{ return firstName+" "+lastName } } let william = Person(firstName: "William", lastName: "Kinaan") william.fullName //William Kinaan </code></pre>