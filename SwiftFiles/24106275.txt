Why am I allowed to call instance methods on a class?
<p>After receiving help with <a href="http://stackoverflow.com/questions/24094018/unable-to-create-array-of-skactions">a question yesterday</a> I'm still not able to quite wrap my head around this, or why the following is allowed:</p> <pre><code>let string = NSString.hasPrefix("aString") </code></pre> <p>To me this looks like I'm simply calling a instance method straight from a Class. In the above example it doesn't particularly make sense, but it is obviously allowed as it both compiles without warnings and runs without any errors.</p> <p>Any help to eradicate this particular part of my (vast) ignorance in regards to Swift would be highly appreciated.</p> <hr> <p>Edit: Is this perhaps because there are nothing separating class and instance-methods in Swift and its a way to handle this discrepancy between Objective-C and Swift?</p>
<p>To me, it looks like instance methods are basically <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-XID_549" rel="nofollow">curried</a> class methods that take the instance as a first argument:</p> <pre><code>import Foundation let string = NSString(string:"foobar") string.hasPrefix("foo") // =&gt; true NSString.hasPrefix(string)("foo") // =&gt; true </code></pre> <p>So basically, writing <code>cls.method(instance)</code> seems to be the same as writing <code>instance.method</code> (note that methods are closures, you can assign them to variables and call those later):</p> <pre><code>let f1 = string.hasPrefix let f2 = NSString.hasPrefix(string) f1("f") // =&gt; true f1("foob") // =&gt; true f1("nope") // =&gt; false f2("f") // =&gt; true f2("foob") // =&gt; true f2("nope") // =&gt; false </code></pre> <p>Note: This is how it behaves and what I would find logical (and Python works similarly, for example). I don't know if this is actually true.</p>