Swift - Looping through array and add to UICollectionView
I have created a grid (4 x 5) to display 20 images from my assets. The grid is currently set up as a collectionView inside a collectionView, four rows each with five images per row. I am trying to fill the full grid with all the 20 images by looping through an array. The problem is that I can't assign the array to the full grid because there are four separate rows. How can I loop through my array and grid, and accordingly assign each image to the cell? If it can only be done by setting up a grid view as one collectionView, how would I do that. class Achievements: UICollectionViewController, UICollectionViewDelegateFlowLayout { private let cellId = "cellId" override func viewDidLoad() { super.viewDidLoad() collectionView?.backgroundColor = UIColor.white collectionView?.contentInset = UIEdgeInsets(top: 10, left: 0, bottom: 0, right: 0) collectionView?.register(AchievementCell.self, forCellWithReuseIdentifier: cellId) } override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell { let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellId, for: indexPath) as! AchievementCell return cell } override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return 4 } func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize { return CGSize(width: view.frame.width, height: 60) } } class AchievementCell: UICollectionViewCell, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout { override init(frame: CGRect) { super.init(frame: frame) setupViews() } required init?(coder adDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } let achievementCollectionView: UICollectionView = { let layout = UICollectionViewFlowLayout() let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout) collectionView.backgroundColor = UIColor.clear collectionView.translatesAutoresizingMaskIntoConstraints = false return collectionView }() private let cellId = "achievementIconId" func setupViews() { backgroundColor = UIColor.clear addSubview(achievementCollectionView) achievementCollectionView.dataSource = self achievementCollectionView.delegate = self achievementCollectionView.register(IconCell.self, forCellWithReuseIdentifier: cellId) addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "H:|-8-[v0]-8-|", options: NSLayoutFormatOptions(), metrics: nil, views: ["v0": achievementCollectionView])) addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "V:|[v0]|", options: NSLayoutFormatOptions(), metrics: nil, views: ["v0": achievementCollectionView])) } func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return 5 } func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell { return collectionView.dequeueReusableCell(withReuseIdentifier: cellId, for: indexPath as IndexPath) } func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize { return CGSize(width: 60, height: frame.height) } } This is my view for each cell. It's currently not working because an array.count would destroy my 4 x 5 setup. class IconCell: UICollectionViewCell { var imageArray: [UIImage] = [ UIImage(named: "Achievement01")!, UIImage(named: "Achievement02")!, UIImage(named: "Achievement03")!, UIImage(named: "Achievement04")!, UIImage(named: "Achievement05")!, UIImage(named: "Achievement06")!, UIImage(named: "Achievement07")!, UIImage(named: "Achievement08")!, UIImage(named: "Achievement09")!, UIImage(named: "Achievement10")!, UIImage(named: "Achievement11")!, UIImage(named: "Achievement12")!, UIImage(named: "Achievement13")!, UIImage(named: "Achievement14")!, UIImage(named: "Achievement15")!, UIImage(named: "Achievement16")!, UIImage(named: "Achievement17")!, UIImage(named: "Achievement18")!, UIImage(named: "Achievement19")!, UIImage(named: "Achievement20")!, ] override init(frame: CGRect) { super.init(frame: frame) setupViews() } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } let imageView: UIImageView = { let iv = UIImageView() iv.contentMode = .scaleAspectFill iv.layer.masksToBounds = true return iv }() func setupViews() { addSubview(imageView) imageView.frame = CGRect(x: 0, y: 0, width: frame.width, height: frame.width) } }
I was able to find the solution. It was quite easy to be honest. class Achievements: UICollectionViewController, UICollectionViewDelegateFlowLayout { private let cellId = "cellId" var imageArray: [UIImage] = [ UIImage(named: "Achievement01")!, UIImage(named: "Achievement02")!, UIImage(named: "Achievement03")!, UIImage(named: "Achievement04")!, UIImage(named: "Achievement05")!, UIImage(named: "Achievement06")!, UIImage(named: "Achievement07")!, UIImage(named: "Achievement08")!, UIImage(named: "Achievement09")!, UIImage(named: "Achievement10")!, UIImage(named: "Achievement11")!, UIImage(named: "Achievement12")!, UIImage(named: "Achievement13")!, UIImage(named: "Achievement14")!, UIImage(named: "Achievement15")!, UIImage(named: "Achievement16")!, UIImage(named: "Achievement17")!, UIImage(named: "Achievement18")!, UIImage(named: "Achievement19")!, UIImage(named: "Achievement20")!, ] override func viewDidLoad() { super.viewDidLoad() collectionView?.backgroundColor = UIColor.white collectionView?.contentInset = UIEdgeInsets(top: 10, left: 0, bottom: 0, right: 0) collectionView?.register(IconCell.self, forCellWithReuseIdentifier: cellId) } override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell { let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellId, for: indexPath) as! IconCell cell.imageView.image = imageArray[indexPath.row] return cell } func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int { return 1 } override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return imageArray.count } func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize { return CGSize(width: 60, height: 60) } } // Create achievement icon class IconCell: UICollectionViewCell { override init(frame: CGRect) { super.init(frame: frame) setupViews() } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } let imageView: UIImageView = { let iv = UIImageView() iv.contentMode = .scaleAspectFill iv.layer.masksToBounds = true return iv }() func setupViews() { addSubview(imageView) imageView.frame = CGRect(x: 0, y: 0, width: frame.width, height: frame.width) } }