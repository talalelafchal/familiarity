Building pure Swift Cocoa Touch Framework
<p>I'm exploring Swift with Xcode-6 and so far so good although I think the new collections need a little bit of work as I've managed to break the compiler a few times.</p> <p>Problem is I'm now stuck trying to create the framework package to <em><strong>then use in another project</strong></em>. The project builds without issue and all tests pass successfully. When I go to create Archive (which I assume is what is required) I receive the error:</p> <blockquote> <p>:0: error: underlying Objective-C module 'Sample' not found</p> </blockquote> <p>Now I assume this has something to do with the contents of my Sample.h which tells me </p> <pre><code>// In this header, you should import all the public headers of your framework using statements like #import &lt;Sample/PublicHeader.h&gt; </code></pre> <p>which is fine except I have only used swift enums, structs and classes for this framework so therefore no .h files exist.</p> <p>Can anyone shed some light on this one as I can't find any documentation available yet?</p>
<p>I sat down with an engineer and asked this exact question. This was their response:</p> <p>Xcode 6 does not support building distributable Swift frameworks at this time and that Apple likely won't build this functionality into Xcode until its advantageous for them to do so. Right now, Frameworks are meant to be embedded in your app's project, rather than distributed. If you watch any of the session videos or see the sample projects, this is always the arrangement. <a href="https://developer.apple.com/swift/blog/?id=2">Another reason is that Swift is very new and likely to change. Thus your Swift-based framework is not guaranteed to work on the platform you originally built it on.</a></p> <p><strong>Slight Update</strong></p> <p>The engineer mentioned that it's not impossible to make a framework for distribution, just that it's not supported.</p>
<p>I think it's a bug in XCode 6, or that Apple does not allow archiving the Framework from XCode while in beta. </p> <p>If you compile to profile XCode generates the framework correctly. (See the Release folder created in DerivedData)</p>
<p>I was able to get past the error by going to the target for the framework and on the Build Phases tab under Headers, remove the MyFramework.h file</p> <p>However I was getting the "Underlying Objective-C module not found" error when I was using a framework to share code between a containing app and an app extension, both of which were pure Swift.</p> <p><img src="https://i.stack.imgur.com/owd5S.png" alt="Image showing MyFramework.h for the MyFramework target on the Build Phases tab under Headers"></p>
<p>You might find this useful: <a href="http://railsware.com/blog/2014/06/26/creation-of-pure-swift-module" rel="nofollow">Creation of pure swift module</a></p> <p>In short: it's possible to make static framework, but there is one issue: it doesn't work in end user' project if "ProjectName-Swift.h" header included.</p> <p>But, it works fine if you use only swift.</p>
<p>Assuming you are creating a truly pure Swift module, you must disable the Objective-C Compatibility Header and any generated interface headers so the compiler doesn't go off assuming it can find an Objective-C module for the framework. <img src="https://i.stack.imgur.com/LkVnX.png" alt="enter image description here"></p> <p><strong>Do Not</strong> remove your public framework header. You'll get a module-map warning at link time if you do.</p>