UIImagePickerControllerDelegate to Swift?
<pre><code> if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.Camera) { var imagePicker = UIImagePickerController() imagePicker.delegate = self imagePicker.sourceType = UIImagePickerControllerSourceType.Camera; //imagePicker.mediaTypes = kUTTypeImage imagePicker.allowsEditing = false self.presentViewController(imagePicker, animated: true, completion: nil) } </code></pre> <p>I can't seem to convert to kUTTypeImage to swift, if I comment out this line the camera launches, but the screen is black. Any ideas? This is the objective C syntax:</p> <pre><code>imagePicker.mediaTypes = @[(NSString *) kUTTypeImage]; </code></pre>
<p>Apparently it was this simple:</p> <pre><code>if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.Camera) { var imagePicker = UIImagePickerController() imagePicker.delegate = self imagePicker.sourceType = UIImagePickerControllerSourceType.Camera; imagePicker.mediaTypes = [kUTTypeImage] imagePicker.allowsEditing = false self.presentViewController(imagePicker, animated: true, completion: nil) } </code></pre>
<p>I have tested those codes in XCode6 beta5, and found the following error:</p> <blockquote> <p>fatal error: array element cannot be bridged to Objective-C</p> <p>Thread 1:EXC_BREAKPOINT(code=EXC_ARM_BREAKPOINT, subcode-0xe7ffdefe)</p> </blockquote> <p>The reason is that we can't assign an array with objects to <em>imagePicker.mediaTypes</em> like this in XCode6 beta5:</p> <pre><code>imagePicker.mediaTypes = [kUTTypeImage] </code></pre> <p>I initialized the array with object through the init function, and it works fine now↓↓↓</p> <pre><code>imagePicker.mediaTypes = NSArray(object: kUTTypeImage) </code></pre>
<p>To define <code>kUTTypeMovie</code> you could use:</p> <pre><code>imagePicker.mediaTypes = [String(kUTTypeMovie)] </code></pre>
<p>To add both movie and image, you could do this.</p> <pre><code>let availableMediaTypes = UIImagePickerController.availableMediaTypesForSourceType(.Camera) self.imagePickercontroller.mediaTypes = availableMediaTypes! </code></pre> <p>You would notice you could either navigate to a video or capture image button when the imagePickercontroller has been presented. Following that just check the type of mediatype in the delegate method "didFinishPickingMediaWithInfo"</p>