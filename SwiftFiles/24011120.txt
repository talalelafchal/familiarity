How can I use swift in Terminal?
<p>I read <a href="https://developer.apple.com/xcode/">What's new in Xcode 6</a>. The article introduces some new feature about Xcode 6, and it says:</p> <blockquote> <p>Command Line</p> <p>Xcode’s debugger includes an interactive version of the Swift language, known as the REPL (Read-Eval-Print-Loop). Use Swift syntax to evaluate and interact with your running app or write new code in a script-like environment. The REPL is available from within LLDB in Xcode’s console, or from Terminal.</p> </blockquote> <p>I want to know how to get the REPL?</p>
<pre><code>sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer </code></pre> <p>then you can do one of these: </p> <pre><code>xcrun swift lldb --repl </code></pre> <p>As of Xcode 6.1 - typing <code>swift</code> in the terminal launches the REPL as well.</p>
<p>Alternatively, if you don't want to mess up your current dev environment, you can just run:</p> <pre><code>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift </code></pre>
<p>** update as of xcode6 beta 4 **</p> <p>this can also be done on xcode preferences. simply go to xcode -> preferences -> locations. </p> <p>for command line tools simply select the version you want from drop down list options, refer picture below. (swift requires path to be xcode6's path). </p> <p><img src="https://i.stack.imgur.com/PaeBr.png" alt="command line tools screen"></p> <p>I will leave my previous answer below as well. </p> <hr> <p>what Kaan said and you can also use an apple script to make simple application so you can use it to switch back and forth.</p> <p>open apple script > paste this below code &amp; export it as an application so with just one click you can switch to default path or beta path (to use swift)</p> <pre><code>set xcode6Path to "xcode-select -switch /Applications/Xcode6-Beta.app/Contents/Developer" set xcodeDefaultPath to "xcode-select -switch /Applications/Xcode.app/Contents/Developer" display dialog "set xcode sdk path to " buttons {"xcode 6", "default"} default button 1 copy result as list to {buttonPressed} if buttonPressed is "default" then try do shell script xcodeDefaultPath with administrator privileges end try else try do shell script xcode6Path with administrator privileges end try end if </code></pre> <p>then run > <code>xcrun swift</code> </p> <p><strong>disclaimer</strong></p> <ol> <li>the script assumes you have both xcode6-beta &amp; xcode5 installed. </li> <li>if you're a new developer who's trying out <strong>only</strong> xcode6beta you will not need any script or setting path manually. simply run <code>xcrun swift</code> as the path is already set for you. </li> <li>when xcode6 is finally released you will need to reset your path back to <strong>default</strong> from this simple app and never use it again. </li> </ol>
<p>In the same fashion as running Swift from the Terminal, you can also execute scripts. Just use the following shebang, and run your script. (<a href="https://twitter.com/clattner_llvm/status/474593140511211520">As per Chris Lattner</a>, creator of Swift)</p> <pre><code>#!/usr/bin/env xcrun swift -i </code></pre>
<p>The xcrun command will use the DEVELOPER_DIR environment variable to override the currently selected Xcode installation (as set with xcode-select). You can use that to construct a single command that'll run swift on the command line and put you in the REPL. That looks like this:</p> <pre><code>/usr/bin/env DEVELOPER_DIR=/Applications/Xcode6-Beta.app/Contents/Developer xcrun swift </code></pre> <p>and you can alias that to just 'swift':</p> <pre><code>alias swift="/usr/bin/env DEVELOPER_DIR=/Applications/Xcode6-Beta.app/Contents/Developer xcrun swift" </code></pre> <p>As an interesting side note, you can use the same kind of invocation to run a swift script just like you'd use bash or python by adding a -i:</p> <pre><code>#!/usr/bin/env DEVELOPER_DIR=/Applications/Xcode6-Beta.app/Contents/Developer xcrun swift -i println("Hello World!") </code></pre> <p>Of course, once Xcode 6 is released officially and you switch to that as your default developer tools, you can drop the DEVELOPER_DIR=.. bits and just use "xcrun swift".</p>
<p>Step 1: Open Terminal<br> Step 2: Type "swift"<br> Step 3: There's no step 3 </p> <p>Example:</p> <pre><code>GoldCoast:~ macmark$ swift Welcome to Swift! Type :help for assistance. 1&gt; println("Hello, world") Hello, world 2&gt; var myVariable = 42 myVariable: Int = 42 3&gt; myVariable = 50 4&gt; let myConstant = 42 myConstant: Int = 42 5&gt; println(myVariable) 50 6&gt; let label = "The width is " label: String = "The width is " 7&gt; let width = 94 width: Int = 94 8&gt; let widthLabel = label + String(width) widthLabel: String = "The width is 94" 9&gt; :exit GoldCoast:~ macmark$ </code></pre>
<p>open Terminal,</p> <p>$<code>sudo xcode-select -switch /Applications/Xcode6-Beta6.app/Contents/Developer</code></p> <p><strong>Notice:</strong> The <code>Xcode6-Beta6.app</code> should be replaced to appropriate version you installed</p> <p>Then put this line <code>alias swift='xcrun swift'</code> to <code>~/.bash_profile</code></p> <p>And,</p> <p>$<code>source ~/.bash_profile</code></p> <p>$<code>swift</code></p> <p>There you go!</p>
<p>For XCode6, run these commands:</p> <pre><code>$ sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/ $ xcrun swift </code></pre> <p>If you get an error:</p> <pre><code>&lt;unknown&gt;:0: error: the SDK 'MacOSX10.9.sdk' does not support Swift </code></pre> <p>try:</p> <pre><code>xcrun swift -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk </code></pre>
<p>make sure you install <strong>xcode 6.0</strong> ,but not <strong>6.1</strong></p> <p>If you get an error:</p> <pre><code>&lt;unknown&gt;:0: error: the SDK 'MacOSX10.9.sdk' does not support Swift </code></pre> <p>just run </p> <pre><code>xcrun --sdk iphonesimulator8.0 swift </code></pre> <p>or you can </p> <pre><code>export SDKROOT="iphonesimulator8.0" </code></pre> <p>and then</p> <pre><code>xcrun swift </code></pre> <p>Use "<code>xcodebuild -showsdks</code>" to list the available SDK names.</p> <p>if you install <strong>xcode 6.1</strong>,just</p> <pre><code>sudo xcode-select -s /Applications/*your-Xcode-6.1-path.app*/Contents/Developer xcrun swift </code></pre>
<p>After installing the official Xcode 6.1 release, there is a <code>swift</code> command in <code>/usr/bin/swift</code>.</p>
<p>In Xcode 6.1.1 with Command Line Tools installed you can execute scripts by referencing directly to <code>/usr/bin/swift</code> the following way:</p> <pre><code>#!/usr/bin/swift let variable: String = "string" print("Test \(variable)") </code></pre>
<p>If any one cares a simple Swift script shebang:</p> <pre><code>#!/usr/bin/env xcrun --sdk macosx swift </code></pre> <hr> <p>If specific target version is required</p> <pre><code>#!/usr/bin/env xcrun --sdk macosx swift -target x86_64-macosx10.11 </code></pre> <hr> <p>If specific toolchain is required (like you want to use Swift 2.3 but you are using Xcode 8)</p> <pre><code>#!/usr/bin/env xcrun --toolchain com.apple.dt.toolchain.Swift_2_3 --sdk macosx swift -target x86_64-macosx10.11 </code></pre> <hr> <p>If you want to use Swift 2.2 in your Xcode 7.3.1, let's assume Xcode 7.3.1 is located at <code>/Applications/Xcode7.app</code></p> <pre><code>sudo xcode-select -s /Applications/Xcode7.app/ xcrun --sdk macosx swift </code></pre> <p>from now on the default active developer directory changed, you can check that using:</p> <pre><code>xcode-select -p </code></pre> <hr> <p>If you want to use snapshots provided by <a href="https://swift.org/download" rel="nofollow">Swift.org</a>, you should not miss <a href="https://swift.org/download/#using-downloads" rel="nofollow">Installation here</a>.</p> <hr> <p>as first answered by me in <a href="http://stackoverflow.com/questions/30981724/run-swift-script-from-xcode-ios-project-as-build-phase/36248410#36248410">Run swift script from Xcode iOS project as build phase</a></p>