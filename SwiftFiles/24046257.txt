Swift Optionals
<p>Can someone please explain me the following code (appears on page 11 of Apple's Swift book):</p> <pre><code>var optionalString: String? = "Hello" optionalString = nil var optionalName: String? = "Einav Sitton" var greeting = "HELLO!" if let name = optionalName { greeting = "Hello, \(name)" } </code></pre>
<p>Are you talking about this line?</p> <pre><code>if let name = optionalName { greeting = "Hello, \(name)" } </code></pre> <p>In english, this says: If <code>optionalName</code> has a value, set that value to the temporary variable <code>name</code> and then use it to construct a new string. If <code>optionalName</code> is <code>nil</code> do nothing at all.</p>
<p>Swift requires types that can be optional to be explicitly declared, so the first snippet is an example of creating a nullable string:</p> <pre><code>var optionalString: String? = "Hello" optionalString = nil </code></pre> <p>In order to make use of a nullable string it needs to realized which it does with the <code>!</code> suffix so to convert a <code>String?</code> into a <code>String</code> you can do:</p> <pre><code>var name : String = optionalName! </code></pre> <p>But Swift also provides a shorthand of checking for and realizing a nullable inside a conditional block, e.g:</p> <pre><code>if let name = optionalName { greeting = "Hello, \(name)" } </code></pre> <p>Which is the same as:</p> <pre><code>if optionalName != nil { let name = optionalName! greeting = "Hello, \(name)" } </code></pre>