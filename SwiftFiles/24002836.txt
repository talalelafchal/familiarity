dyld: Library not loaded: @rpath/libswift_stdlib_core.dylib
<p>I get this error after adding a Swift class to an old Xcode project.</p> <p><code>dyld: Library not loaded: @rpath/libswift_stdlib_core.dylib</code></p> <p>How can I make the project run again?</p>
<p>A simple restart of Xcode solved the issue for me.</p>
<p>I'm not really sure why this question is being downvoted, I had this problem as well when I first tried to use Swift with an existing project. An Xcode restart also fixed this for me.</p>
<p>I had this issue using an Ad Hoc (or enterprise) mobileprovision with a production certificate. Switching to a development certificate and mobileprovision solved the issue.</p>
<p>This error can occur if something went wrong during the conversion of an Objective-C project to start using Swift. The issue is that the Linker build settings never got configured properly, so you'll have to do it by hand. Look for the Runpath Search Paths build setting and set it to:</p> <pre><code>$(inherited) @executable_path/Frameworks </code></pre> <p><img src="https://i.stack.imgur.com/d6l8O.png" alt="enter image description here"></p> <p><strong>EDIT:</strong> I should also add that there has been recent spate of these errors caused by something else entirely - Apple made a change in Swift itself, starting in perhaps Xcode 6.1 or 6.1.1. The only solution seems to be to quit Xcode, destroy your certificates in Keychain Access, go to the Member Center and delete all certificates and profiles (except the profiles for apps in the Store - you can't delete them), and then start the entire certificate request process from scratch.</p>
<p>For me none of the previous solutions worked. We discovered that there is an <strong>"Embedded Content Contains Swift Code"</strong> flag in the Build Settings that needs to be set to YES. It was NO by default!</p>
<p>For developers who have had this issue with a Adhoc/Enterprise distribution builds, </p> <blockquote> <p>Create the production certificate from dev portal and then regenerate the distribution profile. Download and install both of them on your Mac. Ensure you selected the right profile in your Xcode build settings and rebuild your app.</p> </blockquote> <p>Source: <a href="https://devforums.apple.com/message/1022908#1022908">https://devforums.apple.com/message/1022908#1022908</a></p>
<p>This showed up when I added a new Today extension target with Swift language to an old project. <strong>Fixed easily by updating the project to recommended settings.</strong> Xcode 6.0.1</p>
<p>My project is a Swift project with some Objective-C classes. I had the same problem when signed with old inHouse (enterprise) certificate.</p> <p>The following steps fixed this for me.</p> <ol> <li>Create and use a new certificate and mobile provision.<br> (Ref. <a href="https://www.airsignapp.com/ios-apps-using-swift-crash-when-signed-with-inhouse-certificate/" rel="nofollow">AIRSIGN’s blog</a>)</li> <li>Set <code>Runpath Search Paths</code> build setting to: <code>$(inherited) @executable_path/Frameworks</code>.<br> (Ref. <a href="http://stackoverflow.com/a/25247890/1260976">matt’s answer</a>)</li> </ol>
<p>I searched long on this issue. There are several reasons causes this issue. </p> <p>If you are facing when you and Swift code/library in an Objectice C project you should try Solution 1-2-3</p> <p>If you are facing this issue with a new a Swift project Solution 4 will fit you best. </p> <h3>Solution 1:</h3> <p>Restart Xcode, then computer and iPhone</p> <h3>Solution 2:</h3> <p>Go to project build settings and set <code>Embedded Content Contains Swift Code</code> flag to <code>YES</code></p> <h3>Solution 3:</h3> <p>Go to project build settings and add <code>@executable_path/Frameworks</code> to <code>Runpath Search Paths</code> option</p> <h3>Solution 4:</h3> <p>If none of above works, this should. Apple seems to be ninja patched certificates as mentioned in <a href="https://www.airsignapp.com/ios-apps-using-swift-crash-when-signed-with-inhouse-certificate/">AirSign's post</a> </p> <p>At InHouse certificates </p> <p><code>Subject: UID=269J2W3P2L, CN=iPhone Distribution: Company Name, O=Company Name, C=FR</code></p> <p>they added a new field named <strong>OU</strong></p> <p><code>Subject: UID=269J2W3P2L, CN=iPhone Distribution: Company Name, OU=269J2W3P2L, O=Company Name, C=FR</code></p> <p>so you should just recreate <strong>certificate and provision</strong></p>
<p><strong>Solution 5:</strong></p> <p>In my case, all solutions mentioned in the answer of <strong><em>accfews</em></strong> were very helpful but none has worked. I solved my problem by adding my swift library in the section "Embedded Binaries" in the "General" section of my Project's target. Perhaps is this due to the fact that I have included my swift framework in my workspace? Whatever it compiles now! Get ready Swift, I'm here!</p>
<p><strong>Solution 6:</strong></p> <p>In our case, the Enterprise Distribution Certificate had been revoked. Generating a new certificate and updating the provisioning profile fixed the issue.</p> <p>(There seems to be many different causes for this error. Hope this helps someone.)</p>
<p>In my case I was trying to import a custom framework and was getting the similar error. Turns out I had to import the framework in the Embedded Binaries rather than in to the Linked Frameworks and Libraries.</p> <p>Embedded Binaries are under Projects Settings -> -> General</p>
<p>I tried all the answers given above, nothing worked.</p> <p>Finally worked after updating to Yosemite</p>
<p><strong>Upgrade to Latest Version of OS X (Yosemite)</strong></p> <p>After hours of trial &amp; error I came to the resolution of this problem. <em>- If this applies to your case of course.</em></p> <p>I had the same problem until I upgraded my Mac OS X from Mavericks to Yosemite. <em>- It fixed my problem, hope it fixes yours as well</em> </p>
<p>I got the same issue using Mavericks, Xcode 6.1.1, testing on an iPhone5 with iOS 8.1.1. I tried all possible solution including new certificates and provisioning profiles, but nothing helped. I did the changes to <code>Embedded Content Contains Swift Code</code> and <code>Runpath Search Paths</code> both on Project level and Target level. </p> <p>I have now installed Yosemite, and without any further changes, it started to work. </p>
<p>I had an Obj-C project where I started adding swift source files. The following fixed the issue for me:</p> <ol> <li>Linking: <code>RUNPATH SEARCH PATHS = $(inherited) @executable_path/Frameworks</code></li> <li>Swift Compiler - Code Generation: <code>EMBEDDED CONTENT CONTAINS SWIFT = YES</code></li> </ol> <p>I just created a new project from the templates Xcode 6.3 and compared the project settings with my old original project.</p>
<p>I have faced the same issue, setting the right code sign identity solved the problem(Build settings->Code Signing Identity).</p> <p>As per <a href="https://developer.apple.com/library/ios/qa/qa1886/_index.html" rel="nofollow">Apple technical question</a> "All Enterprise and standard iOS developer certificates that are created after iOS 8 was released have the new Team ID field in the proper place to allow Swift language apps to run"</p>
<p>Same issue here, for me it was Crashlytics/Fabric/Beta/Twitter/Whatever-they-call-themselves uploading a binary that was missing the embedded frameworks. If I made an archive and then exported an Enterprise build in the standard way, they worked a charm.</p>
<p>I tried all the solutions that found on web, including to Apple and new certificates. Without success.</p> <p>The only way I could run xcode, after 6 months of trying, was creating a new account on my macbook.</p>
<p>Usually this error will disappear if you add this library to the "Copy Files" segment in your Build Phases.</p>
<p>My environment: Cocos2d 2.0, Box2d, Objective C</p> <p>In addition to doing the other answers above I finally went to the General tab and made WatchKit Optional.</p> <p><a href="https://i.stack.imgur.com/J2TOW.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/J2TOW.png" alt="Targets:General:Linked Frameworks and Libraries: WatchKit.framework: Optional"></a></p>
<p>After months and months trying everything here... Definition of insanity... starting Xcode under a new Mac user solved it for me. </p> <p>I removed ~/Library/Developer/* and reinstalled Xcode- so no clue what else to format to make it work.</p>
<p>Recently started getting this error again. While the top 2 answers solved it for me in the past, none of the suggested answers worked this time. I noticed the error said:</p> <pre><code> Reason: no suitable image found. Did find: /private/var/mobile/Containers/Bundle/Application/8D8E5347-940A-4724-ACFE-33DF4C4DCB37/your.app/Frameworks/libswiftCore.dylib: mmap() errno=1 validating first page of '/private/var/mobile/Containers/Bundle/Application/8D8E5347-940A-4724-ACFE-33DF4C4DCB37/your.app/Frameworks/libswiftCore.dylib' </code></pre> <p>So I tried deleting the app from device, and I was able to build and run again.</p>
<p>And if all of the above doesn't help you and you really get frustrated... Try the best trick of all: <code>Clean</code> and just to be sure also <code>Clean Build Folder</code>. :) Hope it helps somebody!</p>
<p>If you add the three frameworks via Embedded Binaries, they will be added to Linked Frameworks and Libraries also. Delete the three entries in <strong>Linked Frameworks and Libraries</strong> will solve the problem.</p> <blockquote> <p>Magic methods such as relaunch Xcode and restart the Mac doesn't work on me.</p> </blockquote>
<pre><code> I had the same issue.The project runs on device on iOS 8.0 or below. (ex. iOS 7.1.1) but gets crash on iOS 8.0 and above. Solution 1: Restart Xcode, then computer and iPhone Solution 2: Go to project build settings and set Embedded Content Contains Swift Code flag to YES Solution 3: Go to project build settings and add @executable_path/Frameworks to Runpath Search Paths option Solution 4: If none of above works, this should. Apple seems to be ninja patched certificates as mentioned in AirSign's post. At InHouse certificates: Subject: UID=269J2W3P2L, CN=iPhone Distribution: Company Name, O=Company Name, C=FR they added a new field named OU Subject: UID=269J2W3P2L, CN=iPhone Distribution: Company Name, OU=269J2W3P2L, O=Company Name, C=FR so you should just recreate certificate and provision. Solution 5: Remove unnecessary image references from storyboard imageViews and Classes. Clean project and build again. Solution 6: Its most likely because of compatibility issues. I have updated Mac OS X and Xcode to 7.2 and re-installed all certificates. Now the issue is solved temporarily. </code></pre>
<p>Adding Framework as "Embedded Binary" instead of just "Linked Frameworks and Libraries" - Fixed my issue.</p> <p>I also set Embedded Content Contains Swift Code flag to YES. </p>
<p>None of these solutions seemed to be consistently working for me; after every couple of successful runs, it would fail again. The "Embedded Content Contains Swift Code" flag was always set to YES for me.</p> <p>Turns out I'd set Xcode to be 6.3-compatible. Changing it back to be 3.2-compatible solved it:</p> <p><img src="https://i.stack.imgur.com/1hGxh.png" width="320"></p>
<p>For me, the issue was due to the fact that my Apple Worldwide Developer Relations Certification Authority was invalid. </p> <p>Download it from here: <a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer" rel="nofollow">https://developer.apple.com/certificationauthority/AppleWWDRCA.cer</a></p> <p>Drag and drop it into Keychain Access, clean the project, and run. </p>
<p>I added <a href="https://github.com/dogo/SCLAlertView" rel="nofollow">SCLAlertView</a> pod in my project and later removed it. I did not remove <code>import SCLAlertView</code> from my viewcontroller. Ideally it should give a compile time error, but it gave a run time error mentioning <code>dyld: Library not loaded: @rpath/SCLAlertView.framework</code>. I removed <code>import SCLAlertView</code> from my viewcontroller, build it and it did not give the error. So in my case I was trying to <code>import</code> a library whose framework was not found. Removing such references will resolve your issue.</p>
<p>Try to hold Alt, then go to Product -> Clean Build Folder...</p> <p>Hope it will help someone..</p>
<p>I got the same problem. My solution is to move every <code>pod</code> declaration inside the <code>target</code> clause.</p> <p>From: </p> <pre><code>pod 'SomePod1' pod 'SomePod2' pod 'SomePod3' target 'MyAwesomeApp', :exclusive =&gt; true do end </code></pre> <p>To: </p> <pre><code>target 'MyAwesomeApp', :exclusive =&gt; true do pod 'SomePod1' pod 'SomePod2' pod 'SomePod3' end </code></pre> <p>My guess is that if the pod declarations are put outside the target declaration, CocoaPods(0.39.0) might use the wrong xcconfig. </p> <p>Pods.debug.xcconfig (X</p> <p>Pods-MyAwesomeApp.debug.xcconfig (O</p>
<p>The reasons for this occurring are many. Having just spent a fun weekend finding yet another issue that causes this (the order of code signing), I wanted to create a summary answer that brings all the possible solutions together:</p> <ol> <li><strong>Add <em>Embedded Content Contains Swift Code</em> to project.</strong> You need to set this flag if your app contains Swift code.</li> <li><strong>Clean project</strong>. In addition to a <em>Project > Clean</em> you can also delete the <code>DerivedData</code> and <code>Build</code> directories. Look under the <em>Preferences</em> for the location of <code>DerivedData</code>. <code>Build</code> should be in your project folder.</li> <li><strong>Ensure <em>Runpath Search Paths</em> contains <code>@executable_path/Frameworks</code></strong>. </li> <li><strong>Ensure that your certificate contains your Apple Team ID in the OU (Organization Unit) field</strong> Apple will add this for you, just revoke your existing distribution certificate and create a new one, download, install on KeyChain, regenerate all provisioning profiles, download those and rebuild.</li> <li><strong>Xcode restart.</strong> If everything is basically good, but Xcode hasn't gotten there yet.</li> </ol> <p>That's the easy stuff. If you are doing your own command line build you may be creating your own <code>.ipa</code> files to upload. In that case you need to ensure the following:</p> <ol> <li><strong>Make sure the version of the Swift files in <code>SwiftSupport/iphoneos</code> is the same as the version in <code>Contents/YourApp.app/Frameworks</code></strong> Because Swift is not yet binary compatible between version, you must ensure these versions are the one that you built your app with. You can find these libraries under <code>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos</code>.</li> <li><strong>Sign the libraries and frameworks <em>first</em></strong>. You need to <code>codesign</code> the libraries and framework files (under <code>Frameworks</code> in the <code>.app</code> folder) first and then sign the entire <code>.app</code> tree. The <code>.app</code> tree must be signed with an <code>entitlements.plist</code> but <em>not</em> the frameworks.</li> </ol> <p>Hopefully when Swift 3.0 comes out and we no longer need to bundle Swift with our apps this whole issue will go away.</p>
<p>With reference to <a href="https://forums.developer.apple.com/thread/21292" rel="nofollow">https://forums.developer.apple.com/thread/21292</a></p> <p><strong>This solution worked for me :</strong> </p> <blockquote> <p>It occurred on my side when building an app in the command line via xcodebuild and xcrun PackageApplication, signing the app with an enterprise profile. On our CI build servers, the certificate was set to "Always Trust" in the keychain (select certificate -> Get Info -> Trust -> "Use System Default" can be changed to "Always Trust"). I had to set it back to "Use System Default" in order to make this work. Initially we set this to "Always Trust" to work-around the keychain dialogs that appear after software updates and certificate updates.</p> </blockquote>
<p>I've had this problem as well, only it wasn't locating <code>libswiftXCTest.dylib</code>. </p> <p>The solution was to add <code>XCTest.framework</code> to the Tests target, in <code>Build Phases/Link Binary with Library</code>. I was getting this error even when I was trying to build the main target.</p>