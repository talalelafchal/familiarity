sort NSDictionary values by key alphabetical order
<p>I can get an array of dictionary keys sorted by values, but how to I get an array of values sorted by dictionary keys? I've been looking everywhere with no luck. Any help appreciated.</p>
<p>This might work:</p> <pre><code>NSArray * sortedKeys = [[dict allKeys] sortedArrayUsingSelector: @selector(caseInsensitiveCompare:)]; NSArray * objects = [dict objectsForKeys: sortedKeys notFoundMarker: [NSNull null]]; </code></pre> <hr> <p><em>or in Swift</em></p> <pre><code>let objects = sorted(dict.keys).map() { dict[$0]! } </code></pre>
<p>One way is to construct the array of sorted dictionary keys, then create another array of the values based on the array of keys:</p> <pre><code>//Construct array of sorted keys NSArray keyarray = ... //etc NSMutableArray valuearray = [[NSMutableArray alloc] init]; for (id key in keyarray) { [valuearray addObject:[dict objectForKey:key]]; } </code></pre>
<p>My experience shows that sorting <code>NSDictionary</code> by keys is not much useful. Although after <code>logging</code> the <code>NSDictionary</code> they seem to be sorted, when needed to put them in a tableview they are not in order any more.</p> <p>I suggest storing the keys in an <code>NSArray</code> property and then query the <code>NSDictionary</code> objects according to the order of the keys in the <code>NSArray</code>.</p>
<p>I created a category on NSDictionary to get this accomplished:</p> <pre><code>@implementation NSDictionary (Extra) -(NSArray *) sortedKeys { return [[self allKeys] sortedArrayUsingSelector:@selector(compare:)]; } -(NSArray *) allValuesSortedByKey { return [self objectsForKeys:self.sortedKeys notFoundMarker:[NSNull null]]; } -(id) firstKey { return [self.sortedKeys firstObject]; } -(id) firstValue { return [self valueForKey: [self firstKey]]; } @end </code></pre>