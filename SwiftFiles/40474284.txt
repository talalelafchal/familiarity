Why are SKSpriteNodes only partially rendering?
I've coded a basic layout of "cards" for level selection in a game using Swift and SpriteKit. It's basically just 6 level selection cards side by side that have a picture of the level that the user can select. To create them I am running a for-loop and placing the first one in the center of the screen, a padding, then the second one, then padding etc. Each card is an SKSpriteNode from a png image. Each card is approx a 3rd of the device wide and about a 3rd of the devices height. I create all six of them and then created an action that moves all 6 cards left or right to select which on the player would like. The one in the center is the one that is selected. Everything works great on iphone simulators (tested on iPhone 6, iPhone 6 plus, iPhone 7 Plus and iPhone 5... all work great). On iPad simulators the first and last card have a portion of the image that doesn't render at all. The first card has about 1/4 of it lost on the left side, the last card has about 1/4 or it lost on the far right side. I tried running it on a physical iPad as well and it has the same issue. When I run it on an iPad Pro 12.7 it gets worse... it cuts off more of the image. If I choose only to display 5 of the 6 cards they all render great. If I choose to shrink them down to about 1/4 of the device width and 1/4 of the device height and lessen the padding they render fine. I tried playing with the Scene and View sizes and scales and didn't have any improvement. I've tried using different images and there is no changes at all. I've double checked all zPositions and found no improvement. I've tried systematically removing all other objects in the scene and still have the problem. I've put them on their own "layer" which is an SKEffectNode named cardNode. (it's an SKEffectNode because I choose to later blur it when an alert screen comes up in front of it). I thought that putting them onto their own layer might help but it didn't. I've put physics bodies on the cards just to make sure that they are still "there" and the physics bodies appear in the correct places. If I click on part of the node that isn't rendered it still does behave properly as though it was still rendered in that area. I can't figure out where to go from here to fix this. Ideally I would like to add more cards yet in the future but getting stuck on this problem. Here is the code that I have for creating the cards. let cardNode = SKEffectNode() let levelCardArray: [String] = [ "BlackBoxLevelCard.png" ,"FruitLevelCard.png" ,"SportsLevelCard.png" ,"BarnLevelCard.png" ,"SeaLevelCard.png" ,"SpaceLevelCard.png" ] let screenWidth = UIScreen.main.bounds.width let screenHeight = UIScreen.main.bounds.height let w10 = screenWidth * 0.10 let w40 = screenWidth * 0.40 let w50 = screenWidth * 0.50 let w60 = screenWidth * 0.60 let h50 = screenHeight * 0.50 let cardMargin = w10 let cardSize = CGSize(width: w40, height: w60) let startPosition = CGPoint(x: w50, y: h50) override func didMove(to view: SKView) { let scene = levelSelectionScene(size: view.bounds.size) scene.backgroundColor = UIColor.black let skView = view as SKView skView.ignoresSiblingOrder = true cardNode.zPosition = 100 self.addChild(cardNode) for i in 1...levelCardArray.count { let currentArrayValue = i - 1 let cardSprite = SKSpriteNode(imageNamed: levelCardArray[currentArrayValue]) cardSprite.size = cardSize cardSprite.position = CGPoint(x: startPosition.x + (CGFloat(currentArrayValue) * (cardSize.width + cardMargin)), y: startPosition.y) cardSprite.zPosition = cardNode.zPosition cardSprite.name = "levelCardObject" cardNode.addChild(cardSprite) } Any help or insight would be greatly appreciated. Thanks guys!
I tried all day today to try to find a way to make this work through resizing the scenes and views and haven't had any luck with it at all. My solution is to check for the device type and if it's an iPad I am reducing the image sizes and buffer between images until it doesn't cut them off. I don't consider this a very good solution, really just a work around until I can find a better way to do it. Thank you guys for your thoughts though. I definitely appreciate it!