Validating the email address in UITextField
<p>I am trying to put validation in text field containing email address.<br>What is to be added in string "emailRegEx" to limit the user from inserting three dots in email address or what I have to write in method for same.</p> <pre><code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string. </code></pre> <p>Here is my code: </p> <pre><code>- (BOOL)EmailValidationL:(NSString *)email { NSString *emailRegEx =@"(?:[a-z0-9!#$%\\&amp;'*+/=?\\^_`{|}~-]+(?:\\.[a-z0-9!#$%\\&amp;'*+/=?\\^_`{|}" @"~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\" @"x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-" @"z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5" @"]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-" @"9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21" @"-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"; NSPredicate *regExPredicate = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegEx]; a= [regExPredicate evaluateWithObject:email]; return a; } </code></pre>
<p>There are better <a href="http://stackoverflow.com/a/5428376/1207152">ways</a> to validate an email address.</p> <pre><code>- (BOOL)validateEmailWithString:(NSString*)email { NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}"; NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex]; return [emailTest evaluateWithObject:email]; } </code></pre>
<p>This regex will limit the user from inserting three dots in email address (or any number of consecutive dots), such as</p> <pre><code>username@example...com </code></pre> <p>Another rule with dot is the username and domain must not begin or end with dot, such as</p> <pre><code>.username.@.example.com </code></pre> <p>Many regexes in the internet allow invalid email addresses. Before adopting one, you might want to try testing it with some invalid email addresses, to see if they get rejected. You can use the two examples I mention here as a start.</p> <pre><code>- (BOOL)isValidEmail:(NSString *)email { NSString *regex1 = @"\\A[a-z0-9]+([-._][a-z0-9]+)*@([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,4}\\z"; NSString *regex2 = @"^(?=.{1,64}@.{4,64}$)(?=.{6,100}$).*"; NSPredicate *test1 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regex1]; NSPredicate *test2 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regex2]; return [test1 evaluateWithObject:email] &amp;&amp; [test2 evaluateWithObject:email]; } </code></pre> <p>See <a href="http://seaf-email.blogspot.com/p/code.html#objectivec" rel="nofollow">validate email address using regular expression in Objective-C</a>.</p>
<pre><code>NSString *emailReg = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}"; NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailReg]; if ([emailTest evaluateWithObject:yourtextFieldName.text] == NO) { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"enter the Valid Mail id" message:@"Please Enter Valid Email Address." delegate:nil cancelButtonTitle:@"okay" otherButtonTitles:nil]; [alert show]; } </code></pre> <p><strong>Swift</strong></p> <pre><code> var emailReg: String = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}" var emailTest: NSPredicate = NSPredicate(format: "SELF MATCHES %@", emailReg) if emailTest.evaluateWithObject(yourtextFieldName.text!) == false { var alert: UIAlertView = UIAlertView(title: "enter the Valid Mail id", message: "Please Enter Valid Email Address.", delegate: nil, cancelButtonTitle: "okay", otherButtonTitles: "") alert.show() } </code></pre> <p><strong>Swift3</strong></p> <pre><code>let emailReg = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}" let emailTest = NSPredicate(format: "SELF MATCHES %@", emailReg) if emailTest.evaluate(withObject: yourtextFieldName.text) == false { UIAlertView(title: "enter the Valid Mail id", message: "Please Enter Valid Email Address.", delegate: nil, cancelButtonTitle: "okay", otherButtonTitles: "").show() } </code></pre>
<p>iOS already has built-in data detectors for a number of different data types. Although email isn't one of those types, an email address falls under the subtype of a link. Knowing that, it's easy to check for an email address:</p> <pre><code>NSError *error = nil; NSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingTypeLink error:&amp;error]; NSString *string = @"johndoe@gmail.com"; [detector enumerateMatchesInString:string options:kNilOptions range:NSMakeRange(0, [string length]) usingBlock:^(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop) { if([result.URL.absoluteString rangeOfString:@"mailto:"].location != NSNotFound) { NSLog(@"Match: %@", result); } }]; </code></pre> <p>Matt Thompson's NSHipster blog has an <a href="http://nshipster.com/nsdatadetector/" rel="nofollow">excellent article</a> on <code>NSDataDetector</code> and its useage.</p>
<p>building on <a href="http://stackoverflow.com/users/257550/memmons">memmons</a>' <a href="http://stackoverflow.com/a/23547226">answer</a>, the following code should validate an entire email string assuming we can trust <code>NSDataDetector</code></p> <pre><code>- (BOOL)isPlausibleEmailAddress { NSError *error = nil; NSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingTypeLink error:&amp;error]; NSRange matchRange = [detector rangeOfFirstMatchInString:self options:kNilOptions range:NSMakeRange(0, [self length])]; return matchRange.length == [self length]; } </code></pre>