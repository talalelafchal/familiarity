Is there a typesafe way to use selectors in Swift?
<p>For the most part, Swift is a huge improvement over Objective-C in terms of type safety. One glaring exception is selectors. In Objective-C, using the expression <code>@selector(notARealSelector:)</code> will give a compiler warning. The Swift equivalent, <code>Selector("notARealSelector:")</code> will always compile but will fail at runtime.</p> <p>Is there a typesafe way to use selectors in Swift, so I can work with Objective-C APIs that require them?</p> <p>I have a lot of <code>NSNotification</code> observers in my app and would like to have some kind of compile-time checking that I'm not making typos in my selectors.</p> <p><strong>Edit</strong>: The specific use case is <code>NSNotificationCenter.addObserver</code>.</p>
<p>You can use reflection to get the names of an object's properties as strings, as summed up in <a href="http://stackoverflow.com/a/24124749/957768">this answer</a>, but that won't make the connection between an identifier and its string name the way <code>@selector</code> does in ObjC. Some creative use of reflection might work around that problem, but you might also do well to <a href="http://bugreport.apple.com" rel="nofollow">file a bug</a>.</p>
<p>Use the Swift notion of <em>optionals</em> as:</p> <pre><code>if let result = object.notARealSelector?(/* args */) { // Use Result } </code></pre> <p>where the <em>?</em> used following <code>notARealSelector</code> with return <code>false</code> to <code>if</code> when there is no such method defined on the type of <code>object</code>.</p> <p>There is a caveat for <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-XID_365" rel="nofollow"><em>optional protocol requirements</em></a>:</p> <blockquote> <p>Optional protocol requirements can only be specified if your protocol is marked with the @objc attribute. Even if you are not interoperating with Objective-C, you need to mark your protocols with the @objc attribute if you want to specify optional requirements.</p> </blockquote> <p>But since your are asking about optional methods in the first place, you must be talking about this in the Objective-C context.</p>
<p>Typesafe selectors were just released in Xcode 7.3 beta 4:</p> <pre><code>let sel = #selector(insertSubview(_:aboveSubview:)) // sel has type </code></pre> <p><code>Selector</code> is now a first class citizen and comes with some nice Swift compiler warnings. If needed you can still pass in a string:</p> <pre><code>let sel = Selector("propertyName") </code></pre> <p>See a much more complete answer here: <a href="http://stackoverflow.com/questions/24007650/selector-in-swift">@selector() in Swift?</a></p> <p>Xcode Release Notes: <a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.3_beta_4/Xcode_7.3_beta_4_Release_Notes.pdf" rel="nofollow">http://adcdownload.apple.com/Developer_Tools/Xcode_7.3_beta_4/Xcode_7.3_beta_4_Release_Notes.pdf</a></p>