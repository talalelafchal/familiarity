NSTimer not calling Method
<p>I have an NSTimer that should call a method every second, but it doesn't seem to be calling it at all.</p> <p>This is how I declare the timer:</p> <pre><code>[NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(fadeManager:) userInfo:nil repeats:YES]; </code></pre> <p>This is the method it calls:</p> <pre><code>-(void) fadeManager: (NSTimer*) timer{ NSLog(@"IT'S WORKING!"); self.playHead += .1; // keeps track of where they are in full track if (self.playHead &gt;= self.wait &amp;&amp; ![player isPlaying]) { // checks if wait is over [player play]; } if (self.playHead &gt;= self.duration + self.startTime &amp;&amp; [player isPlaying]) { // checks if full duration is over [player pause]; [self reset]; } int fadeOutArea = self.startTime + self.duration - self.fadeOut; int fadeInArea = self.startTime + self.fadeIn; if (self.playHead &lt;= fadeInArea &amp;&amp; [player volume] &lt; relativeVolume) { // checks if fadingIn. [self fadeInIncriment]; } if (self.playHead &gt;= fadeOutArea &amp;&amp; [player volume] &gt; 0) { [self fadeOutIncriment]; } } </code></pre> <p>The code was not working so I put the NSLog in as well as a break point. It seems that it is never being called. Why is this? Does it matter that I declared the method in the .m file like this:</p> <pre><code>#import &lt;AVFoundation/AVFoundation.h&gt; @interface CueMusic () - (void) delayFadeOut: (AVAudioPlayer*) dFade; - (void) fadeInIncriment; - (void) fadeOutIncriment; - (void) fadeManager: (NSTimer*) timer; // &lt;-------- - (void) start; @end @implementation CueMusic ....... </code></pre>
<p>Either use</p> <pre><code>NSTimer *timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(fadeManager:) userInfo:nil repeats:YES]; [[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode]; </code></pre> <p>or</p> <pre><code>//schedules the timer [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(fadeManager:) userInfo:nil repeats:YES]; </code></pre> <p><br></p> <h3>From the docs <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/#//apple_ref/doc/uid/20000319-SW1" rel="nofollow">Scheduling Timers in Run Loops</a></h3> <blockquote> <ul> <li><p>Use the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/#//apple_ref/occ/clm/NSTimer/scheduledTimerWithTimeInterval:invocation:repeats:" rel="nofollow"><code>scheduledTimerWithTimeInterval:invocation:repeats:</code></a> or <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/#//apple_ref/occ/clm/NSTimer/scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:" rel="nofollow"><code>scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code></a> class method to create the timer and schedule it on the current run loop in the default mode.</p></li> <li><p>Use the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/#//apple_ref/occ/clm/NSTimer/timerWithTimeInterval:invocation:repeats:" rel="nofollow"><code>timerWithTimeInterval:invocation:repeats:</code></a> or <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/#//apple_ref/occ/clm/NSTimer/timerWithTimeInterval:target:selector:userInfo:repeats:" rel="nofollow"><code>timerWithTimeInterval:target:selector:userInfo:repeats:</code></a> class method to create the timer object without scheduling it on a run loop. (After creating it, you must add the timer to a run loop manually by calling the addTimer:forMode: method of the corresponding NSRunLoop object.)</p></li> </ul> </blockquote> <hr> <h3>Swift Code</h3> <p>Either</p> <pre><code>let timer: NSTimer = NSTimer(timeInterval: 1.0, target: self, selector: "fadeManager:", userInfo: nil, repeats: true) NSRunLoop.mainRunLoop().addTimer(timer, forMode: NSDefaultRunLoopMode) </code></pre> <p>Or</p> <pre><code>//schedules the timer NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: "fadeManager:", userInfo: nil, repeats: true) </code></pre>
<p>You need to fire the timer.</p> <p>You can do it by adding it to a thread:</p> <pre><code>NSTimer *timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(fadeManager:) userInfo:nil repeats:YES]; [[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode]; </code></pre> <p>or calling </p> <pre><code>[timer fire]; </code></pre>
<p>You can use:</p> <pre><code>[[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode]; </code></pre>
<p>Your problem is that when using <code>timerWithTimeInterval:target:selector:userInfo:repeats:</code>, the resulting timer does not automatically get added to the run loop. I would recommend using <code>scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code> instead, which performs this step for you.</p> <p>If you prefer to use <code>timerWithTimeInterval:target:selector:userInfo:repeats:</code> then you need to manually add the timer to the current run loop. To do this, call <code>NSRunLoop</code>'s <code>addTimer:forMode:</code> method. <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSRunLoop_Class/Reference/Reference.html">Documentation</a></p> <pre><code>[[NSRunLoop currentRunLoop] addTimer:tTimer forMode: NSDefaultRunLoopMode]; </code></pre>