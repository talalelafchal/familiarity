How do I manipulate nested dictionaries in Swift, e.g. JSON data?
<p>I'm using NSJSONSerialization to parse JSON in a Swift application. However, the returned dictionary consists of a complicated, deeply nested structure, making it impractical to have very long type declarations (e.g. <code>Dictionary&lt;String, Array&lt;Dictionary&lt;String, ....&gt;&gt;</code>).</p> <p>Is there a good way of working with such a structure in Swift, where the collection's structure is very complicated and its types aren't known until runtime?</p>
<p>Just grab a reference to your json data as an NSDictionary:</p> <pre><code>var dict: NSDictionary = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: nil) as NSDictionary </code></pre> <p>then you can reference it using subscripts:</p> <pre><code>var myValue: NSString = dict["level1"]["level2"] </code></pre>
<p><code>myDictionary["accounts"]</code> might be an optional. Try: <code>myDictionary["accounts"]?["active"]?</code></p>
<p>In Obj-C we could write,</p> <pre><code>cityName = myDictionary[@"photos"][@"region"][@"city"]</code></pre> <p>As several here have discovered, the above does not apply in Swift, at least it never has for me. </p> <p>Here's how you do this in Swift for accessing three indices in an NSDictionary for a String,</p> <p><pre>let cityName = ((myDictionary!["photos"] as NSDictionary)["region"]! as NSDictionary)["city"]! as String`</pre></p> <p>I hope that in the next update to Swift all of that can be reduced to what we had in Obj-C.</p>