Translating Obj-C pass by reference to Swift
<p>I'm trying to translate a simple method from Obj-C to Swift, and I can't work out from the docs how to do it.</p> <p>I've simplified the method to a bare bones example that illustrates what I don't understand:</p> <pre><code>- (void)getChar:(unichar *) outChar { *outChar = 'a'; } </code></pre> <p>The nearest I've got to this so far in Swift is this:</p> <pre><code>func getChar(inout outChar:CMutablePointer&lt;unichar&gt;) -&gt; () { outChar = ("a" as NSString).characterAtIndex(0) } </code></pre> <p>But of course I get the error for the 3rd line: Unichar is not convertible to CMutablePointer.</p> <p>The BuildingCocoaApps pdf has short sections about using pointers from Obj-C, but I can't work out how it relates to this.</p> <p>Can someone explain how to do this?</p> <p>EDIT: I am calling the method/func from Obj-C like this:</p> <pre><code>unichar c; [myObject getChar:&amp;c]; </code></pre> <p>I've realised that I need to add @objc before the func, because I'm calling it from Obj-C. And that now gives me more errors. </p>
<p>EDIT: I see you are trying to use the Swift class methods from Obj-C.</p> <p><strong>Make sure your Obj-C implementation file (.m) has the Swift import</strong>:<br> <code>#import &lt;##Your-Project-Name##&gt;-Swift.h</code><br> This file is not visible in your project but the import is required to use Swift classes in Obj-C (see <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_75" rel="nofollow">Apple documentation</a>).</p> <p>I created an Obj-C command line program with this in my <code>main.m</code>:</p> <pre><code>#import &lt;Foundation/Foundation.h&gt; #import "ObjCTest-Swift.h" // &lt;- VERY IMPORTANT! int main(int argc, const char * argv[]) { @autoreleasepool { unichar someChar = '\0'; // This is my Swift class TextGenerator *textGenerator = [[TextGenerator alloc] init]; [textGenerator generateChar:&amp;someChar]; NSLog(@"Character vaue is now %d", someChar); } return 0; } </code></pre> <p>And the accompanying <code>TextGenerator.swift</code> file:</p> <pre><code>import Foundation @objc class TextGenerator : NSObject { @objc func generateChar(outChar:CMutablePointer&lt;unichar&gt;) { let testString : NSString = "The quick brown fox jumps over the lazy dog." let firstChar = testString.characterAtIndex(0) // Access the unichar * in an unsafe context to set the value directly outChar.withUnsafePointer{ charPtr in charPtr.memory = firstChar } // Alternatively, this is the shorthand form ($0 is the first arg) outChar.withUnsafePointer{ $0.memory = firstChar } } } </code></pre> <p>The real takeaway here is you <strong>cannot</strong> mutate the value stored by a <code>CMutablePointer&lt;Type&gt;</code> directly. You must use <code>withUnsafePointer</code> to access the value in an unsafe manner within a separate closure. This is probably intentional to avoid programmer error with pointer mishaps.</p>