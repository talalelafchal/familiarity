Calling another function with same params but different name with Generics throws an error in Swift
<p>I am trying to call someMethodB from someMethodA and getting the following compile error <code>Cannot convert the expression's type '$T2[]' to type 'T[]'</code></p> <pre><code>func someMethodA&lt;T : Equatable&gt;(array: T[], values: T...) -&gt; T[] { return self.someMethodB(array, values: values) } func someMethodB&lt;T : Equatable&gt;(array: T[], values: T...) -&gt; T[] { ... } </code></pre> <p>Seems like a problem due to variadic parameter. How can I pass values which is converted to an array as variadic to someMethodB?</p>
<p>MethodB takes a variadic second parameter, but you are sending it an array. You can change your method signature of MethodB to this:</p> <pre><code>someMethodB&lt;T : Equatable&gt;(array: T[], values: T[]) -&gt; T[]{ /* code */ } </code></pre> <p>When you pass a variadic parameter into a method it gets converted into an array. So values is actually a <code>T[]</code> and not a <code>T...</code></p> <p>Edit: If you still need a someMethodB that takes a variadic parameter you can just have it call the one that takes the array like this:</p> <pre><code>func someMethodB&lt;T : Equatable&gt;(array: T[], values: T...) -&gt; T[] { return someMethodB(array, values:values) } </code></pre>