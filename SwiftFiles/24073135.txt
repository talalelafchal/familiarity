Generic type constraint for numerical type only
<p>I'm trying to figure out how to implement a type constraint for a generic class (in Swift) that will limit the generic types to numeric types only. For instance Double, Int, etc., but not string. Thanks for any help.</p>
<p>You can roll your own with an enum:</p> <pre><code>enum Numeric { case NInt(Int) case NUInt(UInt) case NFloat(Float) case NDouble(Double) } </code></pre> <p>Then use it in your code:</p> <pre><code>func myFunc(x: Numeric) -&gt; Numeric { switch x { case let NInt(i): return i + 1 case let NUInt(u): return u + 1 case let NFloat(f): return f + 1 case let NDouble(d): return d + 1 } } </code></pre> <p>Or you can just use NSNumber, which rolls up several numeric types into one blanket type.</p>
<p>You can specify type constraints (using both classes and protocols) for a generic class (same syntax applies to functions) using angle brackets:</p> <pre><code>class Foo&lt;T: Equatable, U: Comparable&gt; { } </code></pre> <p>To specify more than one requirement on a single type, use a <code>where</code> clause:</p> <pre><code>class Foo&lt;T: UIViewController where T: UITableViewDataSource, T: UITextFieldDelegate&gt; { } </code></pre> <p>However, it doesn't look like you can specify optional requirements in a generic parameter clause, so one possible solution is to create a protocol that all the numeric types implement via extensions and then constrain your class on that requirement:</p> <pre><code>protocol Numeric { } extension Float: Numeric {} extension Double: Numeric {} extension Int: Numeric {} class NumberCruncher&lt;C1: Numeric&gt; { func echo(num: C1)-&gt; C1 { return num } } NumberCruncher&lt;Int&gt;().echo(42) NumberCruncher&lt;Float&gt;().echo(3.14) </code></pre>
<p><code>Strideable</code> is the <em>smallest</em> standard protocol that every standard number type conforms to, but it also has a few more types conforming to it. <a href="http://swiftdoc.org/protocol/Strideable/hierarchy/">http://swiftdoc.org/protocol/Strideable/hierarchy/</a></p> <p>Or you can use <code>IntegerType</code> and <code>FloatingPointType</code>.</p>