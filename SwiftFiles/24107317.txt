Declaring and initializing static objects at class scope
<p>In Objective-C, it is common for a class to keep a static reference to an instance that the class will use several times. For example,</p> <pre><code>@implementation MyClass static NSDateFormatter *dateFormatter = nil; + (void) initialize { if (self == [MyClass class]) { dateFormatter = [[NSDateFormatter alloc] init]; } } @end </code></pre> <p>In Swift we no longer have to declare and initialize this static object in two different places. We can simply do</p> <pre><code>let dateFormatter = NSDateFormatter() </code></pre> <p>at class scope and the date formatter is initialized when the class is loaded.</p> <p>My question: when writing in Swift, is there any reason <em>not</em> to use this new pattern? It would still be possible to declare the date formatter at module scope and then initialize it within <code>initialize</code>; is there any reason to do it in two steps like this?</p>
<p>No, there's no such reason; the self-initializing variable is the way to go.</p> <p>Even better, self-initialize it to a called closure and the date formatter can be further initialized / configured, right there.</p> <p>Not only that, but if you mark it as <code>@lazy</code> then it won't even be initialized until the first time you actually access it.</p>