Returning a mutable array from a function
<p><strong>How to return a mutable array from a function?</strong></p> <p>Here is a short snippet of code to make it more clear: </p> <pre><code>var tasks = ["Mow the lawn", "Call Mom"] var completedTasks = ["Bake a cake"] func arrayAtIndex(index: Int) -&gt; String[] { if index == 0 { return tasks } else { return completedTasks } } arrayAtIndex(0).removeAtIndex(0) // Immutable value of type 'String[]' only has mutating members named 'removeAtIndex' </code></pre> <p>The following snippet works but I have to return an <code>Array</code>, not an <code>NSMutableArray</code> </p> <pre><code>var tasks: NSMutableArray = ["Mow the lawn", "Call Mom"] var completedTasks: NSMutableArray = ["Bake a cake"] func arrayAtIndex(index: Int) -&gt; NSMutableArray { if index == 0 { return tasks } else { return completedTasks } } arrayAtIndex(0).removeObjectAtIndex(0) tasks // ["Call Mom"] </code></pre> <p>Thanks!</p>
<p>This whole paradigm is discouraged in Swift. Arrays in swift are "Value Types" meaning that they get copied every time they are passed around. This means that once you pass the array into a function, you cannot have that function modify the contents of the original array. This is much safer.</p> <p>What you could do is:</p> <pre><code>var newArray = arrayAtIndex(0) newArray.removeObjectAtIndex(0) </code></pre> <p>But note that <code>tasks</code> will not be modified. <code>NewArray</code> will be a copy of <code>tasks</code> with the first object removed</p> <p>The reason this works with NSMutableArray, is that NSArray and NSMutableArray are copied by reference, so they always refer to the original array unless explicitly copied.</p>