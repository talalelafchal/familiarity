Is Swift really slow at dealing with numbers?
<p>As I was playing around with a swift tutorial, I started to write a custom <code>isPrime</code> method to check if a given <code>Int</code> is prime or not.</p> <p>After writing it I realized it was working properly but found it a bit slow to perform <code>isPrime</code> on some <em>quite</em> large numbers (still much lower then <code>Int.max</code>).</p> <p>So I wrote the same piece of code in objc and the code was executed much faster (a factor of 66x).</p> <p>Here is the swift code:</p> <pre><code>class Swift { class func isPrime(n:Int) -&gt; Bool { let sqr : Int = Int(sqrt(Double(n))) + 1 for i in 2...sqr { if n % i == 0 { return false } } return true; } class func primesInRange(start:Int, end:Int) -&gt; Int[] { var primes:Int[] = Int[]() for n in start...end { if self.isPrime(n) { primes.append(n) } } return primes; } } </code></pre> <p>And the objc code:</p> <pre><code>@implementation Utils + (BOOL)isPrime:(NSUInteger)n { NSInteger sqr = (NSUInteger)(sqrt(n))+1; for (NSUInteger i = 2; i &lt; sqr; ++i) { if (n % i == 0) { return false; } } return YES; } + (NSArray*)primesInRange:(NSUInteger)start end:(NSUInteger)end { NSMutableArray* primes = [NSMutableArray array]; for (NSUInteger i = start; i &lt;= end; ++i) { if ([self isPrime:i]) [primes addObject:@(i)]; } return primes.copy; } @end </code></pre> <p>And in <code>main.swift</code>:</p> <pre><code>let startDateSwift = NSDate.date() let swiftPrimes = Swift.primesInRange(1_040_101_022_000, end: 1_040_101_022_200) let elapsedSwift = NSDate.date().timeIntervalSinceDate(startDateSwift)*1000 let startDateObjc = NSDate.date() let objcPrimes = Utils.primesInRange(1_040_101_022_000, end: 1_040_101_022_200) let elapsedObjc = NSDate.date().timeIntervalSinceDate(startDateObjc)*1000 println("\(swiftPrimes) took: \(elapsedSwift)ms"); println("\(objcPrimes) took: \(elapsedObjc)ms"); </code></pre> <p>This produces:</p> <pre><code>[1040101022027, 1040101022039, 1040101022057, 1040101022099, 1040101022153] took: 3953.82004976273ms [1040101022027, 1040101022039, 1040101022057, 1040101022099, 1040101022153] took: 66.4250254631042ms </code></pre> <p>I know that I could have used an <code>extension</code> on <code>Int</code> here to check if a number is prime, but I wanted both code to be very similar.</p> <p>Can anyone tell me why this swift code is so much slower? The 66x factor is pretty scary and only gets worse as I increment the range.</p>
<p>Here are optimization levels for the Swift compiler's code generation (you can find them in Build Settings):</p> <pre><code>[-Onone] no optimizations, the default for debug. [-O] perform optimizations, the default for release. [-Ofast] perform optimizations and disable runtime overflow checks and runtime type checks. </code></pre> <p>Using your code I got these times at different levels of optimization:</p> <p><strong>[-Onone]</strong></p> <pre><code>Swift: 6110.98903417587ms Objc: 134.006023406982ms </code></pre> <p><strong>[-O]</strong></p> <pre><code>Swift: 89.8249745368958ms Objc: 85.5680108070374ms </code></pre> <p><strong>[-Ofast]</strong></p> <pre><code>Swift: 77.1470069885254ms Objc: 76.3399600982666ms </code></pre> <p>Keep in mind that -Ofast is comes with risks. e.g. It will silently ignore integer and array overflows, producing nonsense results, so if you choose to use it you'll have to guarantee yourself that overflows aren't possible in your program.</p>
<p>Credits to @sjeohp for his comment which is basically the answer to the question.</p> <p>I tried optimizing the code to the most aggressive way in <code>Release</code> for both LLVM and Swift optimizations:</p> <p><img src="https://i.stack.imgur.com/f2GjU.png" alt="enter image description here"></p> <p><img src="https://i.stack.imgur.com/CmF6N.png" alt="enter image description here"></p> <p>Compiled the project in <code>Release</code> and got:</p> <pre><code>[1040101022027, 1040101022039, 1040101022057, 1040101022099, 1040101022153] took: 63.211977481842ms [1040101022027, 1040101022039, 1040101022057, 1040101022099, 1040101022153] took: 60.0320100784302ms </code></pre> <p>Again, thanks @sjeohp for catching this !</p>