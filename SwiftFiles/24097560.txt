windowDidLoad() never called using storyboards for mac
<p>I've just played around with the new mac storyboard-feature included in Xcode 6. I've set up a new OS X-project using storyboards and swift, then I've created a new file <code>MainWindowController.swift</code>, created the initializer <code>init(coder: NSCoder!)</code> (because otherwise the compiler warns me) and hooked everything up in the <code>Main.storyboard</code> file (set the <code>MainWindowController</code>-class for the WindowController in the inspector).</p> <p>Everything compiles fine, my Window with the specified <code>window content</code>-view opens. But the code I've written in the <code>windowDidLoad</code>-function is never be called. Let it just something like:</p> <pre><code>override func windowDidLoad() { super.windowDidLoad() println("Executed") } </code></pre> <p>I've also tested if my initializer is called - it is.</p> <p>Does anybody has a clue? I've never used storyboards intensively on iOS before, maybe I miss something substantial.</p>
<p>In Yosemite, NSViewController has been promoted with powerful new features to make it work with Storyboards. Meanwhile, NSWindowController got demoted. With Storyboards, windows are no longer loaded from a nib, so windowDidLoad() doesn't get called anymore.</p> <p>It makes sense for the window itself to become less important, in favor of a more powerful view it actually contains. My other answer on this page shows how to set up an AppDelegate to customize the window appearance. There's more detail <a href="http://stackoverflow.com/a/24543911/3799712">on another page here</a>, about using an AppDelegate to implement some of the things you might previously have done in an NSWindowController.</p> <p>However, if you only wanted to catch windowDidLoad() as a way to customize the appearance options of the window, it is <strong><em>very easy</em></strong> to do that in Interface Builder, by simply adding them as User Defined Runtime Attributes to the NSWindow object. You don't need to subclass NSWindowController or write any code at all. Just plug in these values to the NSWindow object via the Identity Inspector pane to achieve the same effect shown in the AppDelegate example code:</p> <pre><code>Keypath: titlebarAppearsTransparent, Type: Boolean, Value: Checked Keypath: titleVisibility, Type: Number, Value: 1 Keypath: styleMask, Type: Number, Value: 32783 </code></pre> <p>Look in the headers to determine the actual numeric values of the constants.</p> <p>( for example: NSWindowTitleVisibility.Hidden = 1 )</p> <p>Of course, you can't specify individual bits of the styleMask, but it's easy enough to add them all together and get a single number to specify the style. </p>
<p>Remove everything except the Application scene from the Main.storyboard file, and instead, create a new Application.storyboard for the application window. Implement an application delegate class and connect it to the Application object in Main.storyboard. Use this class to instantiate the window controller and set up custom options for the application window.</p> <pre><code>class AppDelegate: NSObject, NSApplicationDelegate { func applicationDidBecomeActive(notification: NSNotification) { let storyboard = NSStoryboard(name: "Application", bundle: nil) applicationController = storyboard.instantiateInitialController() as? NSWindowController if let window = applicationController?.window { window.titlebarAppearsTransparent = true window.titleVisibility = NSWindowTitleVisibility.Hidden window.styleMask |= NSFullSizeContentViewWindowMask applicationController!.showWindow(self) } } } </code></pre> <p>Rather than subclassing NSWindowController, use the ViewController.swift subclass of NSViewController that Xcode creates for you automatically with the project.</p> <p>In the storyboard, notice how there's a Relationship that connects the "window content" to the ViewController. So, the ViewController can now do things that you might previously have done in a window controller.</p> <p>The ViewController.swift file will already have a default override of viewDidLoad() that will be called when the window loads, just as you were expecting windowDidLoad() to be called if it were an NSWindowController subclass.</p> <pre><code> override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. println("Executed") } </code></pre>