'Int' is not identical to 'String.Index'
<p>As an exercise I am rewriting one of my apps using Swift.</p> <p>In Objective-C I had the following line of code:</p> <pre><code>NSRange extendedRange = NSUnionRange(range, [[self.backingStore string]lineRangeForRange:NSMakeRange(NSMaxRange(range), 0)]); </code></pre> <p>In swift it looks like this:</p> <pre><code>let str = backingStore.string let extendedRange: NSRange = NSUnionRange(range, str.lineRangeForRange(NSMakeRange(NSMaxRange(range), 0))) </code></pre> <p>However, for some reason I am getting 'Int' is not identical to 'String.Index' and I can't figure out why. Any help / insight would be appreciated. </p> <hr> <h3>EDIT:</h3> <p>If I bridge my string, it works:</p> <pre><code>let str = backingStore.string let extendedRange: NSRange = NSUnionRange(range, str.bridgeToObjectiveC().lineRangeForRange(NSMakeRange(NSMaxRange(range), 0))) </code></pre>
<p>Swift strings are not the same as Foundation strings: they can be bridged, and they may have method names in common, but that does not mean they should be treated as being compatible. Here are two views of the type definition of <code>Swift.String.lineRangeForRange</code>.</p> <p><code>Swift.String.lineRangeForRange (Swift.String)(Swift.Range&lt;Swift.String.Index&gt;) -&gt; Swift.Range&lt;Swift.String.Index&gt;</code></p> <p><code>String -&gt; (Range&lt;String.Index&gt;) -&gt; Range&lt;String.Index&gt;</code></p> <p>Note also that Swift's <code>Range&lt;T&gt;</code> is start/end while Foundation's <code>NSRange</code> is location/length. There are ways to convert between <code>NSRange</code> and <code>Range&lt;Int&gt;</code>, but a <code>Range&lt;String.Index&gt;</code> is a different story: <code>String.Index</code> is more like an "iterator" than an "index".</p> <p>What I'd say (and I'm highly pragmatic about this sort of thing) is that if you have a block of code that is based on the semantics of Objective-C strings it might be good to keep using them for a while: get your code working, and then evaluate changing to Swift's String later.</p>
<p>Curious myself, I Cmd+Clicked on <code>String.Index</code> and discovered it is actually defined as a <code>struct</code> in an <code>extension</code> type:</p> <pre><code>extension String : Collection { struct Index : BidirectionalIndex { func succ() -&gt; String.Index func pred() -&gt; String.Index } </code></pre> <p><code>BidirectionalIndex</code> is a protocol that inherits from another protocol, <code>ForwardIndex</code>.</p> <p>I assume the <code>succ()</code> and <code>pred()</code> methods stand for 'successor' and 'predecessor' respectively.</p>