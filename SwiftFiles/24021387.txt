Why is Swift type-safe?
<p>As more-or-less a Ruby monoglot, this has never been clear to me... The answers to <a href="http://stackoverflow.com/questions/24006573/why-do-i-need-to-specify-what-type-a-variable-is-in-a-class-in-swift">this question</a> explain how type-safety functions in Swift (and generally, I am guessing), but doesn't answer 'why'? Surely there is some performance or security benefit, but what is it exactly? Or is the benefit purely the strictness of the value later on -- the developer has the benefit of knowing some function will definitely perform (<code>.each</code> on an Array, for instance) or when run. </p> <p>What trade-offs am I unknowingly adopting when I do this in, say, Ruby</p> <pre><code>x = Float.new x = 3 x = "a" x = [a, "a", ['a'], {a: 'a'}] </code></pre> <p>versus what benefits am I receiving in it's equivalent in Swift:</p> <pre><code>var v: String var x = 3 var y = "a" var z = [ a, "a", ['a'], ['a': 'a'] ] </code></pre> <p>?</p> <p>Apologies if this is too basic or redundant -- I didn't find a similar question searching SO.</p>
<p>Type-Safety is not only helpful for run-time, but also for compile-time.<br> It can help sticking to certain rules, and making code more obvious. </p> <p>Swift does still not check for types at run-time, but doing a check at compile-time will already help eliminating a lot of errors. In ObjC you could do something like this:</p> <pre><code>NSString *string = (NSString *)@123; </code></pre> <p>Does it throw an error? No. Does it make sense to warn the developer when compiling? Of course!</p> <p>Type-safety can make sense in many ways, so let's look at some examples.</p> <hr> <h1>Examples</h1> <p><em>Beware, some of this is pseudo code</em></p> <p>Remember using <code>id</code> for every possible thing? Those days lie in the past!</p> <p>Which one is more obvious?</p> <pre><code>var numbers: Array&lt;Int&gt; = [ 1, 2, 3, 4 ] </code></pre> <p>or</p> <pre><code>NSArray *numbers = @[1, 2, 3, 4]; </code></pre> <hr> <pre><code>var fontAttributes: Dictionary&lt;String, FontAttribute&gt; = [ Font.Weight : FontWeight.Bold, Font.Decoration : FontDecoration.None, ] </code></pre> <p>or</p> <pre><code>NSDictionary *fontAttributes = @{ Font.Weight : FontWeight.Bold, Font.Decoration : FontDecoration.None, } </code></pre> <hr> <pre><code>var predicate = Predicate&lt;Person&gt;({ person in person.name == "John" }) </code></pre> <p>or</p> <pre><code>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"self.name == %@", @"John"]; </code></pre>