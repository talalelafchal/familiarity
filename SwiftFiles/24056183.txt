UITableView Using Swift
<p>My <strong>TapCell1.swift</strong></p> <p>This is Custom <code>UITableViewCell View</code></p> <pre><code>import UIKit class TapCell1: UITableViewCell { @IBOutlet var labelText : UILabel init(style: UITableViewCellStyle, reuseIdentifier: String!) { println("Ente") super.init(style: UITableViewCellStyle.Value1, reuseIdentifier: reuseIdentifier) } override func setSelected(selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) } } </code></pre> <p>My <strong>ViewController.swift</strong></p> <p>Its All DataSource and Delegates are set correctly.But My custom Cell is not displaying.</p> <pre><code> import UIKit class NextViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { @IBOutlet var label: UILabel @IBOutlet var tableView : UITableView var getvalue = NSString() override func viewDidLoad() { super.viewDidLoad() label.text="HELLO GOLD" println("hello : \(getvalue)") self.tableView.registerClass(TapCell1.self, forCellReuseIdentifier: "Cell") } func tableView(tableView:UITableView!, numberOfRowsInSection section:Int)-&gt;Int { return 5 } func numberOfSectionsInTableView(tableView:UITableView!)-&gt;Int { return 1 } func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! { var cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as TapCell1 cell.labelText.text="Cell Text" return cell } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } } </code></pre> <p>The Problem is My custom cell is Not displayed. Please suggest anything i did wrong.</p> <p><strong>Note: here is My code <a href="https://www.mediafire.com/?qay0qcv294heeu2">My File Download Link</a></strong></p>
<p>You should register the <code>class</code> for the cell. For that do change this line of code to </p> <pre><code>self.tableView.registerClass(TapCell1.classForCoder(), forCellReuseIdentifier: "Cell") </code></pre> <p>Edit</p> <p>You code is looks fine i checked it </p> <pre><code>//cell.labelText.text="Cell Text" cell.textLabel.text="Cell Text" // use like this </code></pre>
<p>I finally did it.</p> <p><strong>For TapCell1.swift</strong></p> <pre><code>import UIKit class TapCell1: UITableViewCell { @IBOutlet var labelTitle: UILabel init(style: UITableViewCellStyle, reuseIdentifier: String!) { super.init(style: UITableViewCellStyle.Value1, reuseIdentifier: reuseIdentifier) } } </code></pre> <p><strong>For NextViewController.swift</strong></p> <pre><code>import UIKit class NextViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { @IBOutlet var tableView: UITableView var ListArray=NSMutableArray() override func viewDidLoad() { super.viewDidLoad() let nibName = UINib(nibName: "TapCell1", bundle:nil) self.tableView.registerNib(nibName, forCellReuseIdentifier: "Cell") for i in 0...70 { ListArray .addObject("Content: \(i)") } } func tableView(tableView: UITableView!, numberOfRowsInSection section: Int)-&gt;Int { return ListArray.count } func tableView(tableView: UITableView!, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat { return 51 } func numberOfSectionsInTableView(tableView: UITableView!) -&gt; Int { return 1 } func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as TapCell1 //cell.titleLabel.text = "\(ListArray.objectAtIndex(indexPath.item))" cell.labelTitle.text = "\(ListArray.objectAtIndex(indexPath.row))" return cell } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } } </code></pre> <p>My Working Code Link : <a href="http://www.mediafire.com/download/z1v821ib7j8flo8/MAINTABLECUSTOMIZATION%282%29.zip">CUSTOMISED TABLE</a></p>
<p>Check your Story board select the cell and look at the "identity inspector in that select CLASS type your CustomClass and MODULE type your project name </p> <p>I have done this It works perfectly try this tip to avoid error to see below image and code</p> <pre><code>override func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath?) -&gt; UITableViewCell? { // let cell = UITableViewCell(style: UITableViewCellStyle.Default, reuseIdentifier: nil) // cell.textLabel.text = array[indexPath!.row] as String let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as CustomTableViewCell cell.nameLabel.text = array[indexPath!.row] as String cell.RestaurentView.image = UIImage(named:images[indexPath!.row]) return cell } </code></pre>
<p>The solution is most likely pinpointed to setting the cell height manually as such:</p> <pre><code>override func tableView(tableView:UITableView!, heightForRowAtIndexPath indexPath:NSIndexPath)-&gt;CGFloat { return 44 } </code></pre> <p>I believe it's an Xcode beta 6 bug.</p>
<p>Try this following code </p> <p><code>var cell:CustomTableViewCell = tableView.dequeueReusableCellWithIdentifier("CustomTableViewCell") as CustomTableViewCell</code></p> <p><a href="https://github.com/iappvk/TableView-Swift" rel="nofollow">https://github.com/iappvk/TableView-Swift</a></p>
<p>I have now been able to get Custom UITableViewCell to work.</p> <h1>Works on</h1> <ul> <li>Runs on Xcode 6 beta 6</li> <li><p>Runs on Xcode 6 beta 5</p></li> <li><p>iOS is 7.1</p></li> </ul> <h1>How</h1> <ul> <li>I have created a ".xib" file for the cell.</li> <li>I copy it into the storyboard.</li> <li>Via the storyboard I give it a Identifier.</li> <li>I make sure it is a sub child of a tableview</li> </ul> <p>Doing it this way, you do not need to register a class / nib etc.</p> <p>This is my custom cell.</p> <pre> import UIKit class TestCell: UITableViewCell { @IBOutlet var titleImageView: UIImageView! @IBOutlet var titleLabel: UILabel! override init(style: UITableViewCellStyle, reuseIdentifier: String!) { super.init(style: style, reuseIdentifier: reuseIdentifier) } override func awakeFromNib() { super.awakeFromNib() // Initialization code } required init(coder aDecoder: NSCoder) { super.init(coder: aDecoder) } } </pre> <p>In your view, or where ever you extend "UITableViewDataSource". Make sure "cell2" is the same as the "Identifier" that you gave it via the storyboard.</p> <pre> func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -> UITableViewCell! { var cell:TestCell = tableView.dequeueReusableCellWithIdentifier("cell2", forIndexPath: indexPath) as TestCell // Example of using the custom elements. cell.titleLabel.text = self.items[indexPath.row] var topImage = UIImage(named: "fv.png") cell.titleImageView.image = topImage return cell } </pre> <p><a href="/questions/tagged/uitableviewcell" class="post-tag" title="show questions tagged &#39;uitableviewcell&#39;" rel="tag">uitableviewcell</a></p>
<p>If you are not using Storyboard then create a new file as subclass of UITableViewCell check the checkbox "also create xib files" after that set your custom cell .and here is the code for tableview </p> <pre><code>func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var customcell:CustomTableViewCellClass? = tableView.dequeueReusableCellWithIdentifier("cell") as? CustomTableViewCellClass if (customcell==nil) { var nib:NSArray=NSBundle.mainBundle().loadNibNamed("CustomTableViewCellClass", owner: self, options: nil) customcell = nib.objectAtIndex(0) as? CustomTableViewCell } return customcell! } </code></pre>
<p>It is Purely swift notation an working for me</p> <pre><code>func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var cellIdentifier:String = "CustomFields" var cell:CustomCell? = tableView.dequeueReusableCellWithIdentifier(cellIdentifier) as? CustomCell if (cell == nil) { var nib:Array = NSBundle.mainBundle().loadNibNamed("CustomCell", owner: self, options: nil) cell = nib[0] as? CustomCell } return cell! } </code></pre>