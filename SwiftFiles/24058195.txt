What is the easiest way to generate random integers within a range in Swift?
<p>The method I've devised so far is this:</p> <pre><code>func randRange (lower : Int , upper : Int) -&gt; Int { let difference = upper - lower return Int(Float(rand())/Float(RAND_MAX) * Float(difference + 1)) + lower } </code></pre> <p>This generates random integers between lower and upper inclusive.</p>
<p>Edited to remove modulo bias per the suggestion in comments. (thanks!)</p> <p>I think a neat way of doing this may be to use Swift's Range to define the bounds because then you can specify 1..100 or 1...100 (including or excluding the upper bound). The best I have come up with so far is: </p> <pre><code>import Foundation // needed for rand() func randInRange(range: Range&lt;Int&gt;) -&gt; Int { // arc4random_uniform(_: UInt32) returns UInt32, so it needs explicit type conversion to Int // note that the random number is unsigned so we don't have to worry that the modulo // operation can have a negative output return Int(arc4random_uniform(UInt32(range.endIndex - range.startIndex))) + range.startIndex } // generate 10 random numbers between -1000 and 999 for _ in 0...100 { randInRange(-1000...1000) } </code></pre> <p>I tried using an extension on Range but you cannot seem to extend Range&lt; T where T: Int > specifically. It would be even better if you could get a syntax like (1..100).rand().</p>
<p>Here's a somewhat lighter version of it:</p> <pre><code>func randRange (lower: Int , upper: Int) -&gt; Int { return lower + Int(arc4random_uniform(UInt32(upper - lower + 1))) } </code></pre> <p>This can be simplified even further if you decide this function works with unsigned values only:</p> <pre><code>func randRange (lower: UInt32 , upper: UInt32) -&gt; UInt32 { return lower + arc4random_uniform(upper - lower + 1) } </code></pre> <p>Or, following Anton's (+1 for you) excellent idea of using a range as parameter:</p> <pre><code>func random(range: Range&lt;UInt32&gt;) -&gt; UInt32 { return range.startIndex + arc4random_uniform(range.endIndex - range.startIndex + 1) } </code></pre>