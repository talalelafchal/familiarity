Using a dispatch_once singleton model in Swift
<p>I'm trying to work out an appropriate singleton model for usage in Swift. So far, I've been able to get a non-thread safe model working as:</p> <pre><code>class var sharedInstance:TPScopeManager { get { struct Static { static var instance : TPScopeManager? = nil } if !Static.instance { Static.instance = TPScopeManager() } return Static.instance! } } </code></pre> <p>Wrapping the singleton instance in the Static struct should allow a single instance that doesn't collide with singleton instances without complex naming schemings, and it should make things fairly private. Obviously though, this model isn't thread safe, so I tried to add dispatch_once to the whole thing:</p> <pre><code>class var sharedInstance:TPScopeManager { get { struct Static { static var instance : TPScopeManager? = nil static var token : dispatch_once_t = 0 } dispatch_once(Static.token) { Static.instance = TPScopeManager() } return Static.instance! } } </code></pre> <p>But I get a compiler error on the dispatch_once line:</p> <blockquote> <p>Cannot convert the expression's type 'Void' to type '()'</p> </blockquote> <p>I've tried several different variants of the syntax, but they all seem to have the same results:</p> <pre><code>dispatch_once(Static.token, { Static.instance = TPScopeManager() }) </code></pre> <p>What is the proper usage of <code>dispatch_once</code> using Swift? I initially thought the problem was with the block due to the <code>()</code> in the error message, but the more I look at it, the more I think it may be a matter of getting the <code>dispatch_once_t</code> correctly defined.</p>
<p><strong>For Swift 1.2 and beyond:</strong></p> <pre><code>class Singleton { static let sharedInstance = Singleton() } </code></pre> <p>With a proof of correctness (all credit goes <a href="http://krakendev.io/blog/the-right-way-to-write-a-singleton">here</a>), there is little to no reason now to use any of the previous methods for singletons.</p> <p><strong>Update</strong>: This is now the <strong>official</strong> way to define singletons as described in the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#singleton">official docs</a>!</p> <p>As for concerns on using <code>static</code> vs <code>class</code>. <code>static</code> should be the one to use even when <code>class</code> variables become available. Singletons are not meant to be subclassed since that would result in multiple instances of the base singleton. Using <code>static</code> enforces this in a beautiful, Swifty way.</p> <p><strong>For Swift 1.0 and 1.1:</strong></p> <p>With the recent changes in Swift, mostly new access control methods, I am now leaning towards the cleaner way of using a global variable for singletons.</p> <pre><code>private let _singletonInstance = SingletonClass() class SingletonClass { class var sharedInstance: SingletonClass { return _singletonInstance } } </code></pre> <p>As mentioned in the Swift blog article <a href="https://developer.apple.com/swift/blog/?id=7">here</a>:</p> <blockquote> <p>The lazy initializer for a global variable (also for static members of structs and enums) is run the first time that global is accessed, and is launched as dispatch_once to make sure that the initialization is atomic. This enables a cool way to use dispatch_once in your code: just declare a global variable with an initializer and mark it private.</p> </blockquote> <p>This way of creating a singleton is thread safe, fast, lazy, and also bridged to ObjC for free.</p>
<p>Looking at Apple's sample code I came across this pattern. I'm not sure how swift deals with statics, but this would be thread safe in C#. I include both the property and method for ObjC interop.</p> <pre><code>struct StaticRank { static let shared = RankMapping() } class func sharedInstance() -&gt; RankMapping { return StaticRank.shared } class var shared:RankMapping { return StaticRank.shared } </code></pre>
<p>There is a better way to do it. You can declare a global variable in your class above the class decleration like so</p> <pre><code>var tpScopeManagerSharedInstance = TPScopeManager() </code></pre> <p>This just calls your default init or whichever init and global variables are dispatch_once by default in Swift. Then in whichever class you want to get a reference, you just do this:</p> <pre><code>var refrence = tpScopeManagerSharedInstance // or you can just access properties and call methods directly tpScopeManagerSharedInstance.someMethod() </code></pre> <p>So basically you can get rid of the entire block of shared instance code.</p>
<p>Since Apple has now clarified that static struct variables are initialized both lazy and wrapped in dispatch_once (see the note at the end of the post), I think my final solution is going to be:</p> <pre><code>class WithSingleton { class var sharedInstance :WithSingleton { struct Singleton { static let instance = WithSingleton() } return Singleton.instance } } </code></pre> <p>This takes advantage of the automatic lazy, thread-safe initialization of static struct elements, safely hides the actual implementation from the consumer, keeps everything compactly compartmentalized for legibility, and eliminates a visible global variable.</p> <p>Apple has clarified that lazy initializer are thread-safe, so there's no need for <code>dispatch_once</code> or similar protections</p> <blockquote> <p>The lazy initializer for a global variable (also for static members of structs and enums) is run the first time that global is accessed, and is launched as dispatch_once to make sure that the initialization is atomic. This enables a cool way to use dispatch_once in your code: just declare a global variable with an initializer and mark it private.</p> </blockquote> <p>From <a href="http://developer.apple.com/swift/blog/?id=7">here</a></p>
<p>After seeing David's implementation. It seems like there's no need to have a singleton class function instanceMethod since [let] is doing pretty much the same thing as a sharedInstance class method. All you need to do is declare it as a global constant and that would be it. </p> <pre><code>let gScopeManagerSharedInstance = ScopeManager() class ScopeManager { // no need for a class method to return the shared instance. Use the gScopeManagerSharedInstance directly. } </code></pre>
<p><em>tl;dr: Use the <strong>class constant</strong> approach if you are using Swift 1.2 or above and the <strong>nested struct</strong> approach if you need to support earlier versions.</em></p> <p>From my experience with Swift there are three approaches to implement the Singleton pattern that support lazy initialization and thread safety.</p> <h1>Class constant</h1> <pre><code>class Singleton { static let sharedInstance = Singleton() } </code></pre> <p>This approach supports lazy initialization because Swift lazily initializes class constants (and variables), and is thread safe by the definition of <code>let</code>. This is now <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#//apple_ref/doc/uid/TP40014216-CH7-ID14">officially recommended way</a> to instantiate a singleton.</p> <p>Class constants were introduced in Swift 1.2. If you need to support an earlier version of Swift, use the nested struct approach below or a global constant.</p> <h1>Nested struct</h1> <pre><code>class Singleton { class var sharedInstance: Singleton { struct Static { static let instance: Singleton = Singleton() } return Static.instance } } </code></pre> <p>Here we are using the static constant of a nested struct as a class constant. This is a workaround for the lack of static class constants in Swift 1.1 and earlier, and still works as a workaround for the lack of static constants and variables in functions.</p> <h1>dispatch_once</h1> <p>The traditional Objective-C approach ported to Swift. I'm fairly certain there's no advantage over the nested struct approach but I'm putting it here anyway as I find the differences in syntax interesting.</p> <pre><code>class Singleton { class var sharedInstance: Singleton { struct Static { static var onceToken: dispatch_once_t = 0 static var instance: Singleton? = nil } dispatch_once(&amp;Static.onceToken) { Static.instance = Singleton() } return Static.instance! } } </code></pre> <p>See this <a href="https://github.com/hpique/SwiftSingleton">GitHub</a> project for unit tests.</p>
<pre><code>class UtilSingleton: NSObject { var iVal: Int = 0 class var shareInstance: UtilSingleton { get { struct Static { static var instance: UtilSingleton? = nil static var token: dispatch_once_t = 0 } dispatch_once(&amp;Static.token, { Static.instance = UtilSingleton() }) return Static.instance! } } } </code></pre> <p>how to use:</p> <pre><code>UtilSingleton.shareInstance.iVal++ println("singleton new iVal = \(UtilSingleton.shareInstance.iVal)") </code></pre>
<p>I prefer this implementation:</p> <pre><code>class APIClient { } var sharedAPIClient: APIClient = { return APIClient() }() extension APIClient { class func sharedClient() -&gt; APIClient { return sharedAPIClient } } </code></pre>
<p>If you are planning on using your Swift singleton class in Objective-C, this setup will have the compiler generate appropriate Objective-C-like header(s):</p> <pre><code>class func sharedStore() -&gt; ImageStore { struct Static { static let instance : ImageStore = ImageStore() } return Static.instance } </code></pre> <p>Then in Objective-C class you can call your singleton the way you did it in pre-Swift days:</p> <pre><code>[ImageStore sharedStore]; </code></pre> <p>This is just my simple implementation.</p>
<p>I would suggest an Enum, like you would use in Java, e.g.:</p> <pre><code>enum SharedTPScopeManager: TPScopeManager { case Singleton } </code></pre>
<p>Just for reference, here is an example Singleton implementation of Jack Wu/hpique's Nested Struct implementation. The implementation also shows how archiving could work, as well as some accompanying functions. I couldn't find this complete of an example, so hopefully this helps somebody!</p> <pre><code>import Foundation class ItemStore: NSObject { class var sharedStore : ItemStore { struct Singleton { // lazily initiated, thread-safe from "let" static let instance = ItemStore() } return Singleton.instance } var _privateItems = Item[]() // The allItems property can't be changed by other objects var allItems: Item[] { return _privateItems } init() { super.init() let path = itemArchivePath // Returns "nil" if there is no file at the path let unarchivedItems : AnyObject! = NSKeyedUnarchiver.unarchiveObjectWithFile(path) // If there were archived items saved, set _privateItems for the shared store equal to that if unarchivedItems { _privateItems = unarchivedItems as Array&lt;Item&gt; } delayOnMainQueueFor(numberOfSeconds: 0.1, action: { assert(self === ItemStore.sharedStore, "Only one instance of ItemStore allowed!") }) } func createItem() -&gt; Item { let item = Item.randomItem() _privateItems.append(item) return item } func removeItem(item: Item) { for (index, element) in enumerate(_privateItems) { if element === item { _privateItems.removeAtIndex(index) // Delete an items image from the image store when the item is // getting deleted ImageStore.sharedStore.deleteImageForKey(item.itemKey) } } } func moveItemAtIndex(fromIndex: Int, toIndex: Int) { _privateItems.moveObjectAtIndex(fromIndex, toIndex: toIndex) } var itemArchivePath: String { // Create a filepath for archiving let documentDirectories = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true) // Get the one document directory from that list let documentDirectory = documentDirectories[0] as String // append with the items.archive file name, then return return documentDirectory.stringByAppendingPathComponent("items.archive") } func saveChanges() -&gt; Bool { let path = itemArchivePath // Return "true" on success return NSKeyedArchiver.archiveRootObject(_privateItems, toFile: path) } } </code></pre> <p>And if you didn't recognize some of those functions, here is a little living Swift utility file I've been using:</p> <pre><code>import Foundation import UIKit typealias completionBlock = () -&gt; () extension Array { func contains(#object:AnyObject) -&gt; Bool { return self.bridgeToObjectiveC().containsObject(object) } func indexOf(#object:AnyObject) -&gt; Int { return self.bridgeToObjectiveC().indexOfObject(object) } mutating func moveObjectAtIndex(fromIndex: Int, toIndex: Int) { if ((fromIndex == toIndex) || (fromIndex &gt; self.count) || (toIndex &gt; self.count)) { return } // Get object being moved so it can be re-inserted let object = self[fromIndex] // Remove object from array self.removeAtIndex(fromIndex) // Insert object in array at new location self.insert(object, atIndex: toIndex) } } func delayOnMainQueueFor(numberOfSeconds delay:Double, action closure:()-&gt;()) { dispatch_after( dispatch_time( DISPATCH_TIME_NOW, Int64(delay * Double(NSEC_PER_SEC)) ), dispatch_get_main_queue()) { closure() } } </code></pre>
<p>My way of implementation in Swift...</p> <p><strong>ConfigurationManager.swift</strong></p> <pre><code>import Foundation let ConfigurationManagerSharedInstance = ConfigurationManager() class ConfigurationManager : NSObject { var globalDic: NSMutableDictionary = NSMutableDictionary() class var sharedInstance:ConfigurationManager { return ConfigurationManagerSharedInstance } init() { super.init() println ("Config Init been Initiated, this will be called only onece irrespective of many calls") } </code></pre> <p>Access the globalDic from any screen of the application by the below.</p> <p>Read:</p> <pre><code> println(ConfigurationManager.sharedInstance.globalDic) </code></pre> <p>Write:</p> <pre><code> ConfigurationManager.sharedInstance.globalDic = tmpDic // tmpDict is any value that to be shared among the application </code></pre>
<p><strong>First solution</strong></p> <pre><code>let SocketManager = SocketManagerSingleton(); class SocketManagerSingleton { } </code></pre> <p>Later in your code:</p> <pre><code>func someFunction() { var socketManager = SocketManager } </code></pre> <p><strong>Second solution</strong></p> <pre><code>func SocketManager() -&gt; SocketManagerSingleton { return _SocketManager } let _SocketManager = SocketManagerSingleton(); class SocketManagerSingleton { } </code></pre> <p>And later in your code you will be able to keep braces for less confusion:</p> <pre><code>func someFunction() { var socketManager = SocketManager() } </code></pre>
<p>Swift Singletons are exposed in the cocoa frameworks as class functions, e.g. <code>NSFileManager.defaultManager()</code>, <code>NSNotificationCenter.defaultCenter()</code>, so I feel it makes more sense as a class function to mirror this behaviour, rather than a class variable as some other solutions use e.g.</p> <pre><code>class MyClass { private static let _sharedInstance = MyClass() class func sharedInstance() -&gt; MyClass { return _sharedInstance } } </code></pre> <p>Retrieve the singleton via <code>MyClass.sharedInstance()</code></p>
<pre><code> func init() -&gt; ClassA { struct Static { static var onceToken : dispatch_once_t = 0 static var instance : ClassA? = nil } dispatch_once(&amp;Static.onceToken) { Static.instance = ClassA() } return Static.instance! } </code></pre>
<p>Swift 1.2 or later now supports static variables/constants in classes. So you can just use a static constant:</p> <pre><code>class MySingleton { static let sharedMySingleton = MySingleton() private init() { // ... } } </code></pre>
<p>Per the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#singleton">Apple documentation</a>, it has been repeated many times that the easiest way to do this in Swift is with a static type property:</p> <pre><code>class Singleton { static let sharedInstance = Singleton() } </code></pre> <p>However, if you're looking for a way to perform additional setup beyond a simple constructor call, the secret is to use an immediately invoked closure:</p> <pre><code>class Singleton { static let sharedInstance: Singleton = { let instance = Singleton() // setup code return instance }() } </code></pre> <p>This is guaranteed to be thread-safe and lazily initialized only once.</p>
<pre><code>final class MediaModel: NSObject { static let sharedMyManager = MediaModel() private override init() { super.init() } } </code></pre> <p>Then call it;</p> <pre><code>let sharedManager = MediaModel.sharedMyManager </code></pre>
<p>This is my implementation. It also prevents the programmer from creating a new instance:</p> <pre><code>let TEST = Test() class Test { private init() { // This is a private (!) constructor } } </code></pre>
<p>In brief,</p> <pre><code>class Manager { static let sharedInstance = Manager() private init() {} } </code></pre> <p>You may want to read <a href="https://developer.apple.com/swift/blog/?id=7" rel="nofollow">Files and Initialization</a></p> <blockquote> <p>The lazy initializer for a global variable (also for static members of structs and enums) is run the first time that global is accessed, and is launched as <code>dispatch_once</code> to make sure that the initialization is atomic.</p> </blockquote>
<p>I just came across with this, but i required my singleton to allow inheritance, and none of these solutions actually allowed it.</p> <p>So i came up with this:</p> <pre><code>public class Singleton { private static var sharedInstanceVar = Singleton() public class func sharedInstance()-&gt;Singleton { return sharedInstanceVar } } public class SubSingleton: Singleton { private static var sharedInstanceToken:dispatch_once_t = 0 public class override func sharedInstance()-&gt;SubSingleton { dispatch_once(&amp;sharedInstanceToken){ sharedInstanceVar = SubSingleton() } return sharedInstanceVar as! SubSingleton } } </code></pre> <ul> <li>This way when doing Singleton.sharedInstance() first it will return the instance of Singleton</li> <li>When doing SubSingleton.sharedInstance() first it will return the instance of SubSingleton created. </li> <li>If the above is done, then SubSingleton.sharedInstance() is Singleton is true and the same instance is used.</li> </ul> <p>The issue with this first dirty approach is that i cannot guarantee that subclasses would implement the dispatch_once_t and make sure that sharedInstanceVar is only modified once per class... </p> <p>I will try to refine this further but it would be interesting to see if anyone has strong feelings against this (besides the fact that is verbose and requires to manually update it)</p>
<p>The best approach in swift above 1.2 is one line singleton as - </p> <pre><code>class Shared: NSObject { static let sharedInstance = Shared() private override init() { } } </code></pre> <p>To know more detail about this approach you can visit this <a href="http://iosbucket.blogspot.in/2016/04/singleton-in-swift-best-way-to-create.html" rel="nofollow">link</a></p>
<pre><code>private var sharedURLCacheForRequestsKey:Void? extension URLCache{ public static func sharedURLCacheForRequests()-&gt;URLCache{ var cache = objc_getAssociatedObject(OperationQueue.main, &amp;sharedURLCacheForRequestsKey) if cache is URLCache { }else{ cache = URLCache(memoryCapacity: 0, diskCapacity: 1*1024*1024*1024, diskPath: "sharedURLCacheForRequestsKey") objc_setAssociatedObject(OperationQueue.main, &amp;sharedURLCacheForRequestsKey, cache, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) } return cache as! URLCache }} </code></pre>
<p><strong>Swift 3+</strong></p> <pre><code>protocol Singleton: class { static var sharedInstance: Self { get } } final class Kraken: Singleton { static let sharedInstance = Kraken() private init() {} } </code></pre>
<p><strong>From Apple <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#singleton" rel="nofollow">Docs</a>,</strong></p> <blockquote> <p>You can simply use a static type property, which is guaranteed to be lazily initialized only once, even when accessed across multiple threads simultaneously:</p> </blockquote> <pre><code>class Singleton { static let sharedInstance = Singleton() } </code></pre> <blockquote> <p>If you need to perform additional setup beyond initialization, you can assign the result of the invocation of a closure to the global constant:</p> </blockquote> <pre><code>class Singleton { static let sharedInstance: Singleton = { let instance = Singleton() // setup code return instance }() } </code></pre>