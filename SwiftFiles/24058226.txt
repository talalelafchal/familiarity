Are nil and Optional&lt;T&gt;.None the same thing in Swift?
<p>I'm a bit confused by Swift tutorials.</p> <p>Is <code>nil</code> just a convenient shortcut for <code>Optional&lt;T&gt;.None</code>?<br> Is there an implicit conversion from one to another?</p> <p>A couple of observations:</p> <ul> <li><code>Optional&lt;String&gt;.None == nil</code></li> <li><code>nil</code> literal seems to have a <code>NilType</code></li> </ul> <p>If this is an implicit conversion, can I define my own type that “accepts” nil, or is <code>Optional</code> somehow special in this regard? I don't think defining custom convertible-to-nil types is a good idea—I'm just trying to understand how the type system works in this case.</p>
<blockquote> <p>If you don’t provide an initial value when you declare an optional variable or property, its value automatically defaults to nil.</p> </blockquote> <p>They have same value, both are <code>nil</code>. </p> <p>Actually <code>Optional&lt;T&gt;.None</code> is a polymorphic primitive value, and <code>nil</code> is a constant having this value. <code>Optional&lt;T&gt;</code> is a polymorphic type. The type of <code>nil</code> is <code>Optional&lt;T&gt;</code>. That's why you cannot assign <code>nil</code> to anything else but an <code>Optional&lt;T&gt;</code>. For the same reason you cannot assign <code>true</code> to anything but a <code>Bool</code>.</p> <p>&nbsp;</p> <p>For now, according to the documentation you can not use <code>nil</code> for any custom and arbitrary type but optionals.</p> <blockquote> <p>nil cannot be used with non-optional constants and variables. If a constant or variable in your code needs to be able to cope with the absence of a value under certain conditions, always declare it as an optional value of the appropriate type.</p> </blockquote>