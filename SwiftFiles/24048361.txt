Xcode 6-beta, following Swift iBook, typing numbers.map crashes Xcode
<p>I'm going through the new Swift iBook on my new Mac and I'm in the intro/tutorial section of the book where it gives an overview of the language. At the end of the section on functions, it gives an example of a closure with one called "numbers.map". Every time I attempt to type in "numbers.map" into my source code, without fail, Xcode crashes. A gray box pops up that says: SourceKitService Terminated Editor Functionality temporarily limited. It then gives me a crash report and asks me to reopen Xcode. This message appears to tell me the crash happens on thread 21: Crashed Thread: 21 IDEPlaygroundExecutionSessionThread(pid=406. This seems to be the same thread that crashes every time. And here is the report for the thread:</p> <pre><code>Thread 21 Crashed:: IDEPlaygroundExecutionSessionThread(pid=406) 0 com.apple.LLDB.framework 0x000000010e53fd21 swift::IterableDeclContext::loadAllMembers() const + 17 1 com.apple.LLDB.framework 0x000000010e537dac swift::NominalTypeDecl::getMembers(bool) const + 28 2 com.apple.LLDB.framework 0x000000010e794582 (anonymous namespace)::LowerType::visitAnyStructType(swift::CanType, swift::StructDecl*) + 194 3 com.apple.LLDB.framework 0x000000010e792040 swift::Lowering::TypeLowering const* swift::CanTypeVisitor&lt;(anonymous namespace)::LowerType, swift::Lowering::TypeLowering const*&gt;::visit&lt;&gt;(swift::CanType) + 128 4 com.apple.LLDB.framework 0x000000010e791e46 swift::Lowering::TypeConverter::getTypeLoweringForUncachedLoweredType(swift::Lowering::TypeConverter::TypeKey) + 118 5 com.apple.LLDB.framework 0x000000010e7918b6 swift::Lowering::TypeConverter::getTypeLowering(swift::Lowering::AbstractionPattern, swift::Type, unsigned int) + 2198 6 com.apple.LLDB.framework 0x000000010e7b2337 swift::Lowering::SILGenFunction::emitInitializationForVarDecl(swift::VarDecl*, bool, swift::Type) + 295 7 com.apple.LLDB.framework 0x000000010e7b2bef swift::ASTVisitor&lt;(anonymous namespace)::InitializationForPattern, void, void, void, std::__1::unique_ptr&lt;swift::Lowering::Initialization, std::__1::default_delete&lt;swift::Lowering::Initialization&gt; &gt;, void, void&gt;::visit(swift::Pattern*) + 415 8 com.apple.LLDB.framework 0x000000010e7b2963 swift::Lowering::SILGenFunction::visitPatternBindingDecl(swift::PatternBindingDecl*) + 51 9 com.apple.LLDB.framework 0x000000010e7ebbdc swift::Lowering::SILGenFunction::visitBraceStmt(swift::BraceStmt*) + 332 10 com.apple.LLDB.framework 0x000000010e7a361b swift::Lowering::SILGenModule::emitSourceFile(swift::SourceFile*, unsigned int) + 395 11 com.apple.LLDB.framework 0x000000010e7a38cb swift::SILModule::constructSIL(swift::Module*, swift::SourceFile*, unsigned int) + 331 12 com.apple.LLDB.framework 0x000000010e7a39b0 swift::performSILGeneration(swift::SourceFile&amp;, unsigned int) + 32 13 com.apple.LLDB.framework 0x000000010eb24925 lldb_private::SwiftExpressionParser::Parse(lldb_private::Stream&amp;, unsigned int, unsigned int, unsigned int) + 9433 14 com.apple.LLDB.framework 0x000000010e912fe8 lldb_private::ClangUserExpression::Parse(lldb_private::Stream&amp;, lldb_private::ExecutionContext&amp;, lldb_private::ExecutionPolicy, bool, bool, unsigned int) + 1022 15 com.apple.LLDB.framework 0x000000010e914738 lldb_private::ClangUserExpression::Evaluate(lldb_private::ExecutionContext&amp;, lldb_private::EvaluateExpressionOptions const&amp;, char const*, char const*, lldb_private::SharingPtr&lt;lldb_private::ValueObject&gt;&amp;, lldb_private::Error&amp;, unsigned int) + 496 16 com.apple.LLDB.framework 0x000000010ea60d65 lldb_private::Target::EvaluateExpression(char const*, lldb_private::StackFrame*, lldb_private::SharingPtr&lt;lldb_private::ValueObject&gt;&amp;, lldb_private::EvaluateExpressionOptions const&amp;) + 367 17 com.apple.LLDB.framework 0x000000010d23babc lldb::SBFrame::EvaluateExpression(char const*, lldb::SBExpressionOptions const&amp;) + 598 18 com.apple.dt.IDELanguageSupportUI 0x0000000114cea802 -[IDEPlaygroundExecutionSession _executePlaygroundSource] + 603 19 com.apple.dt.IDELanguageSupportUI 0x0000000114ce9631 -[IDEPlaygroundExecutionSession handleInternalSessionEvent:] + 482 20 com.apple.dt.IDELanguageSupportUI 0x0000000114ce8837 -[IDEPlaygroundExecutionSession listenForEvents] + 535 21 com.apple.dt.IDELanguageSupportUI 0x0000000114ce8479 IDEPlaygroundExecutionSessionThread(void*) + 132 22 libsystem_pthread.dylib 0x00007fff8a342899 _pthread_body + 138 23 libsystem_pthread.dylib 0x00007fff8a34272a _pthread_start + 137 24 libsystem_pthread.dylib 0x00007fff8a346fc9 thread_start + 13 </code></pre> <p>...And there is a summary at the bottom too that looks like this:</p> <pre><code>Thread 21 crashed with X86 Thread State (64-bit): rax: 0x00007fb939a83dd8 rbx: 0x0000f00000000079 rcx: 0x0000000000000000 rdx: 0x0000f00000000009 rdi: 0x0000f00000000079 rsi: 0x0000000000000001 rbp: 0x000000012648ab10 rsp: 0x000000012648aae0 r8: 0x00007fb9341658c8 r9: 0x00007fb939cd4880 r10: 0x0000000000000000 r11: 0x0000000000000001 r12: 0x000000012648ad58 r13: 0x00007fb9341658c8 r14: 0x0000f00000000079 r15: 0x0000000000000001 rip: 0x000000010e53fd21 rfl: 0x0000000000010297 cr2: 0x00007fb939ce8000 Logical CPU: 0 Error Code: 0x00000000 Trap Number: 13 </code></pre> <p>Is this a problem that can be fixed or likely just an issue Apple will have to patch with an update? Thanks.</p>