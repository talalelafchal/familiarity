&quot;Cannot assign to the result of this expression&quot; - How to set property of optional variable
<p>I have a question regarding Swift and optional properties.</p> <p>Suppose I have the following code:</p> <pre><code>import Foundation class MyClass: NSObject { var parent: MyClass? var string: String? init() { super.init() } } let variable : MyClass = MyClass() variable.string = "variable" variable.parent?.string = "parent" </code></pre> <p>I get an error on the following line saying "Cannot assign to the result of this expression"</p> <pre><code>variable.parent?.string = "parent" </code></pre> <p>Now, I can suppress this error by replacing the question mark with an exclamation mark which, to my knowledge, makes Swift assume that an object will be there at runtime but it crashes because obviously there isn't an object.</p> <p>Essentially, how can I set a property on an optional variable without doing something like "if variable.parent"?</p>
<p>To work with optional, you need to use optional chainning </p> <pre><code>let variable : MyClass = MyClass() variable.string = "variable" variable.parent = MyClass() if let a = variable.parent { a.string = "parent" } </code></pre> <p>or if you are sure there is object there you can do</p> <pre><code>variable.parent!.string = "parent" </code></pre> <p>note that if you did not initialize parent you will get an error.</p>
<p>You've can't be assigning the <code>string</code> in a non-existent <code>parent</code>. It will be up to you how to avoid that. One thing for sure, either you will ensure the <code>parent</code> is bound (like getting it bound in some <code>init()</code> method) or you must use <code>if variable.parent</code> each time (even though you don't want to) or you must define a method like <code>assignParentString()</code> that is implemented to check on the parent.</p> <pre><code>func assignParentString (string: String) { if let parent = self.parent { parent.string = string } } </code></pre> <p>For example:</p> <pre><code> 3&gt; class MyClass { 4. var parent : MyClass? 5. var name : String? 6. func aps (name:String) { 7. if let parent = self.parent { 8. parent.name = name 9. } 10. } 11. } 12&gt; var mc = MyClass() mc: MyClass = { parent = nil name = nil } 13&gt; mc.name = "mc" 14&gt; mc.aps ("mcp") // no error, name did not take 15&gt; mc $R3: MyClass = { parent = nil name = "mc" } 16&gt; mc.parent = MyClass() 17&gt; mc.aps ("mcp") 18&gt; mc $R6: MyClass = { parent = Some { parent = nil name = "mcp" } name = "mc" } </code></pre>