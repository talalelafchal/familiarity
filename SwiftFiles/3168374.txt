Determining if an NSDate is today in NSPredicate
<p>I've tried multiple methods and tried some suggestions on this site, but how can I determine if a CoreData attribute "dueDate" is equal to "Today", I know NSDate is a specific time as well but I want the predicate to return if it is the same day/month/year regardless of what the time is in the day. Any suggestions?</p>
<p>Couple things that you might want to try.</p> <ol> <li>Add another integer attribute, dueDateYYYMMDD to your entity. Convert the NSDate using NSDateFormatter to the YYYYMMDD string, then use NSString integerValue to produce the dueDateYYYYMMDD.</li> <li>Use NSDateFormatter on [NSDate date] to produce "today" in YYYYMMDD format and [NSString integerValue] to obtain "today" as an integer (todayInt). Now your predicate can be easily constructed to compare dueDateYYYYMMDD == todayInt.</li> </ol> <p>Comparison on integer values is more efficient than strings.</p>
<p>The concept of today is tricky because what do you mean by it? That is why it is not straightforward. Do you mean as in the same day, month and year regardless of timezone? Do you mean within the same 24 hour period? Within the last 24 hours? It can get complicated.</p> <p>Your answer to the above determines the answer to your question. If it is the same day, month and year then use NSDateComponents to extract those three values and compare them. If you mean within 24 hours then you can use the date method <code>-timeIntervalSinceDate:</code> to determine the number of seconds between the dates.</p> <p>If you mean something else then please clarify.</p>
<p>Fixed this by using NSDateComonents and NSCalendar.</p> <p>Just created NSDateComponents of just day/month/year from the original NSDate and then re-created it to a date using dateFromComponents.</p> <p>This lead to it being the start of the day, I then created another date using the method above that was the start of "tomorrow" and used > and &lt; to see if it was "today." Thanks for the help anyway.</p>
<p>You might find Erica Sadun NSDate utilities helpful for this kind of thing. </p> <p>Lot's of really handy bits and pieces. Check it out.</p> <p><a href="https://github.com/erica/NSDate-Extensions" rel="nofollow">https://github.com/erica/NSDate-Extensions</a></p> <p>Matt</p>
<p>This is what I came up with:</p> <pre><code>- (NSPredicate *)matchAttribute:(NSString *)attributeName withDate:(NSDate *)date { NSDateComponents *components = [[NSCalendar currentCalendar] components:NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit fromDate:date]; NSDateComponents *oneDay = [[NSDateComponents alloc] init]; oneDay.day = 1; NSDate *lastMidnight = [[NSCalendar currentCalendar] dateFromComponents:components]; NSDate *nextMidnight = [[NSCalendar currentCalendar] dateByAddingComponents:oneDay toDate:lastMidnight options:NSWrapCalendarComponents]; return [NSPredicate predicateWithFormat:@"(%K &gt;= %@) AND (%K &lt;= %@)", attributeName, lastMidnight, attributeName, nextMidnight]; } </code></pre> <p>Inspiration from <a href="http://stackoverflow.com/questions/8364495/nspredicate-for-finding-events-that-occur-between-a-certain-date-range">here</a>, <a href="http://zdam.posterous.com/core-data-fetch-by-date" rel="nofollow">here</a> and <a href="http://stackoverflow.com/questions/1965331/nspredicate-filtering-objects-by-day-of-nsdate-property">here</a>.</p>
<h2>Swift Answer</h2> <p>I use <a href="https://github.com/melvitax/AFDateHelper" rel="nofollow">AFDateHelper</a> If you don't want to use third party. Just go check the source to find implementation of <code>dateAtStartOfDay()</code> and <code>dateAtEndOfDay()</code></p> <p>Then its a breeze.</p> <p><code>NSPredicate(format: "pickup_time &gt; %@ &amp;&amp; pickup_time &lt; %@",NSDate().dateAtStartOfDay(),NSDate().dateAtEndOfDay())</code></p>