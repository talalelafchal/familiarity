iOS unrecognized selector sent to instance in Swift
<p>I am having problems with trying to get a UIButton to work when the user presses it. I keep getting an error saying: unrecognised selector sent to instance</p> <pre><code>override func viewDidLoad() { super.viewDidLoad() button.addTarget(self, action: "buttonClick", forControlEvents: UIControlEvents.TouchUpInside) button.setTitle("Print", forState: UIControlState.Normal) button.font = UIFont(name: "Avenir Next", size: 14) button.backgroundColor = UIColor.lightGrayColor() self.view.addSubview(button) } func buttonClick(Sender: UIButton!) { myLabelInfo.text = "Hello" } </code></pre> <p>For a Swift method such as <code>func buttonClick(Sender: UIButton)</code> what is the correct string to pass to <code>addTarget</code> method for the selector? Is it "buttonClick", "buttonClick:", "buttonClickSender:" or something else?</p>
<p>You're using an invalid method signature for the action. You're supplying <code>buttonClick</code>, but the method has an argument, so the signature should be <code>buttonClick:</code></p> <pre><code>button.addTarget(self, action: "buttonClick:", forControlEvents: UIControlEvents.TouchUpInside) </code></pre> <p>For more information about how to format your selectors, you can refer to the accepted answer in the post linked below. The code used in this post may be Objective-C, but all its lessons can be applied here as well.</p> <p><a href="http://stackoverflow.com/questions/297680/creating-a-selector-from-a-method-name-with-parameters">Creating a selector from a method name with parameters</a></p> <p>And as a side note, this code would also be valid if you used <code>Selector("buttonClicked:")</code> as the action, but you don't have to because string literals can be implicitly cast to the Selector type.</p> <p>Quoting from <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/BuildingCocoaApps.pdf">Using Swift with Cocoa and Objective-C</a></p> <blockquote> <p>An Objective-C selector is a type that refers to the name of an Objective-C method. In Swift, Objective-C selectors are represented by the Selector structure. You can construct a selector with a string literal, such as let mySelector: Selector = "tappedButton:". Because string literals can be automatically converted to selectors, you can pass a string literal to any method that accepts a selector.</p> </blockquote>
<p>You need to pass it an actual <code>Selector</code>. Try using this line instead:</p> <pre><code>button.addTarget(self, action: Selector("buttonClick:"), forControlEvents: UIControlEvents.TouchUpInside) </code></pre> <p>You also need the <code>:</code> at the end of the selector name because you have 1 argument. This is the same as typical Obj-C selector naming.</p>
<h3>Swift &lt; 2.2</h3> <p>In Swift &lt; 2.2 the selector method cannot be <code>private</code> (unrecognized selector error).</p> <p>Prefered (by Apple) notation is the string <code>"methodWithParam:"</code> notation.</p> <p><strong>Troubleshooting</strong>: if you have troubles with <code>NSTimer</code> selector, maybe your class should be a subclass of <code>NSObject</code>.</p> <h3>Swift >= 2.2</h3> <p>Use the <code>#selector</code> notation. Read more here: <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md" rel="nofollow">https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md</a></p> <p>For private methods you can use the <code>@objc</code> method modifier, like this: <code>@objc private func timerTick(timer: NSTimer)</code>.</p> <p><strong>No need for subclassing <code>NSObject</code> anymore!</strong></p>
<p>You have missed the colon while specifying selector.so the line should be</p> <p><code>button.addTarget(self, action: Selector("buttonClick:"), forControlEvents: UIControlEvents.TouchUpInside)</code></p>
<p>I had the same problem - the solution ended up being prefixing the method I wanted the button to execute on click with <code>@objc</code>, to expose it in the Objective-C header file and thereby the Objective-C runtime.</p> <p>Like:</p> <pre><code>@objc func buttonClick(Sender: UIButton!) { myLabelInfo.text = "Hello" } </code></pre>
<p>The notation for Swift > 2.2 would be:</p> <pre><code>let longPress = UILongPressGestureRecognizer(target: self, action: #selector(YourClass.yourMethod(_:))) </code></pre> <p>Worked for me so far (Xcode 7.3)</p>