How to toggle visibility of NSSplitView subView + hide Pane Splitter divider?
<p>We have a parent <code>Split</code> view (<code>NSSplitView</code>), and two subviews, <code>Content</code> and <code>SideBar</code> (the sidebar is on the right).</p> <p>What would be the optimal Cocoa-friendly way to toggle the <code>SideBar</code> view?</p> <ul> <li>I would really love it, if the suggested solution includes animation</li> <li>I really don't need any suggestions related to external plugins, etc (e.g. BWToolkit)</li> </ul> <p><strong>HINT :</strong> I've been trying to do that, but still I had issues hiding the divider of the NSSplitView as well. How could I do it, while hiding it at the same time?</p>
<p>Here's a pretty decent tutorial that shows how to do this: <a href="http://www.manicwave.com/blog/2009/12/31/unraveling-the-mysteries-of-nssplitview-part-2/" rel="nofollow">Unraveling the Mysteries of NSSplitView</a>.</p> <p>Hiding the divider is done in NSSplitView's delegate method <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSSplitViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSSplitViewDelegate/splitView%3ashouldHideDividerAtIndex%3a" rel="nofollow">splitView:shouldHideDividerAtIndex:</a>.</p> <p>You will have to animate the frame size change yourself if you don't like the way NSSplitView does it.</p>
<p>I wrote a Swift version of the content in the link from @Nathan's answer that works for me. In the context of my example <code>splitView</code> is set elsewhere, probably as an instance property on an encompassing class:</p> <pre><code>func toggleSidebar () { if splitView.isSubviewCollapsed(splitView.subviews[1] as NSView) { openSidebar() } else { closeSidebar() } } func closeSidebar () { let mainView = splitView.subviews[0] as NSView let sidepanel = splitView.subviews[1] as NSView sidepanel.hidden = true let viewFrame = splitView.frame mainView.frame.size = NSMakeSize(viewFrame.size.width, viewFrame.size.height) splitView.display() } func openSidebar () { let sidepanel = splitView.subviews[1] as NSView sidepanel.hidden = false let viewFrame = splitView.frame sidepanel.frame.size = NSMakeSize(viewFrame.size.width, 200) splitView.display() } </code></pre> <p>These functions will probably methods in a class, they are for me. If your <code>splitView</code> can be <code>nil</code> you obviously have to check for that. This also assumes you have two subviews and the one at index 1, here as <code>sidePanel</code> is the one you want to collapse.</p>
<p>I got some artifacts with the code above, likely because it was out of context. I am sure it works where it was meant to. Anyway, here is a very streamlined implementation:</p> <pre><code>// this is the declaration of a left vertical subview of // 'splitViewController', which is the name of the split view's outlet var leftView: NSView { return self.splitViewController.subviews[0] as NSView } // here is the action of a button that toggles the left vertical subview // the left subview is always restored to 100 pixels here @IBAction func someButton(sender: AnyObject) { if splitViewController.isSubviewCollapsed(leftView) { splitViewController.setPosition(100, ofDividerAtIndex: 0) leftView.hidden = false } else { splitViewController.setPosition(0, ofDividerAtIndex: 0) leftView.hidden = true } } </code></pre> <p>To see a good example using animations, control-click to download <a href="https://github.com/mdiep/MDPSplitView/blob/master/MDPSplitViewDemo/MainWindowController.swift" rel="nofollow">this file</a>.</p>