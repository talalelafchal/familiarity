How to write method to calculate average in Swift-playground
<p>In swift I'm trying to write a method to calculate the average. Using the method below if i type average(5,10,15) I get infinity displayed in the swift-playforund</p> <pre><code>func average(numbers: Int...) -&gt; Double { var sum = 0 var count = 0 for number in numbers { sum += number } var ave : Double = Double(sum) / Double(count) return ave } </code></pre>
<p>You forget to increment count in the inner loop.</p>
<p>Just write <code>count = count +1</code> in your <code>for</code> loop.</p> <p>Such like,,,</p> <pre><code>. . . for number in numbers { sum += number count = count +1 } . . </code></pre> <p>And now function by</p> <pre><code>var avg:Double = average(5,10,15) println(avg) </code></pre>
<p>You can use the count property of the array:</p> <pre><code>func average(numbers: Int...) -&gt; Double { var sum = 0 for number in numbers { sum += number } var ave : Double = Double(sum) / Double(numbers.count) return ave } </code></pre>
<p>While others have already pointed out the missing count variable, it is worth noting that you can do the average even more elegantly by using closures as follows:</p> <pre><code>func averagec(numbers:Int...) -&gt; Double { return Double(numbers.reduce(0,combine:+))/Double(numbers.count) } </code></pre>
<p>You're getting infinity because <code>count</code> is always 0 - it's never incremented. So the <code>ave</code> variable is always going to be equal to some number over 0, which is a divide by zero error.</p> <p>Either use <code>countElements(numbers)</code> or increment count on each iteration through the loop.</p>
<p>Here's what I did:</p> <pre><code>func getAverage(nums: Double...) -&gt;Double { var temp = 0.0 for num in nums { temp+=num } let div = Double(nums.count) var average = temp/div return average } getAverage(21,34.5,28,79) </code></pre> <p>Note that I'm accepting <strong>Doubles</strong> as input, not just Ints. I'm being a little verbose at the end, but I was trying for readable code. I probably could have just returned:</p> <pre><code> return temp/Double(nums.count) </code></pre> <p>at the end and saved a few lines of code.</p>
<p>It's so much easier with just a straightforward call to <code>reduce</code>:</p> <pre><code>let array = [1.0,2.0,3.0] var average = array.reduce(0.0) { return $0 + $1/Double(array.count) } // average = 2.0 </code></pre>
<p>check this method.</p> <pre><code>func averageOf(numbers:Int...)-&gt;Float{ var sum = 0 for number in numbers{ sum += number } return Float(sum)/Float(numbers.count) } averageOf(20,10,30) </code></pre>