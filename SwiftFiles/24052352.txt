Using @lazy properties in functions causes build errors
<p>I am trying to limit a classes scope to within a function. This seems to work:</p> <pre><code>func foo() { class MyClass { var s = "" } } </code></pre> <p>I can create instances of MyClass within the foo() function.</p> <p>However, when I attempt to add the @lazy specifier to a property...</p> <pre><code>func foo() { class MyClass { @lazy var s = "" } } </code></pre> <p>... I get the following build errors:</p> <blockquote> <ul> <li>Global is external, but doesn't have external or weak linkage!</li> <li>invalid linkage type for function declaration</li> <li>LLVM ERROR: Broken module found, compilation aborted!</li> </ul> </blockquote> <hr> <p>Note: If I move the class out of the function's scope, the code compiles:</p> <pre><code>class MyClass { @lazy var s = "" } </code></pre> <p>Why is this failing, and how should this error be resolved? If it cannot be resolved, is there another way to use @lazy properties inside of functions?</p>
<p>The following code works for me:</p> <pre><code>func foo() -&gt; String { class bar { lazy var baz = "qux" } return bar().baz } foo() // prints "qux" </code></pre> <p>Looks like there was a bug in the early Swift laguage version, which has been reolved.</p>
<p>I can confirm akashivskyy's observation. I've tried it as well and the this code works for me as well:</p> <pre><code>func foo() { class MyClass { var variable = "string" } let instance = MyClass() println(instance.variable) } foo() // "string" is printed </code></pre> <p>It's not the first time for me that I've actually encountered some issues in earlier Swift versions. I mean it's still a pretty young language and thus it needs always some improvements and bug fixes.</p> <p>Are you using the newest version of Swift and Xcode?</p>