Why does the same method fail when inside an Array extension in Swift?
<p>I'm getting strange behavior when trying to call <code>sort()</code> from within an Array extension, e.g this method:</p> <pre><code>func test() { let a = [1,2,3] sort(a) { x, y in x &lt; y } } </code></pre> <p>Works on its own, but fails when its inside an <code>Array</code> extension:</p> <pre><code>extension Array { func test() { let a = [1,2,3] sort(a) { x, y in x &lt; y } } } </code></pre> <p>It's a build error, failing with:</p> <blockquote> <p>Extra argument in call</p> </blockquote> <p>Curiously the same method works as a <code>String</code> extension:</p> <pre><code>extension String { func test() { let a = [1,2,3] sort(a) { x, y in x &lt; y } } } </code></pre> <p>Why can't I call <code>sort()</code> from within an Array extension?</p>
<p>Because <code>Array</code> has a method called <code>sort</code> of its own, which is of the form <code>sort(isOrderedBefore: (T, T) -&gt; Bool)</code> </p> <p>So, when you call <code>sort</code> inside the scope of <code>Array</code>, you are actually referring to that version instead of the global <code>sort</code> function.</p> <p>Thanks to <a href="http://stackoverflow.com/a/24092862/1371070">this answer</a> in a question of mine, I found that you can make sure you're calling the <code>sort</code> version in the global scope by using Swift's default namespace, Swift. So, the global version is accessible via <code>Swift.sort</code>.</p>