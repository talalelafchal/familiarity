Why does the array use the '===' operator to compare elements?
<p>From the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_109" rel="nofollow">documentation</a> about arrays:</p> <blockquote> <p>Check whether two arrays or subarrays share the same storage and elements by comparing them with the identity operators (=== and !==)</p> </blockquote> <p>However, to check if two arrays contain the same elements, wouldn't you use the comparison operator <code>==</code> (because you're comparing the values of the array) instead of the identity <code>===</code> (which would check if you are referring to the same array)? </p> <p>Assuming I am understanding the operators properly, is this behaviour caused by array's implementation as a <code>struct</code>?</p>
<p>The key word there is "storage" - that means they are one and the same "object", which is indeed identity.</p> <p>And this check is needed because arrays are copied by reference rather than by value, so you can fall into the trap of altering "another" array if you're not careful - which is what this section of the guide is about.</p>