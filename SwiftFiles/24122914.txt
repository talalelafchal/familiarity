How to integrate Cocoapods with a Swift project?
<p>As Apple introduced <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/index.html">Swift</a>, their new programming language, I wonder how you can integrate it with existing Objective-C libraries that are available via <a href="http://cocoapods.org/">CocoaPods</a>?</p>
<p>It seems that the process is similar to the one described in <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/MixandMatch.html" rel="nofollow noreferrer">Mix and Match</a> section of <a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/index.html" rel="nofollow noreferrer">Using Swift with Cocoa and Objective-C</a> documentation. </p> <ol> <li>Create your Podfile and run <code>pod install</code>.</li> <li>Create a new Objective-C header file, <code>Example-Bridging-Header.h</code>, and add it to the project. </li> <li>Add import statement to the <strong>bridge header</strong>.</li> <li>Set <code>Objective-C Bridging Header</code> for your target:</li> </ol> <p><img src="https://i.stack.imgur.com/xGvPK.png" alt="enter image description here"></p> <p>Now you can use your library, in that case, MKUnits, in your Swift file:</p> <pre><code>let kilograms = NSNumber.mass_kilogram(2)() let pounds = NSNumber.mass_pound(10)() let result = kilograms.add(pounds) println(result) </code></pre> <p>More here: <a href="http://michal.codes/integrating-cocoapods-with-a-swift-project/" rel="nofollow noreferrer">Integrating Cocoapods with a Swift project</a></p>
<p>If you are getting a file not found error in your bridging-header.h, you might want to make sure your Pods library is being linked in your Build Scheme. </p> <p>The CocoaPods troubleshooting section describes how to do this under item #4 <a href="http://guides.cocoapods.org/using/troubleshooting.html" rel="nofollow">here</a></p>
<p><strong>UPDATE</strong>: CocoaPods 0.36 stable version has been released. It officially supports Swift.</p> <hr> <p>CocoaPods now supports Swift in their latest 0.36 release. It's still in beta but it works.</p> <p>First you need to install the CocoaPods beta (currently beta 2) by running this in your Terminal.</p> <pre><code>sudo gem install cocoapods --pre </code></pre> <p>That's pretty much it. You can add Swift libraries like you would do normally.</p> <p>But there's a catch if you want to add a library written in Objective-C to a Swift project via CocoaPods. You need to add the line <code>use_frameworks!</code> to your Podfile. Here's an example.</p> <pre><code>use_frameworks! platform :ios, '8.0' pod 'MagicalRecord' </code></pre> <p>I wrote a <a href="http://iosdevbits.blogspot.com/2014/12/finally-cocoapods-with-swift.html">blog post</a> regarding this as well.</p>
<p>Now you can use cocoapods 0.36.0 version by running <code>sudo gem install cocoapods</code> which supports to integrate swift frameworks . When you use a framework written by swift, you should explicit use it in Podfile:</p> <pre><code>platform :ios, '8.0' use_frameworks! pod 'Alamofire' </code></pre>
<p><strong>Cocoapods 0.36 and above</strong> introduces the <code>use_frameworks!</code> instruction which implies that the bridging header is not required for importing Objective-C pods in Swift.</p> <p>Please find below a full example using <strong>MBProgressHUD</strong> and <strong>Alamofire</strong>:</p> <h2>1. Podfile</h2> <pre><code>source 'https://github.com/CocoaPods/Specs.git' platform :ios, '8.3' use_frameworks! pod 'Alamofire', '&gt;= 1.2.2' # Swift pod pod 'MBProgressHUD', '&gt;= 0.9.1' # Objective-C pod </code></pre> <h2>2. Deletion</h2> <p>Remove the #imports from your bridging header or even delete the bridging header file if you do not need it. If you choose the latter possibility, do not forget to delete the path (to this deleted bridging header file) in your Xcode project configuration.</p> <h2>3. Adding imports</h2> <p>Add <code>import MBProgressHUD</code> and/or <code>import Alamofire</code> at the top of every Swift files that need these class(es).</p> <h2>4. Fix the enums if necessary</h2> <p>You're now using bona fide frameworks, so your enums have moved in flight! You might have a line of Swift that was fine with the bridging header like this:</p> <pre><code>progressHUD.mode = MBProgressHUDModeIndeterminate </code></pre> <p>That now has to become this:</p> <pre><code>progressHUD.mode = MBProgressHUDMode.Indeterminate </code></pre> <p>Not to big a deal, but the pile of errors might lead you astray that you have a bigger problem than you do if you are using a lot of Objective-C enums.</p> <p>(<a href="http://www.innerexception.com/2015/05/cocoapods-useframeworks-means-bridging.html">Source of this answer</a>)</p> <p>For your information: I guess (you will have to test by yourself to be sure) that the use_frameworks! instruction in your Podfile is only compatible with Xcode projects targeting iOS >= 8.</p>