How do I open a file in Swift?
<p>I have yet to see documentation of a Swift standard library, where I would expect to find something like a File class or struct with an interface for opening, reading, and writing files. All the usual stuff you expect for File IO. Is there one, or are to depend on NSFileManager and its ilk?</p>
<p>Here's a way to do it if the file is in your iOS project (hoping this is your situation):</p> <pre><code>var filePath = NSBundle.mainBundle().pathForResource("theFile", ofType:"txt") var data = NSData(contentsOfFile:filePath) </code></pre>
<p>I think the only valid answer at this point is: There is no Swift-based File/IO library, so you just have to use the Objective-C-based Foundation classes for now. As @BryanChen says, maybe come back in a year to find a more fleshed-out Swift standard library.</p>
<p>Often in apps you'll be using UIDocument and other iCloud linked ways of saving files, but in the Swift blog <a href="https://developer.apple.com/swift/blog/?id=6" rel="nofollow">Apple uses examples based on C and POSIX</a> for opening and saving files. So they have in one example:</p> <pre><code>let fd = open("/tmp/scratch.txt", O_WRONLY|O_CREAT, 0o666) if fd &lt; 0 { perror("could not open /tmp/scratch.txt") } else { let text = "Hello World" write(fd, text, text.characters.count) close(fd) } </code></pre> <p>And it looks very Swift like, but whether you want to use this over and above the Cocoa framework I don't know.</p>
<p>If you just need to read the contents of a file into a string, a Swift 2.0 way to do it is this: </p> <pre><code>do { var dictionary = try String(contentsOfFile: "/usr/share/dict/words", encoding: NSUTF8StringEncoding) } catch { } </code></pre> <p>Otherwise, the more involved methods mentioned above works. </p>
<p>The Swift standard library does not include this functionality. The standard library mainly contains data structures, low-level types and calls, and semi-built-in language features; I/O beyond <code>print()</code> and <code>readLine()</code> is considered out of scope. I don't really expect this to change in the near future, either.</p> <p>However, Foundation contains file I/O calls, and the Swift Corelibs project is working hard to reimplement Foundation in pure Swift so it's available everywhere Swift is. The POSIX I/O calls available on every major operating system are also available in Swift, although they're much clumsier to use.</p>