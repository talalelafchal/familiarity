Global variables vs properties for creating an UITableView
<p>I have create tableview in viewDidLoad() method, it works great, but if I want to access to my tableview in other method, I cann't do this. What is the best way for implementing UITableView. Variables with closure, properties?</p> <pre><code>let maintable:UITableView=UITableView() maintable.frame=CGRectMake(0, 60, 320, 350) maintable.showsVerticalScrollIndicator=false maintable.delegate=self maintable.datasource=self self.view.adsubview(maintable) </code></pre> <p>variables with closure. Here <code>maintable.delegate=self</code> throws an error</p> <pre><code> let mytable:UITableView={ let maintable:UITableView=UITableView() maintable.frame=CGRectMake(0, 60, 320, 350) maintable.showsVerticalScrollIndicator=false return maintable }() </code></pre>
<p>You need to declare <code>mainTableView</code> as an instance variable. Its scope is currently limited to your <code>viewDidLoad</code> method, even though the table view itself persists (since you add it to your view before it disappears). You'll also want to make sure your class conforms to the <code>UITableViewDataSource</code> and <code>UITableViewDelegate</code> protocols.</p> <pre><code>class MyViewController : ViewController { var mainTable: UITableView = UITableView() override func viewDidLoad() { super.viewDidLoad() maintable.frame = CGRectMake(0, 60, 320, 350) maintable.showsVerticalScrollIndicator = false maintable.delegate = self maintable.dataSource = self self.view.addSubview(maintable) } } extension MyViewController: UITableViewDelegate { // lots of optional methods } extension MyViewController : UITableViewDataSource { func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -&gt; Int { return 5 } func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! { // return the cell } } </code></pre>
<pre><code>class MyViewController : ViewController , UITableViewDelegate , UITableViewDataSource { let mainTable: UITableView = UITableView() override func viewDidLoad() { super.viewDidLoad() maintable.frame = CGRectMake(0, 60, 320, 350) maintable.showsVerticalScrollIndicator = false maintable.delegate = self maintable.dataSource = self self.view.addSubview(maintable) } func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -&gt; Int { return (Any_Number_Of_Rows_You_Want_To_Have) } func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -&gt; UITableViewCell! { var cell = UITableViewCell dequeuereusablecellWithIdentifier("cell") as UITableViewCell cell.titlelabel.text = "Error Resolved" return cell } } </code></pre>