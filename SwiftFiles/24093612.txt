How to add a TextField to UIAlertView in Swift
<p>I have this code, but I dont know how to show a textfield inside the UIAlertView.</p> <pre><code>var altMessage = UIAlertController(title: "Warning", message: "This is Alert Message", preferredStyle: UIAlertControllerStyle.Alert) altMessage.addAction(UIAlertAction(title: "Done", style: UIAlertActionStyle.Default, handler: nil)) self.presentViewController(altMessage, animated: true, completion: nil) </code></pre> <p>I have this code for textfield , how can I show this in UIAlerView </p> <pre><code>var my:UITextField = UITextField(frame: CGRectMake(0, 0, 10, 10)) </code></pre> <hr> <p>I also tried this code:</p> <pre><code>var alert = UIAlertView() alert.title = "Enter Input" alert.addButtonWithTitle("Done") alert.alertViewStyle = UIAlertViewStyle.PlainTextInput alert.addButtonWithTitle("Cancel") alert.show() </code></pre> <p>When I specify the AlertStyle plainText, it shows a TextField with default placeholder, "Login".. I want to change that, I want to show a Keyboard of Decimal Pad. I also want to handle the value the user enters into the textField. Can someone help me with this?</p>
<p>You can access the textfield with:</p> <pre><code>let textField = alert.textFieldAtIndex(0) </code></pre> <p>Then to change the placeholder text:</p> <pre><code>textField.placeholder = "Foo!" </code></pre> <p>And the keyboard type:</p> <pre><code>textField.keyboardType = ... </code></pre>
<p>I see you're already using the new <code>UIAlertController</code> -- good idea, since there's little use in old API if you're usung Swift anyway. But <code>alert.textFieldAtIndex:</code> won't work for that; it's for <code>UIAlertView</code> only.</p> <p>Luckily, <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIAlertController_class/index.html#//apple_ref/occ/instm/UIAlertController/addTextFieldWithConfigurationHandler" rel="nofollow"><code>UIAlertController</code> has a method for adding text fields</a>.</p>
<p>Try This Code (with swift):</p> <pre><code>func configurationTextField(textField: UITextField!) { println("configurat hire the TextField") if let tField = textField { self.textField = textField! //Save reference to the UITextField self.textField.text = "Hello world" } } func handleCancel(alertView: UIAlertAction!) { println("User click Cancel button") println(self.textField.text) } var alert = UIAlertController(title: "Alert Title", message: "Alert Message", preferredStyle: UIAlertControllerStyle.Alert) alert.addTextFieldWithConfigurationHandler(configurationTextField) alert.addAction(UIAlertAction(title: "Close", style: UIAlertActionStyle.Cancel, handler:handleCancel)) alert.addAction(UIAlertAction(title: "Ok", style: UIAlertActionStyle.Default, handler:{ (UIAlertAction)in println("User click Ok button") println(self.textField.text) })) self.presentViewController(alert, animated: true, completion: { println("completion block") }) </code></pre> <p>Can you see also my answer <a href="http://stackoverflow.com/a/24091779/1485344">here</a></p>
<pre><code> var inputTextField: UITextField? //Create the AlertController let actionSheetController: UIAlertController = UIAlertController(title: "Rename", message: "", preferredStyle: .Alert) //Create and add the Cancel action let cancelAction: UIAlertAction = UIAlertAction(title: "Cancel", style: .Cancel) { action -&gt; Void in //Do some stuff } actionSheetController.addAction(cancelAction) //Create and an option action let nextAction: UIAlertAction = UIAlertAction(title: "OK", style: .Default) { action -&gt; Void in //Do some other stuff } actionSheetController.addAction(nextAction) //Add a text field actionSheetController.addTextFieldWithConfigurationHandler { textField -&gt; Void in // you can use this text field inputTextField = textField } //Present the AlertController self.presentViewController(actionSheetController, animated: true, completion: nil) </code></pre>
<p>In <strong><em>Objective C</em></strong> </p> <pre><code> UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"Duplicate file" message:@"A file with the same name already exists." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil]; alertView.alertViewStyle = UIAlertViewStylePlainTextInput; [[alertView textFieldAtIndex:0] setText:@"Filename"]; [[alertView textFieldAtIndex:0] setPlaceholder:@"Enter Filename"]; [alertView show]; </code></pre> <p>In <strong><em>Swift</em></strong> </p> <pre><code> var alert = UIAlertController(title: "Duplicate file", message: "A file with the same name already exists.", preferredStyle: UIAlertControllerStyle.Alert) alert.addTextFieldWithConfigurationHandler(configurationTextField) alert.addAction(UIAlertAction(title: "Ok", style: UIAlertActionStyle.Default, handler:{ (UIAlertAction)in println("User click Ok button") println(self.textField.text) })) self.presentViewController(alert, animated: true, completion: { println("completion block") }) func configurationTextField(textField: UITextField!) { if let aTextField = textField { textField.text = "Filename" } } </code></pre>
<p>In <strong><em>Swift 3</em></strong> </p> <pre><code> let alert = UIAlertController(title: "Alert Ttitle", message: "Alert Message", preferredStyle: UIAlertControllerStyle.alert) alert.addTextField(configurationHandler: textFieldHandler) alert.addAction(UIAlertAction(title: "Ok", style: UIAlertActionStyle.default, handler:{ (UIAlertAction)in })) self.present(alert, animated: true, completion:nil) </code></pre> <hr> <pre><code>func textFieldHandler(textField: UITextField!) { if (textField) != nil { textField.text = "Filename" } } </code></pre>
<p>Swift 2.2</p> <pre><code>import UIKit extension UIAlertController { // MARK: - UIAlertController+Present private struct ButtonsName { static let Ok = NSLocalizedString("uIAlertController.buttonName.ok", comment: "") static let Cancel = NSLocalizedString("uIAlertController.buttonName.cancel", comment: "") } class func suggestionAlertViewWithTitle(title:String?, placeholder:String, message:String, presenter:UIViewController, destructive:Bool = false, okButtonCompletion:((enteredSuggestion:String?)-&gt;Void)?, cancelButtonCompletion:(()-&gt;Void)?, presentCompletion:(()-&gt;Void)?) { var alertTitle = UIAlertController.appName() if let userTitle = title { alertTitle = userTitle } let controller = UIAlertController(title: alertTitle, message: message, preferredStyle: .Alert) let okAction = UIAlertAction(title: ButtonsName.Ok, style: destructive == true ? .Destructive : .Default) { (action) in if let okButtonCompletion = okButtonCompletion { let text = controller.textFields?.first?.text dispatch_async(dispatch_get_main_queue(), { okButtonCompletion(enteredSuggestion: text) }) } } let cancelAction = UIAlertAction(title: ButtonsName.Cancel, style: .Cancel) { (action) in if let cancelButtonCompletion = cancelButtonCompletion { dispatch_async(dispatch_get_main_queue(), { cancelButtonCompletion() }) } } controller.addAction(okAction) controller.addAction(cancelAction) controller.addTextFieldWithConfigurationHandler { (textField) in textField.placeholder = placeholder } dispatch_async(dispatch_get_main_queue(), { presenter.presentViewController(controller, animated: true, completion: presentCompletion) }) } // MARK: - Private private static func appName () -&gt; String { return NSBundle.mainBundle().infoDictionary!["CFBundleName"] as! String } } </code></pre> <p>usage:</p> <pre><code> UIAlertController.suggestionAlertViewWithTitle(nil, placeholder: placeholder, message: message, presenter: self, destructive: false, okButtonCompletion: { (enteredSuggestion) in self.logger.sendAllLogs(self.currentUser, suggestedTitle: enteredSuggestion) }, cancelButtonCompletion:nil, presentCompletion: nil) </code></pre> <p>a little bit overloaded, but u can always make some parameters optional or/and default</p>