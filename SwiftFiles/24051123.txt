Do you need to declare datatype of a variable in Swift?
<p>In Swift Programming, should we need to declare datatype of the variable or will the variable change it's type based on value?</p> <p>Which one is enough to declare a variable:</p> <pre><code>var MyVar: Int = 50 </code></pre> <p>Or:</p> <pre><code>var Myvar = 50 </code></pre>
<p>Type inference is one of the great parts of Swift. This means that when you assign a variable or constant, the system infers what type it should be. If for instance, you were declaring a variable before you set it, you'd need to specify its type explicitly.</p> <pre><code>var someVar: Int someVar = 15 </code></pre> <p>That way the compiler knows when it is being properly set.</p>
<p>You can declare a variable implicitly as: <code>var myVar = 50</code> or explicitly as: <code>var myVar:Int = 50</code></p> <p>Also notice that you do not use the semi-colon <code>;</code> to end the line.</p> <p>Note that values are never implicitly converted to another type. If you need to convert a value to a different type, explicitly make an instance of the desired type, such as the following:</p> <pre><code>let label = "The width is " let width = 94 let widthLabel = label + String(width) </code></pre>
<p>The first seems to be used only integer assignment. I need to write code to test.</p> <p>Update:</p> <p>I mean, Defined as int can not assign to string, the following is wrong：</p> <pre><code>var myVar: Int myVar = "50" </code></pre> <p>And such is wrong：</p> <pre><code>var myVar myVar = "50" </code></pre> <p>So, if assignment when you define a variable, use both two. Otherwise, use:</p> <pre><code>var myVar: Int </code></pre> <p>Therefore, it is no difference between the two lists you.</p>
<blockquote> <pre><code>var myVar: Int = 50 </code></pre> <p>Or:</p> <pre><code>var myVar = 50 </code></pre> </blockquote> <p>They are absolutely equivalent. The <code>: Int</code> is unnecessary because you are assigning <code>50</code> right there in the declaration, so Swift infers that this is to be an Int variable.</p> <p>If you are going to assign as part of the declaration, the only time you need to supply the type is when the type is surprising. For example:</p> <pre><code>var myChar : Character = "s" </code></pre> <p>If you don't say Character, you'll get a String.</p>
<p><strong>WWDC 2104 - Introduction To Swift (Session 402)</strong></p> <pre><code>var languageName = “Swift” // inferred as String var version = 1.0 // inferred as Double var introduced = 2014 // inferred as Int var isAwesome = true // inferred as Bool </code></pre> <p>Also…</p> <pre><code>var = “Frog” // using unicode names </code></pre> <p>You should also use “let” for variables that will not change.</p>
<p>Note that I changed <code>MyVar</code> to <code>myVar</code> to follow the convention. </p> <pre><code>var myVar: Int = 50 </code></pre> <p>means -> message to the compiler will be. </p> <p><strong>Declare a variable called <code>myVar</code> that is <code>of type</code>(<code>:</code>) <code>Int</code></strong></p> <p>and</p> <pre><code>var myVar = 50 </code></pre> <p>will result the exact same. But here compiler will deduce the type for us. (Welcome to modern intelligent compilers). <strong><code>Type inference</code></strong> is strong feature of swift language.</p> <h2>Be aware that Swift is Type Safe Language</h2>
<p>From a complete beginner's view (mine) i see the following benefit of declaring a variable explicitly - the compiler will validate the input value - i.e. if you declare an empty variable and then update it with the wrong type value you will be prompted. </p>