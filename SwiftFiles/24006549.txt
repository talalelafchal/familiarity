Calling NSString method on a String in Swift
<p>Apple's Swift <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html">documentation</a> states that </p> <blockquote> <p>If you are working with the Foundation framework in Cocoa or Cocoa Touch, the entire NSString API is available to call on any String value you create</p> </blockquote> <p>If I have a String object eg</p> <pre><code>var newString: String = "this is a string" </code></pre> <p>How do I perform NSString operations like <code>containsString</code> on my String var?</p>
<p>The methods are the same, but they just use swift's syntax instead. For example:</p> <pre><code>var newString: String = "this is a string" newString = newString.stringByAppendingString(" that is now longer") println(newString) </code></pre> <p>instead of:</p> <pre><code>NSString* newString = @"this is a string"; newString = [newString stringByAppendingString:@" that is now longer"]; NSLog(newString); </code></pre> <p>Note:</p> <p>Not all of NSString's methods can be called on String. Some you have to bridge to NSString first like so: </p> <pre><code>newString.bridgeToObjectiveC().containsString("string") </code></pre>
<p>You can call any NSString method on a Swift String object; under the hood, the two objects are 'toll-free bridged'. Thus, you can just do:</p> <pre><code>var newString = "this is a string" if newString.containsString("string") { //do your stuff } </code></pre>
<p>So what you actually have to do is this</p> <pre><code>var str:NSString = "Checkcontains" str.containsString("ckc") </code></pre> <p>Notice how the declaration of an explicit NSString is put there. Then you can use the containsString method. If you only use var and do not set it as an NSString then you have problems.</p>
<p>After doing some research, it looks like <code>containsString</code> is not a <code>String</code> function, but can be accessed by bridging to an <code>NSString</code>.</p> <p>Under Apple's Documentation on <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/WorkingWithCocoaDataTypes.html">Using Swift with Cocoa and Objective-C</a>, it says that </p> <blockquote> <p>Swift automatically bridges between the String type and the NSString class. This means that anywhere you use an NSString object, you can use a Swift String type instead and gain the benefits of both types</p> </blockquote> <p>But it appears that only some of NSString's functions are accessible without explicitly bridging. To bridge to an NSString and use any of its functions, the following methods work:</p> <pre><code> //Example Swift String var var newString:String = "this is a string" //Bridging to NSString //1 (newString as NSString).containsString("string") //2 newString.bridgeToObjectiveC().containsString("string") //3 NSString(string: newString).containsString("string") </code></pre> <p>All three of these work. It's interesting to see that only some <code>NSString</code> methods are available to <code>Strings</code> and others need explicit bridging. This may be something that is built upon as Swift develops. </p>