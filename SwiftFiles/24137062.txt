How do I return a sequence in Swift?
<p>I'm trying to write an extension for the <code>Matrix</code> example from the book, <a href="http://stackoverflow.com/q/24136604/458193">slightly tweaked to be generic</a>.<br> I'm trying to write a method called <code>getRow</code> that returns a sequence of values at the given row.</p> <p>In C#, I would have written this:</p> <pre><code>IEnumerable&lt;T&gt; GetRow (int row) { return Enumerable .Range (0, this.columns) .Select ((column) =&gt; this.grid[row, columns]); } </code></pre> <p>or alternatively</p> <pre><code>IEnumerable&lt;T&gt; GetRow (int row) { for (var column = 0; column &lt; this.columns; column++) { yield return this.grid[row, column]; } } </code></pre> <p>I'm not sure how to do this in Swift though.</p> <p><code>Sequence</code> seems to be the equivalent to <code>IEnumerable&lt;T&gt;</code> but I don't understand why it uses <code>typealias</code> instead of just being defined as <code>Sequence&lt;T&gt;</code> (<a href="https://schani.wordpress.com/2014/06/03/playing-with-swift/2/">see also this</a>). Defining a method that returns generic <code>Sequence&lt;T&gt;</code> did not work:</p> <pre><code>extension Matrix { // Cannot specialize non-generic type 'Sequence' func getRow&lt;T&gt;(index: Int) -&gt; Sequence&lt;T&gt; { return map(0..self.columns, { self[index, $0] }) } } </code></pre> <p>Then I got rid of <code>&lt;T&gt;</code> (but how is it supposed to be generic?):</p> <pre><code>extension Matrix { func getRow(index: Int) -&gt; Sequence { return map(0..self.columns, { self[index, $0] }) } } </code></pre> <p>This compiles! However I can't use it:</p> <pre><code>var row = grid.getRow(0) // 'Sequence' does not conform to protocol '_Sequence_' for i in row { println("\(i)") } </code></pre> <p>How do I properly type <code>map</code> result so it can be consumed in a <code>for..in</code> loop?</p> <p>More on this issue: <a href="http://schani.wordpress.com/2014/06/11/associated-types-considered-weird/">Associated Type Considered Weird</a></p>
<p>I think you are being mislead by the Swift compiler (which is a bit flaky at the moment). The type for your range <code>0..self.columns</code> is <code>Range&lt;Int&gt;</code>, which is not a <code>Sequence</code> or <code>Collection</code>, so I don't think it can be used via <code>map</code>.</p> <p>The implementation works for me:</p> <pre><code>extension Matrix { func getRow(index: Int) -&gt; T[] { var row = T[]() for col in 0..self.columns { row.append(self[index, col]) } return row } } </code></pre>
<p>Joe Groff <a href="https://devforums.apple.com/message/981804#981804">suggested</a> to wrap the result in <code>SequenceOf&lt;T&gt;</code>:</p> <pre><code>extension Matrix { func getRow(index: Int) -&gt; SequenceOf&lt;T&gt; { return SequenceOf(map(0..self.columns, { self[index, $0] })) } } </code></pre> <p>Indeed, this works but we had to wrap <code>map</code> result into a helper class which differs from how I do it in C#.</p> <p>I have to admit I don't yet understand why <code>Sequence</code> and <code>Generator</code> use <code>typealias</code> and aren't generic protocols (like <code>IEnumerable&lt;T&gt;</code> in C#). There is an interesting ongoing discussion about this distinction so I'll leave a few links for a curious mind:</p> <ol> <li><a href="http://schani.wordpress.com/2014/06/11/associated-types-considered-weird/">Associated Types Considered Weird</a></li> <li><a href="https://devforums.apple.com/message/983492#983492">Associated types vs. type parameters - reason for the former?</a></li> <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=270195">Abstract Type Members versus Generic Type Parameters in Scala</a></li> <li><a href="https://groups.google.com/forum/#!topic/swift-language/3PtydRXR0ao">Generics and protocols</a></li> </ol>