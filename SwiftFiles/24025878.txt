Cannot extract the string value of the Dictionary&lt;hashable,String&gt;
<p>I have declared following dictionary</p> <pre><code>var locations:Dictionary&lt;String,String&gt; = ["loc1":"Los Angeles","loc2":"San Francisco"]; </code></pre> <p>then trying to simply assign it to a <code>variable</code> rather than a <code>constant</code></p> <pre><code>var location:String = locations["loc1"]; </code></pre> <p>but then the compiler is complaining about : <code>Value of optional type 'String?' not unwrapped; did you mean to use '!' or '?'?</code></p> <p>If I change <code>var location:String = locations["loc1"];</code> to var <code>location:String? = locations["loc1"];</code> ,which means the String is optional, compiler error goes away.</p> <p>but as you can see I haven't defined my dictionary to be optional e.g. <code>Dictionary&lt;String,String?&gt;</code>. So just wondering why does Swift convert my value type to be optional string(String?) behind the scene?</p>
<p>The code that pulls the value of the dictionary does not know whether or not <code>locations["loc1"]</code> will return a value - it could also return <code>nil</code>. Thus, it cannot be assigned to a non-optional <code>String</code>, as that would be a guarantee that the String is not nil, which is not the case.</p> <p>However, if you want <code>location</code> as a non-optional String, you can initialize it, then use <code>if let</code> to unwrap the value from the dictionary:</p> <pre><code>var location : String = "Unknown" if let value = locations["loc1"] { location = value } </code></pre> <p>Slightly more verbose, but guarantees that <code>location</code> contains either a value or <code>"Unknown"</code> and cannot be <code>nil</code>.</p>
<p>It's because your dictionary may not contain a value for that key so it returns a String optional just in case.</p>