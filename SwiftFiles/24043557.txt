Do Swift and Objective-C share the same native API?
<p>I can't get my hands on Apple's eBook as my Apple account is registered in another country, but I was wondering if anybody knows if Objective-C and Swift share the same native API? Or is Swift a completely 'new'?</p>
<p>Swift has its own API for basic classes like Array and Dictionary, but it also has access to the entire Objective-C codebase like UIKit, Cocoa and Foundation.</p>
<p>Kind of a rambling answer but a grab bag of things I've so far learnt from the book:</p> <p>Swift is statically typed. It does not use <code>objc_msgSend</code> underneath. Apple provides bridging between the two to make classes of either language callable from the other but, underneath it, the way functions are called is very different.</p> <p>The APIs exposed describe the same system — an application with screens and windows, views and view controllers, storyboards and segues, StoreKit, CoreLocation, etc — but in resultantly different ways. To what extent you'd say they're the same API is moot.</p> <p>Generics are now a language feature. With that and strict typing, collections are now typed and look a lot like STL generics; e.g. you declare a dictionary with keys of type <code>Int</code> and values of type <code>String</code> and trying to put any other kind of key/value pair in raises a runtime exception.</p> <p>Swift elevates the difference between mutable things and immutable things to the language level for the new category of value types via a distinction between variables and constants. This automatically extends the distinction to Foundation collections. So with those there is no more need manually to manage <code>copy</code> versus <code>mutableCopy</code> (versus <code>retain</code>, whether ARC implied or explicit).</p> <p>Because the language is not dynamic, Cocoa mainstays like key-value observing are not available.</p> <p>Swift follows the C# lead on structs versus classes — structs can have methods but live on the stack. With blocks being a notable special case, Objective-C objects could not live on the stack. This has some effect on the pragmatic thinking about how data flows.</p> <p>Swift has a language-level concept of a tuple, which is like a mix between an array and a class. It allows ordered or named fields to be combined into a single unit but is intended for restricted, in-place use e.g. to indicate return results where it's not worth the weight of defining yet another class. That naturally affects the API.</p> <p>Variables of all types — including those that will usually compile down as though C primitives — can now be optional. <code>nil</code> may be assigned to any optional variable to mean that it does not currently have a value. It may not be assigned to any variable that is not optional. So <code>NSNotFound</code>, etc, are gone.</p>