SQLite in Android How to update a specific row
<p>I've been trying to update a specific row for a while now, and it seems that there are two ways to do this. From what I've read and tried, you can just use the:</p> <p><code>execSQL(String sql)</code> method </p> <p>or the:</p> <p><code>update(String table, ContentValues values, String whereClause, String[] whereArgs)</code> method.</p> <p>(Let me know if this is incorrect as I am new to android and very new to SQL.)</p> <p>So let me get to my actual code.</p> <pre><code>myDB.update(TableName, "(Field1, Field2, Field3)" + " VALUES ('Bob', 19, 'Male')", "where _id = 1", null); </code></pre> <p>I am trying to accomplish this:</p> <p>Update Field1, Field2, and Field3 where the primary key (_id) is equal to 1.</p> <p>Eclipse gives me a red line right underneath the word "update" and gives me this explanation:</p> <blockquote> <p>The method update(String, ContentValues, String, String[]) in the type SQLiteDatabase is not applicable for the arguments (String, String, String, null)</p> </blockquote> <p>I'm guessing I'm not assigning the ContentValues correctly. Can anyone point me in the right direction?</p>
<p>if your sqlite row has a unique id or other equivatent, you can use where clause, like this</p> <pre><code>update .... where id = {here is your unique row id} </code></pre>
<p>You try this one update method in SQLite </p> <pre><code>int id; ContentValues con = new ContentValues(); con.put(TITLE, title); con.put(AREA, area); con.put(DESCR, desc); con.put(TAG, tag); myDataBase.update(TABLE, con, KEY_ID + "=" + id,null); </code></pre>
<p>First make a ContentValues object :</p> <pre><code>ContentValues cv = new ContentValues(); cv.put("Field1","Bob"); //These Fields should be your String values of actual column names cv.put("Field2","19"); cv.put("Field2","Male"); </code></pre> <p>Then use the update method, it should work now:</p> <pre><code>myDB.update(TableName, cv, "_id="+id, null); </code></pre>
<p>Simple way:</p> <pre><code>String strSQL = "UPDATE myTable SET Column1 = someValue WHERE columnId = "+ someValue; myDataBase.execSQL(strSQL); </code></pre>
<p>use this code in your DB ` </p> <pre><code>public boolean updatedetails(long rowId,String name, String address) { ContentValues args = new ContentValues(); args.put(KEY_ROWID, rowId); args.put(KEY_NAME, name); args.put(KEY_ADDRESS, address); int i = mDb.update(DATABASE_TABLE, args, KEY_ROWID + "=" + rowId, null); return i &gt; 0; } </code></pre> <p>for updating in your sample.java use this code</p> <pre><code> //DB.open(); try{ //capture the data from UI String name = ((EditText)findViewById(R.id.name)).getText().toString().trim(); String address =(EditText)findViewById(R.id.address)).getText().toString().trim(); //open Db pdb.open(); //Save into DBS pdb.updatedetails(RowId, name, address); Toast.makeText(this, "Modified Successfully", Toast.LENGTH_SHORT).show(); pdb.close(); startActivity(new Intent(this, sample.class)); finish(); }catch (Exception e) { Log.e(TAG_AVV, "errorrrrr !!"); e.printStackTrace(); } pdb.close(); </code></pre>
<ol> <li>I personally prefere .update for its convenience. But execsql will work same. </li> <li>You are right with your guess that the problem is your content values. You should create a ContentValue Object and put the values for your database row there.</li> </ol> <p>This code should fix your example:</p> <pre><code> ContentValues data=new ContentValues(); data.put("Field1","bob"); data.put("Field2",19); data.put("Field3","male"); DB.update(Tablename, data, "_id=" + id, null); </code></pre>
<p>hope this'll help you:</p> <pre><code>public boolean updatedetails(long rowId, String address) { ContentValues args = new ContentValues(); args.put(KEY_ROWID, rowId); args.put(KEY_ADDRESS, address); mDb.update(DATABASE_TABLE, args, KEY_ROWID + "=" + rowId, null)&gt;0; } </code></pre>
<p>just try this way</p> <pre><code> String strFilter = "_id=" + Id; ContentValues args = new ContentValues(); args.put(KEY_TITLE, title); myDB.update("titles", args, strFilter, null);** </code></pre>
<pre><code>public long fillDataTempo(String table){ String[] table = new String[1]; tabela[0] = table; ContentValues args = new ContentValues(); args.put(DBOpenHelper.DATA_HORA, new Date().toString()); args.put(DBOpenHelper.NOME_TABELA, nome_tabela); return db.update(DATABASE_TABLE, args, STRING + " LIKE ?" ,tabela); } </code></pre>
<p>For updates, need to call setTransactionSuccessfull for changes to get committed like so:</p> <pre><code>db.beginTransaction(); try { db.update(...) db.setTransactionSuccessfull(); // changes get rolled back if this not called } finally { db.endTransaction(); // commit or rollback } </code></pre>
<p>At first create a <em>ContentValues</em> object :</p> <pre><code>ContentValues cv = new ContentValues(); cv.put("Field1","Bob"); cv.put("Field2","19"); </code></pre> <p>Then use the update method. Note, the third argument is the where clause. The "?" is a placeholder. It will be replaced with the fourth argument (id)</p> <pre><code>myDB.update(MY_TABLE_NAME, cv, "_id = ?", new String[]{id}); </code></pre> <p>This is the cleanes solution to update a specific row.</p>
<p>//Here is some simple sample code for update </p> <p>//First declare this</p> <pre><code>private DatabaseAppHelper dbhelper; private SQLiteDatabase db; </code></pre> <p>//initialize the following</p> <pre><code>dbhelper=new DatabaseAppHelper(this); db=dbhelper.getWritableDatabase(); </code></pre> <p>//updation code</p> <pre><code> ContentValues values= new ContentValues(); values.put(DatabaseAppHelper.KEY_PEDNAME, ped_name); values.put(DatabaseAppHelper.KEY_PEDPHONE, ped_phone); values.put(DatabaseAppHelper.KEY_PEDLOCATION, ped_location); values.put(DatabaseAppHelper.KEY_PEDEMAIL, ped_emailid); db.update(DatabaseAppHelper.TABLE_NAME, values, DatabaseAppHelper.KEY_ID + "=" + ?, null); </code></pre> <p>//put ur id instead of the 'question mark' is a function in my shared preference.</p>
<p>Can try like this:</p> <pre><code>ContentValues values=new ContentValues(); values.put("name","aaa"); values.put("publisher","ppp"); values.put("price","111"); int id=sqdb.update("table_name",values,"bookid='5' and booktype='comic'",null); </code></pre>
<p>you can try this...</p> <pre><code>db.execSQL("UPDATE DB_TABLE SET YOUR_COLUMN='newValue' WHERE id=6 "); </code></pre>
<pre><code> public void updateRecord(ContactModel contact) { database = this.getReadableDatabase(); ContentValues contentValues = new ContentValues(); contentValues.put(COLUMN_FIRST_NAME, contact.getFirstName()); contentValues.put(COLUMN_LAST_NAME, contact.getLastName()); contentValues.put(COLUMN_NUMBER,contact.getNumber()); contentValues.put(COLUMN_BALANCE,contact.getBalance()); database.update(TABLE_NAME, contentValues, COLUMN_ID + " = ?", new String[]{contact.getID()}); database.close(); } </code></pre>