How to turn on camera flash light programmatically in Android?
<p>I want to turn on only the camera flash light (not with camera preview) programmatically in Android. I googled for it but the help i found referred me to <a href="http://developer.android.com/reference/android/hardware/Camera.Parameters.html">this</a> page </p> <p>Does anyone have any links or sample code?</p>
<p>For this you should do like :</p> <ol> <li><p>Check whether flash light is available or not ?</p></li> <li><p>If yes then Turn Off/On</p></li> <li><p>If no then you can do whatever according to your app. needs</p></li> </ol> <p>For <strong>Checking availability of flash</strong> in device: </p> <p>You can use the following</p> <pre><code> context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH); </code></pre> <p>which will return true if a flash is available, false if not.</p> <p>See <a href="http://developer.android.com/reference/android/content/pm/PackageManager.html">http://developer.android.com/reference/android/content/pm/PackageManager.html</a> for more information.</p> <p><strong>For turning on/off flashlight :</strong></p> <p>I googled out and got this about android.permission.FLASHLIGHT. Android manifests' permission looks promising:</p> <pre><code> &lt;!-- Allows access to the flashlight --&gt; &lt;permission android:name="android.permission.FLASHLIGHT" android:permissionGroup="android.permission-group.HARDWARE_CONTROLS" android:protectionLevel="normal" android:label="@string/permlab_flashlight" android:description="@string/permdesc_flashlight" /&gt; </code></pre> <p>Then make use of <a href="http://developer.android.com/reference/android/hardware/Camera.html">Camera</a> and set <a href="http://developer.android.com/reference/android/hardware/Camera.Parameters.html">Camera.Parameters</a>. The main parameter used here is <a href="http://developer.android.com/reference/android/hardware/Camera.Parameters.html#FLASH_MODE_TORCH">FLASH_MODE_TORCH</a>. </p> <p>eg.</p> <p>Code Snippet to turn on camera flash light. </p> <pre><code>Camera cam = Camera.open(); Parameters p = cam.getParameters(); p.setFlashMode(Parameters.FLASH_MODE_TORCH); cam.setParameters(p); cam.startPreview(); </code></pre> <p>Code snippet to turn off camera led light. </p> <pre><code> cam.stopPreview(); cam.release(); </code></pre> <p>I just found a project that uses this permission. Check quick-settings' src code. here <a href="http://code.google.com/p/quick-settings/">http://code.google.com/p/quick-settings/</a> (Note: This link is now broken)</p> <p>For Flashlight directly look <a href="http://code.google.com/p/quick-settings/source/browse/trunk/quick-settings/#quick-settings/src/com/bwx/bequick/flashlight">http://code.google.com/p/quick-settings/source/browse/trunk/quick-settings/#quick-settings/src/com/bwx/bequick/flashlight</a> (Note: This link is now broken)</p> <p><strong>Update6</strong> You could also try to add a SurfaceView as described in this answer <a href="http://stackoverflow.com/questions/8876843/led-flashlight-on-galaxy-nexus-controllable-by-what-api/9379765#9379765">LED flashlight on Galaxy Nexus controllable by what API?</a> This seems to be solution that works on many phones.</p> <p><strong>Update 5</strong> Major Update</p> <p>I have found alternate Link(for above broken links): <a href="http://www.java2s.com/Open-Source/Android/Tools/quick-settings/com.bwx.bequick.flashlight.htm">http://www.java2s.com/Open-Source/Android/Tools/quick-settings/com.bwx.bequick.flashlight.htm</a> You can now use this link. [Update : 14/9/2012 This link is now broken]</p> <p><strong>Update 1</strong></p> <p>Another OpenSource Code : <a href="http://code.google.com/p/torch/source/browse/">http://code.google.com/p/torch/source/browse/</a></p> <p><strong>Update 2</strong></p> <p>Example showing how to enable the LED on a Motorola Droid : <a href="http://code.google.com/p/droidled/">http://code.google.com/p/droidled/</a></p> <p>Another Open Source Code : </p> <p><a href="http://code.google.com/p/covedesigndev/">http://code.google.com/p/covedesigndev/</a><br> <a href="http://code.google.com/p/search-light/">http://code.google.com/p/search-light/</a></p> <p><strong>Update 3 (Widget for turning on/off camera led)</strong></p> <p>If you want to develop a widget that turns on/off your camera led, then you must refer my answer <a href="http://stackoverflow.com/questions/7515309/widget-for-turning-on-off-camera-flashlight-in-android/8257771#8257771">Widget for turning on/off camera flashlight in android</a>..</p> <p><strong>Update 4</strong></p> <p>If you want to set intensity of light emerging from camera LED you can refer <a href="http://stackoverflow.com/questions/5970188/can-i-change-the-led-intensity-of-an-android-device">Can I change the LED intensity of an Android device?</a> full post.. Note that only rooted HTC devices support this feature.</p> <p><strong>Issues :</strong></p> <p>There are also some problems while turning On/Off flashlight. eg. for the devices not having <code>FLASH_MODE_TORCH</code> or even if it has, then flashlight doesnot turn ON etc.</p> <p>Typically Samsung creates alot of problems. </p> <p>You can refer about problems in the given below list: </p> <p><a href="http://stackoverflow.com/questions/5503480/use-camera-flashlight-in-android">Use camera flashlight in Android</a></p> <p><a href="http://stackoverflow.com/questions/6939816/turn-on-off-camera-led-flash-light-in-samsung-galaxy-ace-2-2-1-galaxy-tab">Turn ON/OFF Camera LED/flash light in Samsung Galaxy Ace 2.2.1 &amp; Galaxy Tab</a></p>
<p>From my experience, if your application is designed to work in both portrait and landscape orientation, you need to declare the variable <code>cam</code> as static. Otherwise, <code>onDestroy()</code>, which is called on switching orientation, destroys it but doesn't release Camera so it's not possible to reopen it again.</p> <pre><code>package com.example.flashlight; import android.hardware.Camera; import android.hardware.Camera.Parameters; import android.os.Bundle; import android.app.Activity; import android.content.pm.PackageManager; import android.view.Menu; import android.view.View; import android.widget.Toast; public class MainActivity extends Activity { public static Camera cam = null;// has to be static, otherwise onDestroy() destroys it @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } @Override public boolean onCreateOptionsMenu(Menu menu) { // Inflate the menu; this adds items to the action bar if it is present. getMenuInflater().inflate(R.menu.activity_main, menu); return true; } public void flashLightOn(View view) { try { if (getPackageManager().hasSystemFeature( PackageManager.FEATURE_CAMERA_FLASH)) { cam = Camera.open(); Parameters p = cam.getParameters(); p.setFlashMode(Parameters.FLASH_MODE_TORCH); cam.setParameters(p); cam.startPreview(); } } catch (Exception e) { e.printStackTrace(); Toast.makeText(getBaseContext(), "Exception flashLightOn()", Toast.LENGTH_SHORT).show(); } } public void flashLightOff(View view) { try { if (getPackageManager().hasSystemFeature( PackageManager.FEATURE_CAMERA_FLASH)) { cam.stopPreview(); cam.release(); cam = null; } } catch (Exception e) { e.printStackTrace(); Toast.makeText(getBaseContext(), "Exception flashLightOff", Toast.LENGTH_SHORT).show(); } } } </code></pre> <p>to manifest I had to put this line</p> <pre><code> &lt;uses-permission android:name="android.permission.CAMERA" /&gt; </code></pre> <p>from <a href="http://developer.android.com/reference/android/hardware/Camera.html">http://developer.android.com/reference/android/hardware/Camera.html</a></p> <p>suggested lines above wasn't working for me.</p>
<p>I Got AutoFlash light with below simple Three Steps.</p> <ul> <li><em>I just added Camera and Flash Permission in <strong>Manifest.xml</strong> file</em></li> </ul> <blockquote> <pre><code>&lt;uses-permission android:name="android.permission.CAMERA" /&gt; &lt;uses-feature android:name="android.hardware.camera" /&gt; &lt;uses-permission android:name="android.permission.FLASHLIGHT"/&gt; &lt;uses-feature android:name="android.hardware.camera.flash" android:required="false" /&gt; </code></pre> </blockquote> <ul> <li><p>In your Camera Code do this way.</p> <pre><code>//Open Camera Camera mCamera = Camera.open(); //Get Camera Params for customisation Camera.Parameters parameters = mCamera.getParameters(); //Check Whether device supports AutoFlash, If you YES then set AutoFlash List&lt;String&gt; flashModes = parameters.getSupportedFlashModes(); if (flashModes.contains(android.hardware.Camera.Parameters.FLASH_MODE_AUTO)) { parameters.setFlashMode(Parameters.FLASH_MODE_AUTO); } mCamera.setParameters(parameters); mCamera.startPreview(); </code></pre></li> <li><p>Build + Run â€”> Now Go to Dim light area and Snap photo, you should get auto flash light if device supports.</p></li> </ul>
<p>You can also use <code>Camera.Parameters params = mCamera.getParameters() p.setFlashMode(Parameters.FLASH_MODE_OFF); mCamera.setParameters(params);</code> to turn off the flash.</p>
<p>I have implemented this function in my application through fragments using SurfaceView. The link to this stackoverflow question and its answer can be found <a href="http://stackoverflow.com/questions/24959664/flashlight-in-android-fragment-surfaceview">here</a></p> <p>Hope this helps :)</p>
<p>Android Lollipop introduced <em>camera2</em> API and deprecated the previous camera API. However, using the deprecated API to turn on the flash still works and is much simpler than using the new API.</p> <p>It seems that the new API is intended for use in dedicated full featured camera apps and that its architects didn't really consider simpler use cases such as turning on the flashlight. To do that now, one has to get a CameraManager, create a CaptureSession with a dummy Surface, and finally create and start a CaptureRequest. Exception handling, resource cleanup and long callbacks included!</p> <p>To see how to turn the flashlight on Lollipop and newer, take a look at the <a href="http://androidxref.com/5.0.0_r2/xref/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java"><strong>FlashlightController</strong></a> in the AOSP project (try to find the newest as older use APIs that have been modified). Don't forget to set the needed permissions.</p> <hr> <p>Android Marshmallow finally introduced a simple way to turn on the flash with <a href="http://developer.android.com/reference/android/hardware/camera2/CameraManager.html#setTorchMode(java.lang.String,%20boolean)"><strong>setTorchMode</strong></a>.</p>
<p>Complete Code for android Flashlight App</p> <p>Manifest</p> <pre><code> &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.user.flashlight" android:versionCode="1" android:versionName="1.0"&gt; &lt;uses-sdk android:minSdkVersion="8" android:targetSdkVersion="17"/&gt; &lt;uses-permission android:name="android.permission.CAMERA" /&gt; &lt;uses-feature android:name="android.hardware.camera"/&gt; &lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:theme="@style/AppTheme" &gt; &lt;activity android:name=".MainActivity" android:label="@string/app_name" &gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt; &lt;/manifest&gt; </code></pre> <p>XML</p> <pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin" android:paddingRight="@dimen/activity_horizontal_margin" android:paddingTop="@dimen/activity_vertical_margin" android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MainActivity"&gt; &lt;Button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="OFF" android:id="@+id/button" android:layout_centerVertical="true" android:layout_centerHorizontal="true" android:onClick="turnFlashOnOrOff" /&gt; &lt;/RelativeLayout&gt; </code></pre> <p>MainActivity.java</p> <pre><code> import android.app.AlertDialog; import android.content.DialogInterface; import android.content.pm.PackageManager; import android.hardware.Camera; import android.hardware.Camera.Parameters; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import java.security.Policy; public class MainActivity extends AppCompatActivity { Button button; private Camera camera; private boolean isFlashOn; private boolean hasFlash; Parameters params; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); button = (Button) findViewById(R.id.button); hasFlash = getApplicationContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH); if(!hasFlash) { AlertDialog alert = new AlertDialog.Builder(MainActivity.this).create(); alert.setTitle("Error"); alert.setMessage("Sorry, your device doesn't support flash light!"); alert.setButton("OK", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { finish(); } }); alert.show(); return; } getCamera(); button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (isFlashOn) { turnOffFlash(); button.setText("ON"); } else { turnOnFlash(); button.setText("OFF"); } } }); } private void getCamera() { if (camera == null) { try { camera = Camera.open(); params = camera.getParameters(); }catch (Exception e) { } } } private void turnOnFlash() { if(!isFlashOn) { if(camera == null || params == null) { return; } params = camera.getParameters(); params.setFlashMode(Parameters.FLASH_MODE_TORCH); camera.setParameters(params); camera.startPreview(); isFlashOn = true; } } private void turnOffFlash() { if (isFlashOn) { if (camera == null || params == null) { return; } params = camera.getParameters(); params.setFlashMode(Parameters.FLASH_MODE_OFF); camera.setParameters(params); camera.stopPreview(); isFlashOn = false; } } @Override protected void onDestroy() { super.onDestroy(); } @Override protected void onPause() { super.onPause(); // on pause turn off the flash turnOffFlash(); } @Override protected void onRestart() { super.onRestart(); } @Override protected void onResume() { super.onResume(); // on resume turn on the flash if(hasFlash) turnOnFlash(); } @Override protected void onStart() { super.onStart(); // on starting the app get the camera params getCamera(); } @Override protected void onStop() { super.onStop(); // on stop release the camera if (camera != null) { camera.release(); camera = null; } } } </code></pre>
<p>In Marshmallow and above, CameraManager's `setTorchMode()' seems to be the answer. This works for me:</p> <pre><code> final CameraManager mCameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE); CameraManager.TorchCallback torchCallback = new CameraManager.TorchCallback() { @Override public void onTorchModeUnavailable(String cameraId) { super.onTorchModeUnavailable(cameraId); } @Override public void onTorchModeChanged(String cameraId, boolean enabled) { super.onTorchModeChanged(cameraId, enabled); boolean currentTorchState = enabled; try { mCameraManager.setTorchMode(cameraId, !currentTorchState); } catch (CameraAccessException e){} } }; mCameraManager.registerTorchCallback(torchCallback, null);//fires onTorchModeChanged upon register mCameraManager.unregisterTorchCallback(torchCallback); </code></pre>
<p>There's different ways to access Camera Flash in different Android versions. Few APIs stopped working in Lollipop and then it got changed again in Marshmallow. To overcome this, I have created a simple library that I have been using in few of my projects and it's giving good results. It's still incomplete, but you can try to check the code and find the missing pieces. Here's the link - <a href="https://github.com/Abhi347/NoobCameraFlash" rel="nofollow">NoobCameraFlash</a>.</p> <p>If you just want to integrate in your code, you can use gradle for that. Here's the instructions (Taken directly from the Readme) - </p> <p>Step 1. Add the JitPack repository to your build file. Add it in your root build.gradle at the end of repositories:</p> <pre><code>allprojects { repositories { ... maven { url "https://jitpack.io" } } } </code></pre> <p>Step 2. Add the dependency</p> <pre><code>dependencies { compile 'com.github.Abhi347:NoobCameraFlash:0.0.1' } </code></pre> <h2>Usage</h2> <p>Initialize the <code>NoobCameraManager</code> singleton.</p> <pre><code>NoobCameraManager.getInstance().init(this); </code></pre> <p>You can optionally set the Log Level for debug logging. Logging uses <a href="https://github.com/Abhi347/LumberJack" rel="nofollow">LumberJack</a> library. The default LogLevel is <code>LogLevel.None</code></p> <pre><code>NoobCameraManager.getInstance().init(this, LogLevel.Verbose); </code></pre> <p>After that you just need to call the singleton to turn on or off the camera flash.</p> <pre><code>NoobCameraManager.getInstance().turnOnFlash(); NoobCameraManager.getInstance().turnOffFlash(); </code></pre> <p>You can take care of the runtime permission to access Camera yourself or can allow the library to do it for you</p> <pre><code>NoobCameraManager.getInstance().takePermissions(); </code></pre> <p>It's easy to toggle Flash too</p> <pre><code>if(NoobCameraManager.getInstance().isFlashOn()){ NoobCameraManager.getInstance().turnOffFlash(); }else{ NoobCameraManager.getInstance().turnOnFlash(); } </code></pre>
<p><strong>In API 23 or Higher (Android M, 6.0)</strong></p> <blockquote> <p>Turn On code</p> </blockquote> <pre><code>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) { CameraManager camManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE); String cameraId = null; // Usually back camera is at 0 position. try { cameraId = camManager.getCameraIdList()[0]; camManager.setTorchMode(cameraId, true); //Turn ON } catch (CameraAccessException e) { e.printStackTrace(); } } </code></pre> <blockquote> <p>Turn OFF code </p> </blockquote> <pre><code>camManager.setTorchMode(cameraId, false); </code></pre> <blockquote> <p>And Permissions</p> </blockquote> <pre><code>&lt;uses-permission android:name="android.permission.CAMERA"/&gt; &lt;uses-permission android:name="android.permission.FLASHLIGHT"/&gt; </code></pre>