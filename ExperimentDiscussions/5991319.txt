Capture Image from Camera and Display in Activity
<p>I want to write a module where on a click of a button the camera opens and I can click and capture an image. If I don't like the image I can delete it and click one more image and then select the image and it should return back and display that image in the activity.</p>
<p>You need to read up about the <a href="http://developer.android.com/reference/android/hardware/Camera.html">Camera</a>. (I think to do what you want, you'd have to save the current image to your app, do the select/delete there, and then recall the camera to try again, rather than doing the retry directly inside the camera.)</p>
<p>Here's an example activity that will launch the camera app and then retrieve the image and display it.</p> <pre><code>package edu.gvsu.cis.masl.camerademo; import android.app.Activity; import android.content.Intent; import android.graphics.Bitmap; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.ImageView; public class MyCameraActivity extends Activity { private static final int CAMERA_REQUEST = 1888; private ImageView imageView; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); this.imageView = (ImageView)this.findViewById(R.id.imageView1); Button photoButton = (Button) this.findViewById(R.id.button1); photoButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); startActivityForResult(cameraIntent, CAMERA_REQUEST); } }); } protected void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode == CAMERA_REQUEST &amp;&amp; resultCode == Activity.RESULT_OK) { Bitmap photo = (Bitmap) data.getExtras().get("data"); imageView.setImageBitmap(photo); } } } </code></pre> <p>Note that the camera app itself gives you the ability to review/retake the image, and once an image is accepted, the activity displays it.</p> <p>Here is the layout that the above activity uses. It is simply a LinearLayout containing a Button with id button1 and an ImageView with id imageview1: </p> <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent" &gt; &lt;Button android:id="@+id/button1" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/photo"&gt;&lt;/Button&gt; &lt;ImageView android:id="@+id/imageView1" android:layout_height="wrap_content" android:src="@drawable/icon" android:layout_width="wrap_content"&gt;&lt;/ImageView&gt; &lt;/LinearLayout&gt; </code></pre> <p>And one final detail, be sure to add:</p> <pre><code>&lt;uses-feature android:name="android.hardware.camera"&gt;&lt;/uses-feature&gt; </code></pre> <p>and if camera is optional to your app functionality. make sure to set require to false in the permission. like this</p> <pre><code>&lt;uses-feature android:name="android.hardware.camera" android:required="false"&gt;&lt;/uses-feature&gt; </code></pre> <p>to your manifest.xml.</p>
<p>In Activity:</p> <pre><code>@Override protected void onCreate(Bundle savedInstanceState) { image = (ImageView) findViewById(R.id.imageButton); image.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { try { SimpleDateFormat sdfPic = new SimpleDateFormat(DATE_FORMAT); currentDateandTime = sdfPic.format(new Date()).replace(" ", ""); File imagesFolder = new File(IMAGE_PATH, currentDateandTime); imagesFolder.mkdirs(); Random generator = new Random(); int n = 10000; n = generator.nextInt(n); String fname = IMAGE_NAME + n + IMAGE_FORMAT; File file = new File(imagesFolder, fname); outputFileUri = Uri.fromFile(file); cameraIntent= new Intent( android.provider.MediaStore.ACTION_IMAGE_CAPTURE); cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri); startActivityForResult(cameraIntent, CAMERA_DATA); }catch(Exception e) { e.printStackTrace(); } } }); @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); switch(requestCode) { case CAMERA_DATA : final int IMAGE_MAX_SIZE = 300; try { // Bitmap bitmap; File file = null; FileInputStream fis; BitmapFactory.Options opts; int resizeScale; Bitmap bmp; file = new File(outputFileUri.getPath()); // This bit determines only the width/height of the // bitmap // without loading the contents opts = new BitmapFactory.Options(); opts.inJustDecodeBounds = true; fis = new FileInputStream(file); BitmapFactory.decodeStream(fis, null, opts); fis.close(); // Find the correct scale value. It should be a power of // 2 resizeScale = 1; if (opts.outHeight &gt; IMAGE_MAX_SIZE || opts.outWidth &gt; IMAGE_MAX_SIZE) { resizeScale = (int) Math.pow(2, (int) Math.round(Math.log(IMAGE_MAX_SIZE/ (double) Math.max(opts.outHeight, opts.outWidth)) / Math.log(0.5))); } // Load pre-scaled bitmap opts = new BitmapFactory.Options(); opts.inSampleSize = resizeScale; fis = new FileInputStream(file); bmp = BitmapFactory.decodeStream(fis, null, opts); Bitmap getBitmapSize = BitmapFactory.decodeResource( getResources(), R.drawable.male); image.setLayoutParams(new RelativeLayout.LayoutParams( 200,200));//(width,height); image.setImageBitmap(bmp); image.setRotation(90); fis.close(); ByteArrayOutputStream baos = new ByteArrayOutputStream(); bmp.compress(Bitmap.CompressFormat.JPEG, 70, baos); imageByte = baos.toByteArray(); break; } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } </code></pre> <p>in layout.xml:</p> <pre><code>enter code here &lt;RelativeLayout android:id="@+id/relativeLayout2" android:layout_width="wrap_content" android:layout_height="wrap_content"&gt; &lt;ImageView android:id="@+id/imageButton" android:layout_width="wrap_content" android:layout_height="wrap_content" android:src="@drawable/XXXXXXX" android:textAppearance="?android:attr/textAppearanceSmall" /&gt; </code></pre> <p></p> <p>in manifest.xml:</p> <blockquote> <pre><code> &lt;uses-permission android:name="android.permission.CAMERA" /&gt; &lt;uses-feature android:name="android.hardware.camera" /&gt; </code></pre> <p> </p> </blockquote>
<p>Capture photo + Choose from Gallery:</p> <pre><code> a = (ImageButton)findViewById(R.id.imageButton1); a.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { selectImage(); } }); } private File savebitmap(Bitmap bmp) { String extStorageDirectory = Environment.getExternalStorageDirectory().toString(); OutputStream outStream = null; // String temp = null; File file = new File(extStorageDirectory, "temp.png"); if (file.exists()) { file.delete(); file = new File(extStorageDirectory, "temp.png"); } try { outStream = new FileOutputStream(file); bmp.compress(Bitmap.CompressFormat.PNG, 100, outStream); outStream.flush(); outStream.close(); } catch (Exception e) { e.printStackTrace(); return null; } return file; } @Override public boolean onCreateOptionsMenu(Menu menu) { // Inflate the menu; this adds items to the action bar if it is present. getMenuInflater().inflate(R.menu.main, menu); return true; } private void selectImage() { final CharSequence[] options = { "Take Photo", "Choose from Gallery","Cancel" }; AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this); builder.setTitle("Add Photo!"); builder.setItems(options, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int item) { if (options[item].equals("Take Photo")) { Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); File f = new File(android.os.Environment.getExternalStorageDirectory(), "temp.jpg"); intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(f)); //pic = f; startActivityForResult(intent, 1); } else if (options[item].equals("Choose from Gallery")) { Intent intent = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI); startActivityForResult(intent, 2); } else if (options[item].equals("Cancel")) { dialog.dismiss(); } } }); builder.show(); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); if (resultCode == RESULT_OK) { if (requestCode == 1) { //h=0; File f = new File(Environment.getExternalStorageDirectory().toString()); for (File temp : f.listFiles()) { if (temp.getName().equals("temp.jpg")) { f = temp; File photo = new File(Environment.getExternalStorageDirectory(), "temp.jpg"); //pic = photo; break; } } try { Bitmap bitmap; BitmapFactory.Options bitmapOptions = new BitmapFactory.Options(); bitmap = BitmapFactory.decodeFile(f.getAbsolutePath(), bitmapOptions); a.setImageBitmap(bitmap); String path = android.os.Environment .getExternalStorageDirectory() + File.separator + "Phoenix" + File.separator + "default"; //p = path; f.delete(); OutputStream outFile = null; File file = new File(path, String.valueOf(System.currentTimeMillis()) + ".jpg"); try { outFile = new FileOutputStream(file); bitmap.compress(Bitmap.CompressFormat.JPEG, 85, outFile); //pic=file; outFile.flush(); outFile.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (Exception e) { e.printStackTrace(); } } catch (Exception e) { e.printStackTrace(); } } else if (requestCode == 2) { Uri selectedImage = data.getData(); // h=1; //imgui = selectedImage; String[] filePath = { MediaStore.Images.Media.DATA }; Cursor c = getContentResolver().query(selectedImage,filePath, null, null, null); c.moveToFirst(); int columnIndex = c.getColumnIndex(filePath[0]); String picturePath = c.getString(columnIndex); c.close(); Bitmap thumbnail = (BitmapFactory.decodeFile(picturePath)); Log.w("path of image from gallery......******************.........", picturePath+""); a.setImageBitmap(thumbnail); } } </code></pre>
<p>You can use custom camera with thumbnail image. You can look my <a href="https://github.com/devcelebi/Kut-Camera" rel="nofollow">project</a>.</p>
<p>Here is the complete code:</p> <pre><code>package com.example.cameraa; import android.app.Activity; import android.content.Intent; import android.graphics.Bitmap; import android.net.Uri; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.ImageView; public class MainActivity extends Activity { Button btnTackPic; Uri photoPath; ImageView ivThumbnailPhoto; static int TAKE_PICTURE = 1; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // Get reference to views btnTackPic = (Button) findViewById(R.id.bt1); ivThumbnailPhoto = (ImageView) findViewById(R.id.imageView1); btnTackPic.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { // TODO Auto-generated method stub Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); startActivityForResult(cameraIntent, TAKE_PICTURE); } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent intent) { if (requestCode == TAKE_PICTURE &amp;&amp; resultCode == RESULT_OK) { Bitmap photo = (Bitmap)intent.getExtras().get("data"); ivThumbnailPhoto.setImageBitmap(photo); ivThumbnailPhoto.setVisibility(View.VISIBLE); } } } </code></pre> <p>Remember to add permissions for the camera too.</p>
<p>Capture photo from camera + pick image from gallery and set it into the background of layout or imageview. Here is sample code.</p> <pre><code>import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStream; import android.app.Activity; import android.app.AlertDialog; import android.content.DialogInterface; import android.content.Intent; import android.database.Cursor; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.drawable.BitmapDrawable; import android.graphics.drawable.Drawable; import android.net.Uri; import android.os.Bundle; import android.os.Environment; import android.provider.MediaStore; import android.util.Log; import android.view.View; import android.view.View.OnClickListener; import android.widget.AdapterView; import android.widget.AdapterView.OnItemClickListener; import android.widget.GridView; import android.widget.ImageView; import android.widget.LinearLayout; public class Post_activity extends Activity { final int TAKE_PICTURE = 1; final int ACTIVITY_SELECT_IMAGE = 2; ImageView openCameraOrGalleryBtn,cancelBtn; LinearLayout backGroundImageLinearLayout; public void onCreate(Bundle savedBundleInstance) { super.onCreate(savedBundleInstance); overridePendingTransition(R.anim.slide_up,0); setContentView(R.layout.post_activity); backGroundImageLinearLayout=(LinearLayout)findViewById(R.id.background_image_linear_layout); cancelBtn=(ImageView)findViewById(R.id.cancel_icon); openCameraOrGalleryBtn=(ImageView)findViewById(R.id.camera_icon); openCameraOrGalleryBtn.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { // TODO Auto-generated method stub selectImage(); } }); cancelBtn.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { // TODO Auto-generated method stub overridePendingTransition(R.anim.slide_down,0); finish(); } }); } public void selectImage() { final CharSequence[] options = { "Take Photo", "Choose from Gallery","Cancel" }; AlertDialog.Builder builder = new AlertDialog.Builder(Post_activity.this); builder.setTitle("Add Photo!"); builder.setItems(options,new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { // TODO Auto-generated method stub if(options[which].equals("Take Photo")) { Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); startActivityForResult(cameraIntent, TAKE_PICTURE); } else if(options[which].equals("Choose from Gallery")) { Intent intent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI); startActivityForResult(intent, ACTIVITY_SELECT_IMAGE); } else if(options[which].equals("Cancel")) { dialog.dismiss(); } } }); builder.show(); } public void onActivityResult(int requestcode,int resultcode,Intent intent) { super.onActivityResult(requestcode, resultcode, intent); if(resultcode==RESULT_OK) { if(requestcode==TAKE_PICTURE) { Bitmap photo = (Bitmap)intent.getExtras().get("data"); Drawable drawable=new BitmapDrawable(photo); backGroundImageLinearLayout.setBackgroundDrawable(drawable); } else if(requestcode==ACTIVITY_SELECT_IMAGE) { Uri selectedImage = intent.getData(); String[] filePath = { MediaStore.Images.Media.DATA }; Cursor c = getContentResolver().query(selectedImage,filePath, null, null, null); c.moveToFirst(); int columnIndex = c.getColumnIndex(filePath[0]); String picturePath = c.getString(columnIndex); c.close(); Bitmap thumbnail = (BitmapFactory.decodeFile(picturePath)); Drawable drawable=new BitmapDrawable(thumbnail); backGroundImageLinearLayout.setBackgroundDrawable(drawable); } } } public void onBackPressed() { super.onBackPressed(); //overridePendingTransition(R.anim.slide_down,0); } } Add these permission in Androidmenifest.xml file &lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/&gt; &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt; &lt;uses-permission android:name="android.permission.CAMERA"/&gt; </code></pre>
<p>It took me some hours to get this working. The code it's almost a copy-paste from <a href="http://developer.android.com/training/camera/photobasics.html">developer.android.com</a>, with a minor difference.</p> <p>Request this permission on the <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt; </code></pre> <p>On your <code>Activity</code>, start by defining this:</p> <pre><code>static final int REQUEST_IMAGE_CAPTURE = 1; private Bitmap mImageBitmap; private String mCurrentPhotoPath; private ImageView mImageView; </code></pre> <p>Then fire this <code>Intent</code> in an <code>onClick</code>:</p> <pre><code>Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); if (cameraIntent.resolveActivity(getPackageManager()) != null) { // Create the File where the photo should go File photoFile = null; try { photoFile = createImageFile(); } catch (IOException ex) { // Error occurred while creating the File Log.i(TAG, "IOException"); } // Continue only if the File was successfully created if (photoFile != null) { cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photoFile)); startActivityForResult(cameraIntent, REQUEST_IMAGE_CAPTURE); } } </code></pre> <p>Add the following support method:</p> <pre><code>private File createImageFile() throws IOException { // Create an image file name String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()); String imageFileName = "JPEG_" + timeStamp + "_"; File storageDir = Environment.getExternalStoragePublicDirectory( Environment.DIRECTORY_PICTURES); File image = File.createTempFile( imageFileName, // prefix ".jpg", // suffix storageDir // directory ); // Save a file: path for use with ACTION_VIEW intents mCurrentPhotoPath = "file:" + image.getAbsolutePath(); return image; } </code></pre> <p>Then receive the result:</p> <pre><code>@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) { try { mImageBitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), Uri.parse(mCurrentPhotoPath)); mImageView.setImageBitmap(mImageBitmap); } catch (IOException e) { e.printStackTrace(); } } } </code></pre> <p>What made it work is the <code>MediaStore.Images.Media.getBitmap(this.getContentResolver(), Uri.parse(mCurrentPhotoPath))</code>, which is different from the code from <a href="http://developer.android.com/training/camera/photobasics.html">developer.android.com</a>. The original code gave me a <code>FileNotFoundException</code>.</p>
<p>Here is code I have used for Capturing and Saving Camera Image then display it to imageview. You can use according to your need.</p> <p>You have to save Camera image to specific location then fetch from that location then convert it to byte-array.</p> <p>Here is method for opening capturing camera image activity.</p> <pre><code>private static final int CAMERA_PHOTO = 111; private Uri imageToUploadUri; private void captureCameraImage() { Intent chooserIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); File f = new File(Environment.getExternalStorageDirectory(), "POST_IMAGE.jpg"); chooserIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(f)); imageToUploadUri = Uri.fromFile(f); startActivityForResult(chooserIntent, CAMERA_PHOTO); } </code></pre> <p>then your onActivityResult() method should be like this.</p> <pre><code>@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); if (requestCode == CAMERA_PHOTO &amp;&amp; resultCode == Activity.RESULT_OK) { if(imageToUploadUri != null){ Uri selectedImage = imageToUploadUri; getContentResolver().notifyChange(selectedImage, null); Bitmap reducedSizeBitmap = getBitmap(imageToUploadUri.getPath()); if(reducedSizeBitmap != null){ ImgPhoto.setImageBitmap(reducedSizeBitmap); Button uploadImageButton = (Button) findViewById(R.id.uploadUserImageButton); uploadImageButton.setVisibility(View.VISIBLE); }else{ Toast.makeText(this,"Error while capturing Image",Toast.LENGTH_LONG).show(); } }else{ Toast.makeText(this,"Error while capturing Image",Toast.LENGTH_LONG).show(); } } } </code></pre> <p>Here is getBitmap() method used in onActivityResult(). I have done all performance improvement that can be possible while getting camera capture image bitmap.</p> <pre><code>private Bitmap getBitmap(String path) { Uri uri = Uri.fromFile(new File(path)); InputStream in = null; try { final int IMAGE_MAX_SIZE = 1200000; // 1.2MP in = getContentResolver().openInputStream(uri); // Decode image size BitmapFactory.Options o = new BitmapFactory.Options(); o.inJustDecodeBounds = true; BitmapFactory.decodeStream(in, null, o); in.close(); int scale = 1; while ((o.outWidth * o.outHeight) * (1 / Math.pow(scale, 2)) &gt; IMAGE_MAX_SIZE) { scale++; } Log.d("", "scale = " + scale + ", orig-width: " + o.outWidth + ", orig-height: " + o.outHeight); Bitmap b = null; in = getContentResolver().openInputStream(uri); if (scale &gt; 1) { scale--; // scale to max possible inSampleSize that still yields an image // larger than target o = new BitmapFactory.Options(); o.inSampleSize = scale; b = BitmapFactory.decodeStream(in, null, o); // resize to desired dimensions int height = b.getHeight(); int width = b.getWidth(); Log.d("", "1th scale operation dimenions - width: " + width + ", height: " + height); double y = Math.sqrt(IMAGE_MAX_SIZE / (((double) width) / height)); double x = (y / height) * width; Bitmap scaledBitmap = Bitmap.createScaledBitmap(b, (int) x, (int) y, true); b.recycle(); b = scaledBitmap; System.gc(); } else { b = BitmapFactory.decodeStream(in); } in.close(); Log.d("", "bitmap size - width: " + b.getWidth() + ", height: " + b.getHeight()); return b; } catch (IOException e) { Log.e("", e.getMessage(), e); return null; } } </code></pre> <p>Hope it helps!</p>
<p>I know it's a quite old thread, but all these solutions are not completed and don't work on some devices when user rotates camera because data in onActivityResult is null. So here is solution which I have tested on lots of devices and haven't faced any problem so far.</p> <p>First declare your Uri variable in your activity:</p> <pre><code>private Uri uriFilePath; </code></pre> <p>Then create your temporary folder for storing captured image and make intent for capturing image by camera:</p> <pre><code>PackageManager packageManager = getActivity().getPackageManager(); if (packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA)) { File mainDirectory = new File(Environment.getExternalStorageDirectory(), "MyFolder/tmp"); if (!mainDirectory.exists()) mainDirectory.mkdirs(); Calendar calendar = Calendar.getInstance(); uriFilePath = Uri.fromFile(new File(mainDirectory, "IMG_" + calendar.getTimeInMillis())); intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); intent.putExtra(MediaStore.EXTRA_OUTPUT, uriFilePath); startActivityForResult(intent, 1); } </code></pre> <p>And now here comes one of the most important things, you have to save your uriFilePath in onSaveInstanceState, because if you didn't do that and user rotated his device while using camera, your uri would be null.</p> <pre><code>@Override protected void onSaveInstanceState(Bundle outState) { if (uriFilePath != null) outState.putString("uri_file_path", uriFilePath.toString()); super.onSaveInstanceState(outState); } </code></pre> <p>After that you should always recover your uri in your onCreate method:</p> <pre><code>@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (savedInstanceState != null) { if (uriFilePath == null &amp;&amp; savedInstanceState.getString("uri_file_path") != null) { uriFilePath = Uri.parse(savedInstanceState.getString("uri_file_path")); } } } </code></pre> <p>And here comes last part to get your Uri in onActivityResult:</p> <pre><code>@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode == RESULT_OK) { if (requestCode == 1) { String filePath = uriFilePath.getPath(); // Here is path of your captured image, so you can create bitmap from it, etc. } } } </code></pre> <p>P.S. Don't forget to add permissions for Camera and Ext. storage writing to your Manifest.</p>