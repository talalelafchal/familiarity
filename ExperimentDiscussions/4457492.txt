How do I use the Simple HTTP client in Android?
<p>How do I use the <code>AndroidHttpClient</code> as an HTTP client to connect to a remote server? I have not been able to find good examples in the documentation nor on the internet.</p>
<pre><code>public static void connect(String url) { HttpClient httpclient = new DefaultHttpClient(); // Prepare a request object HttpGet httpget = new HttpGet(url); // Execute the request HttpResponse response; try { response = httpclient.execute(httpget); // Examine the response status Log.i("Praeda",response.getStatusLine().toString()); // Get hold of the response entity HttpEntity entity = response.getEntity(); // If the response does not enclose an entity, there is no need // to worry about connection release if (entity != null) { // A Simple JSON Response Read InputStream instream = entity.getContent(); String result= convertStreamToString(instream); // now you have the string representation of the HTML request instream.close(); } } catch (Exception e) {} } private static String convertStreamToString(InputStream is) { /* * To convert the InputStream to String we use the BufferedReader.readLine() * method. We iterate until the BufferedReader return null which means * there's no more data to read. Each line will appended to a StringBuilder * and returned as String. */ BufferedReader reader = new BufferedReader(new InputStreamReader(is)); StringBuilder sb = new StringBuilder(); String line = null; try { while ((line = reader.readLine()) != null) { sb.append(line + "\n"); } } catch (IOException e) { e.printStackTrace(); } finally { try { is.close(); } catch (IOException e) { e.printStackTrace(); } } return sb.toString(); } </code></pre>
<p>You can use like this: </p> <pre><code>public static String executeHttpPost1(String url, HashMap&lt;String, String&gt; postParameters) throws UnsupportedEncodingException { // TODO Auto-generated method stub HttpClient client = getNewHttpClient(); try{ request = new HttpPost(url); } catch(Exception e){ e.printStackTrace(); } if(postParameters!=null &amp;&amp; postParameters.isEmpty()==false){ List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;(postParameters.size()); String k, v; Iterator&lt;String&gt; itKeys = postParameters.keySet().iterator(); while (itKeys.hasNext()) { k = itKeys.next(); v = postParameters.get(k); nameValuePairs.add(new BasicNameValuePair(k, v)); } UrlEncodedFormEntity urlEntity = new UrlEncodedFormEntity(nameValuePairs); request.setEntity(urlEntity); } try { Response = client.execute(request,localContext); HttpEntity entity = Response.getEntity(); int statusCode = Response.getStatusLine().getStatusCode(); Log.i(TAG, ""+statusCode); Log.i(TAG, "------------------------------------------------"); try{ InputStream in = (InputStream) entity.getContent(); //Header contentEncoding = Response.getFirstHeader("Content-Encoding"); /*if (contentEncoding != null &amp;&amp; contentEncoding.getValue().equalsIgnoreCase("gzip")) { in = new GZIPInputStream(in); }*/ BufferedReader reader = new BufferedReader(new InputStreamReader(in)); StringBuilder str = new StringBuilder(); String line = null; while((line = reader.readLine()) != null){ str.append(line + "\n"); } in.close(); response = str.toString(); Log.i(TAG, "response"+response); } catch(IllegalStateException exc){ exc.printStackTrace(); } } catch(Exception e){ Log.e("log_tag", "Error in http connection "+response); } finally { } return response; } </code></pre>
<p>You can use this code:</p> <pre><code>int count; try { URL url = new URL(f_url[0]); URLConnection conection = url.openConnection(); conection.setConnectTimeout(TIME_OUT); conection.connect(); // Getting file length int lenghtOfFile = conection.getContentLength(); // Create a Input stream to read file - with 8k buffer InputStream input = new BufferedInputStream(url.openStream(), 8192); // Output stream to write file OutputStream output = new FileOutputStream( "/sdcard/9androidnet.jpg"); byte data[] = new byte[1024]; long total = 0; while ((count = input.read(data)) != -1) { total += count; // publishing the progress.... // After this onProgressUpdate will be called publishProgress("" + (int) ((total * 100) / lenghtOfFile)); // writing data to file output.write(data, 0, count); } // flushing output output.flush(); // closing streams output.close(); input.close(); } catch (SocketTimeoutException e) { connectionTimeout=true; } catch (Exception e) { Log.e("Error: ", e.getMessage()); } </code></pre>