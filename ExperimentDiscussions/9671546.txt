AsyncTask Android example
<p>I was reading about <code>AsyncTask</code>, and I tried the simple program below. But it does not seem to work. How can I make it work?</p> <pre><code>package com.test; import android.app.Activity; import android.os.AsyncTask; import android.os.Bundle; import android.provider.Settings.System; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.view.View.OnClickListener; public class AsyncTaskActivity extends Activity { Button btn; /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); btn = (Button) findViewById(R.id.button1); btn.setOnClickListener((OnClickListener) this); } public void onClick(View view){ new LongOperation().execute(""); } private class LongOperation extends AsyncTask&lt;String, Void, String&gt; { @Override protected String doInBackground(String... params) { for(int i=0;i&lt;5;i++) { try { Thread.sleep(1000); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } } TextView txt = (TextView) findViewById(R.id.output); txt.setText("Executed"); return null; } @Override protected void onPostExecute(String result) { } @Override protected void onPreExecute() { } @Override protected void onProgressUpdate(Void... values) { } } } </code></pre> <p>I am just trying to change the label after 5 seconds in the background process.</p> <p>This is my <strong>main.xml</strong>:</p> <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="fill_parent" android:layout_height="fill_parent" android:orientation="vertical" &gt; &lt;ProgressBar android:id="@+id/progressBar" style="?android:attr/progressBarStyleHorizontal" android:layout_width="match_parent" android:layout_height="wrap_content" android:indeterminate="false" android:max="10" android:padding="10dip"&gt; &lt;/ProgressBar&gt; &lt;Button android:id="@+id/button1" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="Start Progress" &gt; &lt;/Button&gt; &lt;TextView android:id="@+id/output" android:layout_width="match_parent" android:layout_height="wrap_content" android:text="Replace"/&gt; &lt;/LinearLayout&gt; </code></pre>
<p>Ok you are trying to access the GUI via another thread. This, in the main, is not good practice. </p> <p>The AsyncTask executes everything in <code>doInBackground()</code> inside of another thread, which does not have access to the GUI where your views are.</p> <p><code>preExecute()</code> and <code>postExecute()</code> offer you access to GUI before and after the heavy lifting occurs in this new thread, you can even pass the result of the long operation to <code>postExecute()</code> to then show any results of processing.</p> <p>See these lines where you are later updating your TextView:</p> <pre><code>TextView txt = (TextView) findViewById(R.id.output); txt.setText("Executed"); </code></pre> <p>put them in <code>PostExecute()</code></p> <p>You will then see your TextView text updated after the <code>doInBackground</code> completes.</p> <p><strong>EDIT:</strong> I noticed that your onClick listener does not check to see which View has been selected. I find the easiest way to do this is via switch statements. I have a complete class edited below with all suggestions to save confusion.</p> <pre><code>import android.app.Activity; import android.os.AsyncTask; import android.os.Bundle; import android.provider.Settings.System; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.view.View.OnClickListener; public class AsyncTaskActivity extends Activity implements OnClickListener { Button btn; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); btn = (Button) findViewById(R.id.button1); // because we implement OnClickListener we only have to pass "this" // (much easier) btn.setOnClickListener(this); } public void onClick(View view) { // detect the view that was "clicked" switch (view.getId()) { case R.id.button1: new LongOperation().execute(""); break; } } private class LongOperation extends AsyncTask&lt;String, Void, String&gt; { @Override protected String doInBackground(String... params) { for (int i = 0; i &lt; 5; i++) { try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.interrupted(); } } return "Executed"; } @Override protected void onPostExecute(String result) { TextView txt = (TextView) findViewById(R.id.output); txt.setText("Executed"); // txt.setText(result); // might want to change "executed" for the returned string passed // into onPostExecute() but that is upto you } @Override protected void onPreExecute() {} @Override protected void onProgressUpdate(Void... values) {} } } </code></pre>
<p>I'm sure it is executing properly, but you're trying to change the UI elements in the background thread and that won't do.</p> <p>Revise your call and AsyncTask as follows:</p> <p><strong>Calling Class</strong></p> <p><strong>Note:</strong> I personally suggest using <code>onPostExecute()</code> wherever you execute your AsyncTask thread and not in the class that extends AsyncTask itself. I think it makes the code easier to read especially if you need the AsyncTask in multiple places handling the results slightly different.</p> <pre><code>new LongThread() { @Override public void onPostExecute(String result) { TextView txt = (TextView) findViewById(R.id.output); txt.setText(result); } }.execute(""); </code></pre> <p><strong>LongThread class (extends AsyncTask):</strong></p> <pre><code>@Override protected String doInBackground(String... params) { for(int i = 0; i &lt; 5; i++) { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } return "Executed"; } </code></pre>
<p>Move these two lines:</p> <pre><code>TextView txt = (TextView) findViewById(R.id.output); txt.setText("Executed"); </code></pre> <p>out of your AsyncTask's <code>doInBackground</code> method and put them in the <code>onPostExecute</code> method. Your <code>AsyncTask</code> should look something like this:</p> <pre><code>private class LongOperation extends AsyncTask&lt;String, Void, String&gt; { @Override protected String doInBackground(String... params) { try { Thread.sleep(5000); // no need for a loop } catch (InterruptedException e) { Log.e("LongOperation", "Interrupted", e); return "Interrupted"; } return "Executed"; } @Override protected void onPostExecute(String result) { TextView txt = (TextView) findViewById(R.id.output); txt.setText(result); } } </code></pre>
<p>Simply:</p> <pre><code>LongOperation MyTask = new LongOperation(); MyTask.execute(); </code></pre>
<blockquote> <p><a href="http://code2concept.blogspot.in/2015/01/asynctask-android-example.html" rel="nofollow">Concept and code here</a></p> </blockquote> <p>I have created a simple example for using AsyncTask of Android. It starts with <code>onPreExecute(), doInBackground(), publishProgress()</code> and finally <code>onProgressUpdate()</code>.</p> <p>In this doInBackground() works as a background thread, while other works in the UI Thread. You can't access an UI element in doInBackground(). The sequence is same as I have mentioned.</p> <p>However if you need to update any widget from <code>doInBackground</code> you can <code>publishProgress</code> from <code>doInBackground</code> which will call <code>onProgressUpdate</code> to update your UI widget.</p> <pre><code>class TestAsync extends AsyncTask&lt;Void, Integer, String&gt; { String TAG = getClass().getSimpleName(); protected void onPreExecute (){ Log.d(TAG + " PreExceute","On pre Exceute......"); } protected String doInBackground(Void...arg0) { Log.d(TAG + " DoINBackGround","On doInBackground..."); for(int i=0; i&lt;10; i++){ Integer in = new Integer(i); publishProgress(i); } return "You are at PostExecute"; } protected void onProgressUpdate(Integer...a){ Log.d(TAG + " onProgressUpdate", "You are in progress update ... " + a[0]); } protected void onPostExecute(String result) { Log.d(TAG + " onPostExecute", "" + result); } } </code></pre> <p>Call it like this in your activity:</p> <pre><code>new TestAsync().execute(); </code></pre> <p><a href="http://developer.android.com/reference/android/os/AsyncTask.html" rel="nofollow">Developer Reference Here</a></p>
<p>When an asynchronous task is executed, the task goes through 4 steps:</p> <ol> <li>onPreExecute()</li> <li>doInBackground(Params...)</li> <li>onProgressUpdate(Progress...)</li> <li>onPostExecute(Result)</li> </ol> <p>Below is an demo example</p> <pre><code>private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long&gt; { protected Long doInBackground(URL... urls) { int count = urls.length; long totalSize = 0; for (int i = 0; i &lt; count; i++) { totalSize += Downloader.downloadFile(urls[i]); publishProgress((int) ((i / (float) count) * 100)); // Escape early if cancel() is called if (isCancelled()) break; } return totalSize; } protected void onProgressUpdate(Integer... progress) { setProgressPercent(progress[0]); } protected void onPostExecute(Long result) { showDialog("Downloaded " + result + " bytes"); } } </code></pre> <p>and once you created, a task is executed very simply:</p> <pre><code> new DownloadFilesTask().execute(url1, url2, url3); </code></pre> <p>I hope this will help you...</p>
<p>Shortest example for just doing something asynchronously:</p> <pre><code>class MyAsyncTask extends android.os.AsyncTask { @Override protected Object doInBackground(Object[] objects) { //do something asynchronously return null; } } </code></pre> <p>To run it:</p> <pre><code>(new MyAsyncTask()).execute(); </code></pre>
<p>You need to declare the button onclicklistener, once click it calls AsyncTask class DownloadJson ,the process will be shown below:</p> <pre><code>@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); btn = (Button) findViewById(R.id.button1); btn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { new DownloadJson().execute(); } }); } </code></pre> <hr> <pre><code> // DownloadJSON AsyncTask private class DownloadJson extends AsyncTask&lt;Void, Void, Void&gt; { @Override protected void onPreExecute() { super.onPreExecute(); } @Override protected Void doInBackground(Void... params) { newlist = new ArrayList&lt;HashMap&lt;String, String&gt;&gt;(); json = jsonParser.makeHttpRequest(json, "POST"); try { newarray = new JSONArray(json); for (int i = 0; i &lt; countdisplay; i++) { HashMap&lt;String, String&gt; eachnew = new HashMap&lt;String, String&gt;(); newobject = newarray.getJSONObject(i); eachnew.put("id", newobject.getString("ID")); eachnew.put("name", newobject.getString("Name")); newlist.add(eachnew); } } } catch (JSONException e) { Log.e("Error", e.getMessage()); e.printStackTrace(); } return null; } @Override protected void onPostExecute(Void args) { newlisttemp.addAll(newlist); NewAdapterpager newadapterpager = new NewAdapterpager(ProcesssActivitypager.this,newlisttemp); newpager.setAdapter(newadapterpager); } } </code></pre>
<pre><code> private class AsyncTaskDemo extends AsyncTask&lt;Void, Void, Void&gt; { @Override protected void onPreExecute() { super.onPreExecute(); // Showing progress dialog progressDialog = new ProgressDialog(this); progressDialog.setMessage("Loading..."); progressDialog.setCancelable(false); progressDialog.show(); } @Override protected Void doInBackground(Void... arg0) { //do code here return null; } @Override protected void onPostExecute(Void result) { super.onPostExecute(result); // Dismiss the progress dialog if (progressDialog.isShowing()) { progressDialog.dismiss(); } } @Override protected void onCancelled() { super.onCancelled(); progressDialog.dismiss(); Toast toast = Toast.makeText(getActivity(), "Error is occured due to some probelm", Toast.LENGTH_LONG); toast.setGravity(Gravity.TOP, 25, 400); toast.show(); } } </code></pre>
<p>I would recommend making your life easier by using this library for background works <a href="https://github.com/Arasthel/AsyncJobLibrary" rel="nofollow">https://github.com/Arasthel/AsyncJobLibrary</a></p> <p>its this simple..</p> <pre><code>AsyncJob.doInBackground(new AsyncJob.OnBackgroundJob() { @Override public void doOnBackground() { startRecording(); } }); </code></pre>
<p>Sample Async Task with POST request:</p> <pre><code>List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;(); params.add(new BasicNameValuePair("key1", "value1")); params.add(new BasicNameValuePair("key1", "value2")); new WEBSERVICEREQUESTOR(URL, params).execute(); class WEBSERVICEREQUESTOR extends AsyncTask&lt;String, Integer, String&gt; { String URL; List&lt;NameValuePair&gt; parameters; private ProgressDialog pDialog; public WEBSERVICEREQUESTOR(String url, List&lt;NameValuePair&gt; params) { this.URL = url; this.parameters = params; } @Override protected void onPreExecute() { pDialog = new ProgressDialog(LoginActivity.this); pDialog.setMessage("Processing Request..."); pDialog.setIndeterminate(false); pDialog.setCancelable(false); pDialog.show(); super.onPreExecute(); } @Override protected String doInBackground(String... params) { try { DefaultHttpClient httpClient = new DefaultHttpClient(); HttpEntity httpEntity = null; HttpResponse httpResponse = null; HttpPost httpPost = new HttpPost(URL); if (parameters != null) { httpPost.setEntity(new UrlEncodedFormEntity(parameters)); } httpResponse = httpClient.execute(httpPost); httpEntity = httpResponse.getEntity(); return EntityUtils.toString(httpEntity); } catch (Exception e) { } return ""; } @Override protected void onPostExecute(String result) { pDialog.dismiss(); try { } catch (Exception e) { } super.onPostExecute(result); } } </code></pre>
<p>My full answer is <a href="http://stackoverflow.com/questions/25647881/android-asynctask-example-and-explanation/25647882#25647882">here</a>, but here is an explanatory image to supplement the other answers on this page. For me, understanding where all the variables were going was the most confusing part in the beginning.</p> <p><img src="https://i.stack.imgur.com/I23KW.png" alt="enter image description here"></p>
<p>When you are in the worker thread, you can not directly manipulate UI elements on Android.</p> <p>When you are using AsyncTask please understand the callback methods.</p> <p>For example:</p> <pre><code>public class MyAyncTask extends AsyncTask&lt;Void, Void, Void&gt;{ @Override protected void onPreExecute() { // Here you can show progress bar or something on the similar lines. // Since you are in a UI thread here. super.onPreExecute(); } @Override protected void onPostExecute(Void aVoid) { super.onPostExecute(aVoid); // After completing execution of given task, control will return here. // Hence if you want to populate UI elements with fetched data, do it here. } @Override protected void onProgressUpdate(Void... values) { super.onProgressUpdate(values); // You can track you progress update here } @Override protected Void doInBackground(Void... params) { // Here you are in the worker thread and you are not allowed to access UI thread from here. // Here you can perform network operations or any heavy operations you want. return null; } } </code></pre> <p>FYI: To access the UI thread from a worker thread, you either use runOnUiThread() method or post method on your view.</p> <p>For instance:</p> <pre><code>runOnUiThread(new Runnable() { textView.setText("something."); }); or yourview.post(new Runnable() { yourview.setText("something"); }); </code></pre> <p>This will help you know the things better. Hence in you case, you need to set your textview in the onPostExecute() method.</p>
<p>Change your code as given below:</p> <pre><code>@Override protected void onPostExecute(String result) { runOnUiThread(new Runnable() { public void run() { TextView txt = (TextView) findViewById(R.id.output); txt.setText("Executed"); } }); } </code></pre>