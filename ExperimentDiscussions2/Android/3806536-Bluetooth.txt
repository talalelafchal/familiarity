How to enable/disable bluetooth programmatically in android
<p>HI all,</p> <p>I want to enable/disable bluetooth through the program..I has the following code.</p>
<pre><code>BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (!mBluetoothAdapter.isEnabled()) { Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE); startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
</code></pre>
<p>But this sort of code is not working in SDK 1.5..How can i do the same in SDK 1.5.?</p>
<p>Android <a href="http://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html">BluetoothAdapter</a> docs say it has been available since API Level 5. <a href="http://developer.android.com/guide/appendix/api-levels.html">API Level 5</a> is Android 2.0.</p> <p>You can try using a backport of the Bluetooth API (have not tried it personally): <a href="http://code.google.com/p/backport-android-bluetooth/">http://code.google.com/p/backport-android-bluetooth/</a></p>
<p>this code worked for me..</p> <pre><code>//Disable bluetooth BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (mBluetoothAdapter.isEnabled()) { mBluetoothAdapter.disable(); } </code></pre>
<p>The solution of prijin worked perfectly for me. It is just fair to mention that two additional permissions are needed:</p> <pre><code>&lt;uses-permission android:name="android.permission.BLUETOOTH"/&gt; &lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/&gt; </code></pre> <p>When these are added, enabling and disabling works flawless with the default bluetooth adapter.</p>
<p>Here is a bit more robust way of doing this, also handling the return values of <code>enable()\disable()</code> methods:</p> <pre><code>public static boolean setBluetooth(boolean enable) { BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); boolean isEnabled = bluetoothAdapter.isEnabled(); if (enable &amp;&amp; !isEnabled) { return bluetoothAdapter.enable(); } else if(!enable &amp;&amp; isEnabled) { return bluetoothAdapter.disable(); } // No need to change bluetooth state return true; } </code></pre> <p>And add the following permissions into your manifest file:</p> <pre><code>&lt;uses-permission android:name="android.permission.BLUETOOTH"/&gt; &lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/&gt; </code></pre> <p>But remember these important points:</p> <blockquote> <p>This is an asynchronous call: it will return immediately, and clients should listen for ACTION_STATE_CHANGED to be notified of subsequent adapter state changes. If this call returns true, then the adapter state will immediately transition from STATE_OFF to STATE_TURNING_ON, and some time later transition to either STATE_OFF or STATE_ON. If this call returns false then there was an immediate problem that will prevent the adapter from being turned on - such as Airplane mode, or the adapter is already turned on.</p> </blockquote>
<p>To Enable the Bluetooth you could use either of the following functions:</p> <pre><code> public void enableBT(View view){ BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (!mBluetoothAdapter.isEnabled()){ Intent intentBtEnabled = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE); // The REQUEST_ENABLE_BT constant passed to startActivityForResult() is a locally defined integer (which must be greater than 0), that the system passes back to you in your onActivityResult() // implementation as the requestCode parameter. int REQUEST_ENABLE_BT = 1; startActivityForResult(intentBtEnabled, REQUEST_ENABLE_BT); } } </code></pre> <p>The second function is:</p> <pre><code>public void enableBT(View view){ BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (!mBluetoothAdapter.isEnabled()){ mBluetoothAdapter.enable(); } } </code></pre> <p>The difference is that the first function makes the app ask the user a permission to turn on the Bluetooth or to deny. The second function makes the app turn on the Bluetooth directly.</p> <p>To Disable the Bluetooth use the following function:</p> <pre><code>public void disableBT(View view){ BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (mBluetoothAdapter.isEnabled()){ mBluetoothAdapter.disable(); } } </code></pre> <p>NOTE/ The first function needs only the following permission to be defined in the AndroidManifest.xml file:</p> <pre><code>&lt;uses-permission android:name="android.permission.BLUETOOTH"/&gt; </code></pre> <p>While, the second and third functions need the following permissions:</p> <pre><code>&lt;uses-permission android:name="android.permission.BLUETOOTH"/&gt; &lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/&gt; </code></pre>
<p>I used the below code to disable BT when my app launches and works fine. Not sure if this the correct way to implement this as google recommends not using "bluetooth.disable();" without explicit user action to turn off Bluetooth.</p> <pre><code> BluetoothAdapter bluetooth = BluetoothAdapter.getDefaultAdapter(); bluetooth.disable(); </code></pre> <p>I only used the below permission.</p> <pre><code>&lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/&gt; </code></pre>
<p>Add the following permissions into your manifest file:</p> <pre><code>&lt;uses-permission android:name="android.permission.BLUETOOTH"/&gt; &lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/&gt; </code></pre> <p>Enable bluetooth use this</p> <pre><code>BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (!mBluetoothAdapter.isEnabled()) { mBluetoothAdapter.enable(); }else{Toast.makeText(getApplicationContext(), "Bluetooth Al-Ready Enable", Toast.LENGTH_LONG).show();} </code></pre> <p>Disable bluetooth use this</p> <pre><code>BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (mBluetoothAdapter.isEnabled()) { mBluetoothAdapter.disable(); } </code></pre>