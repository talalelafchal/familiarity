Perl - Pack Complex 16-bit Word
<p>I have to pack a complicated message into a 16-bit word that is defined like so:</p> <ul> <li>Part 1: Error State (Least Significant Byte) <ul> <li>Bit 0: Error type A (Least Significant Bit)</li> <li>Bit 1: Error type B</li> <li>Bit 2: Error type C</li> <li>Bit 3: Error type D</li> <li>Bit 4: Error type E</li> <li>Bit 5: Error type F</li> <li>Bit 6: Error type G</li> <li>Bit 7: Error type H (Most significant Bit)</li> </ul></li> <li>Part 2: Mode/Status Additional Status is defined like so: <ul> <li>Mode: The mode is contained in the least significant 4 bits of the most significant byte. Mode numbers go 0 - 11.</li> <li>Bit 12: Status Type A</li> <li>Bit 13: Status Type B</li> <li>Bit 14: Status Type C</li> </ul></li> <li>Additional Status: <ul> <li>Bit 15: Reset on/off</li> </ul></li> </ul> <p>I can't seem to get the pack() command right. I want to pack: Error type E, Mode 7, Status Type B, Additional Status ON<br /></p> <pre><code>my $msg = pack("n", pack("C", 0, 0, 0, 0, 1, 0, 0, 0), #error state pack("C", 7, 0, 1, 0, 1) ); </code></pre> <p>Perl doc, <a href="http://perldoc.perl.org/functions/pack.html" rel="nofollow">http://perldoc.perl.org/functions/pack.html</a>, does not say about little/big endian when it comes to packing chars.</p>
<p><code>pack</code> produces 1 or more byte for each input, so it can't accept bits. Build your word first, then pass it to pack.</p> <pre><code>my $word = 0; $word |= 1 &lt;&lt; 0 if $error_type_A; $word |= 1 &lt;&lt; 1 if $error_type_B; $word |= 1 &lt;&lt; 2 if $error_type_C; $word |= 1 &lt;&lt; 3 if $error_type_D; $word |= 1 &lt;&lt; 4 if $error_type_E; $word |= 1 &lt;&lt; 5 if $error_type_F; $word |= 1 &lt;&lt; 6 if $error_type_G; $word |= 1 &lt;&lt; 7 if $error_type_H; $word |= $mode &lt;&lt; 8; $word |= 1 &lt;&lt; 12 if $status_type_A; $word |= 1 &lt;&lt; 13 if $status_type_B; $word |= 1 &lt;&lt; 14 if $status_type_C; $word |= 1 &lt;&lt; 15 if $reset; pack 'n', $word </code></pre>
<p>You could try using <code>vec</code> instead of pack. Eg:</p> <pre><code>vec($i, 0,1) = 1; # set bit zero print unpack('b*', $i), "\n"; # 10000000 vec($i, 1,1) = 1; # set bit 1 print unpack('b*', $i), "\n"; # 11000000 vec($i, 4,1) = 1; # set bit 4 print unpack('b*', $i), "\n"; # 11001000 vec($i, 15,1) = 1; # set bit 15 print unpack('b*', $i), "\n"; # 1100100000000001 </code></pre>