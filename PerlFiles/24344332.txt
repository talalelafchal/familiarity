How to ssh as different user, change group, and run a script within Perl
<p>I need to be able to run a script from within a script but first I need to ssh as a different user and then change my group.</p> <p>I am currently doing the following inside my perl script:</p> <pre><code>`ssh &lt;user&gt;@&lt;host&gt; ; newgrp &lt;group&gt; ; /script/to/run.pl` </code></pre> <p>When running this command form the command line it doesn't seam to switch groups. I assume this is because it's changing to a new shell.</p> <p>How do I get around this and get it to work?</p> <p>Also, please note, I do not have sudo/root privelages.</p>
<p>The first semicolon is interpreted by the local shell. So the three commands are run on the same host. I think you want this</p> <pre><code>ssh &lt;user&gt;\@&lt;host&gt; "newgrp &lt;grp&gt;; /bin/run.pl" </code></pre>
<p>salva, in his reply, answered my question:</p> <pre><code>sg $group -c '$cmd' </code></pre> <p>The reason the following command:</p> <pre><code>newgrp &lt;int&gt; </code></pre> <p>doesn't work is because it creates a new shell. At least that is my best guess. the "sg" command gets around this.</p>
<p>I think OP wants to construct a string to execute from Perl, notice the backticks. Not sure but OP might have to use: </p> <pre><code>$s='ssh &lt;user&gt;@&lt;host&gt; ; newgrp &lt;group&gt; ; /script/to/run.pl'; # Normal single quotes not backticks exec($s); </code></pre> <p>OP, there are different ways to execute shell functions from a Perl script. You used backticks. There is also exec($s) and system($s). </p>