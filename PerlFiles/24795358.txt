Using map to create hashes and arrays
<p>I am new to Perl and I'm trying to understand the <code>map</code> function.</p> <pre><code>my %names = qw (hanibal lecter Harry Potter INDIANA JONES Sarah connor scarlet O’Hara JAMES Bond); my ($k, $v); my @names; while (($k,$v) = each %names) { my @name ; push(@name , $k); push(@name , $v); push(@names, \@name); } print "Unsorted names : \n"; foreach(0..$#names) { print "@{$names[$_]}\n"; } </code></pre> <p>This works, and prints all the names like this </p> <pre><code>hanibal lecter scarlet O¦Hara Harry Potter Sarah connor INDIANA JONES JAMES Bond </code></pre> <p>I have modified a little my code and know it looks like this:</p> <pre><code>my %names = map { $_ } qw (hanibal lecter Harry Potter INDIANA JONES Sarah connor scarlet O’Hara JAMES Bond); my ($k, $v); my @names; while (($k,$v) = each %names) { my @name = map {$k, $v} ($k,$v) ; #my @name; #push(@name , $k); #push(@name , $v); push(@names, \@name); } foreach(0..$#names) { print "@{$names[$_]}\n"; } </code></pre> <p>The hash is created corectly but the array is not The output is </p> <pre><code>hanibal lecter hanibal lecter scarlet O▒Hara scarlet O▒Hara Harry Potter Harry Potter Sarah connor Sarah connor INDIANA JONES INDIANA JONES JAMES Bond JAMES Bond </code></pre> <p>Why does it double every record?</p>
<p>Your hash should just work for this. If you want to have a better visual representation of what your data is doing is better to use the <a href="http://en.wikipedia.org/wiki/Fat_comma#Perl" rel="nofollow">fat comma</a> to do it. For example:</p> <pre><code>my %names = ("hanibal" =&gt; "lecter", "Harry" =&gt; "Potter", "INDIANA" =&gt; "JONES", "Sarah" =&gt; "connor", "scarlet" =&gt; "OHara", "JAMES" =&gt; "Bond"); say "First name is $_ and last name is $names{$_}" for keys %names </code></pre> <p>Output:</p> <pre><code>First name is Sarah and last name is connor First name is JAMES and last name is Bond First name is hanibal and last name is lecter First name is INDIANA and last name is JONES First name is Harry and last name is Potter First name is scarlet and last name is OHara </code></pre> <p>If I misunderstood your request, please clarify.</p>
<blockquote> <p>I have read a lot of examples for map but none creates a hash from an array how I want to to do it (the first element is the key and the second is the value and so on..).</p> </blockquote> <p>Map always returns a list, which can be assigned to a hash such that the elements become key/value pairs. See <a href="http://perldoc.perl.org/perldata.html" rel="nofollow">perldata</a> for more details.</p> <pre><code>my %hash = map {split /,/} @array; </code></pre> <p><a href="http://ideone.com/5Ru57G" rel="nofollow">Demo</a></p> <p>is same as</p> <pre><code>my %hash = @array; </code></pre> <p><a href="http://ideone.com/NvQaWe" rel="nofollow">Demo</a></p> <hr> <p>Creating an array from hash</p> <pre><code>my @array = %hash; </code></pre> <p><a href="http://ideone.com/CNSwbW" rel="nofollow">Demo</a></p>
<p>Hashes are just lists of key/value pairs, so when you do</p> <pre><code>my %names = qw(hanibal lecter Harry Potter INDIANA JONES Sarah connor scarlet O’Hara JAMES Bond); </code></pre> <p>you already have a full-fledged hash:</p> <pre><code>%names = ( hanibal =&gt; "lecter", Harry =&gt; "Potter", INDIANA =&gt; "JONES", JAMES =&gt; "Bond", Sarah =&gt; "connor", scarlet =&gt; "O’Hara", ); </code></pre> <p>so if you were to apply a <code>map</code> to this while trying to get the same result, it would have to just be creating a list of all the values you already have (mapping the identity function):</p> <pre><code>my %hash = map { $_ } qw(...); </code></pre> <p>which is of course pointless. Use <code>map</code> when you need to <em>transform</em> the elements of a list into a new list. For example, if you wanted to create a hash out of the properly capitalized names, you could do:</p> <pre><code>my %names = map { ucfirst(lc($_)) } qw(...); </code></pre> <p>which creates a hash like this:</p> <pre><code>%names = { Hanibal =&gt; "Lecter", Harry =&gt; "Potter", Indiana =&gt; "Jones", James =&gt; "Bond", Sarah =&gt; "Connor", Scarlet =&gt; "O’hara", } </code></pre> <hr> <p>Since arrays are just lists of values and hashes are lists of keys => values, they can be used somewhat interchangeably when it comes to list operators. To make an array out of a hash, just do:</p> <pre><code>my @array = %hash; </code></pre> <p>You usually won't need to do this, but if you want to do something like print each key/value pair in alphabetical order on its own line, separated by spaces, it's easiest to do something like this:</p> <pre><code>my @full_names; while (my ($key, $val) = each %names) { push @full_names, "$key $val"; # Concatenate first and last names so they } # stick together when sorted print join "\n", sort @full_names; </code></pre>
<p>Map produces a new list by iterating through a list and for each element, calling a block of code to produce elements for the new list.</p> <p>You say:</p> <pre><code>my @name = map {$k, $v} ($k,$v) ; </code></pre> <p>which causes the code in <code>{}</code> to be called twice, once for the <code>$k</code> in the parenthesised list and once for the <code>$v</code>. Because you don't use <code>$_</code> in the code block, the input isn't significant except to determine the number of times the code block is called. You would get the same results from</p> <pre><code>my @name = map {$k, $v} (1,2) ; </code></pre> <p>or</p> <pre><code>my @name = map {$k, $v} ( 'donkey', 'zebra' ) ; </code></pre> <p>Each time the code block is called, it returns a list with two elements with the values of <code>$k</code> and <code>$v</code>, so map returns a list of four elements with the values of <code>$k,$v,$k,$v</code>.</p>