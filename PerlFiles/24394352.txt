Perl script that stores all top level directories and files in array
<p>I am making this too complicated I believe. I need a script that stores all top level directories and files (in the current working directory) into an array. </p> <p>This is what I have:</p> <pre><code>#!/usr/bin/perl use strict; use warnings; my $dir = 'C:\tmp'; my @names = (); opendir(DIR, $dir) or die $!; while (my $file = readdir(DIR)) { next if ($file =~ m/^\./); $file = "$file"." "; # print "$file"; @names = split( /\s+/,$file); foreach my $slot (@names) { $slot = "$slot"." "; } print @names; } closedir(DIR); exit 0; </code></pre> <p>While this works, I know this is very sloppy and I am overly complicating it but I can't think of anything off the top of my head that would make this easier. I am trying to avoid using any perl modules other then the very basic (File::Find is ok, but any cnet modules aren't). So my question is, how can i simplify this? Thanks</p>
<p>This might be what you want,</p> <pre><code>my @names = grep !/^[.]{1,2}$/, readdir(DIR); </code></pre> <p>your loop can be reduced to</p> <pre><code>while (my $file = readdir(DIR)) { next if $file =~ /^\./; $file =~ s/\s+/ /g; $file .= " "; print $file; } </code></pre> <p>if that makes any sense?</p>
<p>You could use the File::Slurp library like this:</p> <pre><code>#!/usr/bin/perl use File::Slurp; my @files = read_dir('C:\tmp'); </code></pre>
<p>You are misunderstanding something, but I'm not quite sure what. There is only ever a single file name in <code>$file</code>, and there is no point in appending a space before you split on whitespace</p> <p>Your array <code>@names</code> will contain the pieces of the file name separated by spaces, if it contains any spaces, otherwise it will be just the original file name</p> <p>Then you put spaces at the end of every element of <code>@names</code>, presumably to replace those removed by <code>split</code>, so I wonder why you used <code>split</code> in the first place</p> <p>Finally, <code>print @names</code> will print the reassembled file name with an additional space at the end. Note that if there were multiple spaces in your original file name they will be reduced to a single space now</p> <p>The easiest way to print an array of strings separated by spaces is to <em>interpolate</em> it into a double-quoted string</p> <p>This program does what you asked, but leaves the original file names intact. It uses <code>grep</code> to put into <code>@names</code> only those file names that don't begin with a dot <code>.</code>. It also uses a <em>lexical</em> directory handle which is modern best practice</p> <pre><code>use strict; use warnings; my $dir = 'C:\tmp'; opendir my $dh, $dir or die $!; my @names = grep /^[^.]/, readdir $dh; print "@names\n"; </code></pre>