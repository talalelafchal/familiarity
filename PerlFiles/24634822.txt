JSON decoding a string via JSON::XS
<p>I am running into a weird problem where if I try to convert a JSON string (which is laid out something like this :- )</p> <pre><code>{ "a" : "b", "c" : ["" , ""] } </code></pre> <p>JSON::XS->new->decode works fine in these cases. But if I have something like this to be decoded , </p> <pre><code>" { "women": "" "men" : "" } " </code></pre> <p>I think these quotes are the culprit out here . It keeps throwing error that there should be a closing quote. This JSON comes from JSON.stringify in JS so I cannot quite make it work. I have seen JSON::decode_json working for some people out here but I am specifically looking to get it all working with JSON::XS. Worst case , I'll import JSON from cpan.</p> <p>Any suggestions ? </p> <p>Edit: I investigated this a lil bit. This is the JSON I am trying to convert into a perl HASH</p> <pre><code>{ "womens": [ "/sports/size-charts/a/B00EJ493TW/womens.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/womens.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/womens.html", "/sports/size-charts/b/Yvette/womens.html", "/sports/size-charts/c/SPORTING_GOODS/womens.html" ], "mens": [ "/sports/size-charts/a/B00EJ493TW/mens.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/mens.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/mens.html", "/sports/size-charts/b/Yvette/mens.html", "/sports/size-charts/c/SPORTING_GOODS/mens.html" ], "kids": [ "/sports/size-charts/a/B00EJ493TW/kids.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/kids.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/kids.html", "/sports/size-charts/b/Yvette/kids.html", "/sports/size-charts/c/SPORTING_GOODS/kids.html" ] } </code></pre> <p>When I send this JSON back , it gets HTML Encoded (Quotes replaced by &amp;34;) and that is where Perl croaks with this error :-</p> <pre><code> '"' expected, at character offset 1 ["&amp;#34;womens&amp;#34;:[&amp;#..."] </code></pre> <p>Any help is greatly appreciated</p>
<p>The JSON you have now posted is valid, which can be ascertained by the fact that JSON::XS does not throw an error (contrary to what you said).</p> <pre><code>use strict; use warnings; use Data::Dumper qw( Dumper ); use JSON::XS qw( decode_json ); my $json = &lt;&lt;'__EOI__'; { "womens": [ "/sports/size-charts/a/B00EJ493TW/womens.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/womens.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/womens.html", "/sports/size-charts/b/Yvette/womens.html", "/sports/size-charts/c/SPORTING_GOODS/womens.html" ], "mens": [ "/sports/size-charts/a/B00EJ493TW/mens.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/mens.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/mens.html", "/sports/size-charts/b/Yvette/mens.html", "/sports/size-charts/c/SPORTING_GOODS/mens.html" ], "kids": [ "/sports/size-charts/a/B00EJ493TW/kids.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/kids.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/kids.html", "/sports/size-charts/b/Yvette/kids.html", "/sports/size-charts/c/SPORTING_GOODS/kids.html" ] } __EOI__ print(Dumper(decode_json($json))); </code></pre> <p>Output:</p> <pre><code>$VAR1 = { 'womens' =&gt; [ '/sports/size-charts/a/B00EJ493TW/womens.html', '/sports/size-charts/b/Yvette/c/SPORTING_GOODS/womens.html', '/sports/size-charts/c/SPORTING_GOODS/b/Yvette/womens.html', '/sports/size-charts/b/Yvette/womens.html', '/sports/size-charts/c/SPORTING_GOODS/womens.html' ], 'mens' =&gt; [ '/sports/size-charts/a/B00EJ493TW/mens.html', '/sports/size-charts/b/Yvette/c/SPORTING_GOODS/mens.html', '/sports/size-charts/c/SPORTING_GOODS/b/Yvette/mens.html', '/sports/size-charts/b/Yvette/mens.html', '/sports/size-charts/c/SPORTING_GOODS/mens.html' ], 'kids' =&gt; [ '/sports/size-charts/a/B00EJ493TW/kids.html', '/sports/size-charts/b/Yvette/c/SPORTING_GOODS/kids.html', '/sports/size-charts/c/SPORTING_GOODS/b/Yvette/kids.html', '/sports/size-charts/b/Yvette/kids.html', '/sports/size-charts/c/SPORTING_GOODS/kids.html' ] }; </code></pre> <p>The JSON you actually passed to JSON::XS is different. It contains <code>&amp;#34;women&amp;#34;</code> where you say it contains <code>"women"</code>, for starters.</p> <pre><code>use strict; use warnings; use Data::Dumper qw( Dumper ); use JSON::XS qw( decode_json ); my $json = &lt;&lt;'__EOI__'; { &amp;#x34;womens&amp;#x34;: [ "/sports/size-charts/a/B00EJ493TW/womens.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/womens.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/womens.html", "/sports/size-charts/b/Yvette/womens.html", "/sports/size-charts/c/SPORTING_GOODS/womens.html" ], "mens": [ "/sports/size-charts/a/B00EJ493TW/mens.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/mens.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/mens.html", "/sports/size-charts/b/Yvette/mens.html", "/sports/size-charts/c/SPORTING_GOODS/mens.html" ], "kids": [ "/sports/size-charts/a/B00EJ493TW/kids.html", "/sports/size-charts/b/Yvette/c/SPORTING_GOODS/kids.html", "/sports/size-charts/c/SPORTING_GOODS/b/Yvette/kids.html", "/sports/size-charts/b/Yvette/kids.html", "/sports/size-charts/c/SPORTING_GOODS/kids.html" ] } __EOI__ print(Dumper(decode_json($json))); </code></pre> <p>Output:</p> <pre><code>'"' expected, at character offset 4 (before "&amp;#x34;womens&amp;#x34;: ...") at a.pl line 33. </code></pre> <hr> <blockquote> <p><em>Worst case , I'll import JSON from cpan.</em></p> </blockquote> <p>JSON.pm is just a front-end for JSON::XS (if you have it installed) or JSON::PP (default).</p> <p>It won't help to switch to JSON.pm since it'll just end up using JSON::XS. It won't help to use JSON::PP or any other JSON parser either; they won't be able to handle the corrupted JSON you have any more than JSON::XS can.</p>
<p>I submitted an edit to ikegami's answer, yesterday; but it hasn't shown up, so I guess it wasn't approved.</p> <p>What I would suggest would be to start with ikegami's final version and add the following line near the top with the rest of the 'use' statements:</p> <pre><code>use HTML::Entities qw( decode_entities ) ; </code></pre> <p>Then all you have to do is update his final line of code to:</p> <pre><code>print( Dumper( decode_json( decode_entities( $json ) ) ) ) ; </code></pre> <p>and you'll get the result you're looking for.</p>