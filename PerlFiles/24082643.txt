Perl search for a value in hash of hash and reassign to another hash
<p><strong>I have a sample hash data %dsr_config that dumps as</strong></p> <pre><code>$VAR1 = 'dc'; $VAR2 = { 'Alias' =&gt; 'DC', 'Address' =&gt; 'street1, street2, ' }; $VAR3 = 'dsr'; $VAR4 = { 'daddr' =&gt; '192.168.1.1', 'dscp' =&gt; '2', 'Vip_enabled' =&gt; 'True', 'BL' =&gt; '4,8', 'subnet' =&gt; '255.255.255.255' }; $VAR7 = 'backup'; $VAR8 = { 'backup' =&gt; 'enabled' }; </code></pre> <p>Now, I am trying to find the hash</p> <pre><code>$VAR3 = 'dsr'; $VAR4 = { 'daddr' =&gt; '192.168.1.1', 'dscp' =&gt; '2', 'Vip_enabled' =&gt; 'True', 'BL' =&gt; '4,8', 'subnet' =&gt; '255.255.255.255' }; </code></pre> <p>because it has the value 'Vip_enabled' => 'True',</p> <p><strong>What I wrote is</strong></p> <pre><code> foreach my $key1 (keys %dsr_config) { foreach my $key2 (keys $dsr_config{$key1}){ if ($key2 =~ /Vip_enabled/){ %dsr_config = $dsr_config{$key1}; } } } print Dumper %dsr_config; </code></pre> <p>I am trying to over-write the existing %dsr_config with the required data only. But I am getting</p> <pre><code>Reference found where even-sized list expected at ./test.pl line 43. Type of argument to keys on reference must be unblessed hashref or arrayref at ./test.pl line 41. Line 43 is %dsr_config = $dsr_config{$key1}; Line 41 is foreach my $key2 (keys $dsr_config{$key1}){ </code></pre> <p>What am I doing wrong here? What do this error means?</p>
<p>Probably this:</p> <pre><code>foreach my $key2 (keys $dsr_config{$key1}){ </code></pre> <p>should be:</p> <pre><code>foreach my $key2 (keys %{$dsr_config{$key1}}){ </code></pre> <p>keys needs a hash.</p> <p>Similarly...</p> <pre><code>%dsr_config = %{$dsr_config{$key1}}; </code></pre> <p>but hard to say for sure with just a fragment.</p>
<p>The inner loop should be:</p> <pre><code>foreach my $key2 (keys %{$dsr_config{$key1}}){ if ($key2 =~ /Vip_enabled/){ %dsr_config = ($key1 =&gt; $dsr_config{$key1}); } } </code></pre> <p><code>$dsr_config{$key1}</code> is a reference to a hash, you have to dereference it if you want to loop on the keys.</p> <p>Also, I guess you want to exit the outer loop when you've found <code>Vip_enabled</code> because the next iteration will produce an undefined result.</p> <pre><code>OUTERLOOP: foreach my $key1 (keys %dsr_config) { foreach my $key2 (keys %{$dsr_config{$key1}}) { if ($key2 =~ /Vip_enabled/){ %dsr_config = ($key1 =&gt; $dsr_config{$key1}); last OUTERLOOP; } } } </code></pre>