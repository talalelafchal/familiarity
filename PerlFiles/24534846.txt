perl DBIx::Class converting values with umlaut
<p>I'm using <a href="https://metacpan.org/pod/DBIx%3a%3aClass" rel="nofollow"><code>DBIx::Class</code></a> to fetch data from Oracle (11.2). when the data fetched, for example <code>"Alfred KÃ¤rcher"</code> its returns the value as <code>"Alfred Karcher"</code>. I tried to add the $ENV NLS_LANG and NLS_NCHAR but still no change. </p> <p>I also used the <a href="http://perldoc.perl.org/utf8.html" rel="nofollow"><code>utf8</code></a> module to verify that the data is utf8 encoded. </p>
<p>This looks like the Oracle client library converting the data.</p> <p>Make sure the database encoding is set to <code>AL32UTF8</code> and the environment variable <code>NLS_LANG</code> to <code>AMERICAN_AMERICA.AL32UTF8</code>.</p> <p>It might also be possible by setting the ora_(n)charset parameter instead.</p> <p>The two links from DavidEG contain all the info that's needed to make it work.</p> <p>You don't need <code>use utf8;</code> in your script but make sure you set STDOUT to UTF-8 encoding: <a href="http://perldoc.perl.org/encoding.html#PerlIO-layers-for-STD%28IN%7COUT%29" rel="nofollow">use encoding 'utf8';</a></p>
<p>here the problem is with the column data type that you specified for the storing </p> <p>you column database specified as VARCHAR2(10), then for oracle, actually stores the 10 bytes, for English 10 bytes means 10 characters, but in case the data you insert into the column contains some special characters like umlaut, it require 2 bytes. then you end up RA-12899: VALUE too large FOR column. so in case the data that you inserting into the column which is provided the user and from different countries then use VARCHAR2(10 char)</p> <p>In bytes: VARCHAR2(10 byte). This will support up to 10 bytes of data, which could be as few as two characters in a multi-byte character sets.</p> <p>In characters: VARCHAR2(10 char). This will support to up 10 characters of data, which could be as much as 40 bytes of information.</p>