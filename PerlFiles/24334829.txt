No such file or directory error: Perl
<p>I am naive in Perl. I have written the following code and I am breaking my head since two days because I am getting the following error when I am trying to open the file: <code>No such file or directory at line 23 (open (FILE, "$config_file") or die $!;)</code></p> <p>What I am doing is: </p> <ol> <li>Open the folder and list all the files inside it.</li> <li>Iterate over each files to look for a particular strings.</li> <li>create new files for all of the files with the matching string replaced by some other string.</li> </ol> <p>I would really appreciate your help. Following is my code: </p> <pre><code>#!/usr/bin/perl -w #~ The perl script that changes the IP addresses in configuration files from 192.168.3.x into 192.168.31.x in any particular folder use strict; use warnings; use diagnostics; #~ Get list of files in the Firewall folder my $directory = 'C:\Users\asura\Desktop\ConfigFiles\Firewall'; opendir (my $dir, $directory) or die $!; my @list_of_files = readdir($dir); my $file; while ($file = readdir ($dir)) { push @list_of_files, $file; } closedir $dir; print "@list_of_files\n"; #~ Iterate over each files to replace some strings foreach my $config_file (@list_of_files) { next unless (($config_file !~ /^\.+$/)); open (FILE, "$config_file") or die $!; my @original_array = &lt;FILE&gt;; close(FILE); my @new_array; foreach my $line (@original_array) { chomp($line); $line =~ s/192\.168\.3/192\.168\.31/g; push (@new_array, $line); } print @new_array; #~ Create a new files with modified strings my $new_config_file = $config_file.1; my $newfile = 'C:\Users\asura\Desktop\ConfigFiles\Firewall\$new_config_file'; open (NEW_FILE, "&gt;", "$newfile") or die $!; foreach (@new_array){ print NEW_FILE "$_\n"; } close(NEW_FILE); } exit 0; </code></pre>
<p>When you push items onto <code>@list_of_files</code>, you are pushing only the filename (the value returned from <code>readdir</code>). Unless your script is running in <code>C:\Users\asura\Desktop\ConfigFiles\Firewall</code>, the <code>open</code> at line 22 using just the filename (a relative path) will fail.</p> <p>You need to push absolute paths onto <code>@list_of_files</code> at line 14, like so:</p> <pre><code>push @list_of_files, $directory . "\\" . $file; </code></pre> <p>Also, as @Michael-sqlbot mentions, you need to double-quote the string at line 35 for string interpolation to be performed (or use concatenation).</p> <p>Finally, you should also properly quote the string concatenation on line 34.</p>
<p>The following is a simplification of your code that removes the bugs.</p> <p>First off kudos including <a href="http://perldoc.perl.org/strict.html" rel="nofollow"><code>use strict</code></a> and <a href="http://perldoc.perl.org/warnings.html" rel="nofollow"><code>use warnings</code></a> in EVERY script. One additional tool that you can use is <a href="http://perldoc.perl.org/autodie.html" rel="nofollow"><code>use autodie;</code></a> anytime that you're doing file processing.</p> <p>The primary flaw in your code was the fact that you weren't including the path information when opening your files. There are two main ways to solve this. You can manually specify the path, like you did for your <a href="http://perldoc.perl.org/functions/open.html" rel="nofollow"><code>open</code></a> to your output file handle, or you can use <a href="http://perldoc.perl.org/functions/glob.html" rel="nofollow"><code>glob</code></a> instead of <a href="http://perldoc.perl.org/functions/opendir.html" rel="nofollow"><code>opendir</code></a> as that will automatically include the path in the returned results.</p> <p>There was a secondary bug in your regex where you were missing a word boundary after <code>.3</code>. This would have led numbers in the thirties to matching mistakenly.</p> <p>To simplify your code I just removed all of the superfluous temporary variables and instead process things file by file and line by line. This has the benefit of making it more clear when an input and output file handles are obviously related. Finally, if you're actually wanting to edit the files, there are lots of methods demonstrated at <a href="http://perldoc.perl.org/perlfaq5.html#How-do-I-change%2c-delete%2c-or-insert-a-line-in-a-file%2c-or-append-to-the-beginning-of-a-file%3f" rel="nofollow"><code>perlfaq4</code></a>.</p> <pre><code>#!/usr/bin/perl -w #~ The perl script that changes the IP addresses in configuration files from 192.168.3.x into 192.168.31.x in any particular folder use strict; use warnings; use autodie; use diagnostics; #~ Get list of files in the Firewall folder my $dir = 'C:\Users\asura\Desktop\ConfigFiles\Firewall'; opendir my $dh, $dir; #~ Iterate over each files to replace some strings while (my $file = readdir($dh)) { next if $file =~ /^\.+$/; open my $infh, '&lt;', "$dir\\$file"; open my $outfh, '&gt;', "$dir\\${file}.1"; #~ Create a new files with modified strings while (&lt;$infh&gt;) { s/(?&lt;=192\.168)\.3\b/.31/g; print $outfh $_; } close $infh; close $outfh; } closedir $dh; </code></pre>