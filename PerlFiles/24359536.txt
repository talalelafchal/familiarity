Find exactly two alphabetical characters [a-zA-Z] before a pattern, exclude all non word characters in between
<p>I need to find two alphabetical characters before a five digit number in a string.</p> <p>Example - </p> <pre><code>Revert changes made on _AB : 12342 AB12342 reverted the changes Revert the changes onab :_ 12342 id </code></pre> <p>In all the above cases i need the output as <code>AB12342</code></p> <p>I tried the following regex</p> <pre><code>if ($msg =~ /([a-zA-Z]{2})(\d{5})/) if ($msg =~ /([a-zA-Z]{2})(.*)?(\d{5})/) if ($msg =~ /([a-zA-Z]{2})(.*)?(\d{5})/) </code></pre> <p>In the first case it considered only 2 consecutive characters before the match. So I tried using the <code>.*</code> pattern which gave me the first two characters on the entire string. So i tried with the greedy operator as in the third line, but it still did not work. I don't know where it is going wrong.</p>
<p>I think you need change <code>(.*)?</code> to <code>[^a-zA-Z]*</code> to exclude all non word character. </p> <pre><code>$msg =~ /([a-zA-Z]{2})[^a-zA-Z]*\d{5}/ </code></pre>
<p>This code:</p> <pre><code>while (my $msg = &lt;DATA&gt;) { chomp $msg; if ($msg =~ /([a-zA-Z]{2})\s*:?\s*_?\s*(\d{5})/) { printf("%s: %s%d\n", $msg, uc $1, $2); } } __DATA__ Revert changes made on _AB : 12342 AB12342 reverted the changes Revert the changes onab :_ 12342 id </code></pre> <p><em>Gives:</em></p> <pre><code>Revert changes made on _AB : 12342: AB12342 AB12342 reverted the changes: AB12342 Revert the changes onab :_ 12342 id: AB12342 </code></pre>
<p>Without converting to upper case, use:</p> <pre><code>$subject =~ s/([a-z]{2})[^\da-z]+(\d{5})/$1$2/ig; </code></pre> <ul> <li>The <code>i</code> flag makes the regex case-insensitive</li> <li><code>([a-z]{2})</code> captures two letters to Group 1</li> <li><code>[^\da-z]+</code> matches any number of characters that are neither letters nor digits</li> <li><code>(\d{5})</code> captures the five digits to Group 2</li> <li><code>$1$2</code> replaces this with Group 1 + Group 2 (removing everything in between)</li> </ul> <p>To convert to upper case, we need to use <code>uc()</code> in the lambda. See the output at the bottom of the <a href="http://ideone.com/AAEKH2" rel="nofollow">online demo</a>. </p> <pre><code>$regex = '(?i)([a-z]{2})[^\da-z]+(\d{5})'; $subject = ' _AB : 12342 onab :_ 12342 '; ($replaced = $subject) =~ s/$regex/ { uc($1) . $2; } /eg; print $replaced . "\n"; </code></pre> <p><strong>Removing the Prefix</strong></p> <p>Please note that the strings are correctly replaced, but the variables keep their prefix: <code>_AB12342</code> and <code>onAB12342</code>. I am happy to remove any prefix too, for example any non-space characters, if you think that it is safe.</p>
<p>The below regex will capture the last two alphabets which are present just before the five digit number.</p> <pre><code>.*([A-Za-z]{2}).*?(\d{5}).* </code></pre> <p><a href="http://regex101.com/r/pX0gC6" rel="nofollow">DEMO</a></p>