How to return an array from array of arrays using pop - Perl
<p>I have an array of arrays in Perl and I need the array at the rear end. I used pop() and as per its description it should return the last element in the array(which itself is an array in my case). But I notice that pop() returns a 2-D array(with 1 row and no. of columns equal to the no. of columns in the last array which had to be popped out). Can I somehow make pop() return only an array instead of an array of arrays?</p>
<pre><code>my $aoa = [ [ 'a', 'b' ], [ 'c', 'd' ], [ 'e', 'f' ], ]; my $last_ele = pop(@$aoa); # [ 'e', 'f' ] </code></pre> <p>If you got something else, you had something else. You can inspect your data structure using</p> <pre><code>use Data::Dumper; print(Dumper($aoa)); # A scalar -or- print(Dumper(\@aoa)); # A reference -but not- print(Dumper(@aoa)); # XXX This won't show @aoa. </code></pre>
<p>I think you're doing something like this</p> <pre><code>my @aoa = ( [ 'aa', 'ab', 'ac' ], [ 'ba', 'bb', 'bc' ], [ 'ca', 'cb', 'cc' ], ); sub return_last_row { pop @_; } my @last_array = return_last_row(@aoa); </code></pre> <p>which isn't working because the last element of <code>@aoa</code> is the array <em>reference</em> <code>[ 'ca', 'cb', 'cc' ]</code>, so you're getting the equivalent of</p> <pre><code>my @last_array = ( [ 'ca', 'cb', 'cc' ] ) </code></pre> <p>i.e. you now have a one-element array containing an array reference.</p> <p>The best solution is to accept that you have a reference and work with it, so the call would be</p> <pre><code>my $aref = return_last_row(@aoa); </code></pre> <p>and you can print, say, the second element using</p> <pre><code>print "$aref-&gt;[1]\n"; </code></pre> <p>or, if you must have a real array then you can write</p> <pre><code>my @arr = @{ return_last_row(@aoa) }; </code></pre> <p>and print the same value with</p> <pre><code>print "$arr[1]\n"; </code></pre> <p><strong>Note</strong>, however that in first option, <code>$aref</code> is a reference to the same data that used to be the last element of <code>@aoa</code>, so if you modify it then you will change that data. On the other hand, it is more efficient - in terms of both memory and speed - than the second option, which copies all the data from the original array to a new one.</p> <hr> <p><strong>Update</strong></p> <p>To actually answer your <em>question</em> <em>"Can I somehow make pop() return only an array instead of an array of arrays?"</em> you could do what I described above within the subroutine, so it would look like this instead</p> <pre><code>sub return_last_row { @{ pop @_ }; } </code></pre> <p>but as I described, this is less efficient than just using the original array reference.</p> <p>In addition, do you <em>really</em> want to remove the last element from the original <code>@aoa</code>? I would be more inclined to leave it in place and do just</p> <pre><code>sub return_last_row { @{ $_[-1] }; } </code></pre>
<p>Do you know about <a href="http://perldoc.perl.org/perlreftut.html" rel="nofollow">Perl references</a>?</p> <p>Perl doesn't really have a data structure called an <em>Array of Arrays</em>. What you have is an array, and each member of that array contains a memory location of another array.</p> <p>When you <em>pop</em> an entry from your array, you're not getting an array, but a <em>references</em> to another array.</p> <p>I'm using <a href="http://perldoc.perl.org/Data/Dumper.html" rel="nofollow">Data::Dumper</a>, to see my data structure:</p> <pre><code>use strict; use warnings; use feature qw(say); use Data::Dumper; my @array = ( [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ], ); say Dumper \@array; </code></pre> <p>Here's my output:</p> <pre><code>$VAR1 = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]; </code></pre> <p>This is what an <em>array of arrays</em> looks like.. </p> <p>Let's use <a href="http://perldoc.perl.org/functions/pop.html" rel="nofollow">pop</a> to pull off that last row:</p> <pre><code>#! /usr/bin/env perl # use strict; use warnings; use feature qw(say); use Data::Dumper; my @array = ( [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ], ); my $row_ref = pop @array; #row_ref _points to_ an array. say Dumper $row_ref; </code></pre> <p>This prints out:</p> <pre><code>$VAR1 = [ 7, 8, 9 ]; </code></pre> <p>So, <code>pop</code> is working. It's that it returns a <em>reference</em> to an array. If we need an actual array, we to <em>dereference</em> the reference:</p> <pre><code>use strict; use warnings; use feature qw(say); use Data::Dumper; my @array = ( [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ], ); my $row_ref = pop @array; # Returns a reference to an array my @last_row = @{ $row_ref }; # Dereferencing $row_ref to get @last_row # Now, we can treat @last_row as our array for my $index ( 0..$#last_row ) { say "\$last_row[$index] = $last_row[$index]"; } </code></pre> <p>This prints out:</p> <pre><code>$last_row[0] = 7 $last_row[1] = 8 $last_row[2] = 9 </code></pre> <p>If you're not getting something like this, it could be that your data structure isn't what you think it is. Use <code>Data::Dumper</code> to dump it out.</p>