perl one liner + how to filter files
<p>background: my target is to filter the files that contain the word - <strong>old</strong></p> <p>I want to print all files expect the files that contain the old word (<strong>capital or small letters</strong> ) , </p> <p>according to the following rules:</p> <p>if Az-zZ is before the old name or after the old name then line should be printed </p> <p>if Az-Zz is after the old name and before old word then line should be printed </p> <p>if 0-9 is after the old name and before old word then line should be printed </p> <p>if 0-9 is before the old name and after old is non Az-zZ or 0-9 then line should not printed </p> <p>if 0-9 is after the old name and before old is non Az-zZ or 0-9 then line should not printed </p> <p>examples</p> <pre><code> /DIR3/DATA/A4/Via/OOld/TriR.txt --&gt; should be print /DIR4/DATA/A4/Via/AOld1/Comne.txt --&gt; should be print /DIR5/DATA/A4/Via/BOld/TriR.txt --&gt; should be print /DIR5/DATA/A4/Via/aOld/TriR.txt --&gt; should be print /DIR5/DATA/A4/Via/1OldA/TriR.txt --&gt; should be print /DIR5/DATA/A4/Via/POld1/TriR.txt --&gt; should be print /DIR4/DATA/A4/Via/1Old1/Comne.txt --&gt; should be print /DIR4/DATA/A4/Via/1Old1/Comne.txt --&gt; should be print /DIR4/DATA/A4/Via/Comne.txt --&gt; should be print /DIR1/DATA/A4/Via/5Old/CentalS.txt --&gt; should not be print /DIR4/DATA/A4/Via/Old1/Comne.txt --&gt; should not be print /DIR1/DATA/A4/Via/Old/CentalS.txt --&gt; should not be print /DIR4/DATA/A4/Via/Old11/Comne.txt --&gt; should not be print /DIR4/DATA/A4/Via/OLD@/Comne.txt --&gt; should not be print /DIR4/DATA/A4/Via/.OLd/Comne.txt --&gt; should not be print /DIR4/DATA/A4/Via/home/Comne.Old_txt --&gt; should not be print /DIR4/DATA/A4/Via/home/Comne.old_txt --&gt; should not be print /DIR4/DATA/A4/Via/home/Comne.0old_txt --&gt; should not be print /DIR4/DATA/A4/Via/home/Comne.old6_txt --&gt; should not be print /DIR4/DATA/A4/Via/home/Comne___0old_txt --&gt; should not be print </code></pre> <p>Please advice how to implement this by perl one liner line syntax </p> <pre><code> echo $PATH | perl one liner line </code></pre>
<p>Instead of <code>echo $PATH |</code>, let's use <code>echo "${PATH//:/$'\n'}" |</code> (found <a href="http://www.commandlinefu.com/commands/view/3209/show-directories-in-the-path-one-per-line" rel="nofollow">here</a>), which prints the path line-by-line. The you can tag on this one-liner:</p> <pre><code>perl -ne 'if($_=~m/^(?!.*old).*|^.*?(?:[a-z]old|\dold[a-z\d]).*/i){print "$&amp;\n";}' </code></pre> <p>which can be shortened to </p> <pre><code>perl -ne 'print if m/^(?!.*old).*|^.*?(?:[a-z]old|\dold[a-z\d]).*/i' </code></pre> <p><strong>Option 2</strong></p> <p>This one should work directly with <code>echo $PATH</code></p> <pre><code>perl -ne 'while(/(?:^|\G:\K)(?:(?!.*old)[^:]+|[^:]*?(?:[a-z]old|\dold[a-z\d])[^:]*)/ig){print "$&amp;\n";}' </code></pre>
<p>If the file paths are in a single file, then you can write</p> <pre><code>perl -ne'$w='old';print if /[a-z]$w|$w[a-z]|[0-9]$w[0-9]/i' myfile </code></pre> <p>or, if you prefer</p> <pre><code>perl -ne'print if /(.)old(.)/i &amp;&amp; "$1$2" =~ /[a-z]|[0-9]{2}/i' myfile </code></pre> <p>Actually, it looks like you want to filter out members of the <code>PATH</code> environment variable, so you would want</p> <pre><code>perl -E'say for grep /(.)old(.)/i &amp;&amp; "$1$2" =~ /[a-z]|[0-9]{2}/i, split /:/, $ENV{PATH}' </code></pre> <hr> <p><strong>Update</strong></p> <p>I misunderstood your question. This should work for you</p> <pre><code>perl -lnE'/(.)old(.)/i &amp;&amp; "$1$2" !~ /[a-z]|[0-9]{2}/i or say for /[^:]+/g' </code></pre> <p>I don't understand your requirement to both pipe <code>PATH</code> to it <em>and</em> specify a given path, so this works with either. Also you can put an input file after the command</p>