Is it worth to code in bash script or should one use some higher level programming language?
<p>I tried to code some of my tasks in bash script, it was very inconvenient and maintaining, finding errors was very hard. The syntax resembled me of some '60-'70's programming language. At least the script was really fast. When I used Ruby for the same task, the program was more shorter, easier to make. However I am seeing a lot of questions here aiming bash scripting. Is it worth to code in bash script or should one use some higher level programming language like Ruby, Python or Perl?</p>
<p>I would honestly use a language like Ruby, Python, or Perl over bash script (By the way, they aren't higher level languages). My reasoning comes down to versatility of other programming languages to bash. So buckle up and let's get started!</p> <h2>1. PLATFORMS</h2> <p>So you're casually working on your bash script, when for some reason all of Unix vanishes. (Okay, that's not really possible, but I still have a valid point.) You have your bash script, but now you have to use Windows 8.1. Well, Windows of course uses batch files for the command line, but you have your useless bash scripts! Better pull up a chair and start coding the whole thing again for two weeks! If you were using Python/Ruby/Perl when you made your program, you wouldn't have this issue because they're cross-platform. <strong>TL;DR:</strong> Python/Ruby/Perl is cross-platform, bash is not.</p> <h2>2. VERSATILITY</h2> <p>So once again, you're working on your bash script, but you just remembered you need to add networking to your program. Well, in bash, you'd have to use a mixture of curl, grep, and maybe some other stuff. For Python (3.4) for example, (I don't know much Ruby or Perl) all you need is two lines of code to download a site's html:</p> <pre><code>import urllib.request html = urllib.request.urlopen('http://example.com') </code></pre> <p>You don't need any greps, cats, curls, and man, just two lines of code in Python's case. You probably wouldn't be able to easily do this with bash anyway, nor could you make several things other languages can do. (i.e. a website in Python with Django) <strong>TL;DR:</strong> Bash is extremely limited, unless you create programs in a <em>different</em> language. (Might as well be using that language then!)</p> <h2>3. ORGANIZATION</h2> <p>In bash, as far as I know, you can't have classes, separate files (easily), file imports, or really just code that doesn't look like you took the source code to the Linux kernel and Windows 3.1 and glued them together. Bash, Python, Ruby, and Perl all have functions, but the legibility of Bash functions and other language functions are quite different. BASH:</p> <pre><code>function hi { echo $1 } hi hello </code></pre> <p>PYTHON:</p> <pre><code>def hi(message): print(message) hi('hello') </code></pre> <p>Once again, I can't speak on Perl and Ruby's behalf, but I'm sure the functions are both easier to interpret than Bash's. Anyway, let's compare these two snippets. The two are basically the same length (I could easily just move the curly brace to shorten it), but one is similar to English, and one is (arguably) as/more difficult to understand as the big bad language itself: <strong>C</strong>. I'm starting to rant, so I'll cut this section short. <strong>TL;DR:</strong> Bash is all over the place, while Python/Ruby/Perl all have a structure to them.</p> <h2>4. CONCLUSION</h2> <p>With Bash, you get the difficulty greater than that of C, with the functionality of a typewriter. Bash is clearly just a waste of time (in most cases) and an alternative should be used. As I've demonstrated, Python provides code that can be read like a book and easily typed, but Bash, as I've also demonstrated, requires extremely backwards solutions to do something another language can do with one line of code. I think it's time I stopped **bash**ing Bash, and just tell you out flat.</p> <h2>5. TL;DR</h2> <p>(USUALLY) Use Python/Ruby/Perl over Bash!</p> <p><strong>EDIT:</strong> Okay, use Python/Ruby/Perl when you have extremely large projects that are also extremely complex. If you are absolutely unable to do a certain function in Bash, invoking bash from another language is also a viable option which gives you the best of both worlds. (Though Bash can be used exclusively in some cases, just usually not complex ones)</p>