Make warnings::warnif report call site instead of caller
<p><code>warnings::warnif</code> reports from the perspective of the caller (like <code>carp</code>, which it uses internally). I want it to report from the perspective of the local call frame (like <code>warn</code>). While <code>Carp</code> has mechanisms to not report warnings from the perspective of certain packages there doesn't appear to be a way to do the reverse and tell it that it <em>should</em> report from a particular perspective.</p> <p>Alternately, is there a way to make <code>warnings::warnif</code> match <code>warn</code>'s behavior of not including location information for messages that end with a newline? I'd rather have no location than a misleading one.</p> <h3>Context to avoid this being an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem#66378">X Y problem</a></h3> <p>I have an application-specific module that uses <code>warnings::register</code> so that I can control the handling of its warnings from the main script. They're promoted them to <code>FATAL</code> by default but the user can override that and "force" the program to continue. Originally I used <code>die</code> in the module and conditionally overrode <code>CORE::GLOBAL::die</code> in the main script to issue a warning instead. I switched to <code>warnings::register</code> because overriding <code>die</code> is heavy-handed, inflexible, and error-prone.</p>
<pre><code>die("msg") if warnings::fatal_enabled(); warn("msg") if warnings::enabled(); </code></pre>
<p>ikegami's answer solves the problem but requires a lot of boilerplate code to be written for each warning message. If Perl had macros we could use them to get rid of the boilerplate, but it doesn't (source filters notwithstanding). Using a subroutine changes the location, but we can use <code>caller</code> to get the right location and mimic the behavior of <code>warn</code>/<code>die</code> in adding it for messages that don't end in a newline:</p> <pre><code>sub error { unless ($_[-1] =~ /\n$/) { my (undef, $file, $line) = caller; push @_, " at $file line $line.\n"; } die @_ if warnings::fatal_enabled(); warn @_ if warnings::enabled(); } </code></pre>