How to extract all Ping Parameters in Perl
<p>I am trying to ping around 100 hosts from a column in sql database I am using the use Net::Ping; use Array::Average; modules</p> <p>Is there an alternative such that i can extract the packet loss,rtt(min,max,avg) parameters directly from a perl script?</p> <p>Here is my pseudo code</p> <pre><code>$p = Net::Ping-&gt;new('icmp'); $p-&gt;hires(); $host = "www.xyz.com"; print "$host \n"; @rtt= 0; $j=0; for ($i=0;$i&lt;5;$i++) { ($ret, $duration, $ip) = $p-&gt;ping($host, 5);# wait time 5 if($ret){ printf("$host [ip: $ip] $duration ms\n"); $rtt[$i] = $duration; } else{ $j++; #$p-&gt;nack( $failed_ack_host ); }} print " @rtt\n"; $rtt= average(@rtt); print "The average rtt is $rtt \n"; $Packet_Loss = ((5-$j)/5)*100; print "$Packet_Loss\%\n"; </code></pre>
<p>`Net::Ping' does not seem to return RTT, etc. You might try issuing the system ping command, and processing the results yourself:</p> <pre><code>$result = `ping -c 10 $host`; </code></pre> <p>...then parse <code>$result</code> for the fields you need.</p>
<p>Looking at the documentation and source code, the <code>Net::Ping</code> module carries out just one "ping" each time you call the <code>ping()</code> method. It does not keep any internal "state" based on the success or otherwise of previous calls. The advantage of this approach is that it's simple and no-nonsense. However, if you want aggregated results, you're going to have to do them yourself, as you've discovered.</p> <p>While it's tempting to call an external <code>ping</code> command, you need to be sure that's what you want: you gain not having to do some maths, but you then become more system-specific (not all systems have a <code>ping</code> command), you are dependent on some assumptions about what options to pass to the command and what format the output will be in, you've added the overhead of creating a new process, and you're running the risk that you may never get control back (some <code>ping</code> commands simply run until you interrupt them). Personally, I'd stick with the approach you're taking.</p> <p>Also, in your particular code above, have a look at how you're storing your results. If the first three and last ping succeed, say, but the last-but-one doesn't, you're passing an array to <code>average()</code> with an undefined value, which is probably not what you want. I'd suggest something like this instead:</p> <pre><code>my @rtt; my $attempts = 5; foreach (1 .. $attempts) { my ($ret, $duration, $ip) = $p-&gt;ping($host, 5); # timeout after 5 seconds if ($ret) { print "$host [ip: $ip] $duration ms\n"; push @rtt, $duration; } else { $j++; } } â‹® if (@rtt) { my $rtt= average(@rtt); print "The average rtt is $rtt \n"; } else { print "No responses to ping\n"; } </code></pre> <p>This fixes one or two other corner cases as well.</p>