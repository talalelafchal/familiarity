How do I pass in a variable from one function into another in perl
<p>I am initializing a variable within one function and would like to pass this variable into another function. This variable holds a char value. I have tried passing in the referencing and dereferencing, declaring the variables outside of the function, and using local. </p> <p>I've also looked in perlmonks, perl by example, googled and looked through this site for a solution but to no avail. I'm just starting out with perl programming so any help will be appreciated!</p>
<p>Sounds to me like you need to read through some documentation, not just google around. I would suggest <code>http://www.perl.org/books/beginning-perl/</code>.</p> <pre><code>use strict; use warnings; sub foo { my $char = 'A'; bar($char); } sub bar { my ($bar_char) = @_; print "bar got char $bar_char\n"; } foo(); </code></pre>
<p>If you pass a parameter by reference (see below), it can be modified by the first function and you can then pass it to another function: </p> <pre><code> #!/usr/bin/perl sub f { $c = shift; $$c='m'; } $c='a'; f(\$c); print $c; </code></pre> <p>This will print 'm'</p>
<p>Is there a reason who your first function cannot return this variable?</p> <pre><code>my $config_variable = function1( $param1 ); function2 ( $config_variable, $param2 ); </code></pre> <p>You can also pass more than one variable back too:</p> <pre><code>my ( $config_variable, $value ) = function1( $param1 ); my $value2 = function2( $param1, $config_variable ); </code></pre> <p>This would be the best way. However, you can use globally defined variables and they can be used from function to function:</p> <pre><code>#! /usr/bin/env perl # use strict; use warnings; my $value; func1(); func2(); sub func1 { $value = "foo"; } sub func2 { print "Value = $value\n"; } </code></pre> <p>Note that I declared <code>$value</code> outside of both functions, so it's <em>global</em> in the entire file - even in the subroutines. Now, <code>func1</code> can set it, and <code>func1</code> can print it.</p> <p>The technical term for this is: A terrible, awful, evil idea and you should <strong>never, ever</strong><sup>1</sup> think of doing it.</p> <p>This is because a particular variable you think is set to one value suddenly and mysteriously changes values without any reason. Do this for one variable is bad enough, but if you use this as a crutch, you'll end up with dozens of variables that are impossible to track through your program.</p> <p>If you find yourself doing this quite a bit, you may need to rethink your code logic.</p>