perl: loop over function that returns array or undef
<p>I am looking for the proper perl-ism for this issue. I can work around it but just have to ask...</p> <p>I am using HTML::TreeBuilder and am using the <code>look_down</code> method. This returns an array or scalar depending on context and returns <code>undef</code> if no matching tag is found. Cool.</p> <p>I want to do the following:</p> <pre><code>foreach my $tag ( @{ $head-&gt;look_down('_tag', 'link') } ) { ... } </code></pre> <p>but if there is no <code>link</code> tag the function returns <code>undef</code> and generates the error <code>Can't use an undefined value as an ARRAY reference at myCGI.cgi line ###</code>. So I try this modification:</p> <pre><code>foreach my $tag ( @{ $head-&gt;look_down('_tag', 'link') || [] } ) { ... } </code></pre> <p>My thought was that if the method returns <code>undef</code> then it will get changed into an empty array. This works when there are no <code>link</code> tags. But, if there is at least one expected tag then there is an error: <code>Not an ARRAY reference at myCGI.cgi line ###</code>.</p> <p>Do I need to just bite the bullet and break the method call out of the loop and check for <code>undef</code> before entering the loop?</p>
<p>"returns an array" is sometimes mentioned in documentation but is incorrect; perl subroutines always return lists (though in scalar context it will be a list with only one element).</p> <p>It does <em>not</em> return undef in list context, it returns an empty list (<code>return</code> with no arguments returns an empty list in list context and undef in scalar context). You can just loop over the returned values with no <code>@{ }</code> required:</p> <pre><code>foreach my $tag ( $head-&gt;look_down('_tag', 'link') ) { ... } </code></pre>