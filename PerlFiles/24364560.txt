Perl Item in Array
<p>I'm new in Perl, which is the easiest way of finding out if the item exists in an array</p> <p>Like in python I can do this</p> <pre><code>item = 'apple' list = ['apple', 'banana'] if item in list: print item output &gt;&gt;&gt; 'apple' </code></pre> <p>In perl i can do it in this way</p> <pre><code>my $item = 'appel' my @array = ('apple', 'banana') for (@array){ if ($_ eq $item){ print $item } } </code></pre> <p>The <code>for</code> loop will take too long if my array has more than 100 items</p>
<p>The core <a href="http://perldoc.perl.org/List/Util.html" rel="nofollow"><code>List::Util</code></a> module provides a convenient alias for looping through all elements until one matches:</p> <pre><code>#!/usr/bin/perl use strict; use warnings; use List::Util qw(first); my $item = 'apple'; my @array = ('apple', 'banana'); if (defined first {$_ eq $item} @array) { print $item; } </code></pre> <p><code>first</code> will stop iterating and return the match as soon as it finds one. Unfortunately, since it returns <code>undef</code> if no match is found, you can't use it to find if an array contains an <code>undef</code> value.</p> <p>If you have version 1.33 or later you can use the <a href="http://search.cpan.org/~pevans/Scalar-List-Utils-1.39/lib/List/Util.pm#%24b_=_any_%7B_BLOCK_%7D_@list" rel="nofollow"><code>any</code></a> method which will work for <code>undef</code>:</p> <pre><code>use List::Util qw(any); ... if (any {$_ eq $item} @array) { print $item; } </code></pre>
<p>If you want to find out if an item exists in a list of items, then an array is the wrong data structure to use. You should be using a hash.</p> <p>Of course, it's simple enough to create the hash from an array.</p> <pre><code>my %hash = map { $_ =&gt; 1 } @array; # Then checking for existence is simple if ($hash{$item}) { # do something } </code></pre>
<p>Note that Python's <code>in</code> operator also loops over the list, but does so in optimized C code, so you don't notice the slowness for small to moderate lists. Linear search of large lists <em>will</em> take a noticeable amount of time, no matter the language.</p> <p>Built-in Perl function closest to the <code>in</code> operator is the <code>grep</code> built-in. <code>grep {$_ eq $item} @array</code> in a scalar context will return a true value if <code>$item</code> is found inside the array. In your case:</p> <pre><code>my $item = 'apple'; my @array = ('apple', 'banana'); if (grep {$_ eq $item} @array) { print $item, "\n"; } </code></pre> <p>Python's <code>in</code> operator can also be defined by containers such as <code>dict</code> to use container-specific lookup more efficient than linear search. The Perl equivalent of this usage of <code>in</code> is the <code>exists</code> function.</p>
<p><code>any</code> method from <code>List::MoreUtils</code> will return true if any of the elements (stops looking further when first is found) satisfies condition.</p> <pre><code>use List::MoreUtils 'any'; my $item = 'appel'; my @array = ('apple', 'banana'); print "$item\n" if any { $_ eq $item } @array; </code></pre> <p>or using hash slice to make fast lookup,</p> <pre><code>my %look; @look{@array} = (); print "$item\n" if exists $look{$item}; </code></pre>