Iterating over a file in perl using for loop with perl
<p>If <code>for</code> returns a whole list of a file and then iterates over it, how can I skip file line without using <code>next</code> command ?</p> <p>Well as like this with an array</p> <pre><code>my @lines = ('first line', 'second line', 'third line'); for (my $i=0; $i&lt;=$#lines; $i++){ print $lines[$i]; $i++; } </code></pre> <p>output: <code>first line</code>, <code>third line</code>;</p> <p>Is it even possible to do the same with a file without pushing it into an array?</p>
<blockquote> <p>how can I skip file line without using next command ?</p> </blockquote> <p>With the code you have you can use a counter there and increment it after each line iteration and do something like</p> <pre><code>if($counter == 2){ #do nothing } else{ print $lines[$i]; } </code></pre> <p>So in your code do</p> <pre><code>for (my $i=0; $i&lt;=$#lines; $i++){ if($i == 1){ #do nothing } else{ print $lines[$i]; } } </code></pre> <hr> <blockquote> <p>Is it even possible to do the same with a file without pushing it into an array?</p> </blockquote> <p>Open file with a filehandle as</p> <pre><code>open (my $fh, "&lt;", $filename) or die $!; </code></pre> <p>Then read it line by line</p> <pre><code>while(my $line = &lt;$fh&gt;){ #work on line, apply some condition here to skip. for eg if ($line =~ /sometext/){ #skip it using next or empty if block etc. } else{ #work on it } } </code></pre> <p>Also see: <a href="http://stackoverflow.com/questions/775882/how-can-i-skip-lines-when-slurping-a-file-in-perl">How can I skip lines when slurping a file in Perl?</a></p>
<blockquote> <p>I have a huge file, in some line it have to skip like 30 lines or even maybe i have to go back by some lines.. aaand I don't know the line number, so @Chankey's method wont work for me.</p> </blockquote> <p>You can read your file as usual and use <code>next</code> command freely:</p> <pre><code>open(my $fh, "filename") || die "Cant open file: $!"; while( defined(my $line = &lt;$fh&gt;) ) { next if $line =~ /blablabla/; #... } </code></pre> <p>If you want to be able to return back to some line, i'd prefer to use an array with file offsets and make <code>seek</code> call when you need to. So, you never read whole file into memory and holding in-memory only "line number=>offset" array, which can be optimized different ways. Template can look like this:</p> <pre><code>my $curr_line=0; my @offsets = (0); #0th line has offset 0 open(my $fh, "filename") || die "Cant open file: $!"; while( defined(my $line = &lt;$fh&gt;) ) { $offsets[++$curr_line] = tell($fh); #Save line-number =&gt; offset next if $line =~ /blablabla/; if( $line =~ /^return-line: (\d+)/ &amp;&amp; $1&gt;0 ) { #A logic which wants to go back to $1-th line $curr_line=$1-1; seek($fh, $offsets[$curr_line], 0); next; } #... } </code></pre>
<p>The point of <code>$i++;</code> is to skip an element. The closest equivalent:</p> <pre><code>while (my $line = &lt;$fh&gt;) { print; # Skip a line. last if !defined($line = &lt;$fh&gt;); } </code></pre> <p>It's not clear what you are trying to do. If you want to skip even lines, I'd go with</p> <pre><code>while (my $line = &lt;$fh&gt;) { next if $. % 2 == 0; # Skip even lines print; } </code></pre> <p>Oh wait, you said no <code>next</code>.</p> <pre><code>while (my $line = &lt;$fh&gt;) { if ($. % 2) { print; } } </code></pre>