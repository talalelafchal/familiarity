Perl eval, awk system() getline. Both have security issues, Is one safer than another? why?
<p>In the question below:</p> <p><a href="http://stackoverflow.com/questions/24576011/in-awk-how-can-i-use-a-file-containing-multiple-format-strings-with-printf/24577225#24577225">In awk, how can I use a file containing multiple format strings with printf?</a></p> <p>OP is trying to get format from STDIN, which is indeed an unusual thing. Although unusual I took it as a challenge, but couldn't get it working with <code>awk</code>. I managed to get it working with <code>perl</code> which offers <code>eval</code> known for security issues and code injection.</p> <p>On that question it was suggested by a user with very high reputation that:</p> <pre><code>echo "a\t%s" | awk '{"printf \"" $0 "\" " "b" | getline s; print s}' a b </code></pre> <p>was safer than:</p> <pre><code>echo "a\t%s" | perl -lne ' chomp; eval "printf (\"$_\", \"b\")"' a b </code></pre> <p>I was able to expose the security issue in awk as below:</p> <pre><code>echo '$(whoami)' | awk '{"printf \"" $0 "\" " "b" | getline s; print s}' tiago </code></pre> <p>But I was unable to do such thing in perl:</p> <pre><code>echo '`whoami`' | perl -lne ' chomp; eval "printf (\"$_\", \"b\")"' `whoami` </code></pre> <p>Whatever I tried I didn't manage to get <code>whoami</code> executed.</p> <p>So back to my question, I know they both have security issues but is any of them safer than than the other? If so why? </p> <p>On that perl one-liner is there a way to get <code>whoami</code> executed?</p>
<p>The following is passed to <code>eval</code> to be compiled and executed:</p> <pre><code>printf ("...", "b") </code></pre> <p>The following would execute <code>whoami</code> and display its output:</p> <pre><code>printf ("%s", `whoami`, "", "b") ^^^^^^^^^^^^^^^^ </code></pre> <p>So passing <code>%s", &#x60;whoami&#x60;, "</code> to that Perl program will cause it to execute <code>whoami</code> and display its output.</p> <pre><code>$ echo '%s", `whoami`, "' | perl -lne ' chomp; eval "printf (\"$_\", \"b\")"' ikegami </code></pre> <hr> <p>A safe way to call <code>printf</code> using <code>sh</code>: (I don't know <code>awk</code>.)</p> <pre><code># "$line" (with quotes) escapes as it interpolates. echo "a\t%s" | sh -c 'read -r line ; printf "$line" "b"' </code></pre> <p>A safe way to call <code>printf</code> using <code>perl</code>:</p> <pre><code># The multi-arg form of system bypasses the shell. echo "a\t%s" | perl -nle'system "printf", $_, "b";' </code></pre> <p>Reimplementing <code>printf</code> using <code>perl</code>:</p> <pre><code>echo "a\t%s" | perl -nle' s/\\(?:(n)|(t)|(.))/$1?"\n":$2?"\t":$3/seg; printf($_, "b"); ' </code></pre>