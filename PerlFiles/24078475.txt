call test scripts from main driver script perl
<p>I have a main setup script which sets up the test env and stores data in some variables:</p> <pre><code>package main; use Test::Harness; our $foo, $xyz, $pqr; ($foo, $xyz, $pqr) = &amp;subroutinesetup(); # ^ here @test_files = glob "t/*"; print "Executing test @test\n"; runtests(@test_files); </code></pre> <p>In the test folder I have a testsuite (t/testsuite1.t, testsuite2.t etc.). How can I access the value of $foo inside the testsuite1.t?</p> <pre><code>package main; use Test::More; $actual = getActual(); is($foo, $actual, passfoor); # ^ here done_testing(); </code></pre>
<p>Use <a href="https://metacpan.org/module/Storable" rel="nofollow">Storable</a> to store data in first script and retrieve it from other.</p> <p><code>main.pl</code></p> <pre><code> ($foo, $xyz, $pqr) = &amp;subroutinesetup(); store ($foo, "/home/chankey/testsuite.$$") or die "could not store"; system("perl", "testsuite.pl", $$) == 0 or die "error"; </code></pre> <p><code>testsuite.pl</code></p> <pre><code>my $parentpid = shift; my $ref = retrieve("/home/chankey/testsuite.$parentpid") or die "couldn't retrieve"; print Dumper $ref; </code></pre> <p>You've received the <code>$foo</code> in <code>$ref</code>. Now use it the way you want.</p>
<p>You can't share a variable directly, because a new Perl process is started for each test file.</p> <p>As noted in the documentation of <a href="http://p3rl.org/Test%3a%3aHarness" rel="nofollow">Test::Harness</a>, you should switch to <a href="http://p3rl.org/TAP%3a%3aHarness" rel="nofollow">TAP::Harness</a>. It's more flexible: for example, it provides the <code>test_args</code> mechanism to pass arguments to test scripts.</p> <pre><code>$ cat 1.pl #!/usr/bin/perl use warnings; use strict; use TAP::Harness; my $harness = 'TAP::Harness'-&gt;new({ test_args =&gt; [ qw( propagate secret ) ] }); $harness-&gt;runtests('1.t'); __END__ $ cat 1.t #!/usr/bin/perl use warnings; use strict; use Test::More; my %args = @ARGV; is($args{propagate}, 'secret', 'propagated'); done_testing(); </code></pre>