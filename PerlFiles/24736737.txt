Selecting lines in a file based on two column values using Perl
<p>In my dataset there are 2 columns, the first is a "reference" column, the second a "value" column. The reference values may be repeated several times, however each will have a different value associated with them.</p> <p>e.g.</p> <pre><code>ref1 0.0234 ref1 2.8951 ref1 1.4565 ref2 20.346 ref2 24.345 </code></pre> <p>I need to make a script which will take the line containing the highest value for each reference ID and place it in a new file. For my example, the new file would look like:</p> <pre><code>ref1 2.8951 ref2 24.345 </code></pre>
<p>Here is one way to do it:</p> <pre><code>$ perl -anle ' $h{$F[0]} = $F[1] &gt; $h{$F[0]} ? $F[1] : $h{$F[0]} ; END {print "$_ $h{$_}" for sort keys %h} ' file ref1 2.8951 ref2 24.345 </code></pre> <p><strong>Explanation</strong></p> <ul> <li>While reading file, we create a hash <code>%h</code>: <ul> <li>Key is the reference id</li> <li>Value is coressponding value</li> </ul></li> <li>If current id has value greater than value of id in hash <code>%h</code>, we update value to hash, otherwise keep current value.</li> <li>After finish reading file, we print keys, values pair in <code>%h</code>, sort by key order.</li> </ul>
<p>klashxx's solution is close, but the extra array really isn't necessary.</p> <pre><code>awk '$2+0 &gt; a[$1] { a[$1] = $2 } END { for (i in a) { print i, a[i] } }' ref </code></pre> <p>In my opinion, <code>awk</code> is the "proper" tool for this job because it's built to handle data in records like this. While I recommend you read up on <code>awk</code> to get the full gist of this program, here's an explanation for the lines to give some idea of what's going on.</p> <p><code>awk</code> runs through all the lines in your file and operates on them. The first block in curly braces contains actions only to be taken on lines where the second field ($2) is greater than the value of the saved value in your array for that reference value. The +0 forces a conversion to a numeric value. Inside this block, the $2 value is then assigned to array a, with an index of your reference value.</p> <p>The END block gets called only after all lines in your file have been read, once. It loops through the array you have, and prints the indices and values from the array.</p>
<p>You can do this:</p> <pre><code>perl -alne ' unless (defined($h{$F[0]})){ $h{$F[0]}=0 } if($h{$F[0]} &lt;= $F[1] ){ $h{$F[0]}=$F[1] }END{ foreach( keys %h){print "$_ $h{$_}"} }' file ref1 2.8951 ref2 24.345 </code></pre> <p>All in one line:</p> <pre><code>perl -alne 'unless (defined($h{$F[0]})){ $h{$F[0]}=0}; if($h{$F[0]} &lt;= $F[1] ){$h{$F[0]}=$F[1];}END{foreach( keys %h){print "$_ $h{$_}"}}' file ref1 2.8951 ref2 24.345 </code></pre>
<p>Even though it's been answered, I'm going to be anal and follow the instructions to the letter and make an actual perl script:</p> <pre><code>#!/usr/bin/perl use warnings; use strict; unless ($ARGV[0]) { die "Missing source file as first arguement\n" } unless ($ARGV[1]) { die "Missing destination file as second arguement\n" } unless (-e $ARGV[0]) { die "Filename $ARGV[0] not found\n" } if (-e $ARGV[1]) { die "Cowardly refusing to overwrite $ARGV[1]\n" } open OLD,"&lt;$ARGV[0]" or die "Couldn't open file: $!"; my %refs; while (&lt;OLD&gt;) { my ($ref, $value) = split(/\s+/,$_); if ($refs{$ref}) { if ($value &gt; $refs{$ref}) { $refs{$ref} = $value } } else { $refs{$ref} = $value } } open NEW,"&gt;&gt;$ARGV[1]"; foreach my $ref (keys(%refs)) { print "$ref\t$refs{$ref}\n"; print NEW "$ref\t$refs{$ref}\n"; } </code></pre> <ul> <li><code>%refs</code> is keeps track of the highest value for each ref, as the <code>while</code>-loop traverses the file. </li> <li>For each line, it checks the value against the one stored in <code>%refs</code> and updates if higher. </li> <li>At the end, it prints the data to the new file, as well as prints the result.</li> </ul> <p>Not as clean and compact as some of the other suggestions, but should be easily readable and editable to someone not adept at perl.</p>
<p>I would use awk for this task:</p> <pre><code>$ awk '$2+0&gt;a[$1]{a[$1]=$2;b[$1]=$0}END{for (i in a) {print b[i]}}' infile ref1 2.8951 ref2 24.345 </code></pre> <p>Perl is incredible useful but for this simple tasks in my opinion you can't beat awk simplicity.</p> <p>Hereâ€™s the internals, when second column is greater than previous value stored for that reference ($1), we keep/update two structures (hash):</p> <ul> <li>a : greater value and ref</li> <li>b : line ref.</li> </ul> <p>In the END part we take care of showing the results , so we link the max reference with its line. </p>