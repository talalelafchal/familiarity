Unix Command (Mac OS): cut and move rows
<p>Could you please give me a hint which unix command I can use to do the following:</p> <p>I want to convert these lines... </p> <pre><code>1 a i 2 b ii 3 c iii 4 d iv 5 e v 6 f vi 7 g vii 8 h viii 9 i xi </code></pre> <p>...into those: </p> <pre><code>1 a i 4 d iv 7 g vii 2 b ii 5 e v 8 h viii 3 c iii 6 f vi 9 i xi </code></pre> <p><code>rs</code>and <code>perl -pne</code> just transpose them but I need a completely new arrangement as you see. Perl-code would be favored, but I am thankful for any help.</p> <p>cheers marsch</p>
<p>Here is a oneliner:</p> <pre><code>perl -ne 'chomp; push @a,$_ if $_; unless($. % 3) {push @f,[@a]; @a = undef; shift @a} END {for my $i (@f) { for (@$i) {print "$_ "} print "\n"}}' filename.txt </code></pre> <p>output</p> <pre><code>1 a i 2 b ii 3 c iii 4 d iv 5 e v 6 f vi 7 g vii 8 h viii 9 i xi </code></pre>
<p>I use ruby</p> <pre><code>string = "1 a i 2 b ii 3 c iii 4 d iv 5 e v 6 f vi 7 g vii 8 h viii 9 i xi " ary = string.split("\n") length = ary.size / 3 new_ary = Array.new(3, "") ary.each_with_index do |e, i| position = i % 3 new_ary[position] += e end puts new_ary.join("\n") </code></pre> <p>Hope to help:)</p>
<p>I would go with <code>split</code> and <code>paste</code> from <code>coreutils</code>. Try the following commands:</p> <pre><code>split -l3 infile paste -d' ' xaa xab xac | column -t </code></pre> <p>Output:</p> <pre><code>1 a i 4 d iv 7 g vii 2 b ii 5 e v 8 h viii 3 c iii 6 f vi 9 i xi </code></pre>
<p>Using a perl one-liner</p> <pre><code>perl -lne 'push @{$l[($.-1) % 3]}, $_; }{ print "@$_" for @l' data.txt | column -t </code></pre> <h3>Explanation:</h3> <p><strong>Switches</strong>: </p> <ul> <li><code>-l</code>: Enable line ending processing, specifies line terminator</li> <li><code>-n</code>: Creates a <code>while(&lt;&gt;){..}</code> loop for each line in your input file. </li> <li><code>-e</code>: Tells <code>perl</code> to execute the code on command line. </li> </ul> <p><strong>Code</strong>:</p> <ul> <li><code>push @{$l[($.-1) % 3]}, $_;</code>: Push each line into an array modulo the line number</li> <li><code>}{ print "@$_" for @l</code>: Print the 3 element array at end of processing</li> <li><code>| column -t</code>: Even out the columns</li> </ul>