Printing the return of IO::All with Data::Dumper?
<p>Consider this snippet:</p> <pre class="lang-perl prettyprint-override"><code>use Data::Dumper; @targetDirsToScan = ("./"); use IO::All; $io = io(@targetDirsToScan); # Create new directory object @contents = $io-&gt;all(0); # Get all contents of dir for my $contentry ( @contents ) { print Dumper($contentry) ."\n"; } </code></pre> <p>This prints something like:</p> <pre class="lang-none prettyprint-override"><code>$VAR1 = bless( \*Symbol::GEN298, 'IO::All::File' ); $VAR1 = bless( \*Symbol::GEN307, 'IO::All::Dir' ); $VAR1 = bless( \*Symbol::GEN20, 'IO::All::File' ); ... </code></pre> <p>I expected I would get the all the fields of the respective objects dumped, instead; at first, I thought this was a reference, so I thought the fields would be printed if I dereference the variable - but I realized I don't really know how to dereference it. </p> <p>So - how can I print out all the fields and contents of the <code>@contents</code>, using the same kind of <code>for my ...</code> loop?</p>
<p>You can do this:</p> <pre><code>use Data::Dumper; use IO::All; $io = io('/tmp'); for my $file ( $io-&gt;all(0) ) { print Dumper \%{*$file}; } </code></pre> <p>But you should seriously consider whether doing this is a good idea. One of the core tenets of object-oriented programming is <strong>encapsulation</strong>. You should not care about the guts of a blessed object - you should interact with it only via the methods it provides.</p>