how to get user input and use that value in the script for Perl
<p>I need to do the following:</p> <pre><code>Print "User please enter the age, sex, blah_blah" &gt; $age&gt;$sex&gt;$blah_blah; print "the current user stats are- age = $age, sex = $sex"; my $rand; if ($blah_blah &gt; $rand) { do something } else { something else } </code></pre> <p>Can someone help me with to take inputs from the user and then be able to use that value in the script?</p> <p>I also want to be able to run this script as:</p> <pre><code>perl script1 -age -sex -blah_blah </code></pre> <p>By that I mean instead of asking the user to provide these values can I simply type these in the command line and can my script still use these as above?</p> <p>Is this possible? If so, can I also add <code>-help</code> i.e. <code>perl script1 -help</code> and if this could print out some comments from the script?</p>
<p>Try this for command line options and help ..run as..in place of my params put age,sex,address whatever you want.</p> <p><strong>perl test.pl -pass 'abcd' -cmd 'abcd' -path 'paths' -value 'testde'</strong></p> <pre><code>#!/usr/bin/perl use Getopt::Long; GetOptions ("value=s" =&gt; \$value, # string "cmd=s" =&gt; \$cmd, # string "pass=s" =&gt; \$pass,# string "help"=&gt; \$help ) or die("Error in command line arguments\n"); if ( $help ){ print " this is a test module for help please bare with it "; exit; } print "$cmd,$pass\n"; </code></pre>
<p>The Perl module IO::Prompt::Tiny is useful for prompting with a prompt message, accepting input portably, or accepting default values if it detects a non-interactive runtime.</p> <p>Combine this with Getopt::Long to accept command line inputs. </p> <p>Your program might check for the definedness of the Getopt::Long options, and for each one that hasn't been supplied on the command line, invoke <code>prompt()</code>.</p> <p>Usage info and documentation are made trivial by the Perl module Pod::Usage.</p> <p>Here's an example:</p> <pre><code>use strict; use warnings; use IO::Prompt::Tiny 'prompt'; use Pod::Usage; use Getopt::Long; my( $age, $sex, $blah, $help, $man ); GetOptions( 'age=s' =&gt; \$age, 'sex=s' =&gt; \$sex, 'blah=s' =&gt; \$blah, 'help|?' =&gt; \$help, 'man' =&gt; \$man, ) or pod2usage(2); pod2usage(1) if $help; pod2usage(-exitval =&gt; 0, -verbose =&gt; 2) if $man; $age //= prompt( 'Enter age: ', '0' ); $sex //= prompt( 'Enter sex: ', 'undeclared' ); $blah //= prompt( 'Blab now: ', '' ); print "Your age was entered as &lt;$age&gt;, sex declared as &lt;$sex&gt;, and you ", "chose to blab about &lt;$blah&gt;.\n"; __END__ =head1 User Input Test sample.pl - Using Getopt::Long, Pod::Usage, and IO::Prompt::Tiny =head1 SYNOPSIS sample.pl [options] Options: -help Brief help message. -age n Specify age. -sex s Specify sex. -blah blah Blab away. =head1 INTERACTIVE MODE If C&lt;-age&gt;, C&lt;-sex&gt;, and C&lt;-blah&gt; are not supplied on the command line, the user will be prompted interactively for missing parameters. =cut </code></pre> <p>Getopt::Long and <a href="http://perldoc.perl.org/Pod/Usage.html" rel="nofollow">Pod::Usage</a> are core Perl modules; they ship with every Perl distribution, so you should already have them. <a href="http://search.cpan.org/search?query=IO%3a%3aPrompt%3a%3aTiny&amp;mode=all" rel="nofollow">IO::Prompt::Tiny</a> is on CPAN, and although it has a few non-core build dependencies, its runtime dependencies are core-only, and pretty light-weight.</p>