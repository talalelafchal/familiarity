Parse MEDLINE file for GWAS mining
<p>I'm trying to parse as a <code>0,1</code> table a MedLine file to perform some statistical downstream analysis: PCA, GWAS, etc. I formatted it using a Python module called <a href="http://biopython.org/DIST/docs/api/Bio.Medline-module.html" rel="nofollow">Bio.Medline</a> with some additional shell commands. Now, I don't know how to continue.</p> <p>I need to transform <code>File 1</code>, - a key-value file with one paper per line and tab-separated keywords - into a file with collapsed keywords and presence/absence of keywords shown as 1 or 0 values.</p> <p>I would like to do this with Perl but other solutions are welcome.</p> <p>Thanks, Bernardo</p> <p><code>File 1</code>:</p> <pre><code>19801464 Animals Biodiversity Computational Biology/methods DNA 19696045 Environmental Microbiology Computational Biology/methods Software </code></pre> <p>Desired output:</p> <pre><code> Animals Biodiversity Computational Biology/methods DNA Environmental Microbiology Software 19801464 1 1 1 0 0 19696045 0 1 0 1 1 </code></pre>
<p>This <code>perl</code> script will build a hash that you should be able to work with. For convenience I used <a href="https://metacpan.org/pod/List::MoreUtils" rel="nofollow"><code>List::MoreUtils</code></a> for <code>uniq</code> and <a href="https://metacpan.org/pod/Data::Printer" rel="nofollow"><code>Data::Printer</code></a> for dumping the data structure:</p> <pre><code>#!/usr/bin/env perl use strict; use warnings; use List::MoreUtils qw(uniq); use DDP; my %paper ; my @categories; while (&lt;DATA&gt;){ chomp; my @record = split /\t/ ; $paper{$record[0]} = { map { $_ =&gt; 1 } @record[1..$#record] } ; push @categories , @record[1..$#record] ; } @categories = uniq @categories; foreach (keys %paper) { foreach my $category(@categories) { $paper{$_}{$category} //= 0 ; } }; p %paper ; __DATA__ 19801464 Animals Biodiversity Computational Biology/methods DNA 19696045 Environmental Microbiology Computational Biology/methods Software </code></pre> <p><strong>Output</strong></p> <pre><code>{ 19696045 { 'Animals Biodiversity' 0, 'Computational Biology/methods' 1, DNA 0, 'Environmental Microbiology' 1, Software 1 }, 19801464 { 'Animals Biodiversity' 1, 'Computational Biology/methods' 1, DNA 1, 'Environmental Microbiology' 0, Software 0 } } </code></pre> <p>From there to producing the output you want may require <code>printf</code> to format the lines properly. The following might be enough for your purposes:</p> <pre><code>print "\t", (join " ", @categories); for (keys %paper) { print "\n", $_, "\t\t" ; for my $category(@categories) { print $paper{$_}{$category}," "x17 ; } } </code></pre> <hr> <p><strong>Edit</strong></p> <p>A few alternatives for formatting your output ... (we use <code>x</code> to multiply the format sections by the length, or number of elements, in the <code>@categories</code> array so they match):</p> <p>Using <code>format</code></p> <pre><code>my $format_line = 'format STDOUT =' ."\n" . '@# 'x ~~@categories . "\n" . 'values %{ $paper{$num} }' . "\n" . '.'."\n"; for $num (keys %paper) { print $num ; no warnings 'redefine'; eval $format_line; write; } </code></pre> <p>Using <code>printf</code>:</p> <pre><code>print (" "x9, join " ", @categories, "\n"); for $num (keys %paper) { print $num ; map{ printf "%19d", $_ } values %{ $paper{$num} } ; print "\n"; } </code></pre> <p>Using <code>form</code>:</p> <pre><code>use Perl6::Form; for $num (keys %paper) { print form "{&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;}" . "{&gt;}" x ~~@categories , $num , values %{ $paper{$num} } } </code></pre> <hr> <p>Depending on what you plan on doing with the data, you may be able to do the rest your of analysis in perl, so perhaps precise formatting for printing might not be a priority until a later stage in your workflow. See <a href="http://www.bioperl.org" rel="nofollow">BioPerl</a> for ideas.</p>
<p>You can perform this with Python and Pandas :</p> <pre><code>In [1]: df = pd.read_table("file", header=None, sep="\t", names=["A", "B","C","D"], index_col=0) In [2]: df Out[2]: A B C \ 0 19801464 Animals Biodiversity Computational Biology/methods 1 19696045 Environmental Microbiology Computational Biology/methods D 0 DNA 1 Software In [3]: b = pd.get_dummies(df.B) In [4]: c = pd.get_dummies(df.C) In [5]: d = pd.get_dummies(df.D) In [6]: presence_absence = b.merge(c, right_index=True, left_index=True).merge(d,right_index=True, left_index=True) In [7]: presence_absence Out[7]: Animals Biodiversity Environmental Microbiology \ A 19801464 1 0 19696045 0 1 Computational Biology/methods DNA Software A 19801464 1 1 0 19696045 1 0 1 </code></pre> <p>Hope this helps</p>