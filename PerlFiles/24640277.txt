How to compare data in Perl if you don't know if it's a string or number or an object?
<p>I'm writing a Linked List in Perl. The linked list has nodes that are linked together. Each node has a value. This value can be anything, an object, a string, a number, a reference, and more.</p> <p>The question that I've is how do I compare the value for equality. When writing the find function, I need to find the given value in the linked list. However, since the value can be anything, I don't know how to implement the comparison operation.</p> <p>Here's the relevant code fragment that I've so far for the find operation:</p> <pre><code>sub find { my $val = shift; # we're looking for this value my $node = $LinkedList-&gt;{head}; # we start looking at the beginning of LL while (defined $node) { # this is the relevant part, how do I compare $val to $node-&gt;{val} if ($node-&gt;{val} == $val) { return $node; } if ($node-&gt;{val} eq $val) { return $node; } $node = $node-&gt;{next}; } } </code></pre> <p>Would using two checks with <code>==</code> and <code>eq</code> be enough? (Would this handle references, objects, and so on?)</p>
<p>You're asking the wrong question. You don't need a generic compare function; you simply need the ability to provide a task-specific compare function.</p> <p>If you have meaningful differences in the type of data in the linked list, you must be able to differentiate them somehow or else you wouldn't be able to use the information in the list. Exactly how you differentiate them isn't important; what's important is that you must already know how to do so.</p> <p>Simply code that knowledge you already have into a compare function you pass to <code>find</code> or to the constructor.</p> <pre><code>sub find { my ($self, $is_equal, $arg) = @_; my $ap = do { no strict 'refs'; \*{caller().'::a'} }; local *$ap; my $bp = do { no strict 'refs'; \*{caller().'::b'} }; local *$bp; *$ap = \$arg; for (my $node = $self-&gt;{head}; $node; $node = $node-&gt;{next}) { *$bp = \( $head-&gt;{val} ); return $node if $is_equal-&gt;(); } return undef; } </code></pre> <p>Example usage:</p> <pre><code>sub is_same_flight { # Returns true if $a and $b represent the same flight. ... } $flights-&gt;find(\&amp;is_same_flight, $flight); </code></pre> <p>or</p> <pre><code>my $is_same_flight = sub { # Returns true if $a and $b represent the same flight. ... }; $flights-&gt;find($is_same_flight, $flight); </code></pre>