perl LibXML : validate doc against dtd, return boolean
<p>I'm trying to write a perl script using LibXML that validates a doc against a dtd and returns a boolean as to whether or not the doc is valid. I want to be able to run the script over a folder of xml files, report which are valid, which are not, and log the errors for those that are invalid. </p> <p>The script I have does validate a doc, but it stops at the first invalid doc.</p> <pre><code>use strict; use warnings; no warnings 'uninitialized'; use XML::LibXML; use IO::Handle; # script to test dtd validity against test xml instance my $instance = 'C:\jason\code\perl\dev\well-formed-test\family-instance1.xml'; $instance =~ s#\\#/#g; print "about to test $instance \nagainst dtd\n\n"; my $parser = XML::LibXML-&gt;new(); $parser-&gt;validation(1); print "here we go...\n"; print "test : ", &amp;isValid( $instance ); print "after sub.\n"; sub isValid { my $file = shift; return $parser-&gt;parse_file($instance); } </code></pre> <p>I tried many variations on the script below, not using that sub, putting the parse command in an eval block, etc. </p> <p>I had problems using filehandle->fd_open as per <a href="http://oreilly.com/catalog/perlxml/chapter/ch03.html" rel="nofollow">this tutorial.</a>. It also wasn't clear to me what the parse_file function returns as per the <a href="http://search.cpan.org/~shlomif/XML-LibXML-2.0116/lib/XML/LibXML/Parser.pod" rel="nofollow">cpan docs.</a> </p> <p>What's the best way to return a boolean val as to whether the doc is valid or not? </p> <p>here's the xml doc: </p> <pre><code>&lt;?xml version="1.0"?&gt; &lt;!DOCTYPE family SYSTEM "family.dtd"&gt; &lt;family&gt; &lt;member gender="female"&gt; &lt;firstName&gt;Sally&lt;/firstName&gt; &lt;lastName&gt;Smith&lt;/lastName&gt; &lt;/member&gt; &lt;member gender="male"&gt; &lt;firstName&gt;Bernie&lt;/firstName&gt; &lt;lastName&gt;Smith&lt;/lastName&gt; &lt;/member&gt; &lt;member gender="female"&gt; &lt;firstName&gt;Anna&lt;/firstName&gt; &lt;lastName&gt;Smith-Jones&lt;/lastName&gt; &lt;/member&gt; &lt;/family&gt; </code></pre> <p>and the dtd: </p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!ELEMENT family (member+)&gt; &lt;!ELEMENT member (firstName, lastName)&gt; &lt;!ATTLIST member gender (male|female) 'male'&gt; &lt;!ELEMENT firstName (#PCDATA)&gt; &lt;!ELEMENT lastName (#PCDATA)&gt; </code></pre> <p>the script runs as expected (it gets to that line 'after sub') if the file is valid, but when I add a tag that causes a failure</p> <pre><code>&lt;sometag/&gt; </code></pre> <p>the script prints out the error, but does not make it to that last line. thanks!</p>
<p><code>XML::LibXML</code> won't validate parsed documents against the DTD unless the <a href="https://metacpan.org/pod/distribution/XML-LibXML/lib/XML/LibXML/Parser.pod#validation" rel="nofollow"><code>validation</code></a> parser option is set:</p> <pre><code>my $parser = XML::LibXML-&gt;new( validation =&gt; 1, ); </code></pre> <p>This will throw an exception if an invalid document is parsed. Wrap the call to <code>parse_file</code> in an <code>eval</code> block to catch the exception.</p> <pre><code>my $doc = eval { $parser-&gt;parse_file($filename) }; if ( ! $doc ) { print("Can't parse $filename: $@"); } </code></pre> <p>Alternatively, you can parse a document without validation and use the <a href="https://metacpan.org/pod/distribution/XML-LibXML/lib/XML/LibXML/Document.pod#is_valid" rel="nofollow"><code>is_valid</code></a> method to validate afterwards:</p> <pre><code>my $doc = $parser-&gt;parse_file('filename.xml'); if ( ! $doc-&gt;is_valid ) { # Document does not validate... } </code></pre> <p>In this case, <code>parse_file</code> might still throw an exception in case of other errors (file not found, document not well-formed). It depends on your use case which behavior is preferred.</p>
<p><a href="http://search.cpan.org/dist/XML-LibXML/lib/XML/LibXML/Parser.pod#DOM_Parser" rel="nofollow">The documentation</a> says:</p> <pre><code>All of the functions listed below will throw an exception if the document is invalid. To prevent this causing your program exiting, wrap the call in an eval{} block </code></pre> <p>and <a href="http://search.cpan.org/dist/XML-LibXML/lib/XML/LibXML/Parser.pod#parse_file" rel="nofollow">parse_file</a> is one of those functions.</p> <p>With <a href="http://perldoc.perl.org/functions/eval.html" rel="nofollow">eval</a>, you can check for the result by expecting <code>S@</code> or <code>S!</code>.</p>
<p>You can use File::Find to process multiple files.</p> <pre><code>use strict; use warnings; use File::Find; use XML::Parser; my $parser = XML::Parser-&gt;new(); find({ wanted =&gt; \&amp;wanted, no_chdir =&gt; 1, follow_fast =&gt; 1, }, $ARGV[0], ); sub wanted { return unless -f and m/\.xml$/i; eval { $parser-&gt;parsefile($File::Find::name); }; if( $@ ){ printf STDERR "Not a valid XML document: %s\n", $File::Find::name; } else { printf STDERR "A valid XML document: %s\n", $File::Find::name; } } </code></pre>