Please explain one line of perl code
<p>I have such line from <a href="https://camlistore.googlesource.com/camlistore/+/master/third_party/rewrite-imports.sh" rel="nofollow">https://camlistore.googlesource.com/camlistore/+/master/third_party/rewrite-imports.sh</a></p> <pre><code>find . -type f -name '*.go' -exec perl -pi -e 's!"code.google.com/!"camlistore.org/third_party/code.google.com/!' {} \; </code></pre> <p>I would like help understanding what exactly this does: </p> <pre><code>perl -pi -e 's!"code.google.com/!"camlistore.org/third_party/code.google.com/!' </code></pre> <p>Especialy exclamation marks and <code>"</code>. Thanks!</p>
<p>The bangs <code>!</code> are just an alternative delimiter for the search and replace regex <a href="http://perldoc.perl.org/functions/s.html" rel="nofollow"><code>s///</code></a>.</p> <p>Because the content of the search and replace includes forward slashes, it makes sense to use a different delimiter to avoid having to escape them all. Exclamation points are sometimes used for this purpose <code>s!!!</code>, but my preferred alternate are braces: <code>s{}{}</code>.</p> <p>As for what that code is done, it's replacing all references to <code>"code.google.com/</code> with <code>"camlistore.org/third_party/code.google.com/</code> in the found files.</p>
<p>From <a href="http://perldoc.perl.org/perlrun.html" rel="nofollow">perldoc perlrun</a>:</p> <ul> <li><code>-p</code> means "run the expression for each line, and print the result" </li> <li><code>-i</code> means "edit the input file in place"</li> <li><code>-e</code> means "the next parameter is the Perl expression to evaluate"</li> </ul> <p>For the expression itself:</p> <ul> <li>The <code>!</code> marks are the separators for the <code>s</code> (substitution) operator. <em>Any</em> non-alphanumeric character can be used for that - whatever follows the <code>s</code>.</li> <li>The <code>"</code> characters don't mean anything special, they're just part of the text to be replaced, and the replacement.</li> </ul> <p>So we have:</p> <ul> <li><code>s</code>: substitute</li> <li><code>!</code>: (separator) </li> <li><code>"code.google.com/</code>: text to find </li> <li><code>!</code>: (separator) </li> <li><code>"camlistore.org/third_party/code.google.com/</code>: replacement text </li> <li><code>!</code>: (separator) </li> </ul> <p>Which all means:</p> <ul> <li>For each line in the file</li> <li>Find the text <code>"code.google.com/</code></li> <li>And (if found) replace it with <code>"camlistore.org/third_party/code.google.com/</code></li> </ul>
<p>This is a pretty straightforward search-and-replace. The <code>s/PATTERN/REPLACEMENT/</code> operator sees if a string matches the regular expression pattern and replaces the part that matches with the value of the replacement string.</p> <p>Since sometimes <code>/</code> characters are an inconvenient delimiter (such as dealing with web URIs), Perl allows you to swap them out for other characters, in this case they chose to use <code>!</code>. </p> <p>The <code>-p</code> switch causes Perl to assume a loop around the code in question for processing lines. The <code>-i</code> switch allows input lines to be edited in-place as they are processed, optionally preserving the original in another file. (See <a href="http://perldoc.perl.org/perlrun.html" rel="nofollow">perldoc perlrun</a> for the gory details.)</p> <p>So all this code is doing is replacing lines that contain <code>"code.google.com/</code> with <code>"camlistore.org/third_party/code.google.com/</code>.</p>