Issue with regex matching in Perl
<p>I am new to Perl and any help will be appreciated. I have 2 variables: <code>$release</code> and <code>$env_type</code>. I want to check if a string contains <code>$release_$env_type</code>, then do something. For example,</p> <pre><code>$release="beta"; $env_type="testing"; so string is beta_testing </code></pre> <p><strong>Code snippet:</strong></p> <pre><code>if ( $_ =~ /${release}_${env_type}/ ) { #do Something } </code></pre> <p>This if condition doesn't get resolved. Kindly let me know what is the correct syntax to make this check? I searched on Google but didn't get any good post..</p> <p>Kindly help!</p> <p>I have a file with contents:</p> <pre><code>admin_vh_c9_simv2_edg=/console,/consolehelp idminternal_vh_c9_simv2_edg=/oim,/soa-infra sso_vh_c9_simv2_edg=/oim,/soa-infra,/odsm my $env_type = "edg"; my $release = "c9_simv2"; #Input file containing contexts my $idmInternal = "./IdmContexts.conf"; if ( !-e $idmInternal ) { die "Unable to find the file $idmInternal!\n"; } open( MYFILE, $idmInternal ); while (&lt;MYFILE&gt;) { chomp; if ( $_ =~ /${release}_${env_type}/ ) { push( @filtered, $_ ); } } </code></pre>
<p>If you are using <code>$_</code> then this will work.</p> <pre><code>if (m/${release}_${env_type}/) { # Do something } </code></pre> <p>The <code>m//</code> match operator binds automatically to <code>$_</code>. There is no need to bind it explicitly.</p>
<p>Your code is fine. The problem is elsewhere. The following prints <code>match</code>.</p> <pre><code>my $release="beta"; my $env_type="testing"; $_ = "so string is beta_testing"; if ( $_ =~ /${release}_${env_type}/ ) { print "match\n"; } </code></pre> <p>Note: <code>/\Q${release}_${env_type}/</code> would be better. It'll make sure that special characters in the interpolated variables match themselves.</p> <hr> <p>Most likely problem: You read the value of <code>$release</code> and/or <code>$env_type</code> from a file, and forgot to <code>chomp</code> the trailing newline.</p>
<p>To really tell what is going on, you can inject code before the test. For example <em>compile</em> a regex first and then print it. </p> <pre><code># compile the regex first my $regex = qr/${release}_${env_type}/; say qq{\$regex="$regex"}; # then print your scanned text say qq{\$_="$_"}; if ( m/$regex/ ) { # do something } </code></pre> <p>If you're going to explicitly bind to a regex, then use variables:</p> <pre><code>my $string = $_; if ( $string =~ m/$regex/ ) { } </code></pre> <p>Otherwise, simply <em>match</em> the "context variable" (<code>$_</code>). </p> <pre><code> if ( m/$regex/ ) { } </code></pre> <p>Also, USUW would help spot a few problems, proactively:</p> <pre><code># Before everything else use strict; use warnings; </code></pre>