Progress indicator for Perl LWP POST upload
<p>I'm working on a Perl script which uploads big files with a POST request. My question is if it's possible to have a status output, because uploading big files can take some time with my internet connection.</p> <p>I mean like a status bar with</p> <pre><code>$| = 1; print "\r|----------&gt; | 33%"; print "\r|--------------------&gt; | 66%"; print "\r|------------------------------| 100%\n"; </code></pre> <p>Here's my upload code:</p> <pre><code>my $ua=LWP::UserAgent-&gt;new(); $file = "my_big_holyday_vid.mp4"; $user = "username"; $pass = "password"; print "starting Upload...\n"; $res = $ua-&gt;post( "http://$server", Content_Type =&gt; 'form-data', Content =&gt;[ fn =&gt; ["$file" =&gt; $file], username =&gt; $user, password =&gt; $pass, ], ); print "Upload complete!\n" </code></pre>
<p>If you look at the documentation for <a href="https://metacpan.org/module/HTTP%3a%3aRequest%3a%3aCommon"><code>HTTP::Request::Common</code></a> you will see that, if you set <code>$HTTP::Request::Common::DYNAMIC_FILE_UPLOAD</code> to a <em>true</em> value, then the request object's <code>content</code> method will provide a callback that is used to fetch the data in chunks.</p> <p>Normally this is called each time more data is needed for upload, but you can wrap it in your own subroutine to monitor the progress of the upload.</p> <p>The program below gives an example. As you can see, the <code>HTTP::Request</code> object is created (I have assumed that the <code>fn</code> field should be just <code>[$file]</code>) and the <code>content</code> method is used to fetch the callback subroutine.</p> <p>The subroutine <code>wrapper</code> just calls <code>$callback</code> in the first line to fetch the next data chunk, and returns it in the last line, just as <code>$callback</code> itself would do. Between these two lines you can add what you like, as long as it doesn't interfere with passing the chunk back to LWP. In this case I have printed the size of each chunk together with the percentage upload so far on each call.</p> <p>For the purpose of percentage calculations, the full size of the file is accessible as <code>$req-&gt;header('content-length')</code>, which is more correct than using <code>-s</code> on the file.</p> <p>Also, the final iteration can be detected if necessary as the callback will return chunk with a size of zero.</p> <p>Note that this is <em>untested</em> except as far as it compiles and does roughly the right thing, as I have no internet service available that expects a file upload.</p> <pre><code>use strict; use warnings; use LWP; use HTTP::Request::Common; $HTTP::Request::Common::DYNAMIC_FILE_UPLOAD = 1; my $ua = LWP::UserAgent-&gt;new; my $server = 'example.com'; my $file = 'my_big_holyday_vid.mp4'; my ($user, $pass) = qw/ username password /; print "Starting Upload...\n"; my $req = POST "http://$server", Content_Type =&gt; 'form-data', Content =&gt; [ fn =&gt; [$file], username =&gt; $user, password =&gt; $pass, ]; my $total; my $callback = $req-&gt;content; my $size = $req-&gt;header('content-length'); $req-&gt;content(\&amp;wrapper); my $resp = $ua-&gt;request($req); sub wrapper { my $chunk = $callback-&gt;(); if ($chunk) { my $length = length $chunk; $total += $length; printf "%+5d = %5.1f%%\n", $length, $total / $size * 100; } else { print "Completed\n"; } $chunk; } </code></pre>