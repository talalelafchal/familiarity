WHY NOT use awk inside perl?
<p>Probably this question has been asked many times about being able to include the awk one liner inside your perl script. But these questions were too specific to the problem wherein:</p> <ol> <li>a different approach was provided as a suggestion OR</li> <li>the syntax within the existing code was rectified OR</li> <li>Majority of the times -> solutions were provided using perl because experts favored using either awk or perl because they both do the same job. Yes. Perhaps. But i think awk is designed for targetting specific problems which can be solved in awk better than perl.</li> </ol> <p><strong>Example:</strong> I have the output of <code>ls -lart</code> and the 9th column is filename. I can easily do that in awk as <code>ls -lart|awk '{print $9}'</code>. Same thing of course can be done using perl using <code>readdir()</code>. But extracting 8th column or 7th column is not that easy in perl? Things become worse if I have to extract data pipe it to awk pipe it to sed etc.</p> <p><strong>Another Example:</strong> I have a specific DIR which has many files in some format like:</p> <pre><code>ABC_9090_DEF_10-22-30_13-07-2014.temp </code></pre> <p>notice the date_time.temp stamp part. The format here is <strong>ABC_4digits_DEF_hours-minutes-seconds_day-month-year</strong></p> <p>And I want to see only the new files created just now (say before 5 minutes from now). Approach using awk/sed is(pseudocode,let me know if u need me to copy actual one liner) :</p> <ol> <li><code>ls -lart|awk '{print $9}'|</code></li> <li><code>egrep</code> to extract 10-22-30_13-07-2014</li> <li>use sed to replace _ with -|awk to rearrange the to have the number in the format YEARMONTHDAYHOURSMINUTESSECONDS.</li> <li>use awk again to compare this number using if($1>$mynum) against the variable(which supposedly has a number in the same format representing TODAYS TIME - 5 minutes)</li> </ol> <p><strong>Problem:</strong> But for some reason(other complexities) i thought of writing it in perl and i found that the if condition <strong>if ($1>$mynum)</strong> throws error when i am using it in perl using system command. It says syntax error for using '>' even when using with single quotes,double quotes,no quotes.</p> <p>Can someone tell me in general:</p> <ol> <li>Why would someone NOT use awk,sed instead of perl in this scenario if given a choice?</li> <li>Generic explanation not specific to this problem on things one should remember while including awk or sed inside perl(which hopefully should solve this specific problem too.</li> </ol>
<blockquote> <p>Why would someone NOT use awk,sed instead of perl in this scenario if given a choice?</p> </blockquote> <p>If you like the idea:</p> <ul> <li>to fork a shell from perl</li> <li>inside a shell</li> <li>fork again two processes (ls &amp; awk) what will only print the 9th column</li> </ul> <p><strong>feel free to do it</strong>. It sounds a terrible idea for me, but you knows: <em>your mileage...</em></p> <blockquote> <p>Generic explanation not specific to this problem on things one should remember while including awk or sed inside perl(which hopefully should solve this specific problem too :) )</p> </blockquote> <p>Generic things to remember:</p> <ul> <li>escaping rules of <code>$variables</code> - like <code>$9</code> what can be interpreted: <ul> <li>by the perl itself (e.g. the <code>$9</code> can be an perl variable storing the regex captures)</li> <li>by the forked shell (e.g. <code>$9</code> can be an <code>shell</code> variable holding the 9th positional arg)</li> <li>by the <code>awk</code> (where it means the 9th column)</li> </ul></li> <li>to know how to handle system error codes</li> <li>and mainly - any programming task need to know at least the basics of the used programming language. (it is like my english - it is terrible, but enough good to write an answer) :)</li> </ul> <p>To your example: The <code>ls -lart|awk '{print $9}</code> is one of the worst thing what you can do. </p> <p>Imagine:</p> <ul> <li>if you have file with name: <code>this is my file.txt</code> </li> <li>What will print the <code>ls -lart|awk '{print $9}</code>?</li> </ul> <p>Guessed right, will print only the <code>this</code>. Of course, this is wrong. Parsing filenames what comes from <code>stdin</code> is always terrible idea (unless you have NULL terminated filenames), because filenames can contain whitespaces - not only <code>spaces</code> but <code>tab</code> or <code>newline</code> characters too.</p> <p>To your second example:</p> <ul> <li>instead of running 4 programs in chain (pipes) you can use <code>find</code> to achieve the wanted: <code>print only new files modified in the last 5 min</code></li> <li>with perl you can use perl modules: <ul> <li><a href="https://metacpan.org/pod/File::Find">File::Find</a> - can do anything what the <code>find</code> command does and much more</li> <li><a href="https://metacpan.org/pod/File::Find::Rule">File::Find::Rule</a> - Alternative interface to File::Find</li> <li>and many other modules: <a href="https://metacpan.org/search?q=File%3A%3AFind">see</a> from the <code>File::Find</code> family</li> <li>but you can use e.g. the <a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a> or <code>Class::Path</code> or similar modules</li> <li>etc...</li> </ul></li> </ul>