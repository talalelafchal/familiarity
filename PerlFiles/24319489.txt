How to execute a system command and display its state in the Text Widget table
<p>I tried to achieve above using the snippet from CPAN <code>Tk::ExecuteCommand</code> module but it gives me errors below when I execute any Perl program within the <code>$ec-&gt;configure(-command</code> section.</p> <p>Also, the window will be closed unexpectedly once the Perl job completed. The script works and will not be closed if I just print the text instead of command within the entry (as the line I commented out). I choose to use this Cpan program as I wanted 2 things:</p> <ol> <li>To show the system command and run result within the text widget.</li> <li>To have the "execute button" turn to "cancel" when a job is running so that user could have chances to cancel an ongoing job.<br> May I know how to achieve that?</li> </ol> <p>Here is the error msg I get:</p> <pre><code> &gt; /usr/bin/perl: symbol lookup error: /usr/pkgs/perl/5.14.1/lib64/module/default/x86_64-linux/auto/Proc/ProcessTable/ProcessTable.so: undefined symbol: pthread_once </code></pre> <p>[13] Exit 127 test1.pl</p> <p>And here is the code I used:</p> <pre><code>#!/usr/bin/perl use Tk; use Tk::ExecuteCommand; $ec = tkinit()-&gt;ExecuteCommand( -command =&gt; '', -entryWidth =&gt; 50, -height =&gt; 10, -label =&gt; '', -text =&gt; 'Execute', )-&gt;pack; $ec-&gt;configure(-command =&gt; 'perl ./my_script.pl -wrapper wrapper_txt'); #$ec-&gt;configure(-command =&gt; 'Text line only'); $ec-&gt;execute_command; $ec-&gt;update; MainLoop; </code></pre>
<p>Change <code>$ec-&gt;configure(-command =&gt; 'perl ./my_script.pl -wrapper wrapper_txt');</code> to <code>$ec-&gt;configure(-command =&gt; 'perl my_script.pl -wrapper wrapper_txt');</code></p> <p>and to get the status use a sub like below</p> <pre><code>sub sys { # Execute a command asynchronously and return its status and output. my $cmd = shift; $ec-&gt;configure( -command =&gt; $cmd ); my $t = $ec-&gt;Subwidget( 'text' ); # ROText widget $t-&gt;delete( '1.0' =&gt; 'end' ); $ec-&gt;execute_command; return ($ec-&gt;get_status)[0], split /\n/, $t-&gt;get( '1.0' =&gt; 'end -1 chars' ); } # end sys </code></pre> <p>For killing it using a button, check the documentation, it says</p> <blockquote> <p>This ExecuteCommand mega widget is composed of an LabEntry widget for command entry, a "Do It" Button that initiates command execution, and a ROText widget that collects command execution output. While the command is executing, the "Do It" Button changes to a "Cancel" Button that can prematurely kill the executing command. The kill_command method does the same thing programmatically.</p> </blockquote> <p>So you need <code>$exec-&gt;execute_command;</code> <code>$exec-&gt;get_status;</code> and <code>$exec-&gt;kill_command;</code>.</p> <p>Edit: Looks like a <a href="http://blogs.perl.org/users/gabor_szabo/2012/09/procprocesstable-needs-a-c-lover.html" rel="nofollow"><strong>known issue</strong></a>, try using latest version of Proc::ProcessTable.</p> <p>Also see: <a href="https://rt.cpan.org/Public/Bug/Display.html?id=41397" rel="nofollow"><strong>Bug #41397 for Proc-ProcessTable: Proc::ProcessTable - make test fails "undefined symbol: pthread_once"</strong></a></p>