Does Anyone Know How to Understand Such Kind of Perl Code Blocks?
<p>I'm confused by Perl Named Blocks (I thought they are...). Below is an example:</p> <pre><code>#!/usr/bin/perl sub Run(&amp;){ my ($decl) = @_; $decl-&gt;(); } sub cmd(&amp;){ my($decl) = @_; my(@params) = $decl-&gt;(); print "@params\n"; } sub expect(&amp;){ my ($decl) = @_; my(@params) = $decl-&gt;(); print "@params\n"; } Run { cmd { "echo hello world " }; expect { exit_code =&gt; 0, capture =&gt; 2}; }; </code></pre> <p>Note the last lines. It looks like "Run", "cmd", "expect" are named blocks, but not functions. Does anyone know what they are? Any available link introduces them? I can't find any reference for such grammar. </p>
<p>They are subroutines accepting block as an argument. See: <a href="http://perldoc.perl.org/perlsub.html#Prototypes" rel="nofollow">http://perldoc.perl.org/perlsub.html#Prototypes</a>. The <code>(&amp;)</code> in their definitions means that their first argument is a block of code.</p>
<p>Let's decipher this definition for <code>Run</code>:</p> <pre><code>sub Run(&amp;){ my ($decl) = @_; $decl-&gt;(); } </code></pre> <p>It means subroutine called <code>Run</code>, which accepts parameter of type <code>CODE</code> (that's why it uses <code>(&amp;)</code>). Inside it <code>$decl</code> gets assigned to that passed code, and this code gets called by <code>$decl-&gt;();</code>.</p> <p>Now, last lines in your example:</p> <pre><code>Run { cmd { "echo hello world " }; expect { exit_code =&gt; 0, capture =&gt; 2}; }; </code></pre> <p>are equivalent to:</p> <pre><code>Run(sub { cmd { "echo hello world " }; expect { exit_code =&gt; 0, capture =&gt; 2}; }); </code></pre> <p>In other words, it calls <code>Run</code> with anonymous procedure code that is in braces.</p>
<p><code>Run</code>, <code>cmd</code>, and <code>expect</code> are <a href="http://perldoc.perl.org/perlsub.html#Prototypes" rel="nofollow"><code>prototype</code></a> defined functions, and they work like built-in functions (no need to write <code>sub{..}</code>, as this is implicit due <code>(&amp;)</code> signature for these functions).</p> <p>If these functions were defined without prototypes,</p> <pre><code>sub Run { .. } sub cmd { .. } sub expect { .. } </code></pre> <p>then explicit <code>sub{}</code> arguments would be not optional but required,</p> <pre><code>Run(sub{ cmd(sub{ "echo hello world " }); expect(sub{ exit_code =&gt; 0, capture =&gt; 2}); }); </code></pre>