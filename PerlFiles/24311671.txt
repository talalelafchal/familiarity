Extract Multiple values from a content using regular expression in perl
<p>I have a content like:</p> <pre><code>"emailAddress":"akashu87@gmail.com","UserName":"Akash Udupa","active":true,"emailAddress":"coolrohit@rediffmail.com","UserName":"Rohit Hegde","active":true,"emailAddress":"manohar_k@rediffmail.com","UserName":"Manohar Karnam","active":true,"emailAddress":"satishgk@hotmail.com","UserName":"Satish GK","active":true </code></pre> <p>I want to display only the values of UserName in CSV file through PERL like the following:</p> <pre><code>Akash Udupa Rohit Hegde Manohar Karnam Satish GK </code></pre> <p>I am sure you guys will ask me what I have tried. Problem is I am very new to PERL. So can anyone help me with perl code? Please.</p> <p>Thanks in advance.</p>
<p>There are two ways to do this; the right way, and the fragile way. Since your JSON has its braces and brackets stripped away, you've already started down the path to the fragile way:</p> <pre><code>my $string = q{"emailAddress":"akashu87@gmail.com","UserName":"Akash Udupa","active":true,"emailAddress":"coolrohit@rediffmail.com","UserName":"Rohit Hegde","active":true,"emailAddress":"manohar_k@rediffmail.com","UserName":"Manohar Karnam","active":true,"emailAddress":"satishgk@hotmail.com","UserName":"Satish GK","active":true}; while ( $string =~ m/"UserName"\s*:\s*"([^"]+)"/g ) { print "$1\n"; } </code></pre> <p>This anchors to the <code>"UserName"</code> tag, and allows whitespace (but does not require it) between the tag and its value. It then looks for a double-quote, and captures everything until the next quote into <code>$1</code>.</p> <p>A brief introduction to Perl's regexes is contained in <a href="http://perldoc.perl.org/perlrequick.html" rel="nofollow">perlrequick</a>, which comes with Perl. My regex solution doesn't use any constructs not explained in that document. As a matter of fact, <a href="http://perldoc.perl.org/perlrequick.html" rel="nofollow">perlintro</a>, which should be considered required reading for Perl users, provides information sufficient to this task.</p> <p>Since it's possible that the logic that stripped away the JSON might have broken something, and since the JSON might possibly throw something at you that our one-off regular expression isn't equipped to handle, it would be wise to revert to the original un-adulterated JSON, and parse it with a proper parser, like this:</p> <pre><code>use JSON; my $json = &lt;&lt;'EOJSON'; [ { "emailAddress": "akashu87@gmail.com", "UserName": "AkashUdupa", "active": true }, { "emailAddress": "coolrohit@rediffmail.com", "UserName": "RohitHegde", "active": true }, { "emailAddress": "manohar_k@rediffmail.com", "UserName": "ManoharKarnam", "active": true }, { "emailAddress": "satishgk@hotmail.com", "UserName": "SatishGK", "active": true } ] EOJSON print "$_-&gt;{UserName}\n" for @{decode_json($json)} </code></pre> <p>If the <a href="http://search.cpan.org/search?query=json&amp;mode=all" rel="nofollow">JSON</a> module is too heavy-weight for you, look at <a href="http://search.cpan.org/search?query=json%3a%3atiny&amp;mode=all" rel="nofollow">JSON::Tiny</a>, which is minimal, well tested, and free of dependencies.</p> <p>Both the regex and the parser approach will work with the original JSON, so you may find that your code can be simplified by just eliminating the section that strips brackets and braces from the original JSON. Once you've done that, the JSON parser solution can be one line of code. It's a lucky day when removing code can make the code more robust without removing features.</p>