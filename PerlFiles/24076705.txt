perl YAML::Tiny Searching for a second level value in a hash of hash
<p>I have a hash of hash value in a YAML::Tiny object, as</p> <pre><code> $yaml = YAML::Tiny-&gt;read_string($config); </code></pre> <p>Now, I am trying to check for a specific value inside this hash of hash, and if the value matches, take it's key, by</p> <pre><code> foreach my $key (keys %{$yaml-&gt;[0]}){ if ( values %{$yaml-&gt;[0]-&gt;{$key}} =~ /My_String/){ print $key; } </code></pre> <p>But it is giving </p> <pre><code>Applying pattern match (m//) to %hash will act on scalar(%hash) at script.pl line 25. Type of argument to keys on reference must be unblessed hashref or arrayref at script.pl line 25. </code></pre> <p>I guess it is because values %{$yaml->[0]->{$key} is also returning a hash, because the object itself is a hash of hash. What am I doing wrong here?</p> <p>Test data::</p> <pre><code>'string_1' =&gt; { 'test_data' =&gt; 82, 'test_data1' =&gt; 99, 'test_data2' =&gt; My_string }, 'string_2' =&gt; { 'test_data3' =&gt; 97, 'test_data4' =&gt; 67 } }; </code></pre> <p>and I am looking for printing test_data2 because it's value is My_string</p>
<p>There are two problems.</p> <ol> <li><p>Precedence: Perl understands the expression as <code>values( %{...} =~ /.../ )</code>:</p> <pre><code>$ perl -MO=Deparse,-p -e 'values %{ {a=&gt;3} } =~ /x/' values((%{+{'a', 3};} =~ /x/)); </code></pre></li> <li><p>Even after fixing it: Binding operator can be used on a scalar (string). <code>values</code> returns a list. What exactly are you trying to do?</p></li> </ol> <p><strong>Update:</strong> The following scripts does what you want while still trying to keep the logic you had in mind, i.e. it replaces the inner for-loop with a grep.</p> <pre><code>#!/usr/bin/perl use warnings; use strict; my $yaml = [{ 'string_1' =&gt; { 'test_data' =&gt; 82, 'test_data1' =&gt; 99, 'test_data2' =&gt; 'My_String' }, 'string_2' =&gt; { 'test_data3' =&gt; 97, 'test_data4' =&gt; 67 } }]; for my $key (keys %{$yaml-&gt;[0]}){ if (my @matches = grep $yaml-&gt;[0]{$key}{$_} =~ /My_String/, keys %{ $yaml-&gt;[0]-&gt;{$key} } ){ print "$key: @matches\n"; } } </code></pre>
<p>If your structure is a hash of hashes, then you need to explicitly traverse your data:</p> <pre><code>use strict; use warnings; use YAML; my $hashref = Load(&lt;&lt;'END_YAML'); --- string_1: test_data: 82 test_data1: 99 test_data2: My_string string_2: test_data3: 97 test_data4: 67 END_YAML SEARCH: while (my ($k1, $v1) = each %$hashref) { while (my ($k2, $v2) = each %$v1) { if ($v2 =~ /My_string/) { print "$k1 -&gt; $k2 -&gt; $v2\n"; last SEARCH; } } } </code></pre> <p>Outputs:</p> <pre><code>string_1 -&gt; test_data2 -&gt; My_string </code></pre>