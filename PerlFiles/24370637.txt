Perl not printing the special characters
<p>My scrape content is not displaying the special characters.It shows some junk values in place of special characters.(â‚¬ printed as -aA).Thanks in advance.</p> <pre><code># !/usr/bin/perl use strict; use warnings; use HTML::TreeBuilder::XPath; use LWP::UserAgent; my $ua = LWP::UserAgent-&gt;new(agent =&gt; "Mozilla/5.0"); my $req = HTTP::Request-&gt;new(GET =&gt; 'http://www.infanziabimbo.it/costi-modalita-e-tempi-di-spedizione.html'); my $res = $ua-&gt;request($req); die("error") unless $res-&gt;is_success; my $xp = HTML::TreeBuilder::XPath-&gt;new_from_content($res-&gt;content); my @node = $xp-&gt;findnodes_as_strings('//div[@class="mainbox-body"]'); die("node doesn't exist") if $#node == -1; # Line 18 open HTML, "&gt;C:/Users/jeyakuma/Desktop/kjk.html"; foreach(&lt;@node&gt;) { print HTML "$_"; } close HTML; " </code></pre>
<p>Here are some observations on your code that I hope will help you</p> <ul> <li><p>You must always check that a call to <code>open</code> succeeded, otherwise your program will just continue to run silently without any input or output. Rather than the idiomatic <code>open ... or die $!</code> you may prefer just to add <code>use autodie</code> at the top of your code</p></li> <li><p>If the HTTP request fails, it is more informative if your program indicates <em>why</em> it failed instead of just saying <em>"error"</em>. I suggest you write this instead</p> <pre><code>$res-&gt;is_success or die $res-&gt;status_line; </code></pre></li> <li><p>If you don't need any special LWP or parse options, then you can just write</p> <pre><code>my $url = 'http://www.infanziabimbo.it/costi-modalita-e-tempi-di-spedizione.html'; my $xp = HTML::TreeBuilder::XPath-&gt;new_from_url($url); </code></pre> <p>although that doesn't give you any way to specify the user agent string as you do currently</p></li> <li><p>Rather than testing <code>$#node</code> for equality to -1, it is much neater to check for the <em>truth</em> of <code>@node</code>, so</p> <pre><code>die "node doesn't exist" unless @node; # Line 18 </code></pre></li> <li><p>If your data contains UTF-8 characters then your output file handle must be set to the appropriate mode. You can change the mode using <code>binmode</code>, like this</p> <pre><code>open HTML, "&gt;C:/Users/jeyakuma/Desktop/kjk.html"; binmode HTML, ':encoding(utf-8)'; </code></pre> <p>But the best way is to use the preferred three-parameter form of <code>open</code>, which would look like this, assuming that you have <code>use autodie</code> in place at the start of your program</p> <pre><code>open HTML, '&gt;:encoding(utf-8)', 'C:/Users/jeyakuma/Desktop/kjk.html'; </code></pre></li> <li><p>Lexical file handles are far superior to the old-fashioned global file handles</p></li> <li><p>The loop <code>foreach(&lt;@node&gt;) { ... }</code> is completely wrong because it is equivalent to <code>foreach (glob join ' ', @node) { ... }</code> and only appears to work because, in general, <code>glob</code> will leave a filename untouched if it doesn't contain any wildcards. What you meant was just <code>for (@node) { ... }</code></p></li> <li><p>In addition, it is bad practice to enclose a variable in quotes unless you specifically want to call its stringification method, so <code>"$_"</code> should be just <code>$_</code></p></li> <li><p>You may as well write your final output loop as</p> <pre><code>print HTML @node; </code></pre></li> </ul> <p>Putting these changes in place, the result looks like this, which I believe will fix your problem</p> <pre><code>use strict; use warnings; use autodie; use HTML::TreeBuilder::XPath; my $url = 'http://www.infanziabimbo.it/costi-modalita-e-tempi-di-spedizione.html'; my $xp = HTML::TreeBuilder::XPath-&gt;new_from_url($url); my @node = $xp-&gt;findnodes_as_strings('//div[@class="mainbox-body"]'); die "node doesn't exist" unless @node; open my $html_fh, '&gt;:encoding(utf-8)', 'C:/Users/jeyakuma/Desktop/kjk.html'; print $html_fh @node; close $html_fh; </code></pre>