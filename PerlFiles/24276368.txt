Ignore an entire directory when using File::Find in Perl script
<p>I have a script which scans every local filesystem for world-writable files. Any found files are written to an output file. It also uses another file which provides a list of files to ignore.</p> <p>We have the Tivoli monitoring agent installed which, for some strange reason, has been designed to create every file in its installation path with world-writable permissions. As it is known and there is little we can do about it, we would like to simply ignore the entire directory.</p> <p>I imagine I can utilize a glob such as <code>/opt/IBM/ITM/*</code> but I haven't the first bit of a clue at to how to do that.</p> <p>At the moment I've hard-coded the directory into the script. This is less than ideal, but functional. I'd prefer to have it in the list of excludes.</p> <p>Over at <a href="https://codereview.stackexchange.com/questions/51473/optimizing-perl-script-which-looks-for-world-writable-files/54247?noredirect=1#comment95201_54247">Code Review</a> it was suggested that I use <code>File::Find::prune</code>. Unfortunately, this hasn't worked. From what I gather and understand about <code>File::Find::prune</code> if it finds a file at <code>/opt/IBM/ITM/.../.../file.txt</code> which is supposed to be excluded, it will then skip the entire <code>/opt/IBM/ITM/.../.../</code> directory. This is fine, but it means I would need to have an exclusion entry for every sub-directoy of <code>/opt/IBM/ITM/</code>. This would be a tedious endeavor considering how many sub-directories and sub-sub-directories there are.</p> <p>I did try placing a world-writable file under <code>/opt/IBM/ITM/</code> and add that to the exclusion list, but it didn't work. I'm guessing because it wasn't found first.</p> <p>The script:</p> <pre><code>#!/usr/bin/perl use warnings; use strict; use Fcntl ':mode'; use File::Find; no warnings 'File::Find'; no warnings 'uninitialized'; my $dir = "/var/log/tivoli/"; my $mtab = "/etc/mtab"; my $permFile = "world_writable_files.txt"; my $tmpFile = "world_writable_files.tmp"; my $exclude = "/usr/local/etc/world_writable_excludes.txt"; my $mask = S_IWUSR | S_IWGRP | S_IWOTH; my (%excludes, %devNums); my $errHeader; # Compile a list of mountpoints that need to be scanned my @mounts; open MT, "&lt;${mtab}" or die "Cannot open ${mtab}, $!"; # We only want the local mountpoints while (&lt;MT&gt;) { if ($_ =~ /ext[34]/) { chomp; my @line = split; push(@mounts, $line[1]); my @stats = stat($line[1]); $devNums{$stats[0]} = undef; } } close MT; # Build a hash from /usr/local/etc/world_writables_excludes.txt if ((! -e $exclude) || (-z $exclude)) { $errHeader = &lt;&lt;HEADER; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !! !! !! /usr/local/etc/world_writable_excludes.txt is !! !! is missing or empty. This report includes !! !! every world-writable file including those which !! !! are expected and should be excluded. !! !! !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! HEADER } else { open XCLD, "&lt;${exclude}" or die "Cannot open ${exclude}, $!\n"; while (&lt;XCLD&gt;) { chomp; $excludes{$_} = 1; } } sub wanted { my @dirStats = stat($File::Find::name); # Is it excluded from the report... return if exists $excludes{$File::Find::name}; # ...is the Tivoli installation directory... return if ($File::Find::name =~ /\b\/ITM\b/); # ...in a special directory, ... return if ($File::Find::name =~ /^\bsys\b|\bproc\b|\bdev\b$/); # ...a regular file, ... return unless -f; # ...local, ... return unless (exists $devNums{$dirStats[0]}); # ...and world writable? return unless ($dirStats[2] &amp; $mask) == $mask; # If so, add the file to the list of world writable files print(WWFILE "$File::Find::name\n"); } # Create the output file path if it doesn't already exist. mkdir($dir or die "Cannot execute mkdir on ${dir}, $!") unless (-d $dir); # Create our filehandle for writing our findings open WWFILE, "&gt;${dir}${tmpFile}" or die "Cannot open ${dir}${tmpFile}, $!"; print(WWFILE "${errHeader}") if ($errHeader); finddepth(\&amp;wanted, @mounts); close WWFILE; # If no world-writable files have been found ${tmpFile} should be zero-size; # Delete it so Tivoli won't alert if (-z "${dir}${tmpFile}") { unlink "${dir}${tmpFile}"; } else { rename("${dir}${tmpFile}","${dir}${permFile}") or die "Cannot rename file ${dir}${tmpFile}, $!"; } </code></pre> <p>It has also been suggested elsewhere that I use File::Find::Rule. I'd rather avoid doing this simply because I don't want to perform a complete rewrite of the script.</p> <p>As I've said, the script above works. I'd prefer not hard-coding the exclusion, though. Figuring out how to do this would also allow me to remove the match against the "special" directories.</p>
<p>To prune an entire directory tree, just set the <code>$File::Find::prune</code> value in your <code>wanted</code> sub. This will work as long as <code>bydepth</code> was not specified:</p> <pre><code>if ($File::Find::name eq '/opt/IBM/ITM') { $File::Find::prune = 1; return; } </code></pre>