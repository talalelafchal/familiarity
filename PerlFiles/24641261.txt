Error in using perl references for arrays
<p>I was trying to implement symbol table using hash table in perl. In the following code I created an array <code>@Table</code> whose elements are references to another array (whose elements are also array references). Here is the code:</p> <pre><code>#!/usr/bin/perl sub getKey { my $name = $_[0]; my $count = 0; my $key = 0; my $len = length ($name); while ($count &lt; $len) { my $char = substr ($name, $count, 1); $key = 7 * $key + ord ($char); $count = $count + 1; } $key = $key % 20; return $key; } sub Define { (my $name, my $kind, my $type, my $Index, my $scope) = @_; my $key = getKey($name); print "key is $key\n"; @$entry = ("$name", "$kind", "$type", "$Index", "$scope"); unshift (@{$Table[$key]}, $entry); print "$name is stored at key $key it is of kind $kind, type $type, at Index $Index and scope $scope\n"; print "entry is @$entry\n"; my $i = 0; while ( $i &lt; 20){ print "[$i]--&gt; @{$Table[$i]-&gt;[0]}\n"; $i++;} return; } our @Table; my $i = 0; while ($i &lt; 20) { $Table[$i] = []; $i++; } Define ("x","field","int","0","0"); Define ("y","argument","int","0","1"); </code></pre> <p>I wanted that whenever I define a new symbol by using subroutine <code>Define</code> I add the information about the type (for example type for symbol x is field) and kind (which is int for x) etc., in an array which will be pointed to by the element <code>$key</code> i.e. <code>$Table[$key]</code>of the array <code>@Table</code>. The key will be evaluated for the symbol (x or y) using subroutine <code>getKey</code>.The final array that is getting printed out as the output of the above code is :</p> <pre><code>[0]--&gt; y argument int 0 1 [1]--&gt; y argument int 0 1 [2]--&gt; [3]--&gt; [4]--&gt; [5]--&gt; [6]--&gt; [7]--&gt; [8]--&gt; [9]--&gt; [10]--&gt; [11]--&gt; [12]--&gt; [13]--&gt; [14]--&gt; [15]--&gt; [16]--&gt; [17]--&gt; [18]--&gt; [19]--&gt; </code></pre> <p>But I expected the output to be:</p> <pre><code>[0]--&gt; x field int 0 0 [1]--&gt; y argument int 0 1 [2]--&gt; [3]--&gt; [4]--&gt; [5]--&gt; [6]--&gt; [7]--&gt; [8]--&gt; [9]--&gt; [10]--&gt; [11]--&gt; [12]--&gt; [13]--&gt; [14]--&gt; [15]--&gt; [16]--&gt; [17]--&gt; [18]--&gt; [19]--&gt; </code></pre> <p>Why is the output different from expected?</p>
<p>Problem here is in this line:</p> <pre><code>@$entry = ("$name", "$kind", "$type", "$Index", "$scope"); </code></pre> <p>Because <code>$entity</code> variable is not defined it'll have global scope. So its value will remain the same between <code>Define(...)</code> calls. This is one of the reason why you should put <code>use strict; use warnings;</code> at the beginning of the script. </p> <p>Here is what is happening:</p> <ul> <li>on first <code>Define(...)</code> call: <ul> <li>expression <code>@$entry = ...</code> will create anonymous array</li> <li>save its reference into <code>$entry</code></li> <li>override first 5 elements of array with some values</li> <li>then reference to that array will be put into first element of <code>@Table</code></li> </ul></li> <li>on seconds call: <ul> <li><code>$entity</code> is still pointing to same anonymous array (because it's global)</li> <li>new values will be put into array</li> <li>then reference to the same array will be put into second element of <code>@Table</code></li> </ul></li> <li>now you have same reference in <code>@Table</code> twice and first values are overwritten by second run</li> </ul> <p>To fix this you need to declare scope of <code>$entry</code> like this:</p> <pre><code>my $entry = [$name, $kind, $type, $Index, $scope]; </code></pre> <p>I've used <a href="http://perldoc.perl.org/perlref.html#Making-References" rel="nofollow">anonymous array syntax</a> <code>[...]</code>.</p>