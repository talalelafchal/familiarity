Can't call method &quot;network&quot; without a package or object reference at blib/lib/NetAddr/IP.pm
<p>I'm trying to write a Perl script to take a list of IPv4 aggregates and another list of addresses and using NetAddr::IP to take each IP and compare to the list of aggregates to see if it belongs to any of the aggregates. I need to find which ones are not part of any of the list of aggregates I have. </p> <p>I finally got past all of the Perl errors and now I'm getting some kind of error with the NetAddr::IP module it appears. Can anyone assist? </p> <p>Here is the error I'm getting:</p> <pre><code> Can't call method "network" without a package or object reference at blib/lib/NetAddr/IP.pm (autosplit into blib/lib/auto/NetAddr/IP/compactref.al) line 1075. </code></pre> <p>And here is the code I'm using:</p> <pre><code> #!/usr/bin/perl use strict; use NetAddr::IP; my $fh = (); my $sfile = "/home/dkenne201/ex-addresses.txt"; my $afile = "/home/dkenne201/aggs.txt"; my @space; my @ips; my $ip; open($fh, "&lt;", $sfile) or die "Failed to open file: $!\n"; while(&lt;$fh&gt;) { chomp; push @space, $_; } close $fh; open($fh, "&lt;", $afile) or die "Failed to open file: $!\n"; while(&lt;$fh&gt;) { chomp; push @ips, $_; } close $fh; for my $netblock (NetAddr::IP::compact @space) { for $ip (map { new NetAddr::IP-&gt;new($_) } @ips) { if ($ip-&gt;within($netblock)) { print "$ip found within $netblock\n"; } else { print "$ip not found within $netblock\n"; } } } </code></pre> <p>Here is an example of the format in the text files that contain the data as well. </p> <p>Aggs example:</p> <pre><code> 1.1.0.0/16 2.2.0.0/18 </code></pre> <p>Addresses example:</p> <pre><code> 1.1.1.1 192.168.2.3 5.2.3.4 </code></pre>
<p>You're calling <code>new</code> twice.</p> <pre><code>for $ip (map { new NetAddr::IP-&gt;new($_) } @ips) </code></pre> <p>Your code can be cleaned up to the following:</p> <pre><code>#!/usr/bin/perl use strict; use warnings; use autodie; use NetAddr::IP; my $sfile = "/home/dkenne201/ex-addresses.txt"; my $afile = "/home/dkenne201/aggs.txt"; my @netblocks = do { open my $fh, "&lt;", $sfile; my @space = &lt;$fh&gt;; chomp @space; map {NetAddr::IP-&gt;new($_)} @space; }; open my $fh, "&lt;", $afile; while (&lt;$fh&gt;) { chomp; my $ip = NetAddr::IP-&gt;new($_); if (my ($netblock) = grep {$ip-&gt;within($_)} @netblocks) { print "$_ found within $netblock\n"; } else { print "$_ not found\n"; } } close $fh; </code></pre> <p>Outputs:</p> <pre><code>1.1.1.1 found within 1.1.0.0/16 192.168.2.3 not found 5.2.3.4 not found </code></pre>
<p>Thanks to Miller for the improved version of my code. I am just re-posting with the <code>$afile</code> and <code>$sfile</code> variables swapped so we are looking for ips within aggs and not aggs within ips (which broke the earlier code in my original post as well). Works perfectly for me with the below code.</p> <pre><code> #!/usr/bin/perl use strict; use warnings; use autodie; use NetAddr::IP; my $sfile = "ex-addresses.txt"; my $afile = "aggs.txt"; my @netblocks = do { open my $fh, "&lt;", $afile; my @space = &lt;$fh&gt;; chomp @space; map {NetAddr::IP-&gt;new($_)} @space; }; open my $fh, "&lt;", $sfile; while (&lt;$fh&gt;) { chomp; my $ip = NetAddr::IP-&gt;new($_); if (my ($netblock) = grep {$ip-&gt;within($_)} @netblocks) { print "$_ found within $netblock\n"; } else { print "$_ not found\n"; } } close $fh; </code></pre>