Perl/mysql floating point imprecision
<p>I'm using Perl to communicate floating point numbers with a mysql database. I perform a multiplication in perl:</p> <pre><code> $var = 0.001 * 3; </code></pre> <p>I then store this value in a mysql database in a column of type DOUBLE. I later retrieve the result, perform a further multiplication and addition to the number and store it back into the database</p> <pre><code>$previous_result_from_db += 0.001*1 + 0.001*0.5. </code></pre> <p>The result stored in the database should be <b>0.0045</b>, but instead I get: <b>0.0045000000000000005</b>. I'm trying to understand where the source of the imprecision is. Is it Perl or the database? What is the correct way to handle this kind of floating point interaction to avoid the imprecision?</p> <p>Thanks!</p>
<blockquote> <p>"10.0 times 0.1 is hardly ever 1.0" -- Brian Kernighan, The Elements of Programming Style</p> </blockquote> <p>It is a known limitation of FLOAT and DOUBLE that they are <em>imprecise numeric</em> data types. This is built into the design of the IEEE 754 format. It affects all programming languages that store floating-point numbers using this format.</p> <p>MySQL documents this in this appendix: <a href="http://dev.mysql.com/doc/refman/5.6/en/problems-with-float.html" rel="nofollow">B.5.5.8 Problems with Floating-Point Values</a>.</p> <p>PHP documents this in <a href="http://www.php.net//manual/en/language.types.float.php" rel="nofollow">Warning: Floating point precision</a>.</p> <p>If you want a scaled numeric data type in MySQL that avoids this rounding behavior, use <a href="http://dev.mysql.com/doc/refman/5.6/en/fixed-point-types.html" rel="nofollow">DECIMAL</a>.</p>