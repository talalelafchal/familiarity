Perl: Change in Subroutine not printing outside of routine
<p>So I want to change numbers that I pass into a subroutine, and then retain those numbers being changed, but it doesn't seem to work.</p> <pre><code> my $A = 0; my $T = 0; my $C = 0; my $G = 0; foreach my $bases in (keys %basereads){ count ($bases, $A, $T, $C, $G); } </code></pre> <p>Here is my subroutine</p> <pre><code> sub count { my $bases = shift; my $A = shift; my $T = shift; my $C = shift; my $G = shift; for (my $i = 0; $i &lt; length($bases); $i++){ print "$bases\t"; if (uc(substr($bases,$i,1)) eq 'A'){ $A++; }elsif (uc(substr($bases,$i,1)) eq 'T'){ $T++; } elsif (uc(substr($bases,$i,1)) eq 'G'){ $G++; } elsif (uc(substr($bases,$i,1)) eq 'C'){ $C++; } else { next; } } print "$A\t$C\t$T\t$G\n"; return my($bases, $A, $T, $C, $G); } </code></pre> <p>after the subroutine, I want to stored the altered A, C, T, G into a hashmap. When I print bases and ATCG inside the subroutine, it prints, so I know the computer is running through the subroutine, but it's not saving it, and when I try to manipulate it outside the subroutine (after I've called it), it starts from zero (what I had defined the four bases as before). I'm new to Perl, so I'm a little weary of subroutines. Could someone help?</p>
<p>Always include <a href="http://perldoc.perl.org/strict.html" rel="nofollow"><code>use strict;</code></a> and <a href="http://perldoc.perl.org/warnings.html" rel="nofollow"><code>use warnings;</code></a> at the top of EVERY script.</p> <p>With <code>warnings</code> enabled, you should've gotten the following messages:</p> <pre><code>"my" variable $bases masks earlier declaration in same scope at script.pl line ... "my" variable $A masks earlier declaration in same scope at script.pl line ... "my" variable $T masks earlier declaration in same scope at script.pl line ... "my" variable $C masks earlier declaration in same scope at script.pl line ... "my" variable $G masks earlier declaration in same scope at script.pl line ... </code></pre> <p>These are caused by the <a href="http://perldoc.perl.org/functions/my.html" rel="nofollow"><code>my</code></a> before your <a href="http://perldoc.perl.org/functions/return.html" rel="nofollow"><code>return</code></a> statement:</p> <pre><code>return my($bases, $A, $T, $C, $G); </code></pre> <p>Correct this by simply removing the <code>my</code>:</p> <pre><code>return ($bases, $A, $T, $C, $G); </code></pre> <p>And then you just need to capture your returned values</p> <pre><code>($bases, $A, $T, $C, $G) = count($bases, $A, $T, $C, $G); </code></pre> <p>Given that you're new to perl, I'm sure you won't be surprised that your code could be cleaned up further though. If one uses a hash, it makes it a lot easier to count various characters in a string, as demonstrated below:</p> <pre><code>use strict; use warnings; my $A = 0; my $T = 0; my $C = 0; my $G = 0; foreach my $bases (keys %basereads) { my %counts; for my $char (split //, $bases) { $counts{$char}++; } $A += $counts{A}; $T += $counts{T}; $C += $counts{C}; $G += $counts{G}; } </code></pre>