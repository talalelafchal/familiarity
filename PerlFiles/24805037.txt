How to copy a nested hash
<p>How to copy a multi level nested hash(say, %A) to another hash(say, %B)? I want to make sure that the new hash does not contain same references(pointers) as the original hash(%A). </p> <blockquote> <p>If I change anything in the original hash (%A), it should not change anything in the new hash(%B). </p> <p>I want a generic way do it. I know I can do it by reassigning by value for each level of keys(like, %{ $b{kb} } = %a;).</p> </blockquote> <p>But, there should be a solution which would work irrespective of the number of key levels(hash of hash of hash of .... hash of hash) </p> <p><strong>PROBLEM EXAMPLE</strong> </p> <pre><code>use Data::Dumper; my %a=(q=&gt;{ q1=&gt;1, q2=&gt;2, }, w=&gt;2); my %b; my %c; %{ $b{kb} } = %a; print "\%b=[".Data::Dumper::Dumper (%b)."] "; %{ $c{kc} } = %a; # $b{kb} = \%a; print "\n\%c=[".Data::Dumper::Dumper (%c)."] "; # CHANGE THE VALUE OF KEY IN ORIGINAL HASH %a $a{q}{q1} = 2; # $c{kc} = \%a; print "\n\%b=[".Data::Dumper::Dumper (%b)."] "; print "\n\%c=[".Data::Dumper::Dumper (%c)."] "; </code></pre> <p>Appreciate your help </p>
<p>What you want is commonly known as a "deep copy", where as the assignment operator does a "shallow copy".</p> <pre><code>use Storable qw( dclone ); my $copy = dclone($src); </code></pre>