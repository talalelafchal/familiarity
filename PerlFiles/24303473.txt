print element of an array by assigning to variables
<p>I am unable to print array element values as expected. <code>@array = (1,2,3,4,5,6,7,8);</code></p> <p>I want to assign first value to variable a and second to variable b</p> <pre><code>for (my $index = 0; $index &lt;= $# array; $index++) { my $a = @array[$index]; my $b = @array[$index + 1]; DEBUG("DEBUG:: $a and $b"); } </code></pre> <p>I want output like</p> <pre><code> a=1 and b=2 a=3 and b=4 a=5 and b=6 </code></pre>
<pre><code>#!/usr/bin/perl use strict; use warnings; my @array = (1,2,3,4,5,6,7,8); my %hash = @array; while (my ($key,$value) = each %hash) { print "Key is $key, Value is $value\n"; } </code></pre> <p><a href="http://ideone.com/eCjmAn" rel="nofollow"><strong>Demo</strong></a></p> <p>Another way</p> <pre><code>#!/usr/local/bin/perl use strict; use warnings; my @array = (1,2,3,4,5,6,7,8); for (my $count=0; $count&lt;@array; $count+=2){ print "A is $array[$count], B is $array[$count+1]\n"; } </code></pre> <p><a href="http://ideone.com/xfXePf" rel="nofollow"><strong>Demo</strong></a></p> <p>Your way</p> <pre><code>#!/usr/local/bin/perl use strict; use warnings; my @array = (1,2,3,4,5,6,7,8); for ( my $index=0;$index&lt;=$#array;$index+=2) { my $a1 = @array[$index]; my $b1 = @array[$index+1]; print "A is $a1, B is $b1\n"; } </code></pre> <p><a href="http://ideone.com/Am7L3t" rel="nofollow"><strong>Demo</strong></a></p>
<p>The root cause for your issue is you should use '$index+=2' instead of '$index++' to incress $index.</p>
<p>When i understand your problem right, you want to have a loop, incrementing by 2:</p> <pre><code>use strict; use warnings; use feature 'say'; my @array = (1, 2, 3,4,5,6,7,8); my (@array_a, @array_b); for (my $count=0; $count &lt; $#array; $count+=2) { say "a is $array[$count], b is $array[$count+1]"; } </code></pre> <p>Output:</p> <pre><code>a is 1, b is 2 a is 3, b is 4 a is 5, b is 6 a is 7, b is 8 </code></pre>
<p>You could use the modulus operator:</p> <pre><code>#!/usr/bin/perl use warnings; use strict; my @array = (1 .. 8); foreach (@array){ $_ % 2 == 0 ? print "b = $_\n" : print "a = $_\t"; } </code></pre> <p>--</p> <pre><code>a = 1 b = 2 a = 3 b = 4 a = 5 b = 6 a = 7 b = 8 </code></pre>
<p>A very simple approach that hasn't been mentioned yet:</p> <pre><code>while (@array) { my $x = shift(@array); my $y = shift(@array); DEBUG("DEBUG:: $x and $y"); } </code></pre> <p>However, it has the side-effect of emptying <code>@array</code>.</p>
<p>As noted by others, the simple fix is to change your loop incrementor to <code>+= 2</code>. An alternative approach is to use <a href="http://perldoc.perl.org/functions/splice.html" rel="nofollow"><code>splice</code></a>:</p> <pre><code>my @array = (1,2,3,4,5,6,7,8); while (my ($x, $y) = splice @array, 0, 2) { DEBUG("DEBUG:: $x and $y"); } </code></pre> <p>This removes the items from <code>@array</code> so you may need to make a copy first.</p>