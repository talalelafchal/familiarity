perl script to add line of code only modifies one file
<p>I have this:</p> <pre><code>perl -pi -e 'print "code I want to insert\n" if $. == 2' *.php </code></pre> <p>which puts the line <code>code I want to insert</code> on the second line of the file, which is what I need done to every single PHP file</p> <p>If I run it in a directory with both PHP files and non-PHP files it does the right thing, but only to one PHP file. I thought <code>*.php</code> would apply it to all PHP files, but it doesn't do it. </p> <p>How can I write it so it will modify every PHP file in a directory? Bonus if there is an easy way to do this recursively through all directories. I don't mind running the Perl script for each directory as there aren't that many, but don't want to hand edit every single file.</p>
<p>If you can use <code>sed</code>, this should work:</p> <pre><code>sed -si '2i\CODE YOU WANT TO INSERT' *.php </code></pre> <p>To do it recursively, you might try:</p> <pre><code>find -name '*.php' -execdir sed -si '2i\CODE YOU WANT TO INSERT' '{}' + </code></pre>
<p>Using <a href="http://perldoc.perl.org/File/Find.html" rel="nofollow"><code>File::Find</code></a>.</p> <p>Note, I've included 3 sanity checks to verify that things are actually being processed they way that you want.</p> <ol> <li>Initially the script will just print out the found files until you comment out the bare return.</li> <li>Then the script will save backups unless you uncomment the unlink statement.</li> <li>Finally, the script will only process a single file until you comment out the <code>exit</code> statement.</li> </ol> <p>These three checks are just so you can verify that everything is working as you desire before editing a whole directory tree.</p> <pre><code>use strict; use warnings; use File::Find; my $to_insert = "code I want to insert\n"; find(sub { return unless -f &amp;&amp; /\.php$/; print "Edit $File::Find::name\n"; return; # Comment out once satisfied with found files local $^I = '.bak'; local @ARGV = $_; while (&lt;&gt;) { print $to_insert if $. == 2 &amp;&amp; $_ ne $to_insert; print; } # unlink "$_$^I"; # Uncomment to delete backups once certain that first file is processed correctly. exit; # Comment out once certain that first file is processed correctly }, '.') </code></pre>
<p>The problem is that the file handle <code>ARGV</code> that Perl uses to read the files passed on the command line is never explicitly closed, so the line number <code>$.</code> just keeps incrementing after the end of the first file and never goes back to one.</p> <p>Fix this by closing <code>ARGV</code> when it has reached end of file. Perl will reopen it to read the next file in the list, and so reset <code>$.</code></p> <pre><code>perl -i -pe 'print "code I want to insert\n" if $. == 2; close ARGV if eof' *.php </code></pre>