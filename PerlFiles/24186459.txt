STDOUT from Pidgin plugin script
<p>Yesterday, I wrote a perl plugin script for Pidgin 2.10.9, running on Windows 7, and using Strawberry Perl 5.10.1.5</p> <p>Basically, on the receipt of an IM, it uses backticks to call a console application (written in .NET) and returns the console output to the sender as an IM.</p> <p>I had to reboot this morning, but ever since I rebooted, it has stopped working.</p> <p>So, I changed the backticks to use "capture". That didn't work either, but it at least gave me this error:</p> <pre><code>(15:00:33) Plugin: Error: Error in IPC::System::Simple plumbing: "Can't dup STDOUT" - "Bad file descriptor" at (eval 12) line 53 </code></pre> <p>I have no idea what's changed from yesterday to today, and wondered if anybody knew what might be causing the error?</p> <p>Thanks</p> <p>Edit: Thought I'd add my code</p> <pre><code>use Purple; #use IPC::System::Simple qw(system systemx capture capturex); use IPC::System::Simple qw(capture capturex); %PLUGIN_INFO = ( perl_api_version =&gt; 2, name =&gt; "PlugIn", version =&gt; "0.1", summary =&gt; "AutoResp", description =&gt; "PlugIn", author =&gt; "Mark Watkin", url =&gt; "http://", load =&gt; "plugin_load", unload =&gt; "plugin_unload" ); sub plugin_init { return %PLUGIN_INFO; } sub plugin_load { my $plugin = shift; Purple::Debug::info("PlugIn", "plugin_load()\n"); $data = ""; $conversation_handle = Purple::Conversations::get_handle(); Purple::Signal::connect($conversation_handle, "received-im-msg", $plugin, \&amp;signal_chat_callback, $data); } sub plugin_unload { my $plugin = shift; Purple::Debug::info("PlugIn", "plugin_unload()\n"); } sub signal_chat_callback { # The signal data and the user data come in as arguments my ($account, $sender, $message, $conv, $flags) = @_; Purple::Debug::info("PlugIn", "Account Alias \"" . $account-&gt;get_alias() . "\"\n"); if( $account-&gt;get_alias() eq "PlugIn" ) { Purple::Debug::info("PlugIn", "Request: \"" . $message . "\"\n"); if(!$conv) { Purple::Debug::info("PlugIn", "No conversation\n"); $conv = Purple::Conversation-&gt;new(1, $account, $sender); } $im = $conv-&gt;get_im_data(); $im-&gt;send( "One moment please..." ); my $query = ""; # eval { # $query = capture("\"D:\\SourceCode\\PlugInNET\\bin\\Debug\\PlugInNET.exe\" \"" . $message . "\""); # #$query = capture("\"D:\\SourceCode\\PlugInNET\\bin\\Debug\\PlugInNET.exe\"", "\"" . $message . "\""); # #my $query = capture("D:\\SourceCode\\PlugInNET\\bin\\Debug\\PlugInNET.exe"); # #my $query = `\"D:\\SourceCode\\PlugInNET\\bin\\Debug\\PlugInNET.exe\" \"$message\"`; # #my $query = `dir /b`; # }; # if( $@ ) # { # Purple::Debug::info("PlugIn", "Error: " . $@ . "\n"); # } Purple::Debug::info("PlugIn", "Query: " . $query . "\n"); open ( my $fh, "-|", "D:\\SourceCode\\PlugInNET\\bin\\Debug\\PlugInNET.exe \"$message\"" ) or die "Cannot run free, $ERRNO"; while (&lt;$fh&gt;) { Purple::Debug::info("PlugIn", "Read: Line " . $_ . "\n"); $query = $query . $_ . "\n"; } close $fh; Purple::Debug::info("PlugIn", "Query: " . $query . "\n"); if( $query eq "" ) { $im-&gt;send( "I'm sorry, my brain doesn't seem to be functioning at the moment" ); } else { @msgs = split(/-----------\n/, $query); foreach( @msgs ) { Purple::Debug::info("PlugIn", "Result Msg: \"" . $_ . "\"\n"); $im-&gt;send( "&lt;BODY&gt;" . $_ . "&lt;/BODY&gt;" ); } } } } </code></pre> <p>The plan was to fix up the paths once I had it working properly</p>
<p>Please consider using file handles instead of backticks to capture stdout from another source. You'll be able collect errors.</p> <pre><code>#!/usr/bin/perl use strict; use warnings; use English; # No taint protection in this example open ( my $fh, '-|', '/usr/bin/free' ) or die "Cannot run free, $ERRNO"; while (&lt;$fh&gt;) { print; } close $fh; </code></pre>