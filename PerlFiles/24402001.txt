how to get the output of thread which is already joined
<p>how to get the output of thread which is already joined.</p> <p>I am writing a perl script in which i call a multi_thread subroutine from a .pm file to do multithread operations like create(),tid() and join() and returns thread objects to calling program.</p> <p>and in the main script I want to get the output of thread sub1. But i am hitting with an error <strong>thread already joined at</strong>...................</p> <pre><code>#!/usr/bin/perl use strict; use multithread; sub sub1 { print "hello\n"; return 1; } my @thread_obj=multi_thread(sub1); my $res=$thread_obj[0]-&gt;join(); print "thread1 output : $res\n"; </code></pre>
<p>You can't. A joined thread is one that's complete, and has been 'merged' with the main program. It doesn't exist any more. </p> <p>What you could <em>perhaps</em> do is use <code>Thread::Queue</code> and have your thread enqueue it's result - a queue persists until the program exist. </p> <p>E.g.</p> <pre><code>use Thread::Queue; my $result_q = Thread::Queue -&gt; new(); sub sub1 { print "hello\n"; $result_q -&gt; enqueue ( 1 ); return 1; } </code></pre> <p>Then you can process your result queue with <code>dequeue</code> or more likely <code>dequeue_nb</code> to drain it entirely. But you can <code>enqueue</code> more complex data structures when combined with <code>Storable</code>. </p> <p>Of course, the real answer would be - capture the output of the thread when you join, and store it somewhere. Like within your module, or wherever you do the <em>actual</em> join call. </p>