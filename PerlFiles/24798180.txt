Not able to print value of this complex datastructure in perl
<p><strong>Question explained as comments in the code:</strong></p> <p>I have a following piece of code in which i am trying to make a hash in which the key itself is a reference to some other array.</p> <pre><code>my @arr1=(1,2,3,4,5,6,7,8,9,10); my @arr2=(1001,1002,1003); $FILES_1=\@arr1; $num1=2; $FILES_2=\@arr2; $num2=4; @FILES=($FILES_1, $FILES_2); @NUMS=($num1,$num2); fun (\@FILES,\@NUMS); sub fun{ my ($rFILES,$rNUMS) = @_; print "\n --${$rFILES}[0]-&gt;[2] \n "; # This is same as below print "\n --$rFILES-&gt;[0]-&gt;[2] \n "; # This is same as above my %hash=(); $hash{$rFILES-&gt;[0]} = $rNUMS-&gt;[0]; my $test = $rFILES-&gt;[0]; print "\nTEST : $test-&gt;[1]"; my @key = keys %hash; print "\nKey 1 = $key[0]"; # This prints scalar value as below print "\ntest = $test "; # This prints scalar value as above print "\nKey 1-&gt;[1] = ${$key[0]}-&gt;[1]"; #PROBLEM : THIS DOESNT PRINT SAME AS BELOW print "\ntest-&gt;[1] = $test-&gt;[1] "; #THIS PRINTS AS EXPECTED. } </code></pre> <p><strong>Output:</strong></p> <pre><code> --3 --3 TEST : 2 Key 1 = ARRAY(0x1bbb540) test = ARRAY(0x1bbb540) Key 1-&gt;[1] = test-&gt;[1] = 2 </code></pre> <p>Are we not supposed to keep a key of a hash as reference to some array? Why is the value "2" not printed?</p>
<p>A hash key is always a string, you can't store a reference in there. I can't think of a reason you'd want this either.</p> <p>You should really always <code>use strict</code> and <code>use warnings</code>. If you added those and declared your variables with <code>my</code> properly, you'd have gotten a warning:</p> <p><code>Can't use string ("ARRAY(0x85e628)") as a SCALAR ref while "strict refs" in use</code></p> <p>The syntax you're using:</p> <pre><code>${$key[0]} </code></pre> <p>says <code>$key[0]</code> is a reference to a scalar. It isn't, it's a string with the address of what the reference used to be, as you can't use a reference as a hash key they become strings.</p> <p><strong>Update:</strong></p> <p>You probably want something like this instead:</p> <pre><code>my @filegroups = ( { number =&gt; 1, files =&gt; ['file1','file2'] }, { number =&gt; 2, files =&gt; ['file3'] }, ); </code></pre> <p>Accessed as:</p> <pre><code>foreach my $filegroup ( @$filegroups ) { print "my number is $filegroup-&gt;{number}\n"; print " and I have ".scalar( @{ $filegroup-&gt;{ files } } )." files\n"; } </code></pre> <p>If you need extra speed to access the structure by group number (don't bother unless you have hundreds of groups or thousands and thousands of accesses), index them:</p> <pre><code>my %filegroupindexes = map { $_-&gt;{ number } =&gt; $_ } values @$filegroups; </code></pre> <p>Then you can get to the group like this:</p> <pre><code>print "there are ".scalar( @{ $filegroupindexes{ 1 }-&gt;{ files } } )." files in group 1\n"; </code></pre> <p>As a last hint, for printing complex data structures <a href="https://metacpan.org/pod/Data::Printer" rel="nofollow">Data::Printer</a> is my favourite:</p> <pre><code>use Data::Printer colored =&gt; 1; p( @filegroups ); </code></pre>
<p>You need <a href="http://perldoc.perl.org/Tie/RefHash.html" rel="nofollow">Tie::RefHash</a> if you want to use references as hash keys.</p>