Confused by local variables and methods in Perl
<p>I've got the following <strong>Perl</strong> code:</p> <pre><code>my $wantedips; # loop through the interfaces foreach (@$interfaces) { # local variable called $vlan my $vlan = $_-&gt;{vlan}; # local variable called $cidr my $cidr = $_-&gt;{ip} ."/".$nnm-&gt;bits(); # I dont understand this next bit. # As a rubyist, it looks like a method called $cidr is being called on $wantedips # But $cidr is already defined as a local variable. # Why the spooky syntax? Why is $cidr passed as a method to $wantedips? # what does -&gt;{} do in PERL? Is it some kind of hash syntax? $wantedips-&gt;{$cidr} = $vlan; # break if condition true next if ($ips-&gt;{$cidr} == $vlan); # etc } </code></pre> <p>The part I don't get is in my comments. Why is $cidr passed to $wantedips, when both are clearly defined as local variables? I'm a rubyist and this is really confusing. I can only guess that <code>$xyz-&gt;{$abc}="hello"</code> creates a hash of some sort like so:</p> <pre><code>$xyz =&gt; { $abc =&gt; "hello" } </code></pre> <p>I'm new to <strong>Perl</strong> as you can probably tell.</p>
<blockquote> <pre><code>#I dont understand this next bit. $wantedips-&gt;{$cidr} = $vlan; </code></pre> </blockquote> <p><code>$wantedips</code> is a scalar, specifically it is a hashref (a reference to a hash).</p> <p>The arrow gets something from inside the reference.</p> <p><code>{"keyname"}</code> is how to access a particular key in a hash.</p> <p><code>-&gt;{"keyname"}</code> is how you access a particular key in a hash ref</p> <p><code>$cidr</code> is also a scalar, in this case it is a string.</p> <p><code>-&gt;{$cidr}</code> accesses a key from a hash ref when the key name is stored in a string.</p> <p>So to put it all together:</p> <p><code>$wantedips-&gt;{$cidr} = $vlan;</code> means "Assign the value of <code>$vlan</code> to the key described by the string stored in <code>$cidr</code> on the hash referenced by <code>$wantedips</code>.</p> <hr> <blockquote> <p>I can only guess that $xyz->{$abc}="hello" creates a hash of some sort like.</p> </blockquote> <p>Let's break this down to a step by step example that strips out the loops and other bits not directly associated with the code in question.</p> <pre><code># Create a hash my %hash; # Make it a hashref my $xyz = \%hash; # (Those two steps could be done as: my $xyz = {}) # Create a string my $abc = "Hello"; # Use them together $xyz-&gt;{$abc} = "world"; # Look at the result: use Data::Dump; Data::Dump::ddx($xyz); # Result: { Hello =&gt; "world" } </code></pre>
<p>I don't understand why you are comfortable with</p> <pre><code>my $vlan = $_-&gt;{vlan} </code></pre> <p>but then</p> <pre><code>$wantedips-&gt;{$cidr} = $vlan </code></pre> <p>gives you trouble? Both use the same syntax to access hash elements using a hash reference.</p> <p>The <em>indirection operator</em> <code>-&gt;</code> is used to apply keys, indices, or parameters to a <em>reference</em> value, so you access elements of a hash by its reference with</p> <pre><code>$href-&gt;{vlan} </code></pre> <p>elements of an array by its reference with</p> <pre><code>$aref-&gt;[42] </code></pre> <p>and call a code reference with</p> <pre><code>$cref-&gt;(1, 2, 3) </code></pre> <p>As a convenience, and to make code cleaner, you can remove the indirection operator from the sequences <code>]-&gt;[</code> and <code>}-&gt;{</code> (and any mixture of brackets and braces). So if you have a nested data structure you can write</p> <pre><code>my $name = $system-&gt;{$ip_address}{name}[2] </code></pre> <p>instead of</p> <pre><code>my $name = $system-&gt;{$ip_address}-&gt;{name}-&gt;[2] </code></pre>