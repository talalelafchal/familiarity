Regex to remove parentheses around characters separated by white space
<p>Using Perl, I'm trying to replace all parentheses that surround whole words separated by white space. For example, the string:</p> <pre><code>$string = "A string (with words) is always easy to understand Ref: A(1,2)"; </code></pre> <p>should become</p> <pre><code>$string = "A string with words is always easy to understand Ref: A(1,2)"; </code></pre> <p>I can pick up matches using lookarounds, but unsure as to how to replace the parentheses and not the word, i.e.,</p> <pre><code>$string =~ s/(?&lt;=\s\()\w*(?=\)\s)//g; </code></pre> <p>would give</p> <pre><code>$string = "A string () is always easy to understand Ref: A(1,2)"; </code></pre> <p>Is it possible to set up a regex to replace the lookarounds and not the match? Or am I thinking about this wrong?</p>
<p>Use <a href="http://www.regular-expressions.info/brackets.html">capturing groups</a>: </p> <pre><code>$string =~ s/(\s)\(([^)]*)\)(\s)/$1$2$3/g; </code></pre> <p>or if you prefer:</p> <pre><code>$string =~ s/\s\K\(([^)]*)\)(?=\s)/$1/g; </code></pre> <p><em>(if you want to remove parenthesis, the parenthesis must be included in the whole match result.)</em></p>
<p><strong>A slight variation on the answer above:</strong> </p> <p><code>s/\s+\(([^)]*)\)\s+/ $1 /;</code> </p> <p>Note the "+ sign" on the \s. It allows for 1 or more white spaces around your parenthesis. Also note that there is one space on either side of the $1.</p> <p>Notepad++ can be quite helpful in these situations. It uses the same $1 syntax as Perl does. </p> <p>J Friedl in Master Regular Expressions generalized this problem (slightly paraphrased): </p> <ol> <li>Match the opening delimiter </li> <li>Match the main text (anything that is not the ending delimiter) </li> <li>Match the ending delimiter</li> </ol> <p>Sounds simple but sometimes easy to lose track of. </p>
<p>There are two differences that make the parenthesis that you don't want removed unique:</p> <ol> <li>It is surrounded by an alpha character</li> <li>It contains only numbers and punctuation (and no spaces)</li> </ol> <p>The description of your goal is ambiguous and could apply to either of these distinctions: "<em>characters separated by white space</em>"</p> <p>Given that you've chosen Casimir's answer, I'm going to assume that you meant the #1 distinction. However, to allow for parenthesis at the beginning or end of a string, you should probably use negative lookahead and lookbehinds for the boundary conditions instead of the space character class:</p> <pre><code>my $string = "A string (with words) is always easy to understand Ref: A(1,2)"; $string =~ s/(?&lt;!\S)\(([^)]*)\)(?!\S)/$1/g; print $string; </code></pre> <p>Outputs:</p> <pre><code>A string with words is always easy to understand Ref: A(1,2) </code></pre> <p>To be even more permissive, perhaps you want to only exclude parenthesis that are cuddled next to word characters, but still strip those next to punctuation. If that were the case, then you'd just need to adjust the regex to:</p> <pre><code>$string =~ s/(?&lt;!\w)\(([^)]*)\)(?!\w)/$1/g; </code></pre>