perl get multiple lines from text file between patter
<p>I am fairly new to Perl and here is what I am trying to do: I have a html file that contains data which I have to push to MySql database. I try to parse html file to get values I need in scalars which I got right but I have a problem when I get to the point that I need to collect data not from a single line of text but multiple lines between certain patter. Here is what I got so far that kinda works:</p> <pre><code> #!/usr/bin/perl binmode STDOUT,':encoding(cp1250)'; open FILE, "index.html" or die "Could not open $file: $!"; my $word; my $description; my $origin; while (my $line = &lt;FILE&gt;) { if ($line =~ m/(?&lt;=&lt;h2 class=\"featured\"&gt;)(.*)(?=&lt;\/h2&gt;)/) { $word = $line =~ m/&lt;=&lt;h2 class=\"featured\"&gt;(.*)&lt;\/h2&gt;/; $word = $1; } if ($line =~ m/(?&lt;=&lt;h4 class=\"related-posts\"&gt;)/) { print $line; $origin = $line =~ m/&lt;h4 class=\"related-posts\"&gt; &lt;a href=\"..\/tag\/lacina\/index.html\" rel=\"tag\"&gt;(.*)&lt;\/a&gt;&lt;\/h4&gt;/; $origin = $1; } } print "$word \n"; print "$origin"; </code></pre> <p>Now I want to grab a few lines of a text - does not have to be in a single scalar but I dont know how many lines there will be. All I know is that the lines are in between of:</p> <pre><code>&lt;div class="post-content"&gt; &lt;p&gt;text I want&lt;/p&gt; &lt;p&gt;1.text I want&lt;/p&gt; &lt;p&gt;2.text I want&lt;/p&gt; &lt;div class="box small arial"&gt; </code></pre> <p>Plus I would like to get rid of </p> <pre><code> &lt;p&gt;'s </code></pre> <p>I thought of reading a line, storing it in a scaral, reading another line and comparing to the recently saved scalar. But how I supouse to check if I have all I want in that scalar?</p>
<p>use a <a href="http://perldoc.perl.org/perlop.html#Range-Operators" rel="nofollow"><code>range operator</code></a> to find the text between two patterns:</p> <pre><code>use strict; use warnings; while (&lt;DATA&gt;) { if (my $range = /&lt;div class="post-content"&gt;/ .. /&lt;div class="box small arial"&gt;/) { next if $range =~ /E/; print; } } __DATA__ &lt;html&gt; &lt;head&gt;&lt;title&gt;stuff&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;div class="post-content"&gt; &lt;p&gt;text I want&lt;/p&gt; &lt;p&gt;1.text I want&lt;/p&gt; &lt;p&gt;2.text I want&lt;/p&gt; &lt;/div&gt; &lt;div class="box small arial"&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; </code></pre> <p>Outputs:</p> <pre><code>&lt;div class="post-content"&gt; &lt;p&gt;text I want&lt;/p&gt; &lt;p&gt;1.text I want&lt;/p&gt; &lt;p&gt;2.text I want&lt;/p&gt; &lt;/div&gt; </code></pre> <p>However, the real answer is use an actual HTML Parser for parsing HTML.</p> <p>I'd recommend <a href="https://metacpan.org/pod/Mojo%3a%3aDOM" rel="nofollow"><code>Mojo::DOM</code></a>. For a helpful 8 minute introductory video, check out <a href="http://mojocasts.com/e5" rel="nofollow"><code>Mojocast Episode 5</code></a>.</p> <pre><code>use strict; use warnings; use Mojo::DOM; my $data = do {local $/; &lt;DATA&gt;}; my $dom = Mojo::DOM-&gt;new($data); for my $div ($dom-&gt;find('div[class=post-content]')-&gt;each) { print $div-&gt;all_text(); } __DATA__ &lt;html&gt; &lt;head&gt;&lt;title&gt;stuff&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;div class="post-content"&gt; &lt;p&gt;text I want&lt;/p&gt; &lt;p&gt;1.text I want&lt;/p&gt; &lt;p&gt;2.text I want&lt;/p&gt; &lt;/div&gt; &lt;div class="box small arial"&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; </code></pre> <p>Outputs:</p> <pre><code>text I want 1.text I want 2.text I want </code></pre>
<p>Use a tool for the job instead of a regular expression.</p> <pre><code>use strict; use warnings; use feature 'say'; use HTML::TreeBuilder; my $tr = HTML::TreeBuilder-&gt;new_from_file('index.html'); for my $div ($tr-&gt;look_down(_tag =&gt; 'div', 'class' =&gt; 'post-content')) { for my $t ($div-&gt;look_down(_tag =&gt; 'p')) { say $t-&gt;as_text; } } </code></pre> <p>Output</p> <pre><code>text I want 1.text I want 2.text I want </code></pre>