equivalent of shell script's grep command in perl
<p>I have below syntax used in shell script-</p> <pre><code>imp_vol -u $undr_price -s $str_price -p $price -t $mat -c $iscall | grep "Black Scholes " | cut-d"=" -f2 </code></pre> <p>Where <code>imp_vol</code> is an executable that prints something. What will be its equivalent in Perl script? For example:</p> <pre><code>imp_vol -u 110.5 -s 110.9 -p 0.005 -t 0.041 -c 1 Underlying Price = 110.5 Strike Price = 110.9 Price = 0.005 Time = 0.041 IsCall = 1 Black Scholes Vol = 0.0108141 </code></pre> <p>So my purpose is to get the value of <code>Black Scholes Vol</code> in this case as `.0108141 in some variable,as I have to pass that variable in some function again.</p> <p>Any help will be appreciated.</p>
<p>If you want all "Black Scholes " like your <code>grep</code> would match</p> <pre><code>imp_vol -u $undr_price -s $str_price -p $price -t $mat -c $iscall | perl -ne 'print $1 if $_ =~ /Black Scholes .* = (\d+(?:\.\d+)?)/;' </code></pre> <p>"Black Scholes Vol" exactly</p> <pre><code>| perl -ne 'print $1 if $_ =~ /Black Scholes Vol = (\d+(?:\.\d+)?)/;' </code></pre>
<p>Use <a href="http://perldoc.perl.org/perlre.html" rel="nofollow">Regexes</a></p> <pre><code>while (&lt;&gt;) { next if !/abcd/; # ... } </code></pre> <p>Also, to replace cut, use <a href="http://perldoc.perl.org/perlre.html#Capture-groups" rel="nofollow">capture groups</a>, but I can't provide more code because I don"t know your data format.</p>
<p>There is actually a <code>grep</code> function in perl. It takes an expression or a block as the first argument and a list of strings as the second argument. So you could do this:</p> <pre><code>my @list = grep(/abcd/, (&lt;&gt;)); </code></pre> <p>See also: <a href="http://perldoc.perl.org/functions/grep.html" rel="nofollow">grep - perldoc.perl.org</a></p> <p>In your specific case you can use the block form to extract the price like this:</p> <pre><code>imp_vol | perl -e 'print grep { s/\s+Black Scholes Vol = ([-+]?[0-9]*\.?[0-9]+)/$1/ } (&lt;&gt;)' </code></pre>
<p>To execute the command, you can use <a href="http://perldoc.perl.org/perlipc.html#Safe-Pipe-Opens" rel="nofollow"><code>open</code></a> to get a filehandle from which you can read its output. You can then use a single regular expression to match the line and extract the value. For example:</p> <pre><code>my $cmd = "imp_vol -u $undr_price -s $str_price -p $price -t $mat -c $iscall"; open (my $imp, '-|', $cmd) or die "Couldn't execute command: $!"; my $extracted; while (&lt;$imp&gt;) { if (/Black Scholes Vol = (.*)/) { $extracted = $1; } } close $imp; </code></pre> <p>The parenthesis create a <a href="http://perldoc.perl.org/perlre.html#Capture-groups" rel="nofollow">capture group</a> which extracts the value into the special <code>$1</code> variable.</p> <p>If you're able to pipe input instead of having to execute the command within Perl, the following one-liner would suffice:</p> <pre><code>imp_vol ... | perl -ne 'print $1 if /Black Scholes Vol = (.*)/' </code></pre>