convert perl timestamp to human readable
<p>I am reading a log file which contains time stamps which I want to convert to human readable. In this command, $1 contains a time stamp (like this 1403457192.663): $temp = localtime->mon($1) but instead of storing the month, $temp contains the same timestamp that was input. What am I doing wrong?</p>
<p>You're close. The time should be passed to the <code>localtime</code> function, not the <code>mon</code> method.:</p> <pre><code>$temp = localtime($1)-&gt;mon; # 6 </code></pre> <p>You can use <code>strftime</code> with this to turn it into any arbitrary format</p> <pre><code>localtime($1)-&gt;strftime("%b %d %a"); # Jun 22 Sun </code></pre> <p>Or if you're not picky about the format you can just stringify it:</p> <pre><code>$temp = localtime($1); print "$temp\n"; # Sun Jun 22 13:13:12 2014 </code></pre> <p>This assumes that <code>Time::Piece</code> is loaded.</p>
<p>I'd simply go with</p> <pre><code>$ perl -E' use POSIX qw( strftime ); say strftime("%Y/%m/%d %H:%M:%S", localtime(1403457192.663)); ' 2014/06/22 13:13:12 </code></pre> <p>But you're using Time::localtime. That module overrides the <code>localtime</code> builtin, so you need a slight modification if you use that.</p> <p>Either avoid using Time::localtime's <code>localtime</code></p> <pre><code>$ perl -E' use POSIX qw( strftime ); use Time::localtime qw( localtime ); say strftime("%Y/%m/%d %H:%M:%S", CORE::localtime(1403457192.663)); ' 2014/06/22 13:13:12 </code></pre> <p>or flatten an existing Time::localtime object.</p> <pre><code>$ perl -E' use POSIX qw( strftime ); use Time::localtime qw( localtime ); my $tm = localtime(1403457192.663); say strftime("%Y/%m/%d %H:%M:%S", @$tm); ' 2014/06/22 13:13:12 </code></pre> <p>All of these solutions lose the millisecond precision. If it's relevant, you'll have to extract it from the original input and reinsert it in the output.</p>
<p>Perl since 5.10 now contains <a href="http://perldoc.perl.org/Time/Piece.html" rel="nofollow">Time::Piece</a>. This makes it the <em>official</em> way to handle time in Perl. Or, about as <em>official</em> as something gets in Perl. Since it's always available, you might as well learn to use that:</p> <pre><code>use strict; use warnings; use Time::Piece; use Time::Seconds; # More time fun! my $time = Time::Piece-&gt;new; # Gets the current timestamp my $month = $time-&gt;mon(); # Month from 1 to 12 my $month = $time-&gt;month(); # Abbreviation of the name of month my $month = $time-&gt;fullmonth(); # Full name of the month my $time = $time + (ONE_DAY * 30) # Add thirty days to the time my $date = $time-&gt;mdy # The date 30 days from now. </code></pre>
<p>For formatting dates most system <code>strftime</code> manual pages will list a few "shortcuts" to get you certain "standard" formats.</p> <p><em>e.g.</em> <code>%F</code> is equivalent to <code>“%Y-%m-%d”</code>. </p> <pre><code>~/% perl -MPOSIX -E'say strftime"%D",localtime' 06/25/14 ~/% perl -MPOSIX -E'say strftime"%F",localtime' 2014-06-25 </code></pre> <p>These can make using "ye olde" <code>strftime</code> easier ;-)</p>