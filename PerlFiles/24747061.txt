Perl: Which floating point operations are lossless?
<p>There are some great docs out there describing the nature of floating point numbers and why precision must necessarily be lost in some floating point operations. E.g.,: <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow">http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html</a></p> <p>I'm interested in understanding which floating point operations are lossless in terms of the precision of the underlying number. For instance,</p> <pre><code>$x = 2.0/3.0; # this is an operation which will lose some precision </code></pre> <p>But will this lose precision?</p> <pre><code>$x = 473.25 / 1000000; </code></pre> <p>or this?</p> <pre><code>$x = 0.3429 + 0.2939201; </code></pre> <p>What general rules of thumb can one use to know when precision will be lost and when it will be retained?</p>
<p>Your question makes a big assumption.</p> <p>The issue isn't whether certain operations are lossless, it's whether storing numbers in floating point at all will be without loss. For example, take this number from your example:</p> <pre><code>$x = .3429; sprintf "%.20f", $x; </code></pre> <p>Outputs:</p> <pre><code>0.34289999999999998000 </code></pre> <p>So to answer your question, some operations might be lossless in specific cases. However, it depends on both the original numbers and the result, so should never be counted upon.</p> <p>For more information, read <a href="http://perldoc.perl.org/perlnumber.html" rel="nofollow"><code>perlnumber</code></a>.</p>
<p>In general most operations will introduce some precision loss. The exceptions are values that are exactly representable in floating point (mantissa is expressible as a non-repeating binary). When applying arithmetic, both operands and the result would have to be expressible without precision loss.</p> <p>You can construct arbitrary examples that have no precision loss, but the number of such examples is small compared with the domain. For example:</p> <pre><code>1.0f / 8.0f = 0.125f </code></pre> <p>Put another way, the mantissa must be expressible as <code>A/B</code> where B is a power of 2, and (as pointed out by @ysth) both <code>A</code> and <code>B</code> are smaller than some upper bound which is dictated by the total number of bits available for the mantissa in the representation.</p>
<p>I don't think you'll find any useful rules of thumb. Generally speaking, precision will not be lost if both the following are true:</p> <ul> <li>Each operand has an exact representation in floating point</li> <li>The (mathematical) result has an exact representation in floating point</li> </ul> <p>In your second example, 473.25 / 1000000, each operand has an exact floating point representation, but the quotient does not. (Any rational number that has a factor of 5 in the denominator has a repeating expansion in base 2 and hence no exact representation in floating point.) The above rules are not particularly useful because you cannot tell ahead of time whether the result is going to be exact just by looking at the operands; you need to also know the result.</p>