Perl read file to create array or arrays
<p>I have some files with the following format:</p> <pre><code>&gt;Age PT 134 PT 145 PT 203 PT 237 &gt;Karnofsky PT 167 &gt;Overall_Survival PT 49 PT 126 PT 32 </code></pre> <p>What I want to do is read a pair of files, create an array of arrays from both files then compare each combination in order looking for shared values so the final output would look like this:</p> <pre><code>&gt;Age_vs_&gt;CategoryA PT 145 PT 203 &gt;Karnofsky_vs_&gt;CategoryA NO SHARED VALUES &gt;Overall_Survival_vs_&gt;CategoryA PT 126 </code></pre> <p>I am having trouble building my array of arrays. I have written the following code:</p> <pre><code>my @array while (&lt;FILE1&gt;) { my $line = $_; chomp $line; if ( $line =~ /^&gt;/ ) { @array = $line; } if ( $line !~ /^&gt;/ ) { push(@array, $line); } } </code></pre> <p>Which creates a single array of what I want to be the last element in my array of arrays. How do I create a new array each time the while loop comes across a line that starts with ">" ???</p> <p>Desired data structure:</p> <pre><code>@File1 = (@Age, @Karnofsky, @Overall_Survival...) @Age = ("PT 134", "PT 145", "PT 203", "PT 237") @Karnofsky = ("PT 167") @Overall_Survial = ("PT 49", "PT 126", "PT 32") </code></pre> <p>Clarification: My intention is two process pairs of files looking for every shared value between every pair of arrays. The file to be analyzed alongside the one already described might look something like this:</p> <pre><code>&gt;CategoryA PT 134 PT 155 PT 209 &gt;CategoryB PT 47 PT 33 PT 155 </code></pre> <p>And the desired output would not include any comparisons within a file. So there would be NO output reading </p> <pre><code>&gt;CategoryA_vs_&gt;CategoryB PT 155 </code></pre>
<p>Your definition of the problem isn't very precise, but I think a hash of hashes is the best choice to achieve a reasonable level of efficiency</p> <p>The program expects the pasth to the input file as a parameter on the command line</p> <p>I have invented some values for <code>CategoryA</code> so that the output is equivalent to your example</p> <pre><code>use strict; use warnings; my @categories; my %data; while (&lt;&gt;) { next unless /\S/; chomp; if ( /^&gt;/ ) { push @categories, $_; } elsif (@categories) { ++$data{$categories[-1]}{$_}; } } for my $i (0 .. $#categories-1) { for my $j ($i+1 .. $#categories) { my ($cat1, $cat2) = @categories[$i, $j]; my @shared = grep $data{$cat1}{$_}, keys %{ $data{$cat2} }; printf "%s_vs_%s\n", $cat1, $cat2; print @shared ? map "$_\n", @shared : "NO SHARED VALUES\n"; } } </code></pre> <p><strong>data</strong></p> <pre><code>&gt;Age PT 134 PT 145 PT 203 PT 237 &gt;Karnofsky PT 167 &gt;Overall_Survival PT 49 PT 126 PT 32 &gt;CategoryA PT 126 PT 158 PT 145 PT 203 </code></pre> <p><strong>output</strong></p> <pre><code>&gt;Age_vs_&gt;Karnofsky NO SHARED VALUES &gt;Age_vs_&gt;Overall_Survival NO SHARED VALUES &gt;Age_vs_&gt;CategoryA PT 203 PT 145 &gt;Karnofsky_vs_&gt;Overall_Survival NO SHARED VALUES &gt;Karnofsky_vs_&gt;CategoryA NO SHARED VALUES &gt;Overall_Survival_vs_&gt;CategoryA PT 126 </code></pre>
<pre><code>my @File1; my %hash; while (my $line = &lt;FILE1&gt;) { chomp $line; if ( $line =~ s/^&gt;// ) { push @File1, $line; } else { push @{ $hash{$File1[-1]} }, $line; } } use Data::Dumper; print Dumper \@File1; print Dumper \%hash; </code></pre>
<p>AoA:</p> <pre><code>my @data; my @names; my $i = -1; while ( my $line = &lt;FILE1&gt;) { chomp $line; if ( $line =~ /^&gt;/ ) { $i++; push @names, $line; } if ( $line !~ /^&gt;/ ) { push @{$data[ $i ]}, $line; } } </code></pre>