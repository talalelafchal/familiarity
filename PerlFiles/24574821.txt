Domain name to IPv6 address in Perl
<p>I have the following Perl code to translate domain name to IP address. It works fine in IPv4.</p> <pre><code>$host = "example.com"; $ip_address = join('.', unpack('C4',(gethostbyname($host))[4])); </code></pre> <p>However, it does not work if it is an IPv6 only domain name such as "ipv6.google.com".</p> <p>How can I get one line of code (prefer CORE library) to get IPv6 IP address?</p> <pre><code>$host = "ipv6.google.com"; $ip_address = ??? </code></pre>
<p><a href="https://metacpan.org/pod/Net%3a%3aDNS" rel="nofollow"><code>Net::DNS</code></a> can also help you:</p> <pre><code>#!/usr/bin/perl -w use strict; use warnings; use Net::DNS; my $res = Net::DNS::Resolver-&gt;new; my $query = $res-&gt;query("ipv6.google.com", "AAAA") or die "query failed: ", $res-&gt;errorstring; foreach my $rr (grep { $_-&gt;type eq 'AAAA' } $query-&gt;answer) { print $rr-&gt;address, "\n"; } </code></pre> <p>Outputs:</p> <pre><code>2607:f8b0:4010:801:0:0:0:1005 </code></pre>
<p>In 5.14 and above, you can use the core <a href="http://perldoc.perl.org/Socket.html" rel="nofollow"><code>Socket</code></a>:</p> <pre><code>use 5.014; use warnings; use Socket (); # protocol and family are optional and restrict the addresses returned my ( $err, @addrs ) = Socket::getaddrinfo( $ARGV[0], 0, { 'protocol' =&gt; Socket::IPPROTO_TCP, 'family' =&gt; Socket::AF_INET6 } ); die $err if $err; for my $addr (@addrs) { my ( $err, $host ) = Socket::getnameinfo( $addr-&gt;{addr}, Socket::NI_NUMERICHOST ); if ($err) { warn $err; next } say $host; } </code></pre> <p>For earlier perls, the same functions are available from <a href="https://metacpan.org/pod/Socket%3a%3aGetAddrInfo" rel="nofollow"><code>Socket::GetAddrInfo</code></a> on CPAN.</p>