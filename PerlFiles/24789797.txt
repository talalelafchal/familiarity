Perl array of hash structures
<p>This is a design setup question. I know in Perl there are not array of arrays. I am looking at reading in code that pulls in data from large text files at phases of something in flight. Each of these phases track different variables (and different numbers of them) . I have to store them because in the second part of the script i am rewriting them into another file I am updating as I read in.</p> <p>I thought first I should have an array of hash's, however the variables are not the same at each phase. Then I thought maybe and array with the name of several arrays (array of references I guess) . </p> <p>Data example would be similar to </p> <pre><code>phase 100.00 mass 0.9900720175260495E+005 phase 240.00 gcrad 61442116.0 long 0.963710076E+003 gdalt 0.575477727E+002 vell 0.9862937759999998E+002 </code></pre> <p>Data is made up but you should get the idea and there would be many phases and the variable would likely range from 1 to 25 variables in each phase</p>
<p>I use the following mnemonic when defining arrays, array references and hash references:</p> <p>Use parentheses for lists -- lists can be assigned to either arrays or hashes:</p> <pre><code>my %person = ( given_name =&gt; 'Zaphod', surname =&gt; 'Beeblebrox' ); </code></pre> <p>or</p> <pre><code>my @rainbow = ( 'red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet' ); </code></pre> <p>Because the lists are assigned to list types -- array and hash, there is no semantic ambiguity. When you deal with array references or hash references, however, the delimiter must distinguish between the types of reference, because the <code>$</code> sigil for scalar variables can't be used to distinguish between the two types of reference. Therefore, <code>[]</code> is used to denote array references, just as <code>[]</code> is used to dereference arrays, and <code>{}</code> is used to denote hash references, just as <code>{}</code> is used to dereference hashes.</p> <p>So an array of arrayrefs looks like this:</p> <pre><code>my @AoA = ( [1,2,3], [4,5,6], [7,8,9] ); </code></pre> <p>An array of hashrefs:</p> <pre><code>my @AoH = ( { given_name =&gt; 'Ford', surname =&gt; 'Prefect' }, { given_name =&gt; 'Arthur', surname =&gt; 'Dent' } ); </code></pre> <p>A hashref assigned to a scalar variable:</p> <pre><code>my $bones = { head =&gt; 'skull', jaw =&gt; 'mandible', 'great toe' =&gt; 'distal phalanx' }; </code></pre>
<p>You can use Arrays of Arrays in Perl. You can find documentation on Perl data structures including Arrays of Arrays here: <a href="http://perldoc.perl.org/perldsc.html" rel="nofollow">http://perldoc.perl.org/perldsc.html</a>. That said, looking at the sample you've provided it looks like what you need is an Array of Hashes. Perhaps something like this:</p> <pre><code>my @data = ( { phase =&gt; 100.00, mass =&gt; 0.9900720175260495e005 }, { phase =&gt; 240.00 gcrad =&gt; 61442116.0 long =&gt; 0.963710076e003 gdalt =&gt; 0.575477727e002 vell =&gt; 0.9862937759999998e002 } ); </code></pre> <p>to access the data you would use:</p> <pre><code>$data[0]-&gt;{phase} # =&gt; 100.00 </code></pre> <p>You could also use a Hash of Hashes like this:</p> <pre><code>my %data = ( name1 =&gt; { phase =&gt; 100.00, mass =&gt; 0.9900720175260495e005 }, name2 =&gt; { phase =&gt; 240.00 gcrad =&gt; 61442116.0 long =&gt; 0.963710076e003 gdalt =&gt; 0.575477727e002 vell =&gt; 0.9862937759999998e002 } ); </code></pre> <p>to access the data you would use:</p> <pre><code>$data{name1}-&gt;{phase} # =&gt; 100.00 </code></pre> <p>A great resource for learning how to implement advanced data structures and algorithms in Perl is the book, <em><a href="http://rads.stackoverflow.com/amzn/click/1565923987" rel="nofollow">Mastering Algorithms in Perl</a></em></p>