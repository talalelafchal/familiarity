Regular expression to check if IP is found on 2 ranges
<p>Is it possible to write a regular expression as one expression to check if an IP is found on 2 ranges?</p> <p>I can do this in 2 steps:</p> <pre><code>if ($ip =~ /$range1/ and $ip =~ /$range2/ ) { print "intersection" } </code></pre> <p>but I wonder if it's possible to do this in one regex:</p> <pre><code>if ($ip =~ /$my_regex/ ) { print "intersection"; } </code></pre>
<p>Below is a solution in Perl.</p> <p>Why not use <code>NetAddr::IP</code> and let it handle the thing? For example</p> <pre><code>#!/usr/bin/perl use strict; use warnings; use NetAddr::IP; my @addresses = ( new NetAddr::IP '216.239.32.0/255.255.32.0', new NetAddr::IP '64.157.227.255/255.255.252.0' ); my $banned = 0; my $visitor_address = NetAddr::IP-&gt;new($visitor_ip); foreach my $banned_address (@addresses) { if ($visitor_address-&gt;within $banned_address) { $banned = 1; last; } } </code></pre> <p>Read the documentation and available methods at: <a href="https://metacpan.org/pod/NetAddr%3a%3aIP" rel="nofollow">https://metacpan.org/pod/NetAddr::IP</a></p>
<p>Yes, it is possible to join two independent subexpressions into a single regex using lookahead assertions:</p> <pre><code>if ($ip =~ /^(?=.*$range1)(?=.*$range2)/s ) { print "intersection" } </code></pre> <p>However, if you really are dealing with IP addresses, you should use a module like <a href="https://metacpan.org/pod/NetAddr%3a%3aIP" rel="nofollow"><code>NetAddr::IP</code></a>.</p>
<p>You can use the Module <a href="http://p3rl.org/NetAddr%3a%3aIP"><code>NetAddr::IP</code></a>:</p> <pre><code>use strict; use warnings; use NetAddr::IP; my @addresses = ( NetAddr::IP-&gt;new('192.168.172.1/255.255.0.0'), NetAddr::IP-&gt;new('10.1.0.0/255.0.0.0'), ); my $address_to_check = NetAddr::IP-&gt;new($IP_TO_CHECK); foreach my $address_in_list (@addresses) { if ($address_to_check-&gt;within $address_in_list) { # do something } } </code></pre>