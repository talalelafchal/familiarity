What happened in autoincrement function in Perl?
<p>I've got a question in Perl studying.</p> <pre><code>$a = "Z9"; print ++$a; </code></pre> <p>It prints out <code>AA0</code>. This can easily understood that 9 increased by 1 gets 10 and Z increased 1 gets AA. Just like 99+1. But what happened if I flipped over Z and 9:</p> <pre><code>$a = "9Z"; print ++$a; </code></pre> <p>This will get <code>10</code>. Why the letter Z is gone? Where did it gone?</p> <p>Regards, Neil</p>
<p><code>"9Z"</code> is interpreted like a number, and therefore the non-numeric ending gets truncated before the autoincrement. The same would be true of <code>"9 the rest of this string is ignored"</code>.</p> <p>This is similar to the way that <code>print "2foo" + "2bar";</code> will output <code>4</code>.</p> <p>The string magic that you observe with <code>"Z9"</code> is documented in <a href="http://perldoc.perl.org/perlop.html#Auto-increment-and-Auto-decrement" rel="nofollow">perlop #Auto-increment and Auto-decrement</a></p> <blockquote> <p>The auto-increment operator has a little extra builtin magic to it. If you increment a variable that is numeric, or that has ever been used in a numeric context, you get a normal increment. If, however, the variable has been used in only string contexts since it was set, and has a value that is not the empty string and matches the pattern <code>/^[a-zA-Z]*[0-9]*\z/</code> , the increment is done as a string, preserving each character within its range, with carry:</p> <ol> <li><code>print ++($foo = "99"); # prints "100"</code></li> <li><code>print ++($foo = "a0"); # prints "a1"</code></li> <li><code>print ++($foo = "Az"); # prints "Ba"</code></li> <li><code>print ++($foo = "zz"); # prints "aaa"</code></li> </ol> </blockquote>