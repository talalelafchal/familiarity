Perl - Printing elements within a hash structure
<p>I am having an issue I am hoping someone is able to help with...</p> <p>I have a huge, huge, huge data structure, exactly in the format as shown below from Data::Dumper (though greatly simplified for the purposes of explaining the problem).</p> <pre><code>{ Fred =&gt; { "Street Name" =&gt; ["First Avenue"], "animal" =&gt; ["lion", "snake", "spider", "monkey"], }, Dave =&gt; { "Street Name" =&gt; ["Church Street"], "animal" =&gt; ["dog", "cat", "pig", "elephant"], }, } </code></pre> <p>I am having real issues trying to access the data from further down this hash structure, something that I have done multiple times previously, but it is not working in this instance from some reason. </p> <p>What is the correct method to access each of the elements in this hash structure and print each level of the structure? e.g.</p> <pre><code> foreach my $key ( keys %hashStructure ) { print "$key"; foreach my $key2 ... </code></pre> <p>Your help with this is much appreciated, thanks</p>
<p>You just have to think about what the data at each level is. It might be worthwhile to encapsulate this data which appears to be about a person using a Person class, this would greatly simplify your code to print out these values. </p> <pre><code>#!/usr/bin/perl use strict; use warnings; my %hash = ( 'Fred' =&gt; { 'Street Name' =&gt; ['First Avenue'], 'animal' =&gt; ['lion','snake','spider','monkey',] }, 'Dave' =&gt; { 'Street Name' =&gt; ['Church Street'], 'animal' =&gt; ['dog','cat','pig','elephant',] } ); foreach my $namekey ( keys %hash ) { print "Name: $namekey\n"; foreach my $key ( keys %{$hash{$namekey}} ) { print "$key: " . join(',', @{$hash{$namekey}{$key}}) . "\n"; } } __END__ # outputName: Dave animal: dog,cat,pig,elephant Street Name: Church Street Name: Fred Street Name: First Avenue animal: lion,snake,spider,monkey </code></pre> <p>Person example:</p> <pre><code>package Person; sub new { my ($class, %args) = @_; bless \%args, $class; } sub name { my $self = shift; return $self-&gt;{name}; } sub street_name { my $self = shift; return $self-&gt;{'Street Name'}; } sub animal { my $self = shift; return $self-&gt;{animal}; } sub as_string { my $self = shift; return join("\n", $self-&gt;name, join(',', @{$self-&gt;street_name}), join(',', @{$self-&gt;animal}) ); } 1; my $fred = Person-&gt;new( name =&gt; 'Fred', 'Street Name' =&gt; ['First Avenue'], animal =&gt; ['lion','snake','spider','monkey',] ); print $fred-&gt;as_string . "\n"; __END__ # output Fred First Avenue lion,snake,spider,monkey </code></pre>
<p>Here's your structure:</p> <pre><code>{ Fred =&gt; { "Street Name" =&gt; ["First Avenue"], "animal" =&gt; ["lion", "snake", "spider", "monkey"], }, Dave =&gt; { "Street Name" =&gt; ["Church Street"], "animal" =&gt; ["dog", "cat", "pig", "elephant"], }, } </code></pre> <p>Let's take this apart one level at a time. There's three levels here:</p> <p>The outer level represents a hash I'll call <code>%person_hash</code>. Your hash has two keys in it: <code>Fred</code> and <code>Dave</code>. Each of the values of the these two hashes point (reference) other hashes. That is <code>$person_hash{Dave}</code> is a <em>hash reference</em> and <code>$person_hash{Fred}</code> is a <em>hash reference</em>.</p> <p>To turn those two hash references into hashes, I use the dereferencing syntax:</p> <pre><code>%attribute_hash = %{ $person_hash{Dave} }; </code></pre> <p>Now, we have a hash called <code>%attribute_hash</code>. This <code>%attribute_hash</code> contains attributes for Fred and Dave. In your example, there are two elements in each of these <code>%attribute_hash</code> hashes (Remember: There's one for Dave and one for Fred). The two keyed elements in these <code>%attribute_hash</code> hashes contain "Street Address" and "animal".</p> <p>To access the lists, I can use the dereferencing syntax: <code>@values = @{ $attribute_hash{$attribute} }</code>.</p> <p>So, let's look at how we can print all of this out:</p> <pre><code>use strict; use warnings; use feature qw(say); my %person_hash = ( Fred =&gt; { "Street Name" =&gt; [ "First Avenue" ], animal =&gt; [ "lion", "snake", "spider", "monkey" ], }, Dave =&gt; { "Street name" =&gt; [ "Church Street" ], animal =&gt; [ "dog", "cat", "pig", "elephant" ], }, ); # The first level contains the keys `Dave` and `Fred` for my $person ( keys %person_hash ) { say "The person is $person"; # The keys will be for "Dave" and "Fred", and will be the value # of $person. This is a hash reference, so let's dereference it. my %attribute_hash = %{ $person_hash{$person} }; # We have a hash of attributes beloning to that person. The # attributes will be "Street Name" and "animal" for my $attribute ( keys %attribute_hash ) { say " ${person}'s attribute is '$attribute'"; # Each "attribute" points to a list. Let's get the list my @value_list = @{ $attribute_hash{$attribute} }; # Now we can go through that list: for my $value ( @value_list ) { say " ${person}'s attribute '$attribute' has a value of $value"; } } } </code></pre> <p>This prints out:</p> <pre><code>The person is Dave Dave's attribute is 'Street name' Dave's attribute 'Street name' has a value of Church Street Dave's attribute is 'animal' Dave's attribute 'animal' has a value of dog Dave's attribute 'animal' has a value of cat Dave's attribute 'animal' has a value of pig Dave's attribute 'animal' has a value of elephant The person is Fred Fred's attribute is 'Street Name' Fred's attribute 'Street Name' has a value of First Avenue Fred's attribute is 'animal' Fred's attribute 'animal' has a value of lion Fred's attribute 'animal' has a value of snake Fred's attribute 'animal' has a value of spider Fred's attribute 'animal' has a value of monkey </code></pre> <p>You should also know that I can access the values directly inside these by using the <code>-&gt;</code> syntax:</p> <pre><code>say "Fred's first animal in his list is " . $person_hash{Fred}-&gt;{animal}-&gt;[0]; </code></pre> <p>I can also use that syntax when I dereference:</p> <pre><code>say "Fred's animals are " . join ", ", @{ $person_hash-&gt;{Fred}-&gt;{animal} }; </code></pre> <p>Note that <code>$person_hash-&gt;{Fred}-&gt;{animal}</code> is a <em>reference</em> to the array that contains the animals.</p>