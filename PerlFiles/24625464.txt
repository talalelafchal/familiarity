Perl Regex Extract first two section of windows path
<p>I want to write a method to extract first two sections of windows path in Perl.</p> <p>For example, 'D:\git_root_tfs\WorkStation\Projects\InterACT\Tools\server-rule-checker'</p> <p>Extract as: 'D:\git_root_tfs\WorkStation'</p> <pre><code>sub Split_Location_as_VMPath { my $location = shift; # ^([d-z]:\\.+?\\.+?)\\ # ^(?:\\.*\\.*)\\ if($location ~~ m/^(?:\\.*\\.*)\\/){ # the path drive start from D to E; # print "VMPath=$1\n"; # push @$vmPathList, $1; return Convert_to_Lowercase($1); } return "Invalid Path $location"; } </code></pre> <p>How to write the regex?</p> <p>Test case:</p> <pre><code>{ my $item = Split_Location_as_VMPath('D:\VM\ia7-BGCDev8.1\test.vhd'); my $expected = Convert_to_Lowercase('D:\VM\ia7-BGCDev8.1'); ok( $item eq $expected, "Test Split_Location_as_VMPath=$item"); $item = Split_Location_as_VMPath('E:\Hyper-V-2\ia-int-7.1Beta\test.vhd'); $expected = Convert_to_Lowercase('E:\Hyper-V-2\ia-int-7.1Beta'); ok( $item eq $expected, "Test Split_Location_as_VMPath=$item"); $item = Split_Location_as_VMPath('D:\VM\ia7-int-7.1\test.vhd'); $expected = Convert_to_Lowercase('D:\VM\ia7-int-7.1'); ok( $item eq $expected, "Test Split_Location_as_VMPath=$item"); $item = Split_Location_as_VMPath('D:\VM\ia7-int-8.1B153\test.vhd'); $expected = Convert_to_Lowercase('D:\VM\ia7-int-8.1B153'); ok( $item eq $expected, "Test Split_Location_as_VMPath=$item"); $item = Split_Location_as_VMPath('D:\Hyper-v\IA5-SDE-WIN2K3(Feng Tong)\test.vhd'); $expected = Convert_to_Lowercase('D:\Hyper-v\IA5-SDE-WIN2K3(Feng Tong)'); ok( $item eq $expected, "Test Split_Location_as_VMPath=$item"); $item = Split_Location_as_VMPath('D:\git_root_tfs\WorkStation\Projects\InterACT\Tools\server-rule-checker'); $expected = Convert_to_Lowercase('D:\git_root_tfs\WorkStation'); ok( $item eq $expected, "Test Split_Location_as_VMPath=$item"); } </code></pre>
<p>Correct regex is ^([d-z]:\.+?\.+?)\.</p> <pre><code>sub Split_Location_as_VMPath { my $location = shift; # ^([d-z]:\\.+?\\.+?)\\ # ^(?:\\.*\\.*)\\ if($location ~~ m/^([D-Z]:\\.+?\\.+?)\\/){ # the path drive start from D to E; # print "VMPath=$1\n"; # push @$vmPathList, $1; return Convert_to_Lowercase($1); } return "Invalid Path $location"; } </code></pre>
<p>Don't use a regex for file processing.</p> <p>Instead use a module like <a href="http://perldoc.perl.org/File/Spec.html" rel="nofollow"><code>File::Spec</code></a> or <a href="https://metacpan.org/pod/Path%3a%3aTiny" rel="nofollow"><code>Path::Tiny</code></a>.</p> <pre><code>use strict; use warnings; use File::Spec; while (&lt;DATA&gt;) { my ($vol, $dir, $file) = File::Spec-&gt;splitpath($_); my @dirs = File::Spec-&gt;splitdir($dir); @dirs = @dirs[0..2] if @dirs &gt; 3; $dir = File::Spec-&gt;catdir(@dirs); my $path = File::Spec-&gt;catpath($vol, $dir); print "$path\n"; } __DATA__ D:\VM\ia7-BGCDev8.1\test.vhd E:\Hyper-V-2\ia-int-7.1Beta\test.vhd D:\VM\ia7-int-7.1\test.vhd D:\VM\ia7-int-8.1B153\test.vhd D:\Hyper-v\IA5-SDE-WIN2K3(Feng Tong)\test.vhd D:\git_root_tfs\WorkStation\Projects\InterACT\Tools\server-rule-checker </code></pre> <p>Outputs:</p> <pre><code>D:\VM\ia7-BGCDev8.1 E:\Hyper-V-2\ia-int-7.1Beta D:\VM\ia7-int-7.1 D:\VM\ia7-int-8.1B153 D:\Hyper-v\IA5-SDE-WIN2K3(Feng Tong) D:\git_root_tfs\WorkStation </code></pre>
<p>Using regex in this context is an interesting homework for students. Outside school, you should use the standard modules dedicated for this task:</p> <pre><code>use File::Spec; sub Split_Location_as_VMPath { my $location = shift; my ($volume, $directories, $file) = File::Spec-&gt;splitpath($location); my @dirs = File::Spec-&gt;splitdir($directories); return "Invalid Path $location" unless @dirs &gt; 2; return lc File::Spec-&gt;catpath($volume, File::Spec-&gt;catdir(@dirs[0..2])); } </code></pre>