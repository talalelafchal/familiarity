Why Perl can match two places with '/$/g'?
<p>I wrote a sample code like this:</p> <pre><code>$var="123\n123\n\n\n\n\n1\n"; $var=~s/$/___/g; print $var; </code></pre> <p>it output this:</p> <pre><code>123 123 1___ ___ </code></pre> <p>Why '/$/g' can match two places? I think it matched one is the last "\n" and the other is end of string. But I think it should only match the last line.</p>
<p><code>g</code> is a global modifier, that's why you're seeing replacement in all the places that <code>$</code> would match. If you don't use <code>g</code> then only first match will be replaced. So without g output will be:</p> <pre><code>123 123 1___ </code></pre> <p>Also see: <a href="http://stackoverflow.com/questions/14940938/and-perls-global-regex-modifier">$ and perl&#39;s global regex modifier</a></p>
<p>Be careful of zero width regular expressions. They often will not behave entirely the way that you expect.</p> <p>In this case, the <code>$</code> boundary can actually match both directly before the last newline and directly after. This is part of the spec of the <code>$</code>. </p> <p>Therefore, your fix is to use the string end code <code>\z</code> instead of <code>$</code>:</p> <pre><code>$var = "abc\n"; $var =~ s/\z/&lt;foo&gt;/g; print "'$var'"; </code></pre> <p>Outputs:</p> <pre><code>'abc &lt;foo&gt;' </code></pre>