Perl - How to handle huge files for searching similar words
<p>I'm working with huge files. I would like to know, in your opinion, what is the best way to handle huge files when you would like to know if the word "x" in $file1, is present in the sentence "y" in file2. My files have more than 20000 lines..</p> <p>Example:</p> <p>This is the content of the first file : </p> <pre><code>eat take breath you alpha </code></pre> <p>This is the content of the second file :</p> <pre><code>eat,hungry love,lovers me,mine take,taken,give you,u,yo fun,funny </code></pre> <p>This is the content that I might expect for the third file </p> <pre><code>eat : eat,hungry take : take,taken,give you : you,u,yo </code></pre> <p>So as you can see, I would like to find the matching expression in the second file of the word of the first file.</p> <p>My solutions - but the loop never ends -</p> <p>solution1:</p> <pre><code>$file1= "words.txt"; $file2 = "expressions.txt"; $out = "out.txt"; open (W, "&lt;", $file1); open (E, "&lt;", $file2); open (OUT, "&gt;", $out); while(defined($l = &lt;W&gt;)){ @a = split (/\n/, $l); push @w, @a; } while(defined($l2 = &lt;E&gt;)){ for ($i = 0; $i &lt; @w; $i++){ if (grep /\Q\b$w[$i]\b\E/, $l2){ #or just /\b$w[$i]\b/ print OUT "$w[$i] : $l2\n"; } } } </code></pre> <p>solution2:</p> <pre><code>$file1= "words.txt"; $file2 = "expressions.txt"; $out = "out.txt"; open (W, "&lt;", $file1); open (E, "&lt;", $file2); open (OUT, "&gt;", $out); while(defined($l = &lt;W&gt;)){ @a = split (/\n/, $l); push @w, @a; while(defined($l2 = &lt;E&gt;)){ @b = split (/\n/, $l2); push @e, @b; } for ($k = 0; $k &lt; @e; $k++){ for ($i = 0; $i &lt; @w; $i++){ if (grep /\b$w[$i]\b/, $e[$k]){ print OUT "$w[$i] : $w[$l]\n"; } } } </code></pre>
<p>How about process the expression file first to make a dictionary map every word to a sentence, then find if the word in words.txt is in the dictionary? I guess this may be faster. Source code is as below:</p> <pre><code>#! /opt/VRTSperl/bin/perl $words = "words.txt"; $expressions = "expressions.txt"; $out = "out.txt"; open (E, "&lt;", $expressions); open (W, "&lt;", $words); open (OUT, "&gt;", $out); my %dic; while (my $sentence = &lt;E&gt;) { chomp($sentence); my @words = split(/,/, $sentence); foreach my $word (@words) { $dic{$word} .= "$sentence"; } } while (my $word = &lt;W&gt;) { chomp($word); if ($dic{$word}) { print OUT "$word : $dic{$word}\n" } } </code></pre>
<pre><code>#!/usr/local/bin/perl use strict; use warnings; open (my $fh, "&lt;", "f1.txt") or die $!; open (my $fh2, "&lt;", "f2.txt") or die $!; my @keys; while(chomp(my $line = &lt;$fh&gt;)){ push @keys, $line; } while(chomp(my $line2 = &lt;$fh2&gt;)){ foreach (@keys){ if ($line2 =~ $_){ print "$_ : $line2\n"; } } } </code></pre> <p>Output</p> <pre><code>eat : eat,hungry take : take,taken,give you : you,u,yo </code></pre>
<p>You're trying to match literal <code>\b</code> instead of word boundary, so</p> <pre><code>/\Q\b$w[$i]\b\E/ </code></pre> <p>should actually be</p> <pre><code>/\b\Q$w[$i]\E\b/ </code></pre>