Using a function to retrieve values from an object or hash
<p>How can I break down the values and return them separately so I can access them separately?</p> <p>I have a forum system with a database that keeps track of all posts in a thread. I have a sub called <code>notice_value</code>:</p> <pre><code>sub notice_value { my ($self,$prefid,$value,$others_post,$clients_post,$assigned_tasks) = @_; $self-&gt;{PREFS}-&gt;{$prefid} = { VALUE =&gt; $value, OTHERS_POST =&gt; $others_post, CLIENTS_POST =&gt; $clients_post, ASSIGNED_TASKS =&gt; $assigned_tasks }; return $self-&gt;{PREFS}-&gt;{$prefid}; } </code></pre> <p><strong>EDIT- original notice_value</strong></p> <pre><code>sub notice_value { my $self = shift; my $prefid = shift; $self-&gt;{PREFS}-&gt;{$prefid} = shift if(@_); return $self-&gt;{PREFS}-&gt;{$prefid}; } </code></pre> <p><strong>-------------------------------------------------------------</strong></p> <p>Which retrieves the user's preferences, one of which is the markup type <code>VALUE</code>. When I call on the markup type I use <code>$self-&gt;markup</code> it calls on this - <code>sub markup_type</code> which is a method in <code>Taskman::Post</code>:</p> <pre><code>sub markup_type { my $self = shift; $self-&gt;{MARKUP_TYPE} = shift if(@_); $self-&gt;{MARKUP_TYPE}; } </code></pre> <p>My problem is that I only want to retrieve the <code>VALUE</code> from notice_value but instead it returns the whole thing like so -- When I dumped <code>$self</code> I got:</p> <pre><code>$VAR1 = bless( { 'POST_TYPE_ID' =&gt; 1, 'MINUTES' =&gt; '0', 'DEADLINE' =&gt; '2014-05-19 18:04:00', 'ESTIMATE' =&gt; 300, 'COMMENT' =&gt; 'sd', 'POSTER' =&gt; 1286, 'STATE_ID' =&gt; 14, 'CONTRACTID' =&gt; 546, 'PRIORITY' =&gt; '3', 'MARKUP_TYPE' =&gt; { 'VALUE' =&gt; 1, 'OTHERS_POST' =&gt; 1, 'CLIENTS_POST' =&gt; 1, 'ASSIGNED_TASKS' =&gt; 1 }, 'TID' =&gt; 23133, 'OWNER' =&gt; '1286' }, 'Taskman::Post' ); </code></pre> <p>I want to be able to access the other values(<code>OTHERS_POST</code>,<code>CLIENTS_POST</code>,<code>ASSIGNED_TASKS</code>) separately as well for other functions.</p> <p>I'm kind of new to Perl and am a little confused on how to break up the <code>notice_value</code> sub so that I can retrieve what I want from it more efficiently and correctly. If you can show an example too that would be great.</p> <p><strong>EDIT</strong></p> <p>this is the sub that calls on the <code>notice_value</code>:</p> <pre><code>sub __populate { my $self = shift; my $sth = $self-&gt;{dbh}-&gt;prepare("select prefid, value, others_post, clients_post, assigned_tasks from user_preferences where userid=?"); $sth-&gt;execute($self-&gt;userid); while(my $href = $sth-&gt;fetchrow_hashref()) { $self-&gt;notice_value($href-&gt;{PREFID}, $href-&gt;{VALUE}, $href-&gt;{OTHERS_POST}, $href-&gt;{CLIENTS_POST}, $href-&gt;{ASSIGNED_TASKS}); } $sth-&gt;finish(); } </code></pre> <p>the original <code>__populate</code> only had:</p> <pre><code>$self-&gt;notice_value($href-&gt;{PREFID}, $href-&gt;{VALUE}); </code></pre>
<p>It looks to me like you want <code>$thing-&gt;notice_value(@all_those_arguments)-&gt;{VALUE}</code>.</p> <p>This is because the return value is </p> <pre><code>{ VALUE =&gt; $value, OTHERS_POST =&gt; $others_post, CLIENTS_POST =&gt; $clients_post, ASSIGNED_TASKS =&gt; $assigned_tasks } </code></pre> <p>and <code>$thing-&gt;notice_value(@all_those_arguments)</code> returns just this value. Will that work for you?</p>
<p><strong>TL;DR</strong> broad guess/conclusion to a broad question: fix the return value of <code>notice_value</code> or the fix the way that value is used in other functions.</p> <p>This question is very general and does not offer much sample code: in fact it can't post sample code almost by definition due to the wide scope of the question. It might be better to post the question as one focused on general debugging strategies (though I am not sure how well accepted those kinds of queries are on SO) or - once you have narrowed down your problem - post more specific questions about techniques for fixing what is going wrong.</p> <p>And a number of things could be going wrong: shouldn't the return value of your <code>notice_value</code> subroutine be something like <code>return $self-&gt;{PREFS}-&gt;{$prefid}-&gt;{VALUE};</code>? <em>i.e.</em> if - guessing from the name - the subroutine is supposed to "notice" the "value" of the hash/object's <code>MARKUP</code> key anonymous hash key called <code>VALUE</code> (<em>i.e.</em> it is a "getter" method/function that does nothing but access values). The way it gets those values (defreferencing, accessing database etc.) is left as a implementation detail for the function. If dereferencing a data structure full of preferences is not working, and your expected behaviour changes when you change the function that access your preferences, then you are right on the right track to focus there :) </p> <p>If I create a function as follows and pass it an array (leaving out the object you pass in, so I'm leaving out the <code>$self</code>):</p> <pre><code>sub notice_value{ my ($prefid,$value,$others_post,$clients_post,$assigned_tasks) = @_; $_-&gt;{PREFS}-&gt;{$prefid} = { VALUE =&gt; $value, OTHERS_POST =&gt; $others_post, CLIENTS_POST =&gt; $clients_post, ASSIGNED_TASKS =&gt; $assigned_tasks }; return $_-&gt;{PREFS}-&gt;{$prefid}; } </code></pre> <p>Now some preference and data gunk:</p> <pre><code>my @pref_and_data_goo = qw( 21323 42 213 214 2 ); </code></pre> <p>Now let's see what the function does with that it creates a <code>PREFS</code> hash key and gives it an an anonymous hash as its value:</p> <pre><code>notice_value(@pref_and_data_goo) $HASH1 = { ASSIGNED_TASKS =&gt; 2, CLIENTS_POST =&gt; 214, OTHERS_POST =&gt; 213, VALUE =&gt; 42 }; </code></pre> <p>What about the value of the <code>VALUE</code> key (I'm easily confused by the naming scheme here) or other keys in <code>PREFS</code> key's anonymous hash:</p> <pre><code> notice_value(@pre_and_data_goo)-&gt;{VALUE} 42 notice_value(@pre_and_data_goo)-&gt;{ASSIGNED_TASKS} 214 </code></pre> <p>If you want wrap up <code>notice_value</code> so it only returns the value of the <code>VALUE</code> key you need to tell the code of that function how to get at that nested anonymous hash key.</p> <hr> <p>Now to pass a hash/object to your other function <code>markup_type</code> with a quick cut and paste to the <code>re.pl</code> (thus the odd markup <em>e.g.</em> <code>re.pl$</code> and <code>&gt;</code>):</p> <pre><code> re.pl$ my $whacky_hash = { &gt; 'POST_TYPE_ID' =&gt; 1, &gt; 'MINUTES' =&gt; '0', &gt; 'DEADLINE' =&gt; '2014-05-19 18:04:00', &gt; 'ESTIMATE' =&gt; 300, &gt; 'COMMENT' =&gt; 'sd', &gt; 'POSTER' =&gt; 1286, &gt; 'STATE_ID' =&gt; 14, &gt; 'CONTRACTID' =&gt; 546, &gt; 'PRIORITY' =&gt; '3', &gt; 'MARKUP_TYPE' =&gt; { &gt; 'VALUE' =&gt; 42, &gt; 'OTHERS_POST' =&gt; 1, &gt; 'CLIENTS_POST' =&gt; 1, &gt; 'ASSIGNED_TASKS' =&gt; 1 &gt; }, &gt; 'TID' =&gt; 23133, &gt; 'OWNER' =&gt; '1286' &gt; } re.pl$ sub markup_type {my $self = shift; &gt; $self-&gt;{MARKUP_TYPE} = shift if(@_); &gt; $self-&gt;{MARKUP_TYPE}; } re.pl$ markup_type($whacky_hash) $HASH1 = { ASSIGNED_TASKS =&gt; 1, CLIENTS_POST =&gt; 1, OTHERS_POST =&gt; 1, VALUE =&gt; 1 }; re.pl$ sub markup_type2 {my $self = shift ; &gt; $self-&gt;{MARKUP_TYPE}-&gt;{VALUE}; } re.pl$ markup_type2($whacky_hash) 42 </code></pre> <p>Are you sure a change similar to this doesn't work? If you change your <code>markup_type</code> function to:</p> <pre><code>sub markup_type { my $self = shift ; $self-&gt;{MARKUP_TYPE}-&gt;{VALUE}; } </code></pre> <p>you should get the value you want returned from that function. If this breaks other code then track down where it is used and try to find the most suitable place to try changing things. Unfortunately there's not much we can do to help you directly. </p> <p>Your <code>notice_value</code> function takes a long set of assignments as an argument:</p> <pre><code>my ($self,$prefid,$value,$others_post,$clients_post,$assigned_tasks) = @_; </code></pre> <p>I tend not to like functions that have long list assignments since it can be hard to track values back to where they came from. Is <code>$value</code> supposed to be a hash reference or a code reference to the return value of <code>markup_type</code> or something else again? That is probably just me being easily confused since many people prefer list assignment style. Still though, this function takes a lot of arguments if all it is supposed to do is to <code>notice_value</code>? Are your trying If you check how <code>notice_value</code> gets and uses its arguments you'll be able to spot the source of the error more easily. Your <strong>EDIT</strong> addition still leaves me wondering: why <code>$href-&gt;{VALUE}</code> is used rather than <code>$href-&gt;{MARKUP_TYPE}-&gt;{VALUE}</code>.</p>
<p>I noticed that your dump has <code>Taskman::Post</code> on the end of the dump. This means that this is a <code>Taskman::Post</code> <em>object</em>, and thus should have <em>methods</em> that will pull out the various piece of data that it contains. There might be a <em>markup</em> method that will pull out the information in this object.</p> <p>The question is where did this object come from. Was this something you wrote? Is this a Perl module installed with your system. Was it written correctly, so that it includes <em>POD</em> documentation.</p> <p>Try the following command:</p> <pre><code>$ perldoc Taskman::Post </code></pre> <p>If this works, it will pull up information on how to access the data contained in this <code>Taskman::Post</code> object that you've retrieved.</p> <p>If nothing comes up, then try this command:</p> <pre><code>$ perldoc -l Taskman::Post </code></pre> <p>This will tell you if the Taskman::Post <em>module</em> is installed and where it exists on your system. You may have to look at this source to finagle the various <em>methods</em> it contains. These methods will be subroutines inside this module. Subroutines that start with an underscore are considered <em>private</em> and you shouldn't use them directly.</p> <p>If this doesn't work, you'll need to find where this class is defined. Sometimes, people define non-module classes for use in a single program. For example, I write a program to track my employees. I create an Employee class, but instead of installing in as a separate Perl module, I simply append it to my Perl program. Look for:</p> <pre><code>package Taskman::Post </code></pre> <p>in the code. If you find it, see if the code contains <em>POD</em> documentation. You'll see <code>=pod</code> or <code>=head1</code> throughout the document. If so, you can try:</p> <pre><code>$ perldoc program.pl </code></pre> <p>Where <code>program.pl</code> is your Perl program.</p> <p>Getting back to your <em>subroutine</em>, are you writing this as a class? I keep seeing <code>$self</code> all around. This usually means that you're working with an <em>object</em>, so the question is what type of <em>object</em> is <code>$self</code>. For example, what does:</p> <pre><code>print "The reference \$self " . ref( $self ) . "\n"; </code></pre> <p>print out?</p> <p>Again, you shouldn't be manipulating an <em>object</em> as if it's just a reference to a hash. In fact, some developers write what are called <a href="http://www.stonehenge.com/merlyn/UnixReview/col63.html" rel="nofollow">inside out</a> classes to prevent people from doing <code>Data::Dumper</code> and manipulating their classes without going through the correct methods.</p> <p>I found your post a bit confusing because it sounds like you're writing non-object oriented code, but your data looks object oriented.</p> <p>Are you writing object oriented code? Do you know how <a href="http://perldoc.perl.org/perlootut.html" rel="nofollow">Perl object oriented programming</a> works?</p> <p>If you're working with everything as objects. Try to get your methods straighten out. In your <code>markup_type</code> subroutine, what type of object is <code>$self</code>. Print out <code>ref $self</code> and see what type of object it is.</p> <p>This should help clarifying what you're working with, and should help you understand what you're actually pulling out.</p>