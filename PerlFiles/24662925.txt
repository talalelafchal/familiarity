How to pass input arguments and record outputs from Simulink Standalone executable which runs on Ubuntu
<p>I am trying to execute the standalone executable which is generated by building my Simulink model in Ubuntu terminal as follows:</p> <p><em>!./my_model</em></p> <p>I want to pass input arguments to this executable, which is present in form of .mat files as of now. There are 9 input ports which takes series of values and model has 10 output ports for which I need to log the output for each of the input combinations for testing the model.</p> <p>I have used grt.tlc for building and code generation which is for generic real-time target.</p> <p>Please let me know, how to pass the inputs to this executable and record the output on ubuntu terminal. The aim is to run this model in outside matlab environment.</p> <p>Thank you much.</p>
<p>You really want to be using the RSIM target, not the GRT target. The command line (i.e. Ubuntu terminal) options for running the model with different parameter files can be found by searching the doc, and clicking on the <em>Rapid Simulation</em> link, returned by the following MATLAB command,</p> <pre><code> &gt;&gt; docsearch('Scripts for Batch and Monte Carlo Simulations') </code></pre>
<p>I cannot comment on the specific processes you're using. The generic answer for 'talking' to a subprocess bidirectionally is 'use IPC::Open3;'. </p> <p>E.g.:</p> <pre><code>#!/usr/bin/perl use strict; use warnings; use IPC::Open3; my $pid = open3 ( my $input, my $output, my $errors, "/path/and/command" ); print {$input} "some command\n"; my $result = &lt;$output&gt;; #nb - single line at a time. close ( $input ); close ( $output ); close ( $errors ); waitpid ( $pid, 0 ); </code></pre> <p>You'll be able to sit in a loop and read/write (and catch errors). You will also have to be a little careful about quantity of data being output, because this works per line - and it'll block if you get the wrong number. (There's various ways to deal with that though). </p>