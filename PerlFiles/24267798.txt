Regex matches but capture group remains uninitialized
<p>I am new to perl and regex. I think I understand the idea and how to use regex, but I got stuck on a problem while writing a script. I have content from some page and I am trying to read some information. </p> <pre><code>my @rows = split(/&lt;tr(\s)bgcolor=.{8}/,$content); foreach my $row(@rows){ if( $row =~/&lt;td\s+nowrap\s+align=.*\s?(bgcolor=.*\s+)?&gt;\w*\s?&lt;\/td&gt;/ig){ print $1; print $file_opt $row."\n"; # there will be more code later on } } </code></pre> <p>This gives me an error that <code>$1</code> is uninitialized. I understand that happens when pattern does not match the string. But i have regex under if - so if it enters the if, it does match, rigth? As you can see, i printed rows to a file. Each one looks like this:</p> <pre><code>&lt;td nowrap align="right"&gt;DOLNOŚLĄSKIE&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;4&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;1&lt;/td&gt;&lt;td nowrap align="right"&gt;3&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;6&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;2&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;19&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;/tr&gt; </code></pre> <p>And all of unnecessary things from <code>$content</code> are not in a file. So does this pattern match or not?</p>
<p>Do not handcraft regex to parse html, yadda yadda, now to your actual question:</p> <p>"But i have regex under if - so if it enters the if, it does match, right?"</p> <p>In your regex you have a <code>?</code> quantifier behind your capture group. That means it can (and does on your example) match with finding your capture group either once or no times. If the best match for your regex happens to involve the capture group zero times, then nothing will be captured and <code>$1</code> remains empty. Get rid of that question mark to make sure your regex only matches when it did actually capture something.</p> <p>If used like that on your example it works and does capture something.</p> <p>While one might assume that it will always capture something if it can (as shown here when it does suddenly work without the quantifier) due to the quantifier being greedy, there are so many quantifiers in there, it is just another one that gets to be greedy first.</p>
<p>From the code in your post, it looks like you are trying to capture the <code>bgcolor</code> attribute for each table cell in a given row. Not all of the cells have a <code>bgcolor</code> set, but some of them do. Here's how you can extract that information using <a href="http://search.cpan.org/perldoc?HTML%3a%3aTreeBuilder" rel="nofollow">HTML::TreeBuilder</a>:</p> <pre><code>use HTML::TreeBuilder 5 -weak; my $html = q{&lt;td nowrap align="right"&gt;DOLNOŚLĄSKIE&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;4&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;1&lt;/td&gt;&lt;td nowrap align="right"&gt;3&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;6&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;2&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;19&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;/tr&gt;}; my $t = HTML::TreeBuilder-&gt;new_from_content($html); foreach my $col ( $t-&gt;look_down('_tag','tr')-&gt;content_list ) { print $col-&gt;attr('bgcolor'), "\n" if defined $col-&gt;attr('bgcolor'); } </code></pre> <p>I'm sure you need to retrieve more than that, but it's all we are able to determine given the vague description and incomplete code of your question.</p> <p>But the point is solid; don't parse HTML with regexes, parse HTML with an HTML parser. It's a slightly steeper learning curve at the beginning, but the result will be more robust, easier to maintain, and the skill you learn will be applicable to any HTML document, not just this particular one.</p> <p>HTML::TreeBuilder comes with some good documentation, but you've got to read a good portion of it to make sense of the whole thing.</p> <p>There's another HTML parsing module, <a href="http://search.cpan.org/perldoc?Mojo%3a%3aDOM" rel="nofollow">Mojo::Dom</a>, which comes with the <a href="http://mojolicio.us" rel="nofollow">Mojolicious</a> framework. Personally, I find it easier to use, but sometimes when I post examples people seem to jump to the conclusion that they have to load some heavy-weight web framework to use it (which isn't entirely true, but I'm tired of swimming up-stream. ;). You might want to have a look at it and see if it better fits your taste. Here's an example:</p> <pre><code>use Mojo::DOM; my $html = q{&lt;td nowrap align="right"&gt;DOLNOŚLĄSKIE&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;4&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;0&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;1&lt;/td&gt;&lt;td nowrap align="right"&gt;3&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;6&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;2&lt;/td&gt;&lt;td nowrap align="right"&gt;1&lt;/td&gt;&lt;td nowrap align="right" bgcolor=#D0E0D0 &gt;19&lt;/td&gt;&lt;td nowrap align="right"&gt;0&lt;/td&gt;&lt;/tr&gt;}; for my $td ( Mojo::DOM-&gt;new($html)-&gt;find('td[bgcolor]')-&gt;each ) { print $td-&gt;attr('bgcolor'), "\n"; } </code></pre> <p>Both of those code examples will produce the following output:</p> <pre><code>#D0E0D0 #D0E0D0 #D0E0D0 #D0E0D0 #D0E0D0 #D0E0D0 #D0E0D0 #D0E0D0 #D0E0D0 #D0E0D0 </code></pre> <p>...which probably isn't terribly useful, but is exactly what the code you posted seems to want to capture. At least it's a starting point that you should be able to adapt to your own needs.</p> <p>I believe the documentation for Mojo::DOM is more approachable, which might just make the difference, especially if you're new to Perl. My recommendation would be to start there, and build your solution around that module. In the longrun you'll be much better off than tearing your hair out using regexes to extract data from HTML.</p> <p>The Mojolicious distribution installs in under a minute on most systems, and includes the Mojo::DOM module, which on its own is quite light-weight. It's a good option.</p>