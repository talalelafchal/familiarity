string matching and Text::Match::FastAlternatives
<p>I need to find all occurrences of lots short strings among lots of long strings in Perl. Just like </p> <pre><code>my $count = () = $bigstr =~ /$smallstr/g </code></pre> <p>Since regexs take a lot of time, I went into string matching algorithms and found the Perl module <a href="https://metacpan.org/pod/Text::Match::FastAlternatives" rel="nofollow"><code>Text::Match::FastAlternatives</code></a>. On the documentation it only says this module can be used to find whether or not a string is found inside another one. But is there a way of counting all the occurrences with <code>Text::Match::FastAlternatives</code>? Really hope so. Thanks for your attention.</p>
<p>When you must reparse the regular expressions each time, yes that takes time. </p> <p>I would advise <a href="http://perldoc.perl.org/Benchmark.html" rel="nofollow"><code>Benchmarking</code></a> different solutions, but one way to speed things up is to cache all the strings you intend to match against in anonymous subroutines.</p> <p>Something like the following pseudo code:</p> <pre><code>use strict; use warnings; my @short_strings = (...); my @long_strings = (...); my @match_subs = map { my $code = "sub { return scalar(() = shift =~ /\Q$_\E/g }"; my $sub = eval $code; die "Unable to cache sub $code: $@" if $@; $sub } @short_strings; for my $data (@long_strings) { my $count; $count += $_-&gt;($data) for @match_subs; print $count; } </code></pre>