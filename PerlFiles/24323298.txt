can't find file after calling mkfile from cocoa
<p>i've built a cocoa app which uses NSTask in order to call a perl script (myScript.pl) I wrote. the script itself executes another script (copy.command). </p> <p>the copy.command script calles "mkfile", copy the file that was created (file is called 'test1') to a given location. at the end of the run i don't delete 'test1' (for various reasons).</p> <p>iv'e used these scripts countless times and it always worked. before i made my app (meaning when i used the terminal) - there were always two files at the end, both with the same name in different location.</p> <p>both scripts were added to my project. like i said i use NSTask. </p> <p>i know both scripts are being executed because i can still find 'test1' file after the script is done. but, and this is my problem, i can only find one 'test1' file after script has finished - the one that were copied to another folder. but the 'test1' file that was created by 'mkfile' is no where to be found.</p> <p>my questions:</p> <ol> <li><p>is the file gone? i know it is created cause i can find it's copy in the other folder. but i want to see the original as well. </p></li> <li><p>maybe i should make the file in a folder outside the .app folder? if u think that is the solution plz tell me how to pass to 'mkfile' an absolute path. </p></li> <li><p>I've thought about capturing the output to see if something is going wrong but i'm not sure how to do that</p></li> <li><p>a new solution came to me: maybe I should try and changeDir to a "system folder" of some sort in the bash script, call mkfile, copy, compare, and changeDir back. what say u?</p></li> </ol> <p>i use macbook air, osx 10.9.2, xcode 5.1</p> <p>thanks zook2005</p> <p>this is the copy command</p> <pre><code>#!/bin/bash if [[ ! -r "test1" ]] then mkfile -n 1g test1 fi cp -f test1 /Volumes/$1/test1 &amp;&gt; /dev/null E_UNREADABLE=86 if [[ ! -r "test1" || ! -r "/Volumes/$1/test1" ]] then #echo "Both files to be compared must exist and be readable." exit $E_UNREADABLE fi cmp test1 /Volumes/$1/test1 &amp;&gt; /dev/null OUT=$? if [ ! $OUT -eq 0 ]; then exit $OUT fi #rm test1 exit 0 </code></pre> <p>and the perl script:</p> <pre><code>#!/usr/bin/perl use strict; use warnings; use Cwd; use Cwd 'abs_path'; use File::Basename; use File::Spec::Mac; require Term::ANSIColor; use Term::ANSIColor; use threads; use Time::HiRes qw(gettimeofday); use Getopt::Long; sub result; sub copyfunction($); my $volumeName = " "; GetOptions ('f=s' =&gt; \$volumeName); sub main { my $dirname = dirname(__FILE__); chdir $dirname; my $thread = threads-&gt;new( sub { copyfunction($volumeName);}); $thread-&gt;join(); return 0; } exit(main()); sub copyfunction($) { my $volumeName = shift; system("chmod +x ./copy.command"); system( "./copy.command", $volumeName); if($? != 0) # 0 = files are identical { return(result(0, "volumeName" ,"failed to copy files")); } return(result(1, "volumeName")); } sub result($) #POF, functionName, reasonForFail { my $POF = $_[0]; my $functionName = $_[1]; if($POF == 0) { my $reasonForFail = $_[2]; print "$functionName || failed || $reasonForFail\n"; } else{ print "$functionName || passed ||\n"; } return $POF; } </code></pre>