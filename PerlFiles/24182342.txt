Perl DBIx::Class - Is it possible to provide a default value for inserting by using column attributes
<p>I have a (MySQL) table, <em>import</em>, defined as:</p> <pre><code>CREATE TABLE `import` ( `importId` varchar(36) COLLATE utf8mb4_unicode_ci NOT NULL, `stuff` varchar(12) COLLATE utf8mb4_unicode_ci DEFAULT NULL, PRIMARY KEY (`importId`), KEY `stuff` (`stuff`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; </code></pre> <p>I have used <code>DBIx::Class::Schema::Loader-&gt;make_schema_at</code> to generate my DBIx::Class schema.</p> <p>I want to be able to issue <code>$schema-&gt;resultset('Import')-&gt;create({});</code> (i.e., not providing a primary key) and have the importId field automatically populated with the result of a call to MySQL's <code>uuid()</code> function. To attempt to do this, I added the following to the bottom of <em>Schema/Result/Import.pm</em>:</p> <pre><code># DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum:cKY/6hdjrNaMgdhm6SlzoQ use Data::Dumper; print Dumper __PACKAGE__-&gt;columns_info(); __PACKAGE__-&gt;add_columns( '+importId' =&gt; { default_value =&gt; \'uuid()', #' }, ); print Dumper __PACKAGE__-&gt;columns_info(); </code></pre> <p>The data dumps show that the default_value attribute was added to importId, as expected:</p> <pre><code>$VAR1 = { 'importId' =&gt; { 'data_type' =&gt; 'varchar', 'default_value' =&gt; \'uuid()', #' 'is_nullable' =&gt; 0, 'size' =&gt; 36, 'accessor' =&gt; 'import_id' }, 'stuff' =&gt; { 'data_type' =&gt; 'varchar', 'is_nullable' =&gt; 1, 'size' =&gt; 12 } }; </code></pre> <p>But if I don't provide a value for importId in a <code>create()</code> call, DBIx::Class still issues <code>INSERT INTO import () VALUES ()</code>.</p> <p>I did achieve what I wanted by modifying the <code>insert()</code> method by placing the following at the end of <em>Schema/Result/Import.pm</em>:</p> <pre><code>use Moo; before 'insert' =&gt; sub { my $self = $_[0]; my $column_data = $self-&gt;{_column_data}; $column_data-&gt;{importId} = \'uuid()' #' unless exists $column_data-&gt;{importId} &amp;&amp; defined $column_data-&gt;{importId}; }; </code></pre> <p>I had thought I should be able to achieve this with the default_value column attribute. Am I misunderstanding how this attribute works, or have I just implemented it incorrectly?</p>
<p>You have to read docs better.</p> <p>Look into <code>L&lt;DBIx::Class::ResultSource/add_columns&gt;</code> for <code>default_value</code> and you will find that </p> <blockquote> <pre><code>default_value </code></pre> <p>Set this to the default value which will be inserted into a column by the database. Can contain either a value or a function (use a reference to a scalar e.g. \'now()' if you want a function). This is currently only used to create tables from your schema, see "deploy" in DBIx::Class::Schema.</p> </blockquote> <p>So, if you don't use deployment via DBIC, you rather want to add <code>DEFAULT uuid()</code> into your SQL schema for corresponded column.</p>