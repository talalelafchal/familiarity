How to bundle perl libraries with my cross platform script?
<p>I developped a script in Perl that uses 2 extra libraries, <a href="http://search.cpan.org/~schwigon/Net-SSH-Perl-1.37/lib/Net/SSH/Perl.pm" rel="nofollow">Net::SSH::Perl</a> and <a href="http://search.cpan.org/~jmcnamara/Spreadsheet-WriteExcel-2.40/lib/Spreadsheet/WriteExcel.pm" rel="nofollow">Spreadsheet::WriteExcel</a>, which I installed easily using <code>CPAN</code> on my Debian laptop.</p> <p>Ultimatly, my goal is to deploy this script on a solaris server. However, this server is not connected to internet and thus cannot auto install missing dependencies.</p> <p>So far, I tried using <a href="http://search.cpan.org/~rschupp/PAR-Packer-1.018/lib/pp.pm" rel="nofollow">PP</a>, which allowed me to run this script on another Ubuntu computer without needing to install manually the extra libraries, but returned an error : <code>Cannot find /lib64/ld-linux-x86-64.so.2</code> on Solaris.</p> <p>As I suspected this was due to the differences between both architectures, I packed my script with a <code>./lib</code> folder containing all dependencies (the <code>./lib</code> was obtained by doing <code>pp -B -p -o script.par myscript.pl</code> and extracting the resulting <code>./lib</code> folder).</p> <p>Following the leads I found in <a href="http://stackoverflow.com/questions/570762/how-can-i-create-a-portable-perl-when-i-cant-install-modules-on-the-target-host">this question</a>, I tried with <code>use lib "./lib</code> and with <code>BEGIN { unshift @INC, "lib"; }</code> at the start of my script, but I got an error saying I didn't include my libraries when I ran it.</p> <p>Is there a way to port those libraries ? Is there another approach ?</p>
<p><a href="https://metacpan.org/pod/Net::SSH::Perl" rel="nofollow"><code>Net::SSH::Perl</code></a> relies upon several XS modules, such as <a href="https://metacpan.org/pod/Math::GMP" rel="nofollow"><code>Math::GMP</code></a>, <a href="https://metacpan.org/pod/Math::Pari" rel="nofollow"><code>Math::Pari</code></a> and others. There's no way around actually compiling them (as in compiling them with C, not Perl) on the Solaris box.</p> <p>You will also need the underlying C libraries (i.e. libgmp, libpari). The <code>Math::Pari</code> build script will download its library, but you've indicated that's not possible on your target Solaris box.</p> <p><a href="https://metacpan.org/pod/App::cpanminus" rel="nofollow"><code>cpanm</code></a> can help you download the Perl dependencies in preparation for moving them to your target machine and build them on it.</p> <p>If you have proper dependency entries in your project's <code>Makefile.PL</code> or <code>cpanfile</code>, running</p> <pre><code>cpanm --installdeps -L deps --save-dists dists . </code></pre> <p>on your devel machine in your project directory (note the trailing dot) will download all of its dependencies into the <code>dists</code> directory.</p> <p>You can then copy that directory to your target Solaris box (along with <code>cpanm</code>) and pass it to <code>cpanm</code> using its <code>--mirror</code> option.</p> <p>For example, I just did this for <code>Net::SSH::Perl</code>'s dependencies:</p> <pre><code>cpanm --installdeps -L deps --save-dists dists Net::SSH::Perl </code></pre> <p>It downloaded and installed 34 distributions into <code>deps</code>, saving the archives in <code>dists</code>.</p> <p>I can build <code>Net::SSH::Perl</code> using the downloaded distributions via:</p> <pre><code>cpanm --mirror file://${PWD}/dists Net::SSH::Perl </code></pre> <p>Note that while <code>cpanm</code> is handy, you don't actually need it to install the required modules. You can manually install them (in the correct order) by unpacking them and then running </p> <pre><code>perl Makefile.PL make make install </code></pre> <p>or </p> <pre><code>perl Build.PL ./Build ./Build install </code></pre> <p>as appropriate for the specific module</p>