Compare current password of a Linux user with an entered password in Perl
<p>I would like to get to know if the password a username has provided in a form is the one that user has on the system in a given host... I need this in order to change the password or return an error message to the user who requested it. Specifically would like it done in Perl.</p> <p>i have the following test to see if user exists the if successful do the passwords matching and the if success do the change to the new password provided with the request I'm using JSON Rpc Dispatcher to serve the client.</p> <pre><code>if (getpwnam("$username")) { # if ($currentpass == $sytempass) {} return "User $username password is $newpass success!"; # else { return current password is incorrect} } else { return "user $username never existed here"; } </code></pre>
<p>The standard Linux authentication interface is PAM, e.g. <a href="http://search.cpan.org/~nikip/Authen-PAM-0.16/d/PAM.pm" rel="nofollow">Authen::PAM</a> or <a href="http://search.cpan.org/~chansen/Authen-Simple-PAM-0.2/lib/Authen/Simple/PAM.pm" rel="nofollow">Authen::Simple::PAM</a>. For example:</p> <pre><code>use Authen::Simple::PAM; my $pam = Authen::Simple::PAM-&gt;new(service =&gt; "login"); if ($pam-&gt;authenticate($username, $password)) { # ... } </code></pre> <p>For <em>local accounts</em> only, the password hashes are usually stored in the "shadow" file. Perl will automatically retrieve them when calling <code>getpwent()</code>:</p> <pre><code>my @pwent = getpwnam($username); my $known_good_hash = $pwent[1]; my $checking_hash = crypt($password, $known_good_hash); if ($checking_hash eq $known_good_hash) { # ... } </code></pre> <p>(The <code>crypt()</code> function takes a "salt" as the second argument. When comparing against a hash, you should give it the full original hash, and it'll extract the salt from it.)</p> <p>Note that you <strong>must have root access</strong> to use either facility.</p>