Split function returns weird characters
<p>I am facing a problem with a script I want to make. In short, I am connecting to a local database with dbi and execute some queries. While this works just fine, and as I print out the returned values from select queries and so on, when I split, say, the $firstName to an array and print out the array I get weird characters. Note that all the fields in the table I am working are containing only greek characters and are utf8_general_ci. I played around with use utf8, use encoding, binmode, encode etc but still the split function does return &#154; weird characters while before the split the whole greek word was printed fine. I suppose this is due to some missing pragma about string encoding or something similar but really can't find out the solution. Thanks in advance. Here is the piece of code I am describing. Perl version is v5.14.2 </p> <pre><code>@query = &amp;DatabaseSubs::getStringFromDb(); print "$query[1]\n"; # prints the greek name fine @chars = split('',$query[1]); foreach $chr (@chars) { print "$chr \n"; # prints weird chars } </code></pre> <p>And <a href="http://oi62.tinypic.com/fve9v8.jpg" rel="nofollow">here</a> is the output from print and foreach respectively.</p>
<p>The issue is that <code>split('', $word)</code> splits on <em>every byte</em> where in <a href="https://en.wikipedia.org/wiki/Utf8" rel="nofollow">utf8</a> you can have multi-byte characters. For characters with ASCII value less than 127, this is fine, but anything beyond 127 is represented as multiple bytes. You're essentially printing half the character's code, hence it looking like garbage.</p>
<p>Your data is in utf8, but perl doesn't know that, so each perl character is just one byte of the multibyte characters that are stored in the database.</p> <p>You tell perl that the data is in fact utf8 with:</p> <pre><code>utf8::decode($query[1]); </code></pre> <p>(though most database drivers provide a way to automate this before you even see the data in your code). Once you've done this, split will properly operate on the actual characters. You probably then need to also set your output filehandle to expect utf8 characters, or it will try to downgrade them to an 8-bit encoding.</p>
<p>By default, Perl assumes that you are working with single-byte characters. But you aren't, in UTF8 the Greek characters that you are using are two-bytes in size. Therefore <code>split</code> is splitting your characters in half and you're getting strange characters.</p> <p>You need to decode your bytes into characters as they come into your program. One way to do that would be like this.</p> <pre><code>use Encode; my @query = map { decode_utf8($_) } DatabaseSubs::getStringFromDb(); </code></pre> <p>(I've also removed the unnecessary and potentially confusing '&amp;' from the subroutine call.)</p> <p>Now <code>@query</code> contains properly decode character strings and <code>split</code> will split into individual characters correctly(*).</p> <p>But if you print one of these characters, you'll get a "wide character" warning. That's because Perl's I/O layer expects single-byte characters. You need to tell it to expect UTF8. You can do that like this:</p> <pre><code>binmode STDOUT, ':utf8'; </code></pre> <p>There are other improvements that you could consider. For example, you could probably put the decoding into the <code>getStringFromDb</code> subroutine. I recommend reading <a href="http://perldoc.perl.org/perluniintro.html" rel="nofollow">perldoc perluniintro</a> and <a href="http://perldoc.perl.org/perlunicode.html" rel="nofollow">perldoc perlunicode</a> for more details.</p> <p>(*) Yes, there's another whole level of pain lurking when you get into two-character graphemes, but let's ignore that for now.</p>