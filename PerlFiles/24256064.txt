Extract IP address from a full line after slurping file and using regex to match IP address
<p>I have written the following code to read a file, slurp, identify IP addresses and track the number of occurrences of each address using a hash structure. The problem is that instead of my key being the IP address matched from regex, the key is the entire line on which the IP address appears. How do I fix this? (I believe the issue has to do with the fact that slurping is done line by line)</p> <pre><code>%ipcount; @fileslurp = &lt;FH&gt;; foreach(@fileslurp){ if($_ =~ m/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/){ $ipcount{$_}++; } } $numIP = scalar keys %ipcount; print "Number of unique IP: $numIP \n"; foreach $ipaddress (sort { $ipcount{b} &lt;=&gt; $ipcount{a} } keys %ipcount){ print "$ipaddress: $ipcount{$ipaddress} \n"; } </code></pre>
<p>Looks like you are already doing a group match, just change $_ to $1 when adding to the hash.</p> <pre><code>%ipcount; @fileslurp = &lt;FH&gt;; foreach(@fileslurp){ if($_ =~ m/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/){ $ipcount{$1}++; } } $numIP = scalar keys %ipcount; print "Number of unique IP: $numIP \n"; foreach $ipaddress (sort keys %ipcount){ print "$ipaddress: $ipcount{$ipaddress} \n"; } </code></pre> <p>Get in the habit of using <a href="http://perldoc.perl.org/strict.html" rel="nofollow"><code>use strict;</code></a> and <a href="http://perldoc.perl.org/warnings.html" rel="nofollow"><code>use warnings;</code></a> in EVERY perl script. It will help you catch problems. </p>
<p>Notice <code>$ipcount{$_}</code>, here you are using <code>$_</code> which is your line, change this to <code>$ipcount{$1}</code> where <code>$1</code> will be captured IP address. </p> <hr> <p>One more thing is that your regex for matching IP address is not correct. Matching an IP address is another good example of a trade-off between regex complexity and exactness. <code>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b</code> will match any IP address just fine, but will also match <code>999.999.999.999</code> as if it were a valid IP address. Whether this is a problem depends on the files or data you intend to apply the regex to. To restrict all 4 numbers in the IP address to <code>0..255</code>, you can use the following regex. It stores each of the 4 numbers of the IP address into a capturing group. You can use these groups to further process the IP number. Free-spacing mode allows this to fit the width of the page.</p> <p><code>\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b</code></p> <p>If you don't need access to the individual numbers, you can shorten the regex with a quantifier to:</p> <p><code>\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3} (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b</code></p> <p>Similarly, you can shorten the quick regex to <code>\b(?:\d{1,3}\.){3}\d{1,3}\b</code></p> <p>Also the <a href="https://metacpan.org/module/Regexp%3a%3aCommon%3a%3anet" rel="nofollow"><strong>Regexp::Common::net</strong></a> portion of <a href="https://metacpan.org/module/Regexp%3a%3aCommon" rel="nofollow"><strong>Regexp::Common</strong></a> may have regex that you desire.</p>