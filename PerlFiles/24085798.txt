Grep not returning expected value Perl
<p>I'm trying to grep a value in Perl:</p> <pre><code>@array = ['hello', 'world']; if (grep(/hello/i, @array) { # do something } </code></pre> <p>For some reason my code isn't picking this up. Perhaps there's another way I can do this.</p> <p>the Array itself is inside a hash:</p> <pre><code>hash =&gt; { array =&gt; ['hello', 'world'], value =&gt; 'feature', } </code></pre>
<p>You're building your array wrong. This line creates a one-element array, and that element is an array reference.</p> <pre><code>@array = ['hello', 'world']; </code></pre> <p>When you grep over that one-element array, that one array reference doesn't match <code>/hello/i</code>.</p> <p>What you want is:</p> <pre><code>@array = ('hello', 'world'); </code></pre>
<p>After </p> <pre><code>@array = ['hello', 'world']; </code></pre> <p>you have:</p> <pre>$ perl -MData::Dumper -e '@array = ['hello', 'world']; print Dumper \@array' $VAR1 = [ [ 'hello', 'world' ] ];</pre> <p>That is <code>@array</code> contains a reference to an anonymous array containing the strings <code>'hello'</code> and <code>'world'</code>.</p> <p>Then, in grep, you evaluate this reference as a string. Therefore, your <code>grep</code> does a single comparison along the lines of</p> <pre><code>'ARRAY(0x7fa0e38032b8)' =~ /hello/i; </code></pre> <p>Clearly, that is not going to match.</p> <pre><code>#!/usr/bin/env perl use strict; use warnings; my %hash = (array =&gt; ['hello', 'world']); if (grep /hello/i, @{ $hash{array} }) { print "\@array contains 'hello'\n"; } </code></pre>
<p>The usage is indeed</p> <pre><code>if (grep(/hello/i, @array)) { ... } </code></pre> <p>But according to the comments, you don't have a named array. You have a reference to an array. As such, you replace <code>@array</code> with an array dereference.</p> <pre><code>if (grep(/hello/i, @$array_ref)) { ... } </code></pre> <p>That's short for</p> <pre><code>if (grep(/hello/i, @{ $array_ref })) { ... } </code></pre> <p>Since your reference comes from a hash, you could also do</p> <pre><code>if (grep(/hello/i, @{ $hash{$key} })) { ... } </code></pre>
<blockquote> <p>The Array itself is inside a hash:</p> </blockquote> <pre><code>hash =&gt; { array =&gt; ['hello', 'world'], value =&gt; 'feature', } </code></pre> <p>Use <code>Data::Dumper</code> to see how exactly you've defined your structure:</p> <pre><code>use Data::Dumper; use feature qw(say); # Highly recommend "say" when using Data::Dumper! my %hash = ( array =&gt; ['hello', 'world'], value =&gt; 'feature', ); ... say Dumper \%hash; </code></pre> <p>And see what prints out. (Note the backslash in front, so you're passing in a single reference_ and not a <em>list of values</em>).</p> <p>What you'll see is something like this:</p> <p>$var = { 'array' => [ 'hello', 'world', ] }</p> <p>That <code>array</code> isn't just an array, it's a reference to an array. You need to <em>dereference</em> it to get it to work:</p> <pre><code>if ( grep {/hello/i } @{ $hash-&gt;{array} } ) </code></pre> <p>Or...</p> <pre><code>my @array = @{ $hash-&gt;{array} ); if ( grep { /hello/i } @array; </code></pre>