perl regex operator precedence
<p>I have a string say</p> <pre><code>my $str = 'click brick trick again'; </code></pre> <p>Here is I'm trying something on this string</p> <pre><code>if ($str =~ /((?:[a-z]+ck\s*)+)(\s?again)/){ print "#$1#$2#\n"; } </code></pre> <p>which prints: <code>#click brick trick #again#</code><br> Now I want the space at start of $2. But it is captured in $1. What shall I do so that the <strong>space</strong> before <code>again</code> is captured in $1 while space is <strong>optional</strong>. Is there any way to do it? Is there any operator precedence that allow it?</p>
<p>Move the optional space you were matching at the end of the words to the front of the word:</p> <pre><code>((?: ?[a-z]+ck)+)( ?again) </code></pre>
<p>Perl pattern matching is (generally) greedy - non greedy pattern matching is computationally expensive. </p> <p>However, I'd suggest stepping away from the regular expressions, because it sounds like what you're trying to do is - at best - going to be a complicated RE, and that's generally bad for maintainability. </p> <p>However, what you probably want (from <code>perlre</code>):</p> <pre><code>*? Match 0 or more times, not greedily +? Match 1 or more times, not greedily ?? Match 0 or 1 time, not greedily </code></pre>
<p>Here are 4 different ways to get the behavior that you desire:</p> <pre><code>use strict; use warnings; my $str = 'click brick trick again'; # Original Regex print "#$1#$2#\n" if $str =~ /((?:[a-z]+ck\s*)+)(\s?again)/; # Explicitly specify word followed by optional other words print "#$1#$2#\n" if $str =~ /([a-z]*ck(?:\s+[a-z]*ck)*)(\s+again)/; # Force "again" to be preceeded by at least one space using `+` instead of `?` print "#$1#$2#\n" if $str =~ /((?:[a-z]+ck\s*)+)(\s+again)/; # No Trailing spaces by using a lookbehind assertion print "#$1#$2#\n" if $str =~ /((?:[a-z]+ck\s*)+)(?&lt;!\s)(\s+again)/; # No Leading spaces by using a lookahead assertion print "#$1#$2#\n" if $str =~ /(?!\s)((?:\s*[a-z]+ck)+)(\s+again)/; </code></pre> <p>Outputs:</p> <pre><code>#click brick trick #again# #click brick trick# again# #click brick trick# again# #click brick trick# again# #click brick trick# again# </code></pre>