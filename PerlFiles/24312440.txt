Net::Telnet eof read waiting for login prompt: at test.pl line 25
<p>My code is given below for reference</p> <pre><code>#!/usr/bin/perl use strict; use Net::Telnet::Cisco; my ($host, $port, $user, $pass, $command); ##### get host info print 'Enter host: '; chop($host = &lt;STDIN&gt;); ##### get port info print 'Enter port: '; chop($port = &lt;STDIN&gt;); ##### get user info print 'Enter user: '; chop($user = &lt;STDIN&gt;); ##### get user info &amp; hide input print 'Enter password: '; system 'stty -echo'; chop($pass = &lt;STDIN&gt;); system 'stty echo'; print "\n"; my $tn = new Net::Telnet(Host =&gt;$host, Port =&gt;$port, Timeout =&gt; 20) or die "connect failed: $!"; $tn-&gt;open ($host); $tn-&gt;login('','L@ser123'); $tn-&gt;login('$user','$pass'); my @out1 = $tn-&gt;print("sh run"); print "@out1\n"; </code></pre> <p>Am trying to login through terminal server console port and execute command but facing "eof read waiting for login prompt: at test.pl line 25" Error. Any help would be appreciated,Thanks.</p>
<p>You're attempting to login twice:</p> <pre><code>$tn-&gt;login('','L@ser123'); $tn-&gt;login('$user','$pass'); </code></pre> <p>The second time, the login prompt will already be gone and it will time out waiting for it. Remove one of these lines.</p>
<p>Your problem is that the first <code>-&gt;login</code> method waits for a prompt before returning. But when running telnet through a terminal server (TS), you will never get a normal prompt on the TS, it will pass you directly to the device on the console port.</p> <p>If you would like to stay with the current configuration of the TS, you probably must something clever using <code>-&gt;waitfor</code>, a sometimes confusing task.</p> <p>What I recommend you to do is reconfigure the TS not to authenticate telnet "pass-throughs", after all it's the device connected to the TS which must be protected with a usrname/password combo. As you are using <code>Net::Telnet::Cisco</code> I assume the TS is a Cisco-device. Here is the config we are using for our (very old) 2511 TSes, but the concept applies to newer Ciscos as well:</p> <pre><code>aaa new-model ! ! normal authentication scheme (named 'default') for connections terminating ! ON THE TERMINAL SERVER (here via tacacs+) aaa authentication login default tacacs+ local aaa authentication enable default tacacs+ enable ! ! create an authentication scheme (named 'line_auth') with no authentication aaa authentication login line_auth none line 1 16 ! disable access to the TS from the serial line side, i.e only allow ! *outgoing* connections no exec ! ! use the 'line_auth' authentication scheme, i.e no authentication login authentication line_auth ! ! only allow telnet connections to connect to the line transport input telnet ! line vty 0 4 ! default authentication scheme (this is a default config, so it's ! actually not shown in the config). login authentication default ! </code></pre>