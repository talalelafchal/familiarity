how to get exit status of thread
<p>I am writing a perl script to get the exit status of each thread from the parent process. if i use join() i am not able to get the thread proper exit status.</p> <p>how to capture the exit status of each thread from parent process ?</p> <p>here is code</p> <pre><code>foreach (@threads) { $_-&gt;join(); } sub sub1 { print "I am thread1\n"; exit(20); } sub sub2 { print "I am thread2\n"; } sub sub3 { print "I am thread3\n"; } sub sub4 { print "I am thread4\n"; } sub sub5 { my $i=10/0; print "$i\n"; print "I am thread5\n"; } </code></pre>
<p>First you'll have to use <code>threads-&gt;exit</code> as <code>exit</code> exits the whole process. Also, you'll have to <code>die</code> instead, inside thread to signal exception to the main thread.</p> <p>Main thread can check for exception before or after joining the thread using</p> <pre><code>if (defined $thread-&gt;error) .. </code></pre> <p>From <a href="http://perldoc.perl.org/threads.html" rel="nofollow">perldoc</a></p> <blockquote> <p><em>$thr->error()</em></p> <p>Threads are executed in an eval context. This method will return undef if the thread terminates normally. Otherwise, it returns the value of $@ associated with the thread's execution status in its eval context.</p> </blockquote>
<p>Might be better off just returning the value you want to return. <code>join</code> returns that value.</p> <pre><code>my $thread = async { return "foo" }; say $thread-&gt;join(); # foo </code></pre>
<p>Don't use exit to abort a subroutine if there's any chance that someone might want to trap whatever error happened. Use die instead, which can be trapped by an eval. The exit() function does not always exit immediately. It calls any defined END routines first, but these END routines may not themselves abort the exit.</p> <p>Also see: <a href="http://perldoc.perl.org/threads.html#EXITING-A-THREAD" rel="nofollow">http://perldoc.perl.org/threads.html#EXITING-A-THREAD</a></p>
<p>You can always have the thread return a status code, rather than calling <code>exit()</code>. <code>join()</code> allows capturing a returned result from the sub, provided you started your thread in a suitable context. </p> <pre><code>my $thr = threads -&gt; create ( \&amp;sub1 ); foreach my $thr ( threads -&gt; list() ) { my $result = $thr -&gt; join(); print "Got result of $result from thread ", $thr -&gt; tid(),"\n"; } sub1 { print "I am thread1"; return 20; } </code></pre>