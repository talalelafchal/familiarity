swig c++ to perl : how to use c++11 string STL functions
<p>I would like to call c++ functions from a website that uses Perl. The c++ code works fine, I am getting troubles from SWIG wrapper regarding some new function from c++11 in &lt; string> STL. in this case stoi(string), while the problem is the same with other functions like string.pop_back(), stol... all functions brought to &lt; string> with c++11 vesrsion.</p> <p>how to make SWIG take into account those new functions so that it can compile ?</p> <p>Here is the error message I got <em>error: ‘stoi’ is not a member of ‘std’</em></p> <pre><code>/* --- source fonctions.cpp --- */ bool checkRIB(std::string word){ cout &lt;&lt; "verification du rib : "&lt;&lt; word&lt;&lt;endl; if (word.size()!=23) return false; for (size_t i=0; i!=word.size(); i++) { if (!isdigit(word[i])){ if ((word[i]&gt;='A'&amp;&amp;word[i]&lt;='I')){ word[i]= (int)(word[i]-'A')%10+'1'; }else if ((word[i]&gt;='J'&amp;&amp;word[i]&lt;='R')){ word[i]= (int)(word[i]-'J')%10+'1'; } else if ((word[i]&gt;='S'&amp;&amp;word[i]&lt;='Z')){ word[i]= (int)(word[i]-'S')%10+'2'; } else cout &lt;&lt; "mauvais code"&lt;&lt;endl; } } return ( (97-((89*std::stoi(word.substr(0,5)) + 15*std::stoi(word.substr(5,5))+3*std::stol(word.substr(10,11))) % 97)) == std::stoi(word.substr(21,2)) ); } /* --- header fonctions.h--- */ #ifndef DEF_FONCTIONS #define DEF_FONCTIONS #include &lt;fstream&gt; // pour lecture / ecriture de fichiers #include &lt;iostream&gt; #include &lt;math.h&gt; bool checkRIB(std::string word); #endif /* --- interface code interface.i --- */ %module interface %include"std_string.i" %include "std_map.i" %include "std_vector.i" %{ /* Put header files here or function declarations like below */ bool checkRIB(std::string word); } bool seRessemblent(const std::string &amp;s1, const std::string &amp; s2, float seuil=0.65); %} bool checkRIB(std::string word); </code></pre> <p>and the foolowing steps for the compilation (on Ubuntu) : </p> <pre><code>1% swig -c++ -perl5 interface.i 2% g++ -c `perl -MConfig -e 'print join(" ", @Config{qw(ccflags optimize cccdlflags)}, "-I$Config{archlib}/CORE")'` fonctions.cpp interface_wrap.cxx (here error : *error: ‘stoi’ is not a member of ‘std’*) 3% g++ `perl -MConfig -e 'print $Config{lddlflags}'` fonctions.o interface_wrap.o -o interface.so </code></pre> <p>The interface is working fine on other functions (Not displayed for space reason) </p> <p>Thank you for helping</p> <p>Alexis</p>
<p>I found a way to work around the problem: I split the compilation procedure from </p> <pre><code>1% swig -c++ -perl5 interface.i 2% g++ -c `perl -MConfig -e 'print join(" ", @Config{qw(ccflags optimize cccdlflags)}, "-I$Config{archlib}/CORE")'` fonctions.cpp interface_wrap.cxx (here error : *error: ‘stoi’ is not a member of ‘std’*) 3% g++ `perl -MConfig -e 'print $Config{lddlflags}'` fonctions.o interface_wrap.o -o interface.so </code></pre> <p>to</p> <pre><code>1% swig -c++ -perl5 interface.i 2% g++ -c -fPIC fonctions.cpp -std=c++11 3% g++ -c `perl -MConfig -e 'print join(" ", @Config{qw(ccflags optimize cccdlflags)}, "-I$Config{archlib}/CORE")'` interface_wrap.cxx 4% g++ `perl -MConfig -e 'print $Config{lddlflags}'` fonctions.o interface_wrap.o -o interface.so </code></pre> <p>This way the ordinary c++ code is compiled in c++11 as needed. the -fPIC option is to be used so that the libraries can be joined.</p> <p>I could not find a way to use c++11with the interface wrapper though.</p>