Categorize the data into three groups (positive,negative) (positive,positive) (negative,negative) based on $3 and $2
<p>If we have an input</p> <pre><code>95 cpd-1 -3.21 ooo 56 cpd-1 1.21 ooo 77 cpd-1 2.2 ooo 93 cpd-2 2.0 oox 57 cpd-2 1.15 oox 85 cpd-3 -1.32 xxx 67 cpd-3 -2.22 xxx 58 cpd-4 0 oxo 65 cpd-4 1.23 oxo </code></pre> <p>And we would love to separate the inputs into three files based on the following rules:</p> <p>(1) If the column 2 are the same among rows</p> <p>(2) Separate these rows into three categories: their the column 3 are (positive,negative) (positive,positive) (negative,negative)</p> <p>(3) We count the 0 in the column 3 as a "positive"</p> <p>(4) For the same the column 2, their column 1 will definitely be different</p> <p>(5) For the same the column 2, their column 4 will definitely be the same</p> <p>The only thing we can think of is to count the minus sign "-". In (positive,positive),(positive,negative), (negative,negative), no. of minus =1,2,3 accordingly and based on this to do the category.</p> <p>The desire outputs are: (Don't need to print out ((positive,positive)), etc.) </p> <p>(positive,positive)</p> <pre><code>93 cpd-2 2.0 oox 57 cpd-2 1.15 oox 58 cpd-4 0 oxo 65 cpd-4 1.23 oxo </code></pre> <p>(positive,negative)</p> <pre><code>95 cpd-1 -3.21 ooo 56 cpd-1 1.21 ooo 77 cpd-1 2.2 ooo </code></pre> <p>(negative,negative)</p> <pre><code>85 cpd-3 -1.32 xxx 67 cpd-3 -2.22 xxx </code></pre> <p>We would like to see if there might be any comment/solution or built in bash/awk/python/perl/etc. functions which can do the trick and we are not aware of. Thanks! </p>
<p>I think you need to do a two stage filter, as you need to perform the initial grouping by column 2 followed by the inspection of the values of column 3. The initial grouping should populate a dictionary, as presumably the column 2 values can vary quite a bit:</p> <pre><code>grouped_rows = {} for row in rows: second_column = row.split(" ")[1] if second_column in grouped_rows: grouped_rows[second_column].append(row) else: grouped_rows[second_column] = [row] </code></pre> <p>Then you need to determine if positive or negative values exist in a given group:</p> <pre><code>def row_value(row): return float(row.split(" ")[2]) for rows in grouped_rows.values(): has_positive = any([ row_value(row) &gt;= 0 for row in rows ]) has_negative = any([ row_value(row) &lt; 0 for row in rows ]) if has_positive and not has_negative: write_rows(file_1, rows) elif has_positive and has_negative: write_rows(file_2, rows) else: write_rows(file_3, rows) </code></pre>