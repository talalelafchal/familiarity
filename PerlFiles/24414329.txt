Print fixed number of characters per line in perl
<p>Suppose I have a string of length 160 characters and I want to print it out to a file with 30 characters per line (so the 5 first line in the output will have 30 characters and the last line will have 10 characters).</p> <p>Is there a straight forward perl command for that?</p>
<p>Use a regex, taking advantage of greedy matching:</p> <pre><code>my $string = 'a' x 160; for my $buffer ($string =~ m/.{1,30}/gs) { print $buffer, "\n"; } </code></pre> <p>Outputs:</p> <pre><code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaa </code></pre>
<p>You can insert newlines every 30 chars,</p> <pre><code>$string =~ s/.{1,30}\K/\n/sg; </code></pre> <p>or using variation of @Miller solution,</p> <pre><code>while ($string =~ m/(.{1,30})/gs) { print $1, "\n"; } </code></pre>
<p>Split into groups of 30 or less, then join with newline:</p> <pre><code>$string = join("\n", ( $string =~ m/.{1,30}/g )); </code></pre>
<p>This is clearer and more concise using <a href="http://perldoc.perl.org/functions/unpack.html" rel="nofollow"><code>unpack</code></a></p> <pre><code>my $s = join('', 'A' .. 'J') x 16; print "$_\n" for unpack '(A30)*', $s; </code></pre> <p><strong>output</strong></p> <pre><code>ABCDEFGHIJABCDEFGHIJABCDEFGHIJ ABCDEFGHIJABCDEFGHIJABCDEFGHIJ ABCDEFGHIJABCDEFGHIJABCDEFGHIJ ABCDEFGHIJABCDEFGHIJABCDEFGHIJ ABCDEFGHIJABCDEFGHIJABCDEFGHIJ ABCDEFGHIJ </code></pre>
<p><a href="http://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it" rel="nofollow">There's more than one way to do it</a>! :-)</p> <p>For this task I would reach for <a href="https://metacpan.org/pod/Perl6%3a%3aForm" rel="nofollow"><code>Perl6::Form</code></a>, a very powerful text formatting library. The Perl6 namespace implies that it's a back-port of a Perl 6 feature to Perl 5.</p> <pre><code>#!/usr/bin/env perl use strict; use warnings; use feature 'say'; use Perl6::Form; my $s = join('', 'A' .. 'J') x 16; say form "{" . ("[" x 30) . "}", $s; </code></pre> <p>This outputs:</p> <pre><code>$ ./line-breaks.pl ABCDEFGHIJABCDEFGHIJABCDEFGHIJA- BCDEFGHIJABCDEFGHIJABCDEFGHIJAB- CDEFGHIJABCDEFGHIJABCDEFGHIJABC- DEFGHIJABCDEFGHIJABCDEFGHIJABCD- EFGHIJABCDEFGHIJABCDEFGHIJABCDE- FGHIJ </code></pre> <p>Note the "-" characters on the end of each line. This shows that <code>Perl6::Form</code> actually handles word breaking unlike the <code>unpack()</code>- or <code>m//g</code>-based solutions.</p> <p>For example if we give it some text with spaces in it we can see it is left-aligned, with a ragged right edge.</p> <pre><code>$ ./line-breaks.pl Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut... </code></pre> <p>If you change the 30 <code>"["</code> characters to 15 <code>"["</code> characters followed by 15 <code>"]"</code> characters then you get fully justified output.</p> <pre><code>$ ./line-breaks.pl Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut... </code></pre> <p>Like I said, <a href="https://metacpan.org/pod/Perl6%3a%3aForm" rel="nofollow"><code>Perl6::Form</code></a> is very powerful :-)</p> <p>You will need to install it, either via CPAN (<code>/usr/bin/cpan</code>) or your OS' package manager. On Debian you can install <code>Perl6::Form</code> system-wide with <code>sudo apt-get install libperl6-form-perl</code>.</p>