Bizzare issue importing Perl variables from package
<p>I'm trying to import a variable from a Perl module. I noticed it works when the variable name has length one character and doesn't work when when it has a length longer than one. I literally cannot even the what right now. </p> <p>I know that you could fill a small stadium with the list Perl gotcha's, but this is a strange one. Why does this happen?</p> <p><strong>Example 1)</strong></p> <p>mod.pm</p> <pre><code>use strict; use warnings; our $aa = 1; 1; </code></pre> <p>test.pl</p> <pre><code>#!/usr/bin/perl use warnings; use strict; use mod; print $aa . "\n"; </code></pre> <p>Running it. It fails</p> <pre><code>$ ./test.pl Variable "$aa" is not imported at ./test.pl line 8. Global symbol "$aa" requires explicit package name at ./test.pl line 8. Execution of ./test.pl aborted due to compilation errors. </code></pre> <p><strong>Example 2)</strong></p> <p>mod.pm</p> <pre><code>use strict; use warnings; our $a = 1; 1; </code></pre> <p>test.pl</p> <pre><code>#!/usr/bin/perl use warnings; use strict; use mod; print $a . "\n"; </code></pre> <p>Running it. It passes</p> <pre><code>./test.pl 1 </code></pre> <p>Also, the version info of my interpreter</p> <pre><code>$perl -v This is perl 5, version 16, subversion 2 (v5.16.2) built for darwin-thread-multi-2level </code></pre>
<p><code>$a</code> and <code>$b</code> are special variables for <a href="http://perldoc.perl.org/functions/sort.html" rel="nofollow"><code>sort</code></a>. They aren't good choice of variable names for this type of testing.</p> <p>As for how to get your package importing to work, there are a few steps:</p> <ol> <li><p>Pick a package name that leads with a capital letter, as lower case are meant to be reserved for perl pragmas per <a href="http://perldoc.perl.org/perlstyle.html" rel="nofollow"><code>perlstyle</code></a>:</p> <blockquote> <p>Perl informally reserves lowercase module names for "pragma" modules like <code>integer</code> and <code>strict</code>. Other modules should begin with a capital letter and use mixed case, but probably without underscores due to limitations in primitive file systems' representations of module names as files that must fit into a few sparse bytes</p> </blockquote></li> <li><p>Start the module contents with a <a href="http://perldoc.perl.org/functions/package.html" rel="nofollow"><code>package</code></a> declaration that matches your file name minus the <code>.pm</code>.</p></li> </ol> <p>These two things change your code to something like the following:</p> <p>MyMod.pm</p> <pre><code>package MyMod; use strict; use warnings; our $var = 1; 1; </code></pre> <p>test.pl</p> <pre><code>#!/usr/bin/perl use warnings; use strict; use MyMod; print $MyMod::var. "\n"; </code></pre> <p>Finally, if you'd like to actually import the variables into the namespace, you'll Just have to look into <a href="http://perldoc.perl.org/Exporter.html" rel="nofollow"><code>Exporter</code></a>.</p>