Translate perl split to python split
<p>In perl:</p> <pre><code>split(/(?&lt;=[KR])/,$mystring) </code></pre> <p>splits mystring after every K or R via the two concepts "split between every character" (=empty string) + "lookbehind". So the sequence AAAKBBBBR becomes (AAAK,BBBBR).</p> <p>Whats the counterpart in python? I cant find a way because the empty string does not split between characters!</p>
<p>Do you really need a look around? This regular expression should do it <code>[^KR]*[KR]</code>:</p> <pre><code>In [1]: import re # Import the regex library In [2]: s = "AAAKBBBBR" # Define the input string In [3]: re.findall(r'[^KR]*[KR]', s) # Find all the matches in the string Out[3]: ['AAAK', 'BBBBR'] </code></pre> <p>Regexplanation:</p> <pre><code>[^KR] # ^ in character classes is negation so will match any character except K/R * # Quantifier used to match zero or more of the previous expression [KR] # Simple character class matching K/R </code></pre> <p>In words: <em>match zero or more characters that are not K/R that are followed by K/R.</em></p> <p>You might want to use the <code>+</code> quantifier to match at least one or more instead of <code>*</code> for cases like:</p> <pre><code>In [1]: import re In [2]: s = "KAAAKBBBBR" In [3]: re.findall(r'[^KR]*[KR]', s) Out[3]: ['K', 'AAAK', 'BBBBR'] In [4]: re.findall(r'[^KR]+[KR]', s) Out[4]: ['AAAK', 'BBBBR'] </code></pre> <p>To make the trailing <code>[KR]</code> optional you can use <code>?</code>:</p> <pre><code>In [5]: s = 'AAAKBBBBRAAA' In [6]: re.findall(r'[^KR]+[KR]?', s) Out[6]: ['AAAK', 'BBBBR', 'AAA'] </code></pre>