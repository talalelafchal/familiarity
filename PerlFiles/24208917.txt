subprocess in Python hangs
<p>I am trying to retrieve some information from a Perl script using Python and subprocess:</p> <pre><code>command = ["perl","script.perl","arg1.txt","&lt;","arg2.txt"] print " ".join(command) p = subprocess.Popen(command,stdout=subprocess.PIPE,shell=True) text = p.stdout.read() </code></pre> <p>The join-statement simply prints the command as I would enter it in the terminal for double-checking the quality of the command. That one always works... But within Python, it hangs at the <code>subprocess.Popen()</code> (at p= ... ). </p> <p>I also tried several other <code>methods</code> such as <code>call()</code> but to no avail.</p> <p>It only outputs one line of text, so I don't know how that could be the problem.</p>
<p>There's no need to involve the shell if you only want a simple input redirection. Open the file in Python, and pass the file handle to <code>Popen</code> via the <code>stdin</code> argument.</p> <pre><code>with open("arg2.txt") as infile: command = ["perl", "script.perl", "arg1.txt"] p = subprocess.Popen(command, stdout=subprocess.PIPE, stdin=infile) text = p.stdout.read() </code></pre> <p>or</p> <pre><code>command = "perl script.perl arg1.txt &lt; arg2.txt" p = subprocess.Popen(command,stdout=subprocess.PIPE,shell=True) text = p.stdout.read() </code></pre> <hr> <p>With a list <em>and</em> <code>shell=True</code>, it's not clear to me why it the call to <code>perl</code> blocks. When I try something like</p> <pre><code>subprocess.call("cat &lt; .bashrc".split(), shell=True) </code></pre> <p>it blocks as if it is still trying to read from the inherited standard input. If I provide it with input using</p> <pre><code>subprocess.call("cat &lt; .bashrc".split(), shell=True, stdin=open("/dev/null")) </code></pre> <p>the call returns immediately. In either case, it appears that <code>cat</code> is ignoring its further arguments.</p>