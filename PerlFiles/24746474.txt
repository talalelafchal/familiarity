Assigning shift to a variable
<p>Other thread that I read: <a href="http://stackoverflow.com/questions/7082811/what-does-assigning-shift-to-a-variable-mean">What does assigning &#39;shift&#39; to a variable mean?</a></p> <p>I also used <a href="http://perldoc.perl.org/functions/shift.html" rel="nofollow">perldoc -f shift</a>:</p> <blockquote> <pre><code>shift ARRAY shift </code></pre> <p>Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down. If there are no elements in the array, returns the undefined value. If <code>ARRAY</code> is omitted, shifts the <code>@_</code> array within the lexical scope of subroutines and formats, and the <code>@ARGV</code> array outside of a subroutine and also within the lexical scopes established by the <code>eval STRING</code>, <code>BEGIN {}</code>, <code>INIT {}</code>, <code>CHECK {}</code>, <code>UNITCHECK {}</code> and <code>END {}</code> constructs.</p> <p>See also <code>unshift</code>, <code>push</code>, and <code>pop</code>. <code>shift</code> and <code>unshift</code> do the same thing to the left end of an array that <code>pop</code> and <code>push</code> do to the right end.</p> </blockquote> <p>I understand outside of subroutines, the array is <code>@ARGV</code>, and inside arguments are passed through <code>@_</code></p> <p>I've read countless tutorials on how to use the <code>shift</code> function, but it's always about arrays, and how it removes the first element at the beginning of the array and returns it. But I see sometimes</p> <pre><code>$eg = shift; ~do more things here~ </code></pre> <p>It seems as if nothing is making sense to me, and I feel like I can't continue reading more until I understand how this works as it's a "basic building block" to the language.</p> <p>I'm not quite sure if an example of code is needed, as I believe the same principles apply to all programs that use shift. But if wrong I can provide some examples of code.</p>
<p>It removes the first element from an array and returns it.</p> <p>If <code>@_</code> contains the elements <code>("foo","bar",123)</code> then the statement</p> <pre><code>$eg = shift; # same as $eg = shift @_ </code></pre> <p>Assigns the value <code>"foo"</code> to the variable <code>$eg</code>, and leaves <code>@_</code> containing the elements <code>("bar",123)</code>.</p> <p>This is very much a basic building block of the language. You will frequently see this construction at the beginning of subroutines as it is one of the ways to copy the arguments to the subroutine (<code>@_</code>) into other variables.</p> <pre><code>sub func { my $x = shift; # put first arg into $x my $y = shift; # put second arg into $y my @z = @_; # put remaining args into @z ... } $r = func(1,2,"foo"); </code></pre>
<p>It depends on your context.</p> <p>In all cases, shift removes the element at list index 0 and returns it, shifting all remaining elements down one.</p> <p>Inside a sub, shift without an argument (bare shift) operates on the @_ list of subroutine parameters.</p> <p>Suppose I call <code>mysub('me', '22')</code></p> <pre><code> sub mysub { my $self = shift; # return $_[0], moves everything else down, $self = 'me', @_ = ( '22' ) my $arg1 = shift; # returns $_[0], moves everything down, $arg1 = '22', @_ = () } </code></pre> <p>Outside a sub, it operates on the @ARGV list of command line parameters.</p> <p>Given an argument, shift operates on that list.</p> <pre><code> my @list1 = ( 1,2,3,4,5 ); my $first = shift @list1; # $first = 1, @list1 = (2,3,4,5) </code></pre>