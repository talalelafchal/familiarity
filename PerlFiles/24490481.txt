Perl how to pass in a regular expression to my subroutine like grep
<pre><code>print grep /test/, "mytestphrase"; </code></pre> <p>With the grep syntax you can pass in a regular expression without quotes. I want the same behavior for my subroutine as follows:</p> <pre><code>use strict; use warnings; sub testsub { my $regex = shift; my $phrase = shift; print grep $regex, $phrase; } testsub /test/, "mytestphrase"; </code></pre> <p>However it tries before the testsub call to evaluate <code>$_</code> against my regex, issuing following error:</p> <pre><code>Use of uninitialized value $_ in pattern match (m//) at ./a.pl line 14. </code></pre> <p>Is it possible to call testsub like the grep command and how must the subroutine be modified to support that?</p>
<p>If you read <a href="http://perldoc.perl.org/perlsub.html#Prototypes" rel="nofollow">http://perldoc.perl.org/perlsub.html#Prototypes</a> you will find this example:</p> <pre><code>Declared as Called as ... sub mygrep (&amp;@) mygrep { /foo/ } $a, $b, $c </code></pre> <p>Which presumably is what you are referring to.</p> <p>Most of the time, prototypes are not really what you want, and should not be used. Prototypes are used for the purpose of making Perl subroutines act like some of the built-in functions, like for example <code>grep</code>.</p> <p>As for recommendations, I would suggest you do as M42 suggests in <a href="http://stackoverflow.com/a/24490546/725418">his answer</a>.</p>
<p>Pass the parameter like this:</p> <pre><code>testsub qr/test/, "mytestphrase"; </code></pre> <p>Change also the utilisation of <code>$regex</code> to <code>/$regex/</code>:</p> <pre><code>#!/usr/bin/perl use strict; use warnings; sub testsub { my $regex = shift; my $phrase = shift; print grep /$regex/, $phrase; } testsub qr/test/, "mytestphrase"; </code></pre>
<p>AFAIK there is no way to replicate grep's special "take a block OR take a bare expression" syntax. <a href="http://stackoverflow.com/a/24490989/14660">As pointed out in TLP's answer</a>, you can use the <code>&amp;@</code> prototype to get the <code>foo {...} LIST</code> syntax, but you can't ask for a block OR a scalar.</p> <p>There is also no prototype to get a bare regular expression. You must pass in a compiled regular expression, a <code>qr/.../</code>, <a href="http://stackoverflow.com/a/24490546/14660">as noted by M42</a>.</p> <p>Prototypes are incomplete. They cannot express the full range of Perl's built in functions. <code>open</code>, <code>split</code>, <code>print</code> and even apparently simple ones like <code>chomp</code>. You can check this by asking for <code>print prototype 'CORE::some_function'</code>. Some say this is a weakness in prototypes. Some say this is a madness in Perl's built in functions.</p> <p>Prototypes should only be used when you are replacing built in functions. They are really best avoided. One of the few valid idioms is to use the <code>&amp;@</code> prototype to provide the <code>foo {...} LIST</code> idiom for list processing.</p> <p>I would recommend you pass in <code>qr//</code> or <code>sub { ... }</code> to your function normally and pass it along to <code>grep</code>.</p> <p>Did I say there's <em>no way</em> to do it? What was I thinking, this is Perl! If you REALLY REALLY REALLY want this feature, you can delve into <a href="https://metacpan.org/pod/Devel%3a%3aDeclare" rel="nofollow">Devel::Declare</a>. This module lets you come up with your own function call syntax. To say it is not easy to use is an understatement. Things like <a href="https://metacpan.org/pod/Method%3a%3aSignatures" rel="nofollow">Method::Signatures</a> and <a href="https://metacpan.org/pod/TryCatch" rel="nofollow">TryCatch</a> use it to work their magic. If you're at the level of just figuring out <code>qr//</code>, I would recommend against bringing Devel::Declare into production code. Mess around with it, though.</p>