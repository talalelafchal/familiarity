Perl execute a command at a specified time
<p>I need to write a perl script that executes a command at a specified time.</p> <ol> <li>use net::ssh::expect to login to a router</li> <li>read the time from the router's clock ("show clock" command displays the time.)</li> <li>At the 17:30:00 execute a command.</li> </ol> <p>I tried writing script for it but it doesn't work. Any suggestions please ?</p> <pre><code>use strict; use warnings; use autodie; use feature qw/say/; use Net::SSH::Expect; my $Time; my $ssh = Net::SSH::Expect-&gt;new( host =&gt; "ip", password =&gt; 'pwd', user =&gt; 'user name', raw_pty =&gt; 1, ); my $login_output = $ssh-&gt;login(); while(1) { $Time = localtime(); if( $Time == 17:30:00 ) { my $cmd = $ssh-&gt;exec("cmd"); print($cmd); } else { print" Failed to execute the cmd \n"; } } </code></pre>
<p><code>localtime</code> converts a Unix timestamp (seconds since epoch, which is about 1.4 billion now) to a list of values. The <code>time</code> function conveniently provides that timestamp. From <code>perldoc -f localtime</code>:</p> <pre><code>Converts a time as returned by the time function to a 9-element list with the time analyzed for the local time zone. Typically used as follows: # 0 1 2 3 4 5 6 7 8 ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time); </code></pre> <p>For your time comparison you could do:</p> <pre><code>$Time = join ':', (localtime(time))[2, 1, 0]; if ($Time eq '17:30:00') { ... } </code></pre> <p>Since Perl allows the postcircumfix <code>[...]</code> operator to index into lists just like it does with arrays, we can use it to remove the slice of the (localtime(time)) list that contains hours, minutes, and seconds, join them with colons, and assign the resulting string to $Time.</p> <p>Note that because $Time now holds a string, you should compare it to <code>'17:30:00'</code> rather than the bareword <code>17:30:00</code>, which isn't a valid numeric form and should result in a compilation error. And since we're comparing strings instead of numbers, we use the <code>eq</code> operator. <code>==</code> forces numeric context on its operands, and since 17:30:00 isn't a valid number, Perl will treat it as 0 and warn you with</p> <pre><code>Argument "foo" isn't numeric in numeric eq (==) at .... </code></pre>
<p>Several things here:</p> <p>First, use <code>Time::Piece</code>. It's now included in Perl.</p> <pre><code>use Time::Piece; for (;;) { # I prefer using "for" for infinite loops my $time = localtime; # localtime creates a Time::Piece object # I could also simply look at $time if ( $time-&gt;hms eq "17:30:00" ) { my $cmd $ssh-&gt;exec("cmd"); print "$cmd\n"; } else { print "Didn't execute command\n"; } } </code></pre> <p>Second, you shouldn't use a loop like this because you're going to be tying up a process just looping over and over again. You can try sleeping until the correct time:</p> <pre><code>use strict; use warnings; use feature qw(say); use Time::Piece; my $time_zone = "-0500"; # Or whatever your offset from GMT my $current_time = local time; my $run_time = Time::Piece( $current_time-&gt;mdy . " 17:30:00 $time_zone", # Time you want to run including M/D/Y "%m-%d-%Y %H:%M:%S %z"); # Format of timestamp sleep $run_time - $current_time; $ssh-&gt;("cmd"); ... </code></pre> <p>What I did here was calculate the difference between the time you want to run your command and the time you want to execute the command. Only issue if I run this script after 5:30pm local time. In that case, I may have to check for the next day.</p> <p>Or, even better, if you're on Unix, look up the <a href="http://man.cx/crontab%285%29" rel="nofollow">crontab</a> and use that. The crontab will allow you to specify exactly when a particular command should be executed, and you don't have to worry about calculating it in your program. Simply create an entry in the crontab table:</p> <pre><code>30 17 * * * my_script.pl </code></pre> <p>The <code>30</code> and <code>17</code> say you want to run your script everyday at 5:30pm. The other asterisks are for day of the month, the month, and the day of the week. For example, you only want to run your program on weekdays:</p> <pre><code>30 17 * * 1-5 my_script.pl # Sunday is 0, Mon is 1... </code></pre> <p>Windows has a similar method called the Schedule Control Panel where you can setup jobs that run at particular times. You might have to use <code>perl my_scipt.pl</code>, so Windows knows to use the Perl interpreter for executing your program.</p> <p>I highly recommend using the <em>crontab</em> route. It's efficient, guaranteed to work, allows you to concentrate on your program an not finagling when to execute your program. Plus, it's flexible, everyone knows about it, and no one will kill your task while it sits there and waits for 5:30pm.</p>