working with character arrays in perl
<p>I have a string say, s1='hello', I want to manipulate it like an array, example in c++ we can use s1[i] to address the characters individually of this array, how do we do it in perl? I want to add the character at s1[0] with the character at s1[1]. I tried using </p> <blockquote> <pre><code> $s=join('',$s1[0],$s1[1]); $s=$s1[0].$s1[1]; $s=${s1[0]}.${s2[0]}; </code></pre> </blockquote> <p>but am not able to concatenate the characters. I want to add h and e and put he, similarly e and l as el and so on, till the end of the word and then proceed the same with the next word.</p> <p>can i also check like if s[i] is in list (b,c,d,h,l) and if s[i+1] is in (a,e,i,o,u) then add s[i] and s[i+1]. </p> <blockquote> <p>Sample input:<br/> hello <br/> disk <br/> caller</p> <p>Sample Output:<br/> he l lo <br/> di s k<br/> ca l le r</p> </blockquote>
<p>Like this, using <code>substr()</code> to pick out individual characters:</p> <pre><code>perl -E '$s="hello";say substr($s,0,1),substr($s,4,1)' </code></pre> <p>Output:</p> <pre><code>ho </code></pre>
<p><a href="http://perldoc.perl.org/functions/substr.html" rel="nofollow">substr()</a> is feasible:</p> <pre><code>print substr($s, $_, 1), " " for (0..length($s) - 1) </code></pre> <p>Output:</p> <p>h e l l o</p> <p><a href="http://perldoc.perl.org/functions/substr.html" rel="nofollow">substr()</a> is also OK for inplace operations, as far it returns ref-value:</p> <pre><code>substr($s,0,2) = ''; say $s; </code></pre> <p>Output:</p> <p>llo</p>
<pre><code>my @char_array = split "", $s1; </code></pre> <p><code>@char_array</code> now contains all the characters of the <code>$s1</code> string and it's possible to manipulate it, iterate over it or do whatever to it just like with any other array.</p>
<p>Basically, you want to insert a space between two word characters as long as they are not in the two sets that you specified.</p> <p>You can do this using <code>substr</code> like demonstrated by others, but this type of text manipulation is one thing that regular expressions were designed for:</p> <pre><code>use strict; use warnings; while (&lt;DATA&gt;) { s/(?![bcdhl][aeiou])\w\K(?=\w)/ /g; print; } __DATA__ hello disk caller </code></pre> <p>Outputs:</p> <pre><code>he l lo di s k ca l le r </code></pre>
<p>You can you <code>splice</code> to insert elements at a given position of the array:</p> <pre><code>echo -e 'hello\ndisk\ncaller' | perl -F'' -ane ' splice (@F,2,0," "); splice(@F,4,0," "); foreach(@F){print}' he l lo di s k ca l ler </code></pre> <p>You can use Data::Dumper for better visualization when working with arrays:</p> <pre><code>echo -n 'hello' | perl -MData::Dumper -F'' -ane ' splice (@F,2,0," "); splice(@F,4,0," ");print Dumper(\@F)' $VAR1 = [ 'h', 'e', ' ', 'l', ' ', 'l', 'o' ]; </code></pre>