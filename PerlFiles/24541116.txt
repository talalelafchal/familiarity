How to format my Perl code such that I can alter my calling from the command window and either test or not test it?
<p>What I have: To elaborate, I currently have a main function that specifies a source directory and a destination archive directory. At the end of each month, the past month's data must be moved into the archive directory. I have all that figured out and well and down. The sub routine is what picks out the local time with the localtime function and then after I test a few conditions, it returns the previous month and year to be the name of the new folder in the archive directory. </p> <p>What I need: I have a test setup in the sub routine such that when $test = 1, the test runs and specifies a unique year and month that I can type in, whereas when test = 0, the test doesn't run and the code works normally. I want to be able to write the name of the file into a command line outside of the code and have some sort of initiation to spark whether or not I run a test or not (like perl -e archive.pl 1 to run a test and perl -e arhcive.pl 0 to run the code as normal). </p> <p>I'm brand new at Perl but here is my sub routine: </p> <pre><code>sub dateDirectory { my $lt = localtime(); # establish a variable lt for the localtime (includes, sec, min, hour, mday, mon, year) my $year = $lt-&gt;year+1900; # establish a variable year and add 1900 to it as it prints only 100+ value my $mon = $lt-&gt;mon+1; # establish a variable mon for month and add 1 as it is a zero-indexed language my $test = 1; # establish the test variable to run a unit test if test = 1 and don't run it if test = 0 if ($test == 1) { $year = 2005; $mon = 3; } my $prev_mon = $mon - 1; my $prev_year = $year - 1; my $prev_yearmonth = "year$prev_mon"; if ($mon == 1) { $prev_mon = 12; $year = $prev_year; $prev_yearmonth = "$year$prev_mon"; } my $prev_monlength = length($prev_mon); if ($prev_monlength == 1) { $prev_yearmonth = sprintf "%d%02d", $year, $prev_mon; } return ($prev_yearmonth); } </code></pre>
<p>You might want to consider learning to use CPAN, and install the <a href="https://metacpan.org/pod/DateTime" rel="nofollow">DateTime</a> module. It makes all sorts of date math easy to do in a correct fashion.</p> <pre><code>use Carp qw&lt; croak &gt;; use DateTime; sub dateDirectory { my ($year, $month) = @_; # croak throws an exception at the calling function. croak "dateDirectory requires both year and month or neither be specified\n" if ( ($year &amp;&amp; !$month) || (!$year &amp;&amp; $month) ); # Get default value of "last month", if not specified. if( !$year ) { my $date = DateTime-&gt;now()-&gt;subtract( months =&gt; 1 ); $year = $date-&gt;year(); $month = $date-&gt;month(); } return "%04d%02d", $year, $month; } </code></pre> <p>You can write test code that calls dateDirectory with whatever year and month you want.</p>
<p>Use <code>@ARGV</code> to access parameters passed to a perl script.</p> <p>In this case, I'd advise you to use <a href="http://perldoc.perl.org/Getopt/Long.html" rel="nofollow"><code>Getopts::Long</code></a> to capture parameters meant to trigger your special processing:</p> <pre><code>use strict; use warnings; use Getopt::Long; GetOptions( 'test' =&gt; \my $test, ); print $test ? "In Testing mode\n" : "Regular mode\n"; </code></pre> <p>And then just execute your script like the following when you want to be in test mode:</p> <pre><code>perl yourscript.pl --test </code></pre>
<p>Like Miller said, <code>Getopts::Long</code> is a great way to supply command line options to your perl program. However, I wanted to add an example of how you would use an argument to set <code>$test</code> to 0 or 1.</p> <pre><code>#!/usr/bin/perl use strict; use warnings; my $test = $ARGV[0]; if ( not defined $test ) { die "please supply an argmument"; } if ( $test == 1 ) { print "test mode\n"; } else { print "normal mode\n"; } </code></pre> <p>Try calling with it <code>perl test.pl 0</code> and <code>perl test.pl 1</code>.</p>
<p>I like perl, but I'd used log rotate with cron instead for this basic function.</p> <p><a href="http://www.adminschoice.com/crontab-quick-reference/" rel="nofollow">http://www.adminschoice.com/crontab-quick-reference/</a></p> <p><a href="http://linuxcommand.org/man_pages/logrotate8.html" rel="nofollow">http://linuxcommand.org/man_pages/logrotate8.html</a></p>