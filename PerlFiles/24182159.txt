Printing sequences of a FASTA file using BioPerl
<p>I have this code</p> <pre><code>use warnings; use Getopt::Long; use Bio::SeqIO; GetOptions("in=s" =&gt; \$file) or die("Error in command line arguments\n"); open $new3, "&gt;", "sequences_tmp.tab"; $seqin = Bio::SeqIO-&gt;new(-file =&gt; $file, -format =&gt; "Fasta"); $seqout = Bio::SeqIO-&gt;new(-file =&gt; "&gt;$new3", -format =&gt; "tab"); while ($seq = $seqin-&gt;next_seq()) { $seqout-&gt;width($seq-&gt;length); $obj = $seq-&gt;id ."\t".$seq-&gt;seq()."\n"; $seqout-&gt;write_seq($obj); } close $new3; </code></pre> <p>expecting to print the sequences this way <code>seq_id TAB sequence</code>. However, this code prints an empty file. Do you know what's going on?</p>
<p>The <code>$obj</code> variable looks useless to me. It is a string, not a sequence object. As you only want to reformat the sequence, you can simple pass <code>$seq</code> to the <code>write_seq()</code>method.</p> <p>So I wondering wether you are executing the loop body at all. You can print debug output for verifying that. If the loop body is not executed, than make sure that your input file really contains a sequence in FASTA format.</p> <p>Also please declare <code>use strict;</code>on top of your script. It will help you to avoid many pitfalls.</p>
<p>You open a filehandle <code>$new3</code>, but then stringify it and use it as a filename in your <code>-file</code> parameter. This is a bug.</p> <pre><code>open $new3, "&gt;", "sequences_tmp.tab"; $seqout = Bio::SeqIO-&gt;new( -file =&gt; "&gt;$new3", # &lt;--- Not what you want -format =&gt; "tab", ); </code></pre> <p><a href="https://metacpan.org/pod/Bio%3a%3aSeqIO#Bio%3a%3aSeqIO-new" rel="nofollow"><code>Bio::SeqIO-&gt;new</code></a> can accept either a filehandle <code>-fh</code> or a filename <code>-file</code> as an initialization parameter. Therefore either of the following would likely work for you:</p> <pre><code>my $seqout = Bio::SeqIO-&gt;new( -fh =&gt; $new3, -format =&gt; "tab", ); #or# my $seqout = Bio::SeqIO-&gt;new( -file =&gt; '&gt;sequences_tmp.tab', -format =&gt; "tab", ); </code></pre> <p>Your code could use further cleaning up as well:</p> <ul> <li>Include <a href="http://perldoc.perl.org/strict.html" rel="nofollow"><code>use strict;</code></a> and <a href="http://perldoc.perl.org/warnings.html" rel="nofollow"><code>use warnings;</code></a> in EVERY perl script.</li> <li>Include <a href="http://perldoc.perl.org/autodie.html" rel="nofollow"><code>use autodie;</code></a> anytime you're doing file processing.</li> </ul> <p>Applying these and removing the likely debugging artifacts from your code reduces it to:</p> <pre><code>use strict; use warnings; use autodie; use Getopt::Long; use Bio::SeqIO; GetOptions( "in=s" =&gt; \my $infile, ) or die "Error in command line arguments\n"; my $outfile = "sequences_tmp.tab"; my $seqin = Bio::SeqIO-&gt;new(-file =&gt; $infile, -format =&gt; "Fasta"); my $seqout = Bio::SeqIO-&gt;new(-file =&gt; "&gt;$outfile", -format =&gt; "tab"); while (my $seq = $seqin-&gt;next_seq()) { $seqout-&gt;write_seq($seq); } </code></pre>