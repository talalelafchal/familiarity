Side-effect of Perl's print function
<p>I'm wondering why/how <code>print</code> in Perl can have a side-effect.</p> <pre><code>use Scalar::Util qw/looks_like_number/; my @A = (5, '2', 'aaa', 1, 'aab'); my @a = map { looks_like_number($_) } @A; print "1) @a\n"; # prints "4352 1 0 4352 0" print "A print with a side-effect: @A\n"; @a = map { looks_like_number($_) } @A; print "2) @a\n"; # prints "1 1 0 1 0" </code></pre> <p>In this example, <code>looks_like_number</code> returns <code>4352 1 0 4352 0</code> before the print, and <code>1 1 0 1 0</code> after the print.</p> <p>What does <code>print</code> do to these values to affect how they're interpreted by <code>looks_like_number</code>?</p>
<p>When interpolating or otherwise concatenating a numeric value, a stringified version needs to be created. This string is stored within the scalar (in addition to the numeric value) for later use, and this can affect which value <code>looks_like_number</code> returns.</p> <hr> <p>To inspect variables' internals, use <a href="http://search.cpan.org/perldoc?Devel%3a%3aPeek" rel="nofollow">Devel::Peek</a><sup>[1]</sup>.</p> <pre><code>use Devel::Peek qw( Dump ); my @A = (5, '2', 'aaa'); Dump($_) for @A; # Or: Dump(\@A); print "@A\n"; Dump($_) for @A; </code></pre> <p>With Perl 5.20, you get the following: (Rerranged for readability)</p> <pre><code>Before After =============================== =============================== SV = IV(0x4532a78) at 0x4532a88 SV = PVIV(0x45563a0) at 0x4532a88 REFCNT = 2 REFCNT = 2 FLAGS = (IOK,pIOK) FLAGS = (IOK,POK,pIOK,pPOK) IV = 5 IV = 5 PV = 0x454a870 "5"\0 CUR = 1 LEN = 10 SV = PV(0x45336a0) at 0x4532c08 SV = PV(0x45336a0) at 0x4532c08 REFCNT = 2 REFCNT = 2 FLAGS = (POK,IsCOW,pPOK) FLAGS = (POK,IsCOW,pPOK) PV = 0x455cf00 "2"\0 PV = 0x455cf00 "2"\0 CUR = 1 CUR = 1 LEN = 10 LEN = 10 COW_REFCNT = 1 COW_REFCNT = 1 SV = PV(0x4533720) at 0x4550b90 SV = PV(0x4533720) at 0x4550b90 REFCNT = 2 REFCNT = 2 FLAGS = (POK,IsCOW,pPOK) FLAGS = (POK,IsCOW,pPOK) PV = 0x455f210 "aaa"\0 PV = 0x455f210 "aaa"\0 CUR = 3 CUR = 3 LEN = 10 LEN = 10 COW_REFCNT = 1 COW_REFCNT = 1 </code></pre> <p>Look at the <code>FLAGS</code>. When provided a number, the stringification of the number is cached (stored in the scalar) for future use. This is the side-effect mentioned.</p> <p>The value returned by <code>looks_like_number</code> is sometimes a subset of the bits of <code>FLAGS</code><sup>[2]</sup>. This is why the specific value returned varies. It will still return true if it returned true before, and it will still return false if it returned false before.</p> <hr> <ol> <li><p><a href="http://search.cpan.org/dist/illguts/" rel="nofollow">illguts</a> provides information on the format of scalars.</p></li> <li><p>See <a href="http://stackoverflow.com/q/19201234/589924">Behavior of Scalar::Util's <code>looks_like_number</code></a>.</p></li> </ol>