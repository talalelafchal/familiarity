How can you round down to a given number of decimal places in Perl
<p>I'd like to round down to <em>N</em> decimal places (two places for cents). For example</p> <pre><code>5.0166 =&gt; 5.01 0.933 =&gt; 0.93 </code></pre> <p><code>sprintf</code> rounds to the nearest digit so doesn't produce what I want. For example</p> <pre><code>sprintf("%.2f", 5.0166) =&gt; 5.02 </code></pre>
<p>You can mess with a call to <a href="http://perldoc.perl.org/functions/int.html" rel="nofollow"><code>int</code></a> together with multiplication and division to shift the decimal point back and forth, or you can use a string substitution, as shown below, which will work for anything less than 1E15 and greater than 1E-4</p> <p>This will work</p> <pre><code>use strict; use warnings; use 5.010; for (5.0166, 0.933) { say s/\.\d\d\K.+//r; } </code></pre> <p><strong>output</strong></p> <pre><code>5.01 0.93 </code></pre>
<p>Using more lines to show the steps. </p> <pre><code>$x=5.0166; $y=int($x*100); $y=$y/100; print "$y\n"; </code></pre>
<p>Use POSIX::floor (<a href="http://perldoc.perl.org/POSIX.html" rel="nofollow">http://perldoc.perl.org/POSIX.html</a>):</p> <pre><code>use POSIX; $original = 5.0166; $rounded = POSIX::floor($original*100)/100; print "$rounded\n"; </code></pre> <p>If you deal with negative numbers and you'd rather round towards zero rather than rounding down, then use:</p> <pre><code>$rounded = ($original &lt; 0)?(POSIX::ceil($original*100)/100) :(POSIX::floor($original*100)/100); </code></pre> <p>or just</p> <pre><code>$rounded = int($original*100)/100; </code></pre>