Perl MooseX::Declare with method attributes MooseX::MethodAttributes
<p>I am trying to use <a href="https://metacpan.org/pod/Moose" rel="nofollow">Moose</a>, <a href="https://metacpan.org/pod/MooseX::Declare" rel="nofollow">MooseX::Declare</a>, and <a href="https://metacpan.org/pod/MooseX::MethodAttributes" rel="nofollow">MooseX::MethodAttributes</a> to be able to use <code>class</code> and <code>method</code> keywords instead of <code>package</code> and <code>sub</code> and at the same time get the methods attributes, so I need this form of packages and methods:</p> <pre><code>class Moosey { method connect ($user, $pass) : Action GET {...} } </code></pre> <p>If I use <code>sub</code> keyword it will work with attributes but of course no method signatures, If I use <code>method</code> keyword, it will hang the script if I use method attributes.</p> <p>Below is the code I am trying:</p> <pre><code>package Moosey; use Moose; use MooseX::Declare; use MooseX::MethodAttributes; class Moosey { # this works fine sub moosey : Action { print "moosey called"; } # this line hangs the script # Error: Can't locate object method "attributes" via package "MooseX::Method::Signatures::Meta::Method" #method moosey : Action { print "moosey called"; } # this also does not work #method moosey : Get ($name, $email) { print "moosey called"; } } 1; my $class = Moosey-&gt;new; my $attrs = $class-&gt;meta-&gt;get_method('moosey')-&gt;attributes; print "@$attrs"; </code></pre> <p>My question is does these Moose modules allows me to do this.</p>
<p>MooseX::Method::Signatures (which is what MooseX::Declare uses to handle methods) does support attributes, but they need to appear <em>after</em> the signature, not before it:</p> <pre><code>method foo :MyAttr ($arg1, $arg2) { # NO ...; } method foo ($arg1, $arg2) :MyAttr { # YES ...; } </code></pre> <p>However, it <em>does not seem to work</em> with MooseX::MethodAttributes because they both try to override Moose's default metaclass for methods.</p> <p>I would like to be able to say "use <a href="https://metacpan.org/pod/Moops" rel="nofollow">Moops</a> instead". But that seems to fail for a different reason. A workaround is to declare the allowed attributes in <code>UNIVERSAL</code>...</p> <pre><code>use Moops; package UNIVERSAL { use Sub::Talisman qw( Action Get ); } class Moosey using Moose { method moosey1 :Action(FOO,BAR,BAZ) { say "moosey1 called"; } method moosey2 (Str $name = "Bob", Str $email?) :Get { say "moosey2 called $name"; } } </code></pre> <p>Moops provides nice introspection for method signatures:</p> <pre><code>my @params = Moosey-&gt;meta-&gt;get_method("moosey2")-&gt;signature-&gt;positional_params; say $_-&gt;name for @params; # says '$name' # says '$email' </code></pre> <p>But it doesn't provide much in the way for attributes. (Yet.)</p> <p><strong>TL;DR:</strong> no.</p>