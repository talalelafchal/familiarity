how to to extract all text of the form &quot;&lt;key&gt;=&lt;value&gt;&quot; from a log file
<p>Hi I have a requirement where I need to pull text of the form - = from a large log file.</p> <p>log file consists of data like this:</p> <pre><code>[accountNumber=0, email=tom.cruise@gmail.com, firstName=Tom, lastName= , message=Hello How are you doing today ? </code></pre> <p>The output I expect is: </p> <pre><code>accountNumber=0 email=tom.cruise@gmail.com firstName=Tom </code></pre> <p>etc.</p> <p>Can anyone please help ? Also please explain the solution so that I can extend it to cater to my similar needs.</p>
<p>Going off your specific data and desired output, you could try the following:</p> <pre><code>use strict; use warnings; open my $fh, '&lt;', 'file.txt' or die "Can't open file $!"; my $data = do { local $/; &lt;$fh&gt; }; my @matches = $data =~ /(\w+=\S+),/g; print join "\n", @matches; </code></pre> <p><a href="https://eval.in/173114" rel="nofollow"><strong>Working Demo</strong></a></p>
<p><strong>Perl One-Liner</strong></p> <p>Use this:</p> <pre><code>perl -0777 -ne 'while(m/[^ ,=]+=[^,]*/g){print "$&amp;\n";}' yourfile </code></pre>
<p>I wrote a one-liner for this:</p> <pre><code>perl -nle 's/^\[//; for (split(/,/)){s/(?:^\s+|\s+$)//g; print}' input.txt </code></pre> <p>I also made another line of input to test with:</p> <pre><code>Matt@MattPC ~/perl/testing/13 $ cat input.txt [accountNumber=0, email=tom.cruise@gmail.com, firstName=Tom, lastName= , message=Hello How are you doing today ? [accountNumber=2, email=john.smith@gmail.com, firstName=John, lastName= , message=What is up with you? </code></pre> <p>Here is the output:</p> <pre><code>Matt@MattPC ~/perl/testing/13 $ perl -nle 's/^\[//; for (split(/,/)){s/(?:^\s+|\s+$)//g; print}' input.txt accountNumber=0 email=tom.cruise@gmail.com firstName=Tom lastName= message=Hello How are you doing today ? accountNumber=2 email=john.smith@gmail.com firstName=John lastName= message=What is up with you? </code></pre> <h2>Explanation:</h2> <p><strong>Expanded code:</strong></p> <pre><code>perl -nle ' s/^\[//; for (split(/,/)){ s/(?:^\s+|\s+$)//g; print }' input.txt </code></pre> <p><strong>Line by line explanation:</strong></p> <p><code>perl -nle</code> calls <code>perl</code> with the command line options <code>-n</code>, <code>-l</code>, and <code>-e</code>. The <code>-n</code> adds a <code>while</code> loop around the program like this:</p> <pre><code> LINE: while (&lt;&gt;) { ... # your program goes here } </code></pre> <p>The <code>-l</code> adds a newline at the end of every <code>print</code>. And the <code>-e</code> specifies my code which will be in single quotes (<code>'</code>).</p> <p><code>s/^\[//;</code> removes the first <code>[</code> if there is one. This searches and replaces on <code>$_</code> which is equal to the line.</p> <p><code>for (split(/,/)){</code> begins the <code>for</code> loop which will loop through the array returned by <code>split(/,/)</code>. The split will split <code>$_</code> since it was called with just one argument, and it will split on <code>,</code>. <code>$_</code> was equal to the line, but inside the <code>for</code> loop, <code>$_</code> still get set to the element of the array we are on.</p> <p><code>s/(?:^\s+|\s+$)//g;</code> this line removes leading and trailing white space.</p> <p><code>print</code> will print <code>$_</code> followed by a newline, which is our <code>string=value</code>.</p> <p><code>}'</code> close the <code>for</code> loop and finish the <code>'</code>.</p> <p><code>input.txt</code> provide input to the program.</p>
<p>Assuming that each line of the log ends with a closing square bracket, you can use this:</p> <pre><code>#!/usr/bin/perl use strict; use warnings; my $line = '[accountNumber=0, email=tom.cruise@gmail.com, firstName=Tom, lastName= , message=Hello How are you doing today ?]'; while($line =~ /([^][,\s][^],]*?)\s*[],]/g) { print $1 . "\n"; } </code></pre>