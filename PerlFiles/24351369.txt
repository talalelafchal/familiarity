Handle signals. Perl
<p>How could i write a program which handle such signals ?</p> <ul> <li>SIGUSR1 - print the statistic (like dd utility does);</li> <li>SIGUSR2 - print the amount of free memory;</li> <li>SIGINT - send USR1 to itself and quit the program.</li> </ul> <p>That's what i got and there is no output:</p> <pre><code>$| = 1; kill 'USR1'; kill 'USR2'; $SIG{USR1} = {print `dd if=/def/zero of=/dev/null bs=512`}; $SIG{USR2} = {print `free -m`}; $SIG{INT} = { kill 'USR1' =&gt; $$; die}; </code></pre>
<ol> <li>You didn't specify to which program you wanted to send the signal.</li> <li>You sent the signals before setting the handlers!</li> <li>You're missing "<code>sub</code>".</li> </ol> <p>&#x20;</p> <pre><code>use strict; use warnings; $| = 1; $SIG{USR1} = sub { print `dd if=/def/zero of=/dev/null bs=512`; }; $SIG{USR2} = sub { print `free -m`; }; $SIG{INT} = sub { kill USR1 =&gt; $$; die "Interrupt"; }; kill USR1 =&gt; $$; kill USR2 =&gt; $$; </code></pre> <hr> <p>Also,</p> <ol> <li><code>print `...`</code> is a silly way of writing <code>system('...')</code>.</li> <li>Don't send a signal to call a function!</li> </ol> <p>&#x20;</p> <pre><code>use strict; use warnings; $| = 1; sub job1 { system('dd if=/def/zero of=/dev/null bs=512'); } sub job2 { system('free -m'); } $SIG{USR1} = \&amp;job1; $SIG{USR2} = \&amp;job2; $SIG{INT} = sub { job1(); die "Interrupt"; }; kill USR1 =&gt; $$; kill USR2 =&gt; $$; </code></pre>