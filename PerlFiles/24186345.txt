Array content into hash KEYS in a row
<p>I have a problem that I solved but in a dirty and non-dynamic way. So i'd like to know if anybody had a better solution.</p> <p>I have an array, and I want to use each element of an array as keys for a SINGLE value (I don't care about the value actually, I use this method to build a sort of tree, but anyway, that's not the point)</p> <p>My solution is like this atm :</p> <pre><code>@array = qw(un deux voila coucou hey whatsup); $num_elements = scalar(@array); switch ($num_elements) { case 1 { $arbre{$array[0]} = 1 } case 2 { $arbre{$array[0]}{$array[1]} = 2 } case 3 { $arbre{$array[0]}{$array[1]}{$array[2]} = 3 } case 4 { $arbre{$array[0]}{$array[1]}{$array[2]}{$array[3]} = 4 } case 5 { $arbre{$array[0]}{$array[1]}{$array[2]}{$array[3]}{$array[4]} = 5 } case 6 { $arbre{$array[0]}{$array[1]}{$array[2]}{$array[3]}{$array[4]}{$array[5]} = 6 } case 7 { $arbre{$array[0]}{$array[1]}{$array[2]}{$array[3]}{$array[4]}{$array[5]}{$array[6]} = 7 } else { print "previous case not true" } } </code></pre> <p>As you can see it only works if I have no more than 7 elements in my array, otherwise I'll have to add another case. And of course it might happen since I'll do this with several arrays.</p> <p>Anybody has a better solution ? Condisering the fact that I really dont care about the value. I put 1 2 3 4... 7 as ans exemple but it could be 1 or 5 anywhere it wouldn't matter.</p> <p>Thanks !</p>
<p>Use <a href="http://search.cpan.org/perldoc?Data%3a%3aDiver" rel="nofollow">Data::Diver</a>.</p> <pre><code>use Data::Diver qw( DiveVal ); my %arbre; DiveVal(\%arbre, map \$_, @array) = 1; </code></pre> <p>Without Data::Diver:</p> <pre><code>sub dive :lvalue { my $p = \shift; $p = \($$p-&gt;{$_}) for @_; return $$p; } my %arbre; dive(\%arbre, @array) = 1; </code></pre> <p>Depending on how you use the hash, you might be able to use the following solution which is much simpler and uses far less memory:</p> <pre><code># If you can guarantee that chr(0) won't occur in @array $arbre{ join "\0", @array } = 1; # If @array can contain any characters. (5.10+, IIRC) $arbre{ pack('(N/a*)*', @array } = 1; </code></pre> <hr> <p>PS - I recommend against using the Switch.pm module. It's an experimental module that can result in really hard to diagnose errors, and it doesn't really help you at all.</p>
<p>If the final value doesn't matter then presumably another hash reference will do?</p> <p>Like this</p> <pre><code>use strict; use warnings; my @keys = qw(un deux voila coucou hey whatsup); my %arbre; my $hash = \%arbre; $hash = ( $hash-&gt;{$_} = {} ) for @keys; use Data::Dump; dd \%arbre; </code></pre> <p><strong>output</strong></p> <pre><code>{ un =&gt; { deux =&gt; { voila =&gt; { coucou =&gt; { hey =&gt; { whatsup =&gt; {} } } } } }, } </code></pre>