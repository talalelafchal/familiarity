How to access JSON data from perl?
<p>I have a JSON file as below.</p> <pre><code>{ "card":{ "cardName":"10AN10G", "portSignalRates":[ "10AN10G-1-OTU2", "10AN10G-1-OTU2E", "10AN10G-1-TENGIGE", "10AN10G-1-STM64" ], "listOfPort":{ "10AN10G-1-OTU2":{ "portAid":"10AN10G-1-OTU2", "signalType":"OTU2", "tabNames":[ "PortDetails" ], "requestType":{ "PortDetails":"PTP" }, "paramDetailsMap":{ "PortDetails":[ { "type":"dijit.form.TextBox", "name":"signalType", "title":"Signal Rate", "id":"", "options":[ ], "label":"", "value":"OTU2", "checked":"", "enabled":"false", "selected":"" }, { "type":"dijit.form.TextBox", "name":"userLabel", "title":"Description", "id":"", "options":[ ], "label":"", "value":"", "checked":"", "enabled":"true", "selected":"" }, { "type":"dijit.form.Select", "name":"Frequency", "title":"Transmit Frequency" } ] } } } } } </code></pre> <p>I require the output to be:</p> <pre><code>signalType:"Signal Rate", userLabel:"Description", Frequency:"Transmit Frequency",.. ,..... </code></pre> <p>I tried with:</p> <pre><code>grep -oP '(?&lt;=\"title\":\")[^"]*' file &gt; outfile </code></pre> <p>but this just splits the value of title and returns. </p> <p>Can I use perl to access elements of the JSON data that I want?</p>
<p>I suggest to use <code>decode_json</code> instead of a regex. First, install the JSON module from CPAN:</p> <pre><code>sudo perl -MCPAN -e 'install JSON' </code></pre> <p>Alternatively you can use <code>apt-get</code> on Ubuntu:</p> <pre><code>sudo apt-get install libjson-pp-perl </code></pre> <p>Once it is installed, you can use this code:</p> <pre><code>my $json = '{... your json string ...}'; my $decoded = decode_json($json); $decoded-&gt;{'card'}{'listOfPort'}{'10AN10G-1-OTU2'}{'signalType'} </code></pre> <p>You can find more details in <a href="http://xmodulo.com/2013/04/how-to-parse-json-string-in-perl.html" rel="nofollow">this</a> article.</p>
<p>Perl on the command line:</p> <pre><code>perl -pe 's/"name":"([^"]+)","title":/"$1":/g' file &gt; outfile </code></pre> <p>Output (pertinent part):</p> <pre><code>{"card": ... "signalType":"Signal Rate", ... "userLabel":"Description", ... "Frequency":"Transmit Frequency" ... } </code></pre>
<p>Yes you can use the <a href="https://metacpan.org/pod/JSON" rel="nofollow"><code>JSON</code></a> perl module. Of course it meeds to be installed via <code>cpan</code>, <code>cpanm</code> or your system's packaging system. Parse the JSON into a hash and then use that in the normal way from Perl. Here's a quick example:</p> <pre><code>use JSON; use IO::All; use strict; use warnings; my $data &lt; io '/tmp/data.json'; my $j = decode_json($data); use DDP; # for quick debug printing p $j-&gt;{card}{listOfPort}{"10AN10G-1-OTU2"}{paramDetailsMap}{PortDetails}[0]{title} "Signal Rate" </code></pre> <p>You might want to use some deep diving techniques to get at the inner values more easily/programmatically (take a look at the <a href="https://metacpan.org/pod/Data::Diver" rel="nofollow"><code>Data::Diver</code></a> module for that) - my example is meant to show only that it is possible and a bit of the mechanics of mapping JSON into a <code>perl</code> hash with the excellent JSON module. The documentation has lots of useful examples.</p>