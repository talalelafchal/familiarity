Searching and printing a regular expression in Perl
<p>I need to search an input file which has the regular expression multiple times. I need to print the expression on a new line.</p> <pre><code>"1-BBMD-DC-FB"|4|{47|"Interval"|00:00:00|00:00:00|1}{48|"Interval"|00:00:00|00:00:00|1}{49|"Interval"|00:00:00|00:00:00|1}{52|"Interval"|00:00:00|00:00:00|1}|{1|"Interval"|"All"|0}|{52|"Interval"|"day"} </code></pre> <p>The desired output should be :</p> <pre><code>1-BBMD-DC-FB"|{47|"Interval"|00:00:00|00:00:00|1} 1-BBMD-DC-FB"|{48|"Interval"|00:00:00|00:00:00|1} .... </code></pre> <p>How to achieve this? This is what I tried:</p> <pre><code>while (&lt;IN&gt;) { my ($a,$s,$d,$f,$g,$h,$j) = split (/{/, $_); #print ("$a \n"); print ("$a$s \n"); print ("$a$d \n"); print ("$a$d \n"); print ("$a$f \n"); print ("$a$g \n"); print ("$a$h \n"); } close IN; </code></pre>
<p>A crude parser (since it parses some parts twice), but simple parser:</p> <pre class="lang-none prettyprint-override"><code>my $field_re = qr/ "[^"]*" | [^{|}]* /x; my $curlies_re = qr/ \{ (?: $field_re (?: \| $field_re )* )? \} /x; while (&lt;&gt;) { my ($id, $curlies) = / ^ ( $field_re ) \| $field_re \| ( $curlies_re* ) \| /x or die("Invalid input or bad parser\n"); my @curlies = $curlies =~ /$curlies_re/g; print("$id|$_\n") for @curlies; } </code></pre> <p>Output:</p> <pre><code>"1-BBMD-DC-FB"|{47|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"|{48|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"|{49|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"|{52|"Interval"|00:00:00|00:00:00|1} </code></pre>
<p><a href="http://www.regexplanet.com/advanced/perl/index.html" rel="nofollow">http://www.regexplanet.com/advanced/perl/index.html</a></p> <p>Will let you test various regex expressions on your data then you can tranlate them to code.</p> <p>I used {*} as the regex According to planet regex </p> <pre><code> $var = $input =~ $regex $var=1 $`="1-BBMD-DC-FB"|4|{47|"Interval"|00:00:00|00:00:00|1 $&amp;=} $'={48|"Interval"|00:00:00|00:00:00|1}{49|"Interval"|00:00:00|00:00:00|1}{52|"Interval"|00:00:00|00:00:00|1}|{1|"Interval"|"All"|0}|{52|"Interval"|"day"} </code></pre> <p>Its a good place to experiment</p>
<p>From looking at your input, there is an optional <code>|</code> charcacter. </p> <p><strong>To print what you want,</strong> replace <code>}\|?</code> with <code>}\n</code></p> <p><code>$subject =~ s/}/}\n/g;</code></p> <p>Output:</p> <pre><code>1-BBMD-DC-FB"|4|{47|"Interval"|00:00:00|00:00:00|1} {48|"Interval"|00:00:00|00:00:00|1} {49|"Interval"|00:00:00|00:00:00|1} {52|"Interval"|00:00:00|00:00:00|1} {1|"Interval"|"All"|0} {52|"Interval"|"day"} </code></pre> <p><strong>To split:</strong></p> <pre><code>@result = split(m/}\|?/, $subject, 0); </code></pre>
<pre><code>my $test = '"1-BBMD-DC-FB"|4|{47|"Interval"|00:00:00|00:00:00|1}{48|"Interval"|00:00:00|00:00:00|1}{49|"Interval"|00:00:00|00:00:00|1}{52|"Interval"|00:00:00|00:00:00|1}|{1|"Interval"|"All"|0}|{52|"Interval"|"day"}'; my ($prefix, @list) = split(/{/, $test); # split with "{" as delimiter $prefix =~ s/4\|//g; # Remove "4|" after the prefix foreach my $item (@list) { $item =~ s/\|$//g; # Remove "|" that some entires have between "}{" print "$prefix{$item\n"; # Put "{" back before each element } </code></pre> <p>Output:</p> <pre><code>"1-BBMD-DC-FB"| {47|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"| {48|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"| {49|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"| {52|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"| {1|"Interval"|"All"|0} "1-BBMD-DC-FB"| {52|"Interval"|"day"} </code></pre>
<p>Using good ole <a href="http://perldoc.perl.org/functions/split.html" rel="nofollow"><code>split</code></a></p> <pre><code>use strict; use warnings; while (&lt;DATA&gt;) { chomp; # Split on | not followed by } my ($name, $num, $groups, $all, $day) = split /\|(?![^\{\}]*\})/; # Separate groups in third field. for my $group (split /(?=\{)/, $groups) { print "$name|$group\n"; } } __DATA__ "1-BBMD-DC-FB"|4|{47|"Interval"|00:00:00|00:00:00|1}{48|"Interval"|00:00:00|00:00:00|1}{49|"Interval"|00:00:00|00:00:00|1}{52|"Interval"|00:00:00|00:00:00|1}|{1|"Interval"|"All"|0}|{52|"Interval"|"day"} </code></pre> <p>Outputs:</p> <pre><code>"1-BBMD-DC-FB"|{47|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"|{48|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"|{49|"Interval"|00:00:00|00:00:00|1} "1-BBMD-DC-FB"|{52|"Interval"|00:00:00|00:00:00|1} </code></pre>
<pre><code>$stringName = qq{"1-BBMD-DC-FB"|4|{47|"Interval"|00:00:00|00:00:00|1}{48|"Interval"|00:00:00|00:00:00|1}{49|"Interval"|00:00:00|00:00:00|1}{52|"Interval"|00:00:00|00:00:00|1}|{1|"Interval"|"All"|0}|{52|"Interval"|"day"} }; $stringName =~ s|\}\{|\}\n\{|g; </code></pre> <p>This will split them onto new lines for you with a \n char where you want them. Optionally you can then split into an array on \n if you need.</p>