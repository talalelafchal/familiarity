Interrupt (SIGINT) perl script from perl script running under apache
<p>I have a perl script running as root that monitors a serial device and sends commands to it. Under apache, I have another perl script that displays a gui for the controlling 'root' script.</p> <p>I'm trying to interrupt via sigint and sigusr1 the root perl script from the gui perl script but get operation not permitted, probably as one is root the other is not.</p> <p>I basically want the gui to be able to tell the controlling root script to pass some command to the serial device. </p> <p>If I run the gui script from the cmd line as root it can successfully signal the root script </p> <p>I'm not sure where to go from here, any suggestions on methods to interrupt a root script when not running as root? calling seperate "signal" script as shown:</p> <pre><code> @cmds = ("perl /var/www/signal.cgi", "$perlSerialPID", "test"); if (0 == system(@cmds)) { # code if the command runs ok print "system call ok: $?"; } else { # code if the command fails print "not ok $?"; } # try backticks $output = `perl /var/www/signal.cgi $perlSerialPID test`; print "&lt;br&gt;:::$output"; </code></pre> <p>signal.cgi:</p> <pre><code>#!/usr/bin/perl $pid = $ARGV[0]; $type = $ARGV[1]; if($type eq "test"){ if(kill 0, $pid) { print "perl-serial $pid running!"; }else{ print "perl-serial $pid gone $!"; } }elsif($type eq "USR1"){ if(kill USR1, $pid) { print "perl-serial interrupted"; }else{ print "perl-serial interrupt failed $!"; } }else{ print "FAILED"; } </code></pre>
<ol> <li><p>Use <a href="http://perldoc.perl.org/perlipc.html#Named-Pipes" rel="nofollow">named pipes</a> for IPC. </p> <p>The downside is that you'll have to retrofit your main script to read from the named pipe as event driven process.</p></li> <li><p>Similar in concept to above (with the same downside), but use <a href="http://perldoc.perl.org/perlipc.html#Sockets%3A-Client%2FServer-Communication" rel="nofollow">sockets</a> for communication.</p></li> <li><p>Create a separate "send a signal" script that's called via a system call from your UI, and make that new script <a href="http://en.wikipedia.org/wiki/Setuid" rel="nofollow">SUID</a> and owned by root - in which case it will execute with root's permissions. </p> <p>Downside: this is <strong>ripe</strong> for security abuse so harden this very carefully.</p></li> </ol>