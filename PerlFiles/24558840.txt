Can threads be used to increase the speed of hash key matching in perl?
<p>Can threading be used to increase the speed of hash key matching? I have a hash that contains the top 1 Mil alexa sites. Matching ~100 unique hosts against the alexa hash takes far longer than I'd like it to. What/where would be the most appropriate way/place to introduce threading to speed this thing up?</p> <pre><code>foreach my $host (keys %unique_hosts) { if ($host =~ /(([\w\-]+)\.([\w\-]+))$/) { my $domain = $1; $in_alexa++ if /$domain$/ ~~ %alexa_sites; } } </code></pre> <p>Edit: Mem looks ok. </p> <pre><code>PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 7533 user 20 0 457m 339m 1676 R 99.0 34.2 0:15.31 bind.pl </code></pre>
<p>For each host, you are doing one million regex matches. That's why it's slow. </p> <p>Yes, threads could help by using otherwise unused CPU cores. But that's not the right solution.</p> <p>I'm assuming you're trying to check if <code>$host</code> is a key of <code>%alexa_sites</code> or a subdomain of a key in <code>%alexa_sites</code>.</p> <pre><code>for my $host (keys %unique_hosts) { while (1) { if (exists($alexa_sites{$host})) { ++$in_alexa; last; } $host =~ s/^[^.]*\.// or last; } } </code></pre> <p>Now you're doing ~300 fast hash lookups instead of 100,000,000 slow regex matches.</p>