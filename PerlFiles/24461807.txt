capture column and print to file in perl
<p>I have an array that is basically a list of group IDs. I'll use the array to put the ID in a proprietary linux command using a foreach loop, but also use the array elements to name the files as well (each ID needs its output to its own seperate file). Im having some issues, opening the file and either using AWK to find and print the columns OR I have also tried the split command which I cannot get working either. Here's a sample of what I have so far:</p> <pre><code>#!/usr/bin/perl -w # Title: groupmem_pull.pl # Pupose: Pull group membership from group IDs in array use strict; use warnings; my $gpath = "/home/user/output"; my @grouparray = ( "219", "226", "345", "12", ); print "Checking Groups:\n"; foreach (@grouparray) { print `sudo st-admin show-group-config --group $_ | egrep '(Group ID|Group Name)'`; print `sudo st-admin show-members --group $_ &gt; "$gpath/$_.txt"`; #print `cat $gpath/$_`; #print `cat $gpath/$_ | awk -F"|" '{print $2}' &gt;`; open (FILE, "$gpath/$_.txt") || die "Can't open file\n: $!"; while(my $groupid = &lt;FILE&gt;) { `awk -F"|" '{print $2}' "$gpath/$_.txt" &gt; "$gpath/$_.txt"`; #print `cat "$gpath/$_.txt" | awk -F"|" '{print $2}' &gt; $_.txt`; } </code></pre> <p>Right now its erring on the AWK piece saying that "Use of uninitialized value $2 in concatenation (.) or string at ./groupmem_pull.pl line 57, line 2." The output from the first commands basically puts every group ID pull in a text file seperated with pipes. Im having a hell of a time with this one and Im not able to get some of the samples Ive found on stackoverflow to work. Your help is appreciated!</p>
<p>Hambone's code worked for me. AntonH also had a great suggestion which seemed to resolve the errors, but it caused the outputs to be blank. The best way was to simplify my original code by implimenting some of Hambone's suggestion about how to call a function that would pull out the column i needed via Split instead of AWK.</p> <p>Thank you!</p>
<p>I think AntonH is right about the error message. However, I also think it's possible the result of the program is not what you expect. I also agree that maybe a "pure Perl" solution might work even better if you eliminate the AWK component.</p> <p>If I understand you correctly, you want to run this command for each group in @grouparray.</p> <pre><code>sudo st-admin show-members --group &lt;group id&gt; </code></pre> <p>From there, you read the second column, delimited by the pipe character, and output all values in that column to a file named <code>&lt;group&gt;.txt</code> in the <code>$gpath</code> folder.</p> <p>If that's the case, I think something like this would work.</p> <pre><code>use strict; use warnings; my $gpath = "/home/user/output"; my @grouparray = qw(219 226 345 12); print "Checking Groups:\n"; foreach (@grouparray) { open my $FILE, '-|', qq{sudo st-admin show-members --group $_} or die $!; open my $OUT, '&gt;', "$gpath/$_.txt" or die $!; while (&lt;$FILE&gt;) { # chomp; # if there are only two fields my ($field) = (split /\|/, $_, 3)[1]; print $OUT $field, "\n"; } close $OUT; close $FILE; } </code></pre>
<p>I would think that escaping the dollars in the string when it's not refering to a Perl variable would solve the problem (in your case, the <code>$2</code> becomes <code>\$2</code>).</p> <pre><code>`awk -F"|" '{print \$2}' "$gpath/$_.txt" &gt; "$gpath/$_.txt"`; </code></pre>