Having trouble with hashes; first time Perl questions
<p>I'm really sorry if this question is too vague; I'll do my best to try and summarize my problem. It's my first time messing with Perl and I think I'm close to getting it.</p> <p>I have a hash that stores information on calls as they are received from Asterisk.</p> <p>Each call should have an entry in the hash, with the key being the unique ID (I know this might be bad practice, but the key will be destroyed at the end of the script, so I'm not worried about duplication).</p> <p>I need to continually append new data to the hash element as I get it from Asterisk, and then at certain times print the results to a TCP socket.</p> <p>Here's what I've got. My problem is that I can't seem to append the new data to the same hash key.</p> <p>Please excuse my amateurism; any help on formatting/best practice/anything is appreciated!</p> <pre><code>use Asterisk::AMI; use IO::Socket; use strict; use warnings; use Data::Dumper; my %call; my $sock = new IO::Socket::INET( PeerAddr =&gt; '127.0.0.1', PeerPort =&gt; '1234', Proto =&gt; 'tcp', ); die "Could not create socket: $!\n" unless $sock; my $astman = Asterisk::AMI-&gt;new( PeerAddr =&gt; '127.0.0.1', PeerPort =&gt; '5038', Username =&gt; 'user', Secret =&gt; 'secret', Events =&gt; 'on', Handlers =&gt; { #default =&gt; \&amp;eventhandler, Dial =&gt; \&amp;ringcheck, Bridge =&gt; \&amp;bridgecheck, Newchannel =&gt; \&amp;newchannel } ); die "Unable to connect to asterisk" unless ($astman); # Default event handler sub eventhandler { my ($ami, $event) = @_; print 'Got Event: ', $event-&gt;{'Event'}, "\r\n"; } sub newchannel { my ($ami, $event) = @_; if ($event-&gt;{'Context'} eq "from-trunk") { $call = $event-&gt;{'Uniqueid'} =&gt; { caller_name =&gt; $event-&gt;{'CallerIDName'}, caller_number =&gt; $event-&gt;{'CallerIDNum'}, dnis =&gt; $event-&gt;{'Exten'} }; } } sub ringcheck { my ($ami, $event) = @_; if ($event-&gt;{'SubEvent'} eq "Begin") { $call = $event-&gt;{'UniqueID'} =&gt; { system_extension =&gt; $event-&gt;{'Dialstring'}, dest_uniqueid =&gt; $event-&gt;{'DestUniqueID'} }; print $sock "R|", $call{ $event-&gt;{'UniqueID'} }{'caller_name'}, "|", $call{ $event-&gt;{'UniqueID'} }{'caller_number'}, "|", $call{ $event-&gt;{'UniqueID'} }{'system_extension'}, "||", $call{ $event-&gt;{'UniqueID'} }{'dnis'}, "\r\n"; } } sub bridgecheck { my ($ami, $event) = @_; if ($event-&gt;{'Bridgestate'} eq "Link") { # Call has started print $sock "A|", $call{ $event-&gt;{'UniqueID'} }{'caller_name'}, "|", $call{ $event-&gt;{'UniqueID'} }{'caller_number'}, "|", $call{ $event-&gt;{'UniqueID'} }{'system_extension'}, "||", $call{ $event-&gt;{'UniqueID'} }{'dnis'}, "\r\n"; } elsif ($event-&gt;{'Bridgestate'} eq "Unlink") { # Call has ended } } EV::loop </code></pre> <p>To be clear, the question is how should I be appending the new data, in the <code>ringcheck</code> subroutine for instance, to the <code>%call</code> hash created in the <code>newchannel</code> subroutine?</p>
<p>You're using the wrong operator for assignment. <code>=&gt;</code> is a synonym for <code>,</code>, with the additional effect of quoting its left-hand operand (unless it's a variable.)</p> <p>I don't know anything about Asterisk, but you probably want:</p> <pre><code>$event-&gt;{'UniqueID'} = { system_extension =&gt; $event-&gt;{'Dialstring'}, dest_uniqueid =&gt; $event-&gt;{'DestUniqueID'} }; </code></pre> <p>I'm not sure what you're trying to do with <code>$call</code>, though.</p>
<p>Since you don't have <code>$call</code> declared you must have had an error message from <code>use strict</code>. It would have helped a lot if you told us that.</p> <ul> <li><p>Please use minimal indenting: four spaces or less is usual, and I use two. Large indents make the code difficult to follow</p></li> <li><p>Don't terminate a line of output with <code>"\r\n"</code>, even on Windows. Perl handles all that, and you should just print <code>"\n"</code> for a newline on any platform</p></li> <li><p>The hash <code>%call</code> is a completely separate variable from the scalar <code>$call</code>, so assigning to <code>$call</code> won't affect your hash at all. If <code>strict</code> was in place you would have seen an error because <code>$call</code> hasn't been defined</p></li> <li><p>To assign to a hash element, use <code>$hash{$key}</code>. Think of it like an array element, but instead of integers, hash elements are indexed with strings. If you want to use a constant as a hash key then you may omit the quotation marks, so <code>$call{'caller_name'}</code> is the same as <code>$call{caller_name}</code></p></li> <li><p>Looking just at <code>ringcheck</code> for now, it makes your code much more brief and easier to follow if you copy out the value of <code>$event-&gt;{UniqueID}</code> into a scalar variable instead of using the same hash element everywhere you need it. You can do the same thing with hash reference <code>$call{$unique_id}</code></p></li> </ul> <p>I have changed your code to something that may work, or at least will help you on your way. I have used <code>printf</code> to separate the format from the data and make it more readable.</p> <pre><code>sub ringcheck { my ($ami, $event) = @_; if ($event-&gt;{SubEvent} eq 'Begin') { my $unique_id = $event-&gt;{UniqueID}; my $this_call = $call{$unique_id}; $this_call-&gt;{system_extension} = $event-&gt;{Dialstring}; $this_call-&gt;{dest_uniqueid} = $event-&gt;{DestUniqueID}; printf $sock "R|%s|%s|%s||%s\n", $this_call-&gt;{caller_name}, $this_call-&gt;{caller_number}, $this_call-&gt;{system_extension}, $this_call-&gt;{dnis}; } } </code></pre>