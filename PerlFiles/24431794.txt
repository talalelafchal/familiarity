Perl functions naming convention for long names
<p>I have read some articles online on the naming convention for <a href="http://perldoc.perl.org/perlstyle.html" rel="nofollow">Perl style</a> which suggest using lowercase letters and separating words by underscore for functions or methods names. Some others use the first word in lowercase then capitalize the other words. Of course Windows .NET etc Capitalize every word and no underscore.</p> <p>I have some packages methods many words like <code>entriesoncurrentpage</code>, if I follow Perl style suggested I should do it like:</p> <pre><code>sub entries_on_current_page {...} </code></pre> <p>this added four underscore letters to the method name, the other style is:</p> <pre><code>sub entriesOnCurrentPage {...} </code></pre> <p>and Windows style should be:</p> <pre><code>sub EntriesOnCurrentPage {...} </code></pre> <p>PHP sometimes uses all lowercase with underscore like <code>mysql_real_escape_string()</code> and sometimes uses all lowercase without underscore like <code>htmlspecialchars</code>, of course PHP function names are not case sensitive so this feature is not supported in Perl.</p> <p>So the question is, for the long name with many words what is the best style to use for Perl coding.</p>
<p>Originally, most Perl developers used camel casing with the first letter lowercased. This is the standard with most programming languages. Names with first letter capitalized were used for classes and methods.</p> <p>Later on, Damian Conway's book <a href="http://rads.stackoverflow.com/amzn/click/0596001738" rel="nofollow">Perl Best Practices</a> suggested using underscores rather than camel casing. Damian argued that it increased readability, and was not that much harder to type.</p> <p>Damian Conway's suggestion on names became the standard because 1). He was correct. It's much more legible and isn't that much harder to type, and most importantly 2). It was incorporated into <a href="http://perltidy.sourceforge.net" rel="nofollow">Perltidy</a>. Perltidy is a program that helps standardize your code according to Damian's suggestions. Perltidy is much like <a href="http://checkstyle.sourceforge.net" rel="nofollow">CheckStyle</a> in Java.</p> <p>Are these arbitrary standards? Yes, all standards are somewhat arbitrary in nature. You have a few candidate suggestions for rules, and you must make a decision:</p> <ul> <li>Should the curly brace in <code>while</code> loops and <code>if</code> statements be appended on the end of the line, or go under the <code>while</code> or <code>if</code> statement. In standerd C style, curly braces are <em>cuddled</em>. In Java, they're not suppose to be according to <em>CheckStyle</em>. In Kornshell, the <code>then</code> goes under the <code>if</code>. In Bash, the standard is now that the <code>then</code> goes on the same line even though the Bash interpreter doesn't really like it. (You have to add a semicolon before the <code>then</code> because it's considered a separate command.</li> <li>How should variable names be done. In most languages, CamelCase rules. In .NET, you even capitalize the first character, but in Perl, we use underscores.</li> <li>Should constants be all uppercase? Most languages have agreed with that. However, in shell script, you usually reserve all uppercase variable names for special environment variables such as <code>$PWD</code>, <code>$PATH</code>, etc. Therefore, in Bash and Kornshell scripts, constant variables are all camelCased like regular variables.</li> </ul> <p>The idea is to follow the standard for <em>that</em> language. Why? Because the standard says so. Because you can't argue with <em>The Standard</em> as you can with your fellow programmers whether or not curly braces are cuddled or not. The main this is to realize that most standards may be somewhat arbitrary, but they don't really affect the way you program. By everyone following a standard, you make it easier to understand other people's code.</p>