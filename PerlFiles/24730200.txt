How to access a customize hash structure in Perl?
<p>I have a custom perl hash data structure . The sturcture is like bellow:</p> <pre><code>%myhash = ( 1 =&gt; { 'scf1' =&gt; [ 1,3,0,4,6,7,8, ], 'sef2' =&gt; [ 10,15,20,30, ] }, 2 =&gt; { 'scf1' =&gt; [ 10,3,0,41,6,47,81, ], 'scf3' =&gt; [ 1,66,0,123,4,1,2435,33445,1 ] }, ); </code></pre> <p>How I can access this kind of perl structure. </p>
<p>From your <code>Data::Dumper</code> dump, I see that you have a hash called <code>%myhash</code>. Each element in that hash contains a reference to another hash. And, each element in that inner hash contains a reference to an array.</p> <p>Let's take your Data::Dumper, and restate it like this:</p> <pre><code>$myhash{1}-&gt;{sff1} = [1, 3, 0, 4, 6, 7, 8]; $myhash{1}-&gt;{sef2} = [10, 15, 20, 30]; $myhash{2}-&gt;{scf1} = [10, 3, 0, 41, 6, 47, 81]; $myhash{2}-&gt;{scf3} = [1, 66, 0, 123, 4, 2435, 33445, 1]; </code></pre> <p>Same thing. It's just a bit more compact.</p> <p>To print this out, we'll need to loop through each of these layers of references:</p> <pre><code># # First loop: The outer hash which is a plain normal hash # for my $outer_key ( sort keys %myhash ) { # # Each element in that hash points to another hash reference. Dereference # my %inner_hash = %{ $myhash{$outer_key} }; for my $inner_key ( sort keys %inner_hash ) { # # Finally, this is our array reference in the inner hash. Let's dereference and print # print "\$myhash{$outer_key}-&gt;{$inner_key}: "; my @array = @{ $myhash{$outer_key}-&gt;{$inner_key} }; for my $value ( @array ) { print "$value"; } print "\n"; } } </code></pre>
<p>I'm afraid your code ... is showing signs that you are misunderstanding what hashes do, and how they work. Specifically, when you're referencing <code>@{$myhash}</code> - this is NOT the same as the <code>%myhash</code> that you <code>undef</code>. </p> <p>Likewise - what's going on with <code>@features</code>? It looks like you're trying to build an array of arrays, but doing so by iterating through <code>fetchrow_array</code> and then pushing. Multidimensional arrays are sometimes the right tool for the job, but it is unclear why it would be suitable for what you're doing. (After all, you don't use it for anything else in this piece of code). </p> <p>You've also got <code>$line[2]</code> - which is also not doing what you might think - it does NOT refer to <code>$line</code>, it's the second element of a list called <code>@line</code> - which doesn't exist.</p> <p>You are also trying to process is list of database entries, and set it '-1' if it's undef. </p> <p>We need some more detail about what data you're getting out of your database - <code>$sth -&gt; fetchrow_array()</code> could be anything. However, I'd strongly suggest that what you want to do is name each of the fields as you go. I'd suggest you DON'T want to be using <code>$line</code> there, because it's ... well, wrong. You're iterating columns in the row you've just fetched. </p> <p>Which field in your fetched array are the keys to your hash? It looks like you're trying to key on 'field 5' 'field 7' and trying to insert values of 'field 1' and 'field 2'. Is that correct? </p> <p>Oh, and turn on <code>use strict; use warnings</code> whilst you're at it. </p>
<p>get the inner array:</p> <pre><code>my @array = @{$hash{1}-&gt;{'scf1'}}; # is same as # my $array_ref = $hash{1}-&gt;{'scf1'}; # my @array = @{$array_ref}; # then you can my $some_thing = $array[0]; </code></pre> <p>or get one element:</p> <pre><code>$hash{1}-&gt;{'scf1'}-&gt;[0]; </code></pre>