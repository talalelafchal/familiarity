One-line creation of a perl array reference to an array of n empty strings
<p>I am initializing several parameters that are passed as optional key-value combinations to a subroutine:</p> <pre><code>my %options = ( center =&gt; 1, caption =&gt; '', tablecss =&gt; '', captioncss =&gt; '', datacss =&gt; '', headercss =&gt; '', allcellcss =&gt; '', texalignment =&gt; '', midrules =&gt; 0, columnscss =&gt; \(('') x $numcol), @_, ); </code></pre> <p>My problem is with the <code>columnscss</code> key. What I have in the above is leaving <code>$options{columnscss}</code> as a string reference, not an array reference. How can I initialize that key's value to be <code>['','',...,'']</code> with <code>$numcol</code> empty strings? I would like to avoid first creating the <code>array ('') x $numcol</code> in a separate line, and then assigning the key value as a reference to it. I believe that is what <a href="http://stackoverflow.com/questions/5323845/perl-how-to-create-an-array-with-n-empty-strings-or-zeros">this answer</a> would have me do.</p>
<p>Use an anonymous array:</p> <pre><code>columnscss =&gt; [ ('') x $numcol ] </code></pre> <p>The backslash operator is distributed, i.e. <code>\( $x, $y)</code> is the same as <code>(\$x, \$y)</code>.</p>