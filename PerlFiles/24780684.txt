Write file name in sequence of generation in perl
<p>I have some 1000 files in a directory. Naming convention of the file is like below.</p> <pre><code>TC_01_abcd_16_07_2014_14_06.txt TC_02_abcd_16_07_2014_14_06.txt TC_03_abcd_16_07_2014_14_07.txt . . . . TC_100_abcd_16_07_2014_15_16.txt . . . TC_999_abcd_16_07_2014_17_06.txt </code></pre> <p>I have written some code like this</p> <pre><code>my @dir="/var/tmp"; foreach my $inputfile (glob("$dir/*abcd*.txt")) { print $inputfile."\n"; } </code></pre> <p>While running this it is not printing in sequence.</p> <p>it it printing till 09 file then it is printing 1000th file name then </p> <pre><code>TC_01_abcd_16_07_2014_11_55.txt TC_02_abcd_16_07_2014_11_55.txt TC_03_abcd_16_07_2014_11_55.txt TC_04_abcd_16_07_2014_11_55.txt TC_05_abcd_16_07_2014_11_56.txt TC_06_abcd_16_07_2014_11_56.txt TC_07_abcd_16_07_2014_11_56.txt TC_08_abcd_16_07_2014_11_56.txt TC_09_abcd_16_07_2014_11_56.txt TC_100_abcd_16_07_2014_12_04.txt TC_101_abcd_16_07_2014_12_04.txt TC_102_abcd_16_07_2014_12_04.txt TC_103_abcd_16_07_2014_12_04.txt TC_104_abcd_16_07_2014_12_04.txt TC_105_abcd_16_07_2014_12_04.txt TC_106_abcd_16_07_2014_12_04.txt TC_107_abcd_16_07_2014_12_04.txt TC_108_abcd_16_07_2014_12_05.txt TC_109_abcd_16_07_2014_12_05.txt TC_10_abcd_16_07_2014_11_56.txt TC_110_abcd_16_07_2014_12_05.txt TC_111_abcd_16_07_2014_12_05.txt TC_112_abcd_16_07_2014_12_05.txt TC_113_abcd_16_07_2014_12_05.txt TC_114_abcd_16_07_2014_12_05.txt TC_115_abcd_16_07_2014_12_05.txt TC_116_abcd_16_07_2014_12_05.txt TC_117_abcd_16_07_2014_12_05.txt TC_118_abcd_16_07_2014_12_05.txt TC_119_abcd_16_07_2014_12_06.txt TC_11_abcd_16_07_2014_11_56.txt </code></pre> <p>Please guide me how to print in sequence</p>
<p>The files are sorted according to the rules of shell glob expansion, which is a simple alpha sort. You will need to sort them according to a numeric sort of the first numeric field.</p> <p>Here is one way to do that:</p> <pre><code># Declare a sort comparison sub, which extracts the part of the filename # which we want to sort on and compares them numerically. # This sub will be called by the sort function with the variables $a and $b # set to the list items to be compared sub compareFilenames { my ($na) = ($a =~ /TC_(\d+)/); my ($nb) = ($b =~ /TC_(\d+)/); return $na &lt;=&gt; $nb; } # Now use glob to get the list of filenames, but sort them # using this comparison foreach my $file (sort compareFilenames glob("$dir/*abcd*.txt")) { print "$file\n"; } </code></pre> <p>See: <a href="http://perldoc.perl.org/functions/sort.html" rel="nofollow">perldoc for sort</a> </p>
<p>That's printing the files in order -- ASCII order that is.</p> <p>In ASCII, the underscore (<code>_</code>) is after the digits when sorting. If you want to sort your files in the correct order, you'll have to sort them yourself. Without <code>sort</code>, there's no guarantee that they'll print in any order. Even worse for you, you don't really want to print the files in either numeric sorted order (because the file names aren't numeric) or ASCII order (because you want <code>TC_10</code> to print before <code>TC_100</code>. </p> <p>Therefore, you need to write your own sorting routine. Perl gives you the <a href="http://perldoc.perl.org/functions/sort.html" rel="nofollow">sort</a> command. By default, it will sort in ASCII order. However, you can define your own subroutine to sort in the order you want. <code>sort</code> will pass two values to your in your sort routine <code>$a</code> and <code>$b</code>. What you can do is parse these two values to get the sort keys you want, then use the <code>&lt;=&gt;</code> or <code>cmp</code> operators to return the values in the correct sort order:</p> <pre><code>#! /usr/bin/env perl use warnings; use strict; use autodie; use feature qw(say); opendir my $dir, 'temp'; # Opens a directory for reading my @dir_list = readdir $dir; closedir $dir; @dir_list = sort { # My sort routine embedded inside the sort command my $a_val; my $b_val; if ( $a =~ /^TC_(\d+)_/ ) { $a_val = $1; } else { $a_val = 0; } if ( $b =~ /^TC_(\d+)_/ ) { $b_val = $1; } else { $b_val = 0; } return $a_val &lt;=&gt; $b_val; } @dir_list; for my $file (@dir_list) { next if $file =~ /^\./; say "$file"; } </code></pre> <p>In my <code>sort</code> subroutine am going to take <code>$a</code> and <code>$b</code> and pull out the number you want to sort them by and put that value into <code>$a_val</code> and <code>$b_val</code>. I also have to watch what happens if the files don't have the name I think they may have. Here I simply decide to set the sort value to <code>0</code> and hope for the best.</p> <p>I am using <code>opendir</code> and <code>readdir</code> instead of globbing. This will end up including <code>.</code> and <code>..</code> in my list, and it will include any file that starts with <code>.</code>. No problem, I'll remove these when I print out the list.</p> <p>In my test, this prints out:</p> <pre><code>TC_01_abcd_16_07_2014_11_55.txt TC_02_abcd_16_07_2014_11_55.txt TC_03_abcd_16_07_2014_11_55.txt TC_04_abcd_16_07_2014_11_55.txt TC_05_abcd_16_07_2014_11_56.txt TC_06_abcd_16_07_2014_11_56.txt TC_07_abcd_16_07_2014_11_56.txt TC_08_abcd_16_07_2014_11_56.txt TC_09_abcd_16_07_2014_11_56.txt TC_10_abcd_16_07_2014_11_56.txt TC_11_abcd_16_07_2014_11_56.txt TC_100_abcd_16_07_2014_12_04.txt TC_101_abcd_16_07_2014_12_04.txt TC_102_abcd_16_07_2014_12_04.txt TC_103_abcd_16_07_2014_12_04.txt TC_104_abcd_16_07_2014_12_04.txt TC_105_abcd_16_07_2014_12_04.txt TC_106_abcd_16_07_2014_12_04.txt TC_107_abcd_16_07_2014_12_04.txt TC_108_abcd_16_07_2014_12_05.txt TC_109_abcd_16_07_2014_12_05.txt TC_110_abcd_16_07_2014_12_05.txt TC_111_abcd_16_07_2014_12_05.txt TC_112_abcd_16_07_2014_12_05.txt TC_113_abcd_16_07_2014_12_05.txt TC_114_abcd_16_07_2014_12_05.txt TC_115_abcd_16_07_2014_12_05.txt TC_116_abcd_16_07_2014_12_05.txt TC_117_abcd_16_07_2014_12_05.txt TC_118_abcd_16_07_2014_12_05.txt TC_119_abcd_16_07_2014_12_06.txt </code></pre> <p>Files are sorted numerically by the first set of digits after <code>TC_</code>.</p>
<p>Here you go:</p> <pre><code>#!/usr/bin/perl use warnings; use strict; sub by_substring{ $a=~ /(\d+)/; my $x=$1; $b=~ /(\d+)/; my $y=$1; return $x &lt;=&gt; $y; } my @files=&lt;*.txt&gt;; @files = sort by_substring @files; for my $inputfile (@files){ print $inputfile."\n"; } </code></pre> <p>It will not matter if your filenames start with "TC" or "BD" or "President Carter", this will just use the first set of adjacent digits for the sorting.</p>
<p>the sort in the directory will be alphanumeric, hence your effect. i do not know how to sort glob by creation date, here is a workaround:</p> <pre><code>my @dir="/var/tmp"; my @files = glob("$dir/*abcd*.txt"); my @sorted_files; for my $filename (@files) { my ($number) = $filename =~ m/TC_(\d+)_abcd/; $sorted_files[$number] = $filename; } print join "\n", @sorted_filenames; </code></pre>