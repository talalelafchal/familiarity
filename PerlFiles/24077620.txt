Why Carp verbose does not work?
<p>Why <code>use Carp qw(verbose);</code> does not work in the way I want it to? I mean that just <code>ERROR at ./test.pl line 8.</code> is printed by I want also a stack trace. Please help to make <code>die</code> tracing stack.</p> <pre><code>#!/usr/bin/perl use strict; use warnings; use Carp qw(verbose); sub c { die "ERROR"; } sub b { c; } sub a { b; } a; </code></pre>
<p>Of <code>use Carp qw( verbose );</code>, the documentation says:</p> <blockquote> <p>As a debugging aid, you can force Carp to treat a <code>croak</code> as a <code>confess</code> and a <code>carp</code> as a <code>cluck</code> across all modules.</p> </blockquote> <p>You don't use <code>croak</code> or <code>carp</code>, so <code>use Carp qw( verbose );</code> is useless.</p> <p>You can achieve what you want by overriding <code>die</code> or by creating a <code>$SIG{__DIE__}</code> handler. <a href="http://search.cpan.org/perldoc?Carp%3a%3aAlways" rel="nofollow">Carp::Always</a> is a pre-made solution that does this for you.</p>
<p>Then you want <a href="http://perldoc.perl.org/Carp.html" rel="nofollow"><code>confess</code></a></p> <pre><code>use strict; use warnings; use Carp qw(confess); sub c { confess "ERROR"; } sub b { c; } sub a { b; } a(); </code></pre> <p>Outputs:</p> <pre><code>ERROR at confess.pl line 6. main::c() called at confess.pl line 7 main::b() called at confess.pl line 8 main::a() called at confess.pl line 9 </code></pre> <p>And if you can't change your other code, you can use a <code>$SIG{__DIE__}</code></p> <pre><code>use Carp qw(confess); $SIG{__DIE__} = \&amp;confess; sub c { die "ERROR"; } sub b { c; } sub a { b; } a(); </code></pre>
<p>Try using <a href="https://metacpan.org/pod/Devel%3a%3aConfess" rel="nofollow">Devel::Confess</a>. Usage:</p> <pre><code>perl -d:Confess myscript.pl </code></pre> <p>It makes <code>die</code> print a stack track.</p>