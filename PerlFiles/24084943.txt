How can I use a foreach loop to check which elements of an array are equal to a given string?
<p>My foreach loop is not working as I wish it to. I want it to loop through the array and find when one element is present and when the element is not present. However, I get all of them saying <code>Not an apple</code>. </p> <pre><code>@fruit = ('apple','orange','pear'); foreach(@fruit){ if(@fruit != 'apple'){ print "Not an apple\n"; } else{ print "Is an apple\n"; } } </code></pre>
<p>Strings are compared using <code>eq</code> (equal) and <code>ne</code> (not equal). <code>$_</code> is implicit <code>foreach</code> variable and it should be used like,</p> <pre><code>if ($_ ne 'apple') </code></pre> <p>If you want to use explicit loop variable:</p> <pre><code>foreach my $v (@fruit) { if($v ne 'apple'){ print "Not an apple\n"; } else{ print "Is an apple\n"; } } </code></pre> <p>Now, why do you get all <code>"Not an apple\n"</code> printed for all elements of <code>@fruit</code>? First, the <code>!=</code> results in the left-hand side being evaluated in scalar context which gives the number of elements of <code>@fruit</code>, i.e. <em><code>3</code></em>. On the other hand, <code>'apple'</code>, not being numeric, evaluates to <em><code>0</code></em> in this numeric comparison for equality. Therefore, the <code>if</code> condition, for each element of the array reduces to:</p> <pre><code>if (3 != 0) { </code></pre> <p>and, of course, that holds for every element of the array, regardless of what that array element is.</p>
<p>Using the modules strict and warnings will help you avoid these mistakes. <a href="http://www.perlmonks.org/?node_id=111088" rel="nofollow">http://www.perlmonks.org/?node_id=111088</a></p>
<p>Let's use a bit more modern way of writing Perl:</p> <pre><code>use strict; use warnings; use feature qw(say); my @fruits = qw( apple orange pear ); for my $fruit ( @fruits ) { if ( $fruit ne 'apple' ) { say "$fruit is not an apple"; } else { say "This is an apple."; } } </code></pre> <p>You made several mistakes in your code, and if you had <code>use warnings;</code> in your code, Perl would have told you about them. This is why <code>use warnings</code> should always be included. The <code>use strict</code> forces you to use stricter syntax which means that you can't use <em>barewords</em> (you must quote strings and make sure functions are property declared). And, you have to <em>declare</em> your variables (usually with <code>my</code>).</p> <p>You had:</p> <pre><code>foreach (@fruit) { </code></pre> <p>which means that each fruit would be in the <code>$_</code> variable, but instead, you were using</p> <pre><code>if ( @fruit != ... ) </code></pre> <p>In your <code>if</code> statements. That is, you're comparing the entire <code>@fruit</code> array to the value. Also, the <code>!=</code> is for numeric comparisons only. You want <code>ne</code> for string comparisons. The <code>use warnings</code> would have caught both of these errors.</p> <p>Your <code>if</code> statements should have looked like:</p> <pre><code>if ( $_ ne '...' ) { </code></pre> <p>However, I don't usually recommend to use <code>$_</code> for a variety of reasons. It's original purpose was to make the code easier to read, but it usually fails at that. Instead, I usually will use an explicit variable name:</p> <pre><code>for my $fruit ( @fruits ) { </code></pre> <p>instead of</p> <pre><code>foreach (@fruit); </code></pre> <p>Also note that I use plurals when naming arrays and hashes (since they're usually groups of objects anyway), this way, I don't end up with <code>@fruit</code>, <code>$fruit</code>, and <code>%fruit</code> which can be confusing (although legal). You could add a suffix (i.e. <code>@fruit_list</code>) to help clarify an array from the individual variable too.</p> <p>I also like using <code>say</code> instead of <code>print</code> because <code>say</code> automatically adds that <code>\n</code> to the end of my printed output. I get the <code>say</code> command when I add in the pragma <code>feature qw(say);</code> to my program.</p> <p>I also like using <code>qw(...)</code> to define one word lists. It's cleaner and easier to read than using quotes and commas. Note I do not add commas between my fruit names.</p>