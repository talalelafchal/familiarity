Why is the backticks operator in Perl not working without the quotes on Windows?
<p>I'm pretty new to Perl, so forgive me if the question is trivial.</p> <p>At work I have got an assignment to create a script which would send out e-mails when other developers would miss the due date of their tasks. As whole thing would have to work on Windows, using Strawberry Perl, I have used windows command <code>date /T</code> to perform the date check. I have called external commands quite a lot, using the backticks operator, but in this particular case the backticks would not work:</p> <pre><code>my $date = `date /T`; </code></pre> <p>Outputs:</p> <pre><code>date: invalid date `/T' </code></pre> <p>Fixed using some additional quotes:</p> <pre><code> my $date = `"date /T"` </code></pre> <p>Outputs:</p> <pre><code>Mon 07/07/2014 </code></pre> <p>My question is: why is that?</p> <p>I would get that if the other external calls with backticks would work the same, but that's the only one I have to call that way, to make it work.</p>
<p>You seem to be accidentally using the Cygwin/GnuTools version of <code>date</code>. </p> <p>Under a Windows command prompt, <code>date /T</code> gives the current time.<br> This is not an executable, this is a <em>command</em>. </p> <p>However, running <code>date /T</code> under the Cygwin/GnuTools environment gives <code>date: invalid date '/T'</code>.<br> This is because the environment <strong>1)</strong> cannot see the Windows <code>date</code> <em>command</em> and <strong>2)</strong> finds a <code>date</code> <em>executable</em> in their <code>PATH</code> environment variable and runs it instead.</p>