Bash command executed in Python
<p>Consider the following command in bash:</p> <pre><code>multi-bleu.perl reference &lt; mt-output </code></pre> <p>I have two questions:</p> <ol> <li>What exactly happens here? My understanding is that <code>reference</code> and <code>mt-output</code> are not arguments, but they are somehow written to <code>stdin</code>. So if they are files, will their contents be written to <code>stdin</code>?</li> <li>How can I run this in a Python script, and get the result of the Perl script? </li> </ol> <p>My attempt below doesn't work. Included in a file <code>test.py</code>:</p> <pre><code>from subprocess import Popen, PIPE import settings command = settings.BLEU + " " + settings.CORPUS + " &lt; " + settings.HYPOTHESIS print command pipe = Popen(command, stdin=PIPE, stdout=PIPE) output = pipe.communicate()[0] print output </code></pre> <p>I run the command printed in the same folder as I run <code>test.py</code>. The former works, the latter doesn't. The error traceback is given below:</p> <pre><code>Traceback (most recent call last): File "/Users/[...]/tests.py", line 6, in &lt;module&gt; pipe = Popen([command], stdin=PIPE, stdout=PIPE) File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py", line 711, in __init__ errread, errwrite) File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py", line 1308, in _execute_child raise child_exception OSError: [Errno 2] No such file or directory </code></pre>
<p>What is happening with your bash / perl example will depend on what the perl script is doing. See the following for an explanation of what is happening on the bash side:</p> <pre><code>[sugarcube-&gt;temp]echo "Foo" &gt; foo [sugarcube-&gt;temp]echo "Bar" &gt; bar [sugarcube-&gt;temp]cat foo &lt; bar Foo [sugarcube-&gt;temp]cat foo Foo [sugarcube-&gt;temp]cat bar Bar [sugarcube-&gt;temp]cat foo - &lt; bar Foo Bar </code></pre> <p>Here I created two files, <code>foo</code> and <code>bar</code>. <code>&lt;</code> does a <a href="http://www.tldp.org/LDP/abs/html/io-redirection.html" rel="nofollow">redirection of file contents to stdin</a>. However, in the first <code>cat</code> example, <code>cat</code> doesn't pick up the (the contents of the redirected file) <code>bar</code>. <code>cat</code> requires an explicit parameter <code>-</code> that tells it to read input from stdin.</p> <p>So, in your example, <code>reference</code> is just an argument to the perl script (which might open it simply as a file). The content of <code>mt-output</code> is redirected to stdin, so if you Perl script reads from stdin, its going to process it.</p> <p>If you want to achieve something similar in Python, your Python script would just have to open any file it receives as its first argument (you might want to consider <a href="https://docs.python.org/2/library/argparse.html#module-argparse" rel="nofollow">argparse</a> to do regular argument parsing to command line programs, although it might be overkill for this particular problem). For processing data from stdin, just read from <a href="https://docs.python.org/2/library/sys.html#sys.stdin" rel="nofollow">sys.stdin</a>.</p>
<p><code>reference</code> is indeed a normal command line argument; its semantics is up to the called program. It might be a file name (input or output), a command or whatever.</p> <p>Now, there are two ways for calling <code>Popen()</code>:</p> <ol> <li><p>with <code>shell=False</code> (the default):</p> <pre><code>with open('mt-output', 'r') as infile: pipe = Popen(['multi-bleu.perl', 'reference'], stdin=infile, stdout=PIPE) </code></pre> <p>resp.</p> <pre><code>with open(settings.HYPOTHESIS, 'r') as infile: pipe = Popen([settings.BLEU, settings.CORPUS], stdin=infile, stdout=PIPE) </code></pre> <p>Here you open the file to be read on your own and pass the opened file for making it the process' standard input.</p> <p>The file given is called directly.</p></li> <li><p>with <code>shell=True</code>:</p> <pre><code>command = settings.BLEU + " " + settings.CORPUS + " &lt; " + settings.HYPOTHESIS pipe = Popen(command, stdout=PIPE) </code></pre> <p>Here you give all you do to the shel which lies between your program and the program to be called. Thus, you don't give an argument list, but one command line.</p> <p>The stdin redirection is performed by the shell as well.</p></li> </ol> <p>The 2nd solution might seem simpler, but it can be very dangerous depending where the data in <code>settings</code> come from and how they look like.</p>