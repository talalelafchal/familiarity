Pack/unpack binary string in Perl
<p>I am attempting to understand a fragment of Perl code. I <em>think</em> its purpose is to make a binary string from an input integer, but in reversed bit order (low bit on the left, high bit on the right). I do not understand what pack/unpack is doing to the input values however; it appears to be incorrect.</p> <p>Consider this test code:</p> <pre><code>for (my $i = 0; $i &lt; 16; $i++) { for (my $j = 0; $j &lt; 16; $j++) { $x = $i * 16 + $j; $x = unpack("b8", pack("U", $x)); printf $x; print " "; } print "\n"; } </code></pre> <p>This produces:</p> <pre><codecode></pre> <p>So, what is going on here? It seems that all the 'high ASCII' values (over 128) are incorrectly converted, but despite reading the documentation for <a href="http://perldoc.perl.org/functions/pack.html" rel="nofollow">pack</a> and <a href="http://perldoc.perl.org/functions/unpack.html" rel="nofollow">unpack</a> I cannot see what is going on here.</p>
<p><code>pack</code>'s <code>U</code> mode packs it into a UTF-8 character which <em>may or may not</em> be one byte. (The fact that your output begins <code>110</code> means that <a href="https://en.wikipedia.org/wiki/UTF-8#Description" rel="nofollow">the result is two bytes long</a>, but that's a different story.)</p> <p><a href="http://perldoc.perl.org/functions/pack.html" rel="nofollow">From the documentation</a>:</p> <pre><code>U - A Unicode character number. Encodes to a character in character mode and UTF-8 (or UTF-EBCDIC in EBCDIC platforms) in byte mode. </code></pre> <p>You should use the <code>C</code> option to ensure that you only get one byte as a result:</p> <pre><code>C - An unsigned char (octet) value. </code></pre> <p>That gives us:</p> <pre><code>for ( my $i = 0; $i &lt; 16; $i++ ) { for ( my $j = 0; $j &lt; 16; $j++ ) { $x = $i * 16 + $j; $x = unpack("b8", pack("C", $x)); printf $x; print " "; } print "\n"; } </code></pre>