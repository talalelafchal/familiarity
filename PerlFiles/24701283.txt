Best way to parse complicated XML with Perl?
<p>I have to parse several XML files using Perl and store variables in a hash. I'd like to filter through certain attributes if possible. Later in my code I pull data from the hash and insert into a database.</p> <p>I have been using <a href="https://metacpan.org/module/XML::Parser" rel="nofollow"><code>XML::Parser</code></a> but I would prefer to parse into a hash rather than handle each tag as it encountered. Any suggestions?</p> <p>I'd like to skip any path that has the attribute <code>kind="dir"</code>. I need the author, date, msg, and the filetypes (the file extensions) of the paths. The <code>&lt;path&gt;</code> tags can have any number and are either of <code>kind</code> "file" or "dir". There can also be multiple <code>&lt;logentry&gt;</code> tags.</p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;log&gt; &lt;logentry revision="3989"&gt; &lt;author&gt;cergyl&lt;/author&gt; &lt;date&gt;2013-07-19T05:31:01.212620Z&lt;/date&gt; &lt;paths&gt; &lt;path action="M" kind="dir"&gt;/team.admin/trunk/auth.conf&lt;/path&gt; &lt;/paths&gt; &lt;path action="M" kind="file"&gt;/team.admin/trunk/file.cpp&lt;/path&gt; &lt;msg&gt;Whitespace change to verify repository synchronization&lt;/msg&gt; &lt;/logentry&gt; &lt;/log&gt; </code></pre> <p></p> <pre><code>my $XML_Parser = XML::Parser-&gt;new( Handlers =&gt; { Start =&gt; \&amp;hdl_xml_tag_start, End =&gt; \&amp;hdl_xml_tag_end, Char =&gt; \&amp;hdl_xml_nonmarkup_char, Default =&gt; \&amp;hdl_xml_default } ); # This event is generated when an XML start tag is recognized. Parser is an XML::Parser::Expat instance. sub hdl_xml_tag_start { my ( $parser, $element, %attributes ) = @_; $attributes{ '_str' } = "$element:"; $XML_Attributes_Hash_Ref = \%attributes; return; } # This event is generated when an XML end tag is recognized. Note that an XML empty tag (&lt;foo/&gt;) generates both a start and an end event. sub hdl_xml_tag_end { my ( $parser, $element ) = @_; #format_message($XML_Attributes_Hash_Ref); format_svn_history( $XML_Attributes_Hash_Ref ); return; } # This event is generated when non-markup is recognized. The non-markup sequence of characters is in String. # A single non-markup sequence of characters may generate multiple calls to this handler. sub hdl_xml_nonmarkup_char { my ( $parser, $string ) = @_; $XML_Attributes_Hash_Ref-&gt;{ '_str' } .= $string; return; } #This is called for any characters that don't have a registered handler. sub hdl_xml_default { return; } </code></pre>
<p>Personally, I like the XML::DOM::Parser from <a href="http://search.cpan.org/~tjmather/XML-DOM-1.44/lib/XML/DOM.pm" rel="nofollow">XML::DOM</a>. But I use XML::Twig to pretty print them.</p> <p><code> my $xp = XML::DOM::Parser->new(); my $doc = $xp->parse("&lt;xml>&lt;/xml>"); $doc->dispose(); my $doc = $xp->parsefile("file.xml"); $doc->dispose(); // Pretty Print My poorly formatted xml doc my $xpp = XML::Twig->new(pretty_print => 'indented'); $xpp->parse("&lt;xml>&lt;/xml>"); $xpp->print(); </code></p>
<p>With the limited information you have offered it is hard to write a comprehensive solution, but here is something that uses <a href="https://metacpan.org/module/XML::Twig" rel="nofollow"><code>XML::Twig</code></a> to process the XML data you have shown and display all (one) <code>path</code> elements that don't have a <code>kind</code> attribute equal to <code>dir</code>.</p> <p><a href="https://metacpan.org/module/XML::LibXML" rel="nofollow"><code>XML::LibXML</code></a> is also a very high quality module based on the C-coded <a href="http://en.wikipedia.org/wiki/Libxml2" rel="nofollow">libxml2</a></p> <pre><code>use strict; use warnings; use XML::Twig; my $parser = XML::Twig-&gt;new( twig_handlers =&gt; { path =&gt; \&amp;path_handler, } ); $parser-&gt;parse(*DATA); sub path_handler { my ($twig, $path) = @_; return if $path-&gt;att('kind') eq 'dir'; print $path-&gt;text, "\n"; } __DATA__ &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;log&gt; &lt;logentry revision="3989"&gt; &lt;author&gt;cergyl&lt;/author&gt; &lt;date&gt;2013-07-19T05:31:01.212620Z&lt;/date&gt; &lt;paths&gt; &lt;path action="M" kind="dir"&gt;/team.admin/trunk/auth.conf&lt;/path&gt; &lt;/paths&gt; &lt;path action="M" kind="file"&gt;/team.admin/trunk/file.cpp&lt;/path&gt; &lt;msg&gt;Whitespace change to verify repository synchronization&lt;/msg&gt; &lt;/logentry&gt; &lt;/log&gt; </code></pre> <p><strong>output</strong></p> <pre><code>/team.admin/trunk/file.cpp </code></pre>