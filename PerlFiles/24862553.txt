Some syntax clarification: ${*$sock}
<p>I am looking into the IO:Socket.pm module and I see the first time the "*$sock" notation.</p> <pre><code>sub socket { @_ == 4 or croak 'usage: $sock-&gt;socket(DOMAIN, TYPE, PROTOCOL)'; my($sock,$domain,$type,$protocol) = @_; socket($sock,$domain,$type,$protocol) or return undef; ${*$sock}{'io_socket_domain'} = $domain; ${*$sock}{'io_socket_type'} = $type; ${*$sock}{'io_socket_proto'} = $protocol; $sock; } </code></pre> <p>What is the intent of the following syntax ?</p> <pre><code>${*$sock}{'io_socket_domain'} = $domain; </code></pre> <p>Especially I am referring to the asterisk notation ... $sock is an object as far I understand but what is this thing: ${*$sock} ? And how is this asterisk operator called and its purpose?</p> <p>I would be grateful if someone can make me see with some practical minimalistic example.</p>
<p>In summary: because filehandles (and hence socket filehandles in this case) are GLOB refs and not HASH refs. You can't simply</p> <pre><code>$sock-&gt;{field} </code></pre> <p>because that would only work if $sock is a <code>HASH</code> reference. Instead, for <code>GLOB</code>-based objects we use the hash slot of the underlying glob as a place to store the object instance fields</p> <pre><code> $sock # is a GLOB reference *$sock # is the underlying GLOB %{*$sock} # is the hash at the HASH slot of the GLOB ${*$sock}{key} # is a member of the HASH </code></pre>
<p><code>IO::Handle</code> (and therefore <code>IO::Socket</code>, <code>IO::File</code>, etc) returns a blessed <a href="http://perldoc.perl.org/perldata.html#Typeglobs-and-Filehandles" rel="nofollow">typeglob</a> reference from its constructor. This allows the object itself to be used as a filehandle, as in:</p> <pre><code>use IO::File; $fh = IO::File-&gt;new(); if ($fh-&gt;open("&lt; file")) { print &lt;$fh&gt;; $fh-&gt;close; } </code></pre> <p>In <code>IO::Socket</code>, the blessed typeglob also holds a hash. <code>${*$sock}{'io_socket_domain'}</code> is dereferencing the typeglob (just like <code>@$arrayref</code> would dereference an array reference) then accessing this hash.</p>