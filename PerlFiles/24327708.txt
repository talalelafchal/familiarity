Perl - Getting value from comma separated line
<p>I've got a perl file parser I am trying to rewrite. This is a dynamic parser, and I need to extract a value from a comma separated line.</p> <p>The line I want to get one value from looks something like this: </p> <pre><code>ENTRYNAME-8,44544,99955,52,156,15:16:16,15:19:16 </code></pre> <p>(<em>This is the only line in the each parsed file that starts with<code>ENTRYNAME-</code>. Everything after the <code>-</code> changes for each file being parsed</em>)</p> <p>I want the value after the second comma. (<code>99955</code> in the example above)</p> <p>I have tried the following without any luck:</p> <pre><code>if (/ ENTRYNAME-\((.*)\,(.*)\,(.*)\)/ ) { $entry_nr = $3; print "entry number = $entry_nr"; next; } </code></pre>
<p>Whenever possible separate parsing from processing and validating your data.</p> <p>In this case, if you have comma separated values, go ahead and separate those values. Then worry about filtering your data. Whether you use <code>Text::CSV</code> for parsing is a separate issue, although probably a good idea.</p> <pre><code>use strict; use warnings; while (&lt;DATA&gt;) { chomp; my @cols = split ','; if ($cols[0] =~ /^ENTRYNAME/) { print $cols[2], "\n"; } } __DATA__ ENTRYNAME-8,44544,99955,52,156,15:16:16,15:19:16 </code></pre> <p>Outputs:</p> <pre><code>99955 </code></pre>
<p>split it into an array and address directly:</p> <pre><code>my @a = split /,/, $_; print $a[2]; </code></pre> <p>what happens here is that whatever is in $_ (typically from a <code>for (@allmylines) {</code>-loop) will be split at each occurence of <code>,</code>, placing them all into an array (<code>@a</code>) and removing the <code>,</code>. then you may address the fields in the arrays, starting with 0 for the first field. thus if you like to address the third field, use <code>$a[2]</code> to retrieve the third item.</p>
<p>The problem is that your first capture string <code>.*</code> is greedy, so it will consume all of your string. It will then backtrack to find two commas and as a result match from the end. </p> <p>Also:</p> <ul> <li>You are matching literal parentheses <code>\(</code> for some strange reason. Since you do not have any such, those will never match. </li> <li>You do not need to escape commas <code>\,</code></li> <li>You cannot have a random space in your regex <code>/ ENTRY...</code> unless you have one in your target string</li> <li>You do not need to capture strings that you are not going to use</li> </ul> <p>A simple fix is to use a stricter capture group (including the points above):</p> <pre><code>if (/ENTRYNAME-\d+,\d+,(\d+)/ ) </code></pre> <p>This will capture into <code>$1</code>.</p> <p>As mpapec points out in the comment, you may wish to use <code>Text::CSV</code> to parse CSV data. It will be a lot safer. If your data is simple enough, this solution will do.</p>