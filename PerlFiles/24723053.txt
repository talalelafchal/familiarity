How to encode accented and other foreign characters to UTF8 in perl
<p>I've tried everywhere to learn and get my head around this but I haven't gotten anywhere.</p> <p>Lets take a string:</p> <blockquote> <p>Macaroon dessert muffin. Sugar plum cookie macaroon soufflé lollipop candy brownie tiramisu croissant. Wafer ice cream chocolate bar gummies. Cheesecake powder chupa chups. Donut pastry candy canes. Liquorice tootsie roll candy canes jelly-o. Sesame snaps applicake sugar plum cupcake apple pie. Chocolate ice cream cotton candy soufflé. Apple pie danish unerdwear.com wafer unerdwear.com muffin applicake pudding. Jelly cotton candy brownie lollipop macaroon sweet roll carrot cake chocolate bar. Tart lollipop cookie unerdwear.com gummies powder. Jelly halvah apple pie pudding caramels marzipan. Marzipan jelly-o topping pie powder icing. Gummies jelly-o tiramisu bear claw brownie cheesecake. Icing pie oat cake lollipop carrot cake toffee. Donut jelly sugar plum muffin. Fruitcake tiramisu jujubes muffin tart jelly-o pie fruitcake. Unerdwear.com jujubes unerdwear.com gummi bears jelly beans brownie macaroon. Marzipan halvah cake tootsie roll cotton candy cotton candy donut. Soufflé wafer candy canes carrot cake. Cheesecake muffin powder gummies carrot cake. Halvah ice cream applicake liquorice macaroon apple pie cupcake. Cake dragée liquorice. Sugar plum biscuit halvah. Carrot cake candy canes sweet candy. Candy canes marzipan marshmallow danish cake jelly-o brownie cookie oat cake.</p> </blockquote> <p>When I do:</p> <pre><code>Encode::encode('UTF-8', $text); </code></pre> <p>on that string, the word Soufflé gets encoded to SoufflÃ©.</p> <p>When I look at this, I don't recognise it as any code point or as any valid encoding mapping (i.e. <code>&amp;#xe9;</code>). How am I to expect it to reach its destination in a way that it can be read correctly? In other words, why does Perl give me Ã© when I've encoded it as UTF8 and it should have given me <code>&amp;#xe9;</code>?</p> <pre><code>xmlbody($text); sub xmlbody { $description = shift; use XML::Writer; my $writer = XML::Writer-&gt;new( OUTPUT =&gt; 'self', ENCODING =&gt; 'utf-8' ); my $writer-&gt;xmlDecl('utf-8'); ## ...structure $writer-&gt;cdataElement('description',$description); ## ...more structure $writer-&gt;end(); } </code></pre> <p><code>use utf8;</code> doesn't seem to be encoding the special characters in the above mentioned string, it still gives "Ã©". Would having <code>$writer-&gt;xmlDecl('utf-8')</code> be the equivalent of <code>use open qw(:std :utf8)</code>, since I'm not using a filehandle or stdin/stdout?</p>
<blockquote> <p>When I look at this, I don't recognise it as any code point or as any valid encoding mapping</p> </blockquote> <p>If you look at <a href="http://www.fileformat.info/info/unicode/char/e9/index.htm" rel="nofollow">the relevant page on fileformat.info</a>, you'll see what is happening.</p> <p>Initially, in your program you have a Unicode character "é". The Unicode character code for that is U+00E9. When you encode that character as UTF-8, you get a character that consists of two bytes - 0xC3 0xA9. If you look at <a href="http://en.wikipedia.org/wiki/ISO-8859-1#Codepage_layout" rel="nofollow">the codepage for ISO-8859-1</a>, you'll see that 0xC3 is "Ã" and 0xA9 is "©".</p> <p>If you try to display that two-byte character on a device that understands UTF-8 and is expecting UTF-8 then you'll get "é". Otherwise the device will use its native character encoding (which is likely to be ISO-8859-1) and you'll get the <a href="http://en.wikipedia.org/wiki/Mojibake" rel="nofollow">Mojibake</a> that you've seen.</p> <p>As <a href="http://stackoverflow.com/questions/24723053/how-to-encode-accented-and-other-foreign-characters-to-utf8-in-perl#comment38354049_24723053">tchrist says</a>, the easiest way to handle this is to use Perl's tools that take care of it without you having to think about it.</p>