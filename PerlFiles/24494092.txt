Passing bash variable to perl one-liners - insights required
<p>I am fairly new to Perl and I have been toying with one-liners to get some file operations done. I am using Perl to print segment between defined by line numbers which are obtained from another file. My current issue is as follows:</p> <pre><code>export var=10 ; perl -ne 'print $_ if $. == $ENV{var}' filename.txt </code></pre> <p>prints line number 10, but if i want to print from line 10 to the end of file, i tried</p> <pre><code>export var=10 ; perl -ne 'print if $ENV{var} .. -1' filename.txt </code></pre> <p>--fails. The output generated prints the whole file. Additionally, the following works,</p> <pre><code>export var=10 ; perl -ne 'print if $. &gt;= $ENV{var} $$ $. &lt;= $ENV{var}+5 ' filename.txt </code></pre> <p>But since i am dealing with a variable file length after the required line, this is not a viable solution.</p>
<p>From line 10 to the end of the file:</p> <pre><code>export var=10 ; perl -ne 'print $_ if $. &gt; $ENV{var}' filename.txt </code></pre> <p>If you want it to include line 10:</p> <pre><code>export var=10 ; perl -ne 'print $_ if $. &gt;= $ENV{var}' filename.txt </code></pre>
<p>Perl flip-flop operator has some of his own warts (like <em>is my variable line number or boolean?</em>), so when in doubt do explicit comparison to <code>$.</code> line number.</p> <pre><code>export var=10 ; perl -ne 'print if $.== $ENV{var} .. -1' filename.txt </code></pre>
<p>You don't need to use Environmental variables:</p> <pre><code>var=10; echo "$(seq 20 35)" | perl -lne 'print if $. &gt;= '"$var"';' 29 30 31 32 33 34 35 </code></pre> <p>Take a look at the way I escaped <code>$var</code></p> <p>Using flip-flop:</p> <pre><code>var=10; echo "$(seq 20 35)" | perl -lne 'print if $.== '"$var"' .. -1;' 29 30 31 32 33 34 35 </code></pre>