Global symbol &quot;%self&quot; requires explicit package name in Perl module
<p>I'm writing a Perl module and I've come across this confusing error message while running my tests.</p> <pre><code>sub new { my $class = shift; my $self = @_; $word = $self{word} || die "No word provided."; @definitions = @{decode_json(get($urban_url . $word))-&gt;{'list'}} || die "Error during fetch/decode."; @tags = @{decode_json(get($urban_url . $word))-&gt;{'tags'}} || "Error during fetch/decode."; bless($self, $class); return $self; } </code></pre> <p>As you can see, <code>$self</code> is declared properly. <code>word</code> is a global variable declared above the <code>new</code> subroutine. The failure occurs in every test at the <code>use</code> statement, and traces back to the assignment of <code>$word</code>.</p> <p>Thanks in advance.</p>
<p>Scalar <code>$self</code> is declared, but you are using non-existing hash <code>%self</code>. </p> <pre><code>my $self = @_; ... $self{word} ... </code></pre> <p>should be</p> <pre><code>my %args = @_; ... $args{word} ... </code></pre> <hr> <p>Of course, you still need <code>$self</code>. You want it to be a reference to a new empty hash. You need:</p> <pre><code>my $self = {}; # Creates an anon hash and places a reference to it in $self. </code></pre> <hr> <p>Next, the following doesn't do what you want.</p> <pre><code>my @foos = @{ REF } || die(LIST); </code></pre> <p>The following will:</p> <pre><code>my @foos = @{ REF } or die(LIST); </code></pre> <p>The following will probably be more useful:</p> <pre><code>my $foos = REF or die(LIST); </code></pre> <hr> <p>Finally, you never actually store the data in your object. </p> <pre><code>my $data = decode_json(get($urban_url . $word)); or die("Error during fetch/decode\n"); $self-&gt;{definitions} = $data-&gt;{list}; $self-&gt;{tags} = $data-&gt;{tags}; </code></pre> <hr> <p>After a few style changes, you get what I'd use.</p> <pre><code>sub new { my ($class, %args) = @_; my $word = $args{word} or die("No word provided"); my $data = decode_json(get($urban_url . $word)); or die("Error during fetch/decode\n"); my $self = bless({}, $class); $self-&gt;{definitions} = $data-&gt;{list}; $self-&gt;{tags} = $data-&gt;{tags}; return $self; } </code></pre> <p>I lied. I doubt I would do a web request and the parsing of the response in an object constructor.</p>