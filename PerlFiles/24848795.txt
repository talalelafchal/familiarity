Why can't I assign a variable to a hash entry in Perl?
<p>Sorry, I'm super rusty with Perl. See the following code:</p> <pre><code>foreach my $hash (keys %greylist) { $t = $greylist{$hash}; print $greylist{$hash}[4] . "\n"; print $t[4] . "\n"; } </code></pre> <p>Why does <code>$t[4]</code> evaluate to a blank string, yet <code>$greylist{$hash}[4]</code> which should be the same thing evaluates to an IP address?</p>
<p><code>$greylist{$hash}</code> contains an array reference. When you do:</p> <pre><code>print $greylist{$hash}[4]; </code></pre> <p>Perl <a href="http://perldoc.perl.org/perlreftut.html#Arrow-Rule">automatically treats it as an array reference</a> but when you do:</p> <pre><code>$t = $greylist{$hash}; print $t[4]; </code></pre> <p>You're assigning the array reference to a scalar variable, <code>$t</code>, then attempting to access the 5th element of another variable, <code>@t</code>. <code>use strict</code> would give you an error in this scenario.</p> <p>Use <a href="http://perldoc.perl.org/perlop.html#The-Arrow-Operator">the arrow operator</a>, <code>-&gt;</code>, to dereference:</p> <pre><code>$t = $greylist{$hash}; print $t-&gt;[4]; </code></pre> <p><a href="http://perldoc.perl.org/perlreftut.html#Using-References"><code>perlreftut</code></a> has a note about this:</p> <blockquote> <p>If <code>$aref</code> holds a reference to an array, then <code>$aref-&gt;[3]</code> is the fourth element of the array. Don't confuse this with <code>$aref[3]</code> , which is the fourth element of a totally different array, one deceptively named <code>@aref</code> . <code>$aref</code> and <code>@aref</code> are unrelated the same way that <code>$item</code> and <code>@item</code> are.</p> </blockquote>