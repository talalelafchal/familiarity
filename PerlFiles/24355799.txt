What's the Perl analogue of `python -i script.py`?
<p>The command <code>python -i script.py</code> will run the given script then drop me into an interactive repl with the functions and variables from the script accessible. Is there a Perl analogue?</p> <p>Edit: If it helps, here's another description of <code>python -i</code> <a href="https://docs.python.org/3.4/using/cmdline.html#cmdoption-i" rel="nofollow">https://docs.python.org/3.4/using/cmdline.html#cmdoption-i</a> </p> <blockquote> <p>When a script is passed as first argument or the -c option is used, enter interactive mode after executing the script or the command, even when sys.stdin does not appear to be a terminal. The PYTHONSTARTUP file is not read.</p> <p>This can be useful to inspect global variables or a stack trace when a script raises an exception</p> </blockquote>
<p><code>perl -d script.pl</code> and hitting <code>c&lt;ENTER&gt;</code> could be close enough,</p> <pre><code>c [ln|sub] Continue until position </code></pre> <hr> <pre><code>perl -MData::Dumper -de '%h = 1..4' Loading DB routines from perl5db.pl version 1.44 Editor support available. Enter h or 'h h' for help, or 'man perldebug' for more help. main::(-e:1): %h = 1..4 DB&lt;1&gt; print Dumper \%h $VAR1 = {}; DB&lt;2&gt; c Debugged program terminated. Use q to quit or R to restart, use o inhibit_exit to avoid stopping after program termination, h q, h R or h o to get additional info. DB&lt;2&gt; print Dumper \%h $VAR1 = { '3' =&gt; 4, '1' =&gt; 2 }; </code></pre>
<p>As well as the Perl debugger shell mentioned by mpapec, there are also several REPL implementations on CPAN. Two of the better ones are:</p> <ul> <li><a href="https://metacpan.org/release/Devel-REPL" rel="nofollow">Devel::REPL</a></li> <li><a href="https://metacpan.org/release/Reply" rel="nofollow">Reply</a></li> </ul> <p>Here's an example of using Reply:</p> <pre> <b>$ reply -MJSON::PP -MHTTP::Tiny</b> <b>0> my $json = JSON::PP->new;</b> $res[0] = bless( { 'FLAGS' => 0, 'fallback' => sub { "DUMMY" }, 'indent' => 0, 'indent_length' => 3, 'max_depth' => 512, 'max_size' => 0 }, 'JSON::PP' ) <b>1> my $ua = HTTP::Tiny->new;</b> $res[1] = bless( { 'agent' => 'HTTP-Tiny/0.043', 'keep_alive' => 1, 'max_redirect' => 5, 'no_proxy' => [], 'timeout' => 60, 'verify_SSL' => 0 }, 'HTTP::Tiny' ) <b>2> $json->decode( $ua->get("http://api.metacpan.org/v0/release/TOBYINK/Type-Tiny-0.044")->{content} )->{resources};</b> $res[2] = { 'bugtracker' => { 'web' => 'http://rt.cpan.org/Dist/Display.html?Queue=Type-Tiny' }, 'homepage' => 'https://metacpan.org/release/Type-Tiny', 'license' => [ 'http://dev.perl.org/licenses/' ], 'repository' => { 'type' => 'git', 'url' => 'git://github.com/tobyink/p5-type-tiny.git', 'web' => 'https://github.com/tobyink/p5-type-tiny' } } </pre> <p>You'll notice that this doesn't run your script and drop you into the REPL afterwards. It just takes you straight to the REPL. But from there you can run the script by typing <code>require "myscript.pl"</code>.</p>