Remove BOM from string with Perl
<p>I have the following problem: I am reading from a UTF-8 text file (and I am telling Perl that I am doing so by ":encoding(utf-8)").</p> <p>The file looks like this in a hex viewer: EF BB BF 43 6F 6E 66 65 72 65 6E 63 65</p> <p>This translates to "∩╗┐Conference" when printed. I understand the "wide character" which I am being warned about is the BOM. I want to get rid of it (not because of the warning, but because it messes up a string comparison that I undertake later).</p> <p>So I tried to remove it using the following code, but I fail miserably:</p> <p>$line =~ s/^\xEF\xBB\xBF//;</p> <p>Can anyone enlighten me as to how to remove the UTF-8 BOM from a string which I obtained by reading the first line of the UTF-8 file?</p> <p>Thanks!</p>
<p><code>EF BB BF</code> is the UTF-8 encoding of the BOM, but you decoded it, so you must look for its decoded form. The BOM is a ZERO WIDTH NO-BREAK SPACE (U+FEFF) used at the start of a file, so any of the following will do:</p> <pre><code>s/^\x{FEFF}//; s/^\N{FEFF}//; s/^\N{ZERO WIDTH NO-BREAK SPACE}//; s/^\N{BOM}//; # Convenient alias </code></pre> <hr> <blockquote> <p><em>I understand the "wide character" which I am being warned about is the BOM. I want to get rid of it</em></p> </blockquote> <p>You're getting wide character because you forgot to add an <code>:encoding</code> layer on your output file handle. The following adds <code>:encoding(UTF-8)</code> to STDIN, STDOUT, STDERR, and makes it the default for <code>open()</code>.</p> <pre><code>use open ':std', ':encoding(UTF-8)'; </code></pre>
<p>To defuse the BOM, you have to know it's not 3 characters, it's 1 in UTF (U+FEFF):</p> <pre><code>s/^\x{FEFF}//; </code></pre>
<p>If you open the file using <a href="http://search.cpan.org/perldoc?File%3a%3aBOM" rel="nofollow">File::BOM</a>, it will remove the BOM for you.</p> <pre><code>use File::BOM; open_bom(my $fh, $path, ':utf8') </code></pre>
<p>Ideally, your filehandle should be doing this for you automatically. But if you're not in an ideal situation, this worked for me:</p> <pre><code>use Encode; my $value = decode('UTF-8', $originalvalue); $value =~ s/\N{U+FEFF}//; </code></pre>