how to support un usual characters in awk command
<p>The following bash script - <strong>read Password_from_csv.bash</strong> perform the following</p> <ol> <li>read the CSV password names and CSV password values </li> <li>print CSV password names and CSV password values for each CSV line ( password values are from the second line )</li> </ol> <p>please take a look on the second line in CSV , password are simple only <strong>a-z</strong> and <strong>numbers</strong> characters </p> <p>so if I run the script , all password names and values will printed as <strong>example 1</strong> </p> <p>but when we set <strong>CSV_LINE=3</strong> in the script in order to read the third CSV line , the script gives us the following errors as command not found because the un usual characters as "$" or "*" or "/" or "\" , as <strong>example 2</strong></p> <p>so</p> <p>please advice how to change/fix the awk syntax in my bash script in order to support un usual characters and print the password from the third line in my CSV ?</p> <pre><code> more readPassword_from_csv.bash #!/bin/bash CSV_LINE=2 eval $(awk -v line=$CSV_LINE -F, 'NR==1 { for (i=1; i&lt;=NF; i++) sn[i]=$i } NR==line { for (i=1; i&lt;=NF; i++) print sn[i] "=" $i ; exit }' all_passwords.CSV ) echo CSV_LINE=$CSV_LINE echo Password1=$Password1 echo Password1=$Password2 echo Password1=$Password3 echo Password1=$Password4 echo Password1=$Password5 echo Password1=$Password6 echo Password1=$Password7 echo Password1=$Password8 </code></pre> <p>.</p> <pre><code> more all_passwords.CSV Password1,Password2,Password3,Password4,Password5,Password6,Password7,Password8 hdehbcr,fre435fr,443f4,544fr4fr4,454534rf4,r3443tr,5345rd,545trr34 &amp;^#GTR$@H,@Y^%ER$%*&amp;*UJ,**U&amp;^#%%@$^&amp;//\\,^T%!#&amp;^YG.+___KI*&amp;HHTY,%%@$#!%^#&amp;,P/\06E87*UHG11#,edehu234#@!&amp;,~hum&amp;T%6e4 </code></pre> <p>.</p> <p>another example of CSV , in this case we have spaces:</p> <pre><code> Password1,Password2,Password3,Password4,Password5,Password6,Password7,Password8 &amp;^#G TR / / $@H,@Y^%" E "R$%*&amp;*UJ,**U&amp;^#%%@$^&amp;//\\,^T%!#&amp;^YG.+___KI*&amp;HHTY,%%@$#!%^#&amp;,P/\06E87*UHG11#,edehu234#@!&amp;,~hum&amp;T%6e4 </code></pre> <p><strong>example1</strong></p> <p>example of script output when I read the second line ( <strong>CSV_LINE=2</strong> ) in CSV</p> <pre><code> ./readPassword_from_csv.bash CSV_LINE=2 Password1=hdehbcr Password1=fre435fr Password1=443f4 Password1=544fr4fr4 Password1=454534rf4 Password1=r3443tr Password1=5345rd Password1=545trr34 </code></pre> <p><strong>example 2</strong></p> <p>example of script output when I read the thired line ( <strong>CSV_LINE=3</strong> ) in CSV</p> <pre><code> ./readPassword_from_csv.bash ./readPassword_from_csv.bash ./readPassword_from_csv.bash: line 8: ^#%%@$^: command not found ./readPassword_from_csv.bash: line 8: //\: No such file or directory ./readPassword_from_csv.bash: line 8: ^YG.+___KI*: command not found ./readPassword_from_csv.bash: line 8: HHTY: command not found ./readPassword_from_csv.bash: line 8: T%6e4: command not found CSV_LINE=3 Password1= Password1= Password1= Password1= Password1= Password1= Password1= Password1= </code></pre>
<p>You need to use quotes in your <code>eval</code> + <code>awk</code> command:</p> <pre><code>eval $(awk -v line=$CSV_LINE -F, 'NR==1 { for (i=1; i&lt;=NF; i++) sn[i]=$i } NR==line { for (i=1; i&lt;=NF; i++) print sn[i] "=\"" $i "\""; exit }' all_passwords.CSV ) </code></pre> <p>But there can be better alternatives of using <code>eval</code> (e.g. indirect reference) here.</p> <h3>UPDATE:</h3> <p><strong>Alternative pure BASH solution without using <code>eval</code></strong>:</p> <pre><code>CSV_LINE=2 vars=() c=1 while IFS=, read -ra arr; do if ((c==1)); then vars+=("${arr[@]}") elif ((c==CSV_LINE)); then for ((i=0; i&lt;${#arr[@]}; i++)); do declare ${vars[$i]}="${arr[$i]}" done fi ((c++)) done &lt; all_passwords.csv </code></pre>