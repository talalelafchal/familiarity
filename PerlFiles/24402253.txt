Perl: Count number of times a word appears in text and print out surrounding words
<p>I want to do two things:</p> <p>1) count the number of times a given word appears in a text file</p> <p>2) print out the context of that word</p> <p>This is the code I am currently using:</p> <pre><code>my $word_delimiter = qr{ [^[:alnum:][:space:]]* (?: [[:space:]]+ | -- | , | \. | \t | ^ ) [^[:alnum:]]* }x; my $word = "hello"; my $count = 0; # # here, a file's contents are loaded into $lines, code not shown # $lines =~ s/\R/ /g; # replace all line breaks with blanks (cannot just erase them, because this might connect words that should not be connected) $lines =~ s/\s+/ /g; # replace all multiple whitespaces (incl. blanks, tabs, newlines) with single blanks $lines = " ".$lines." "; # add a blank at beginning and end to ensure that first and last word can be found by regex pattern below while ($lines =~ m/$word_delimiter$word$word_delimiter/g ) { ++$count; # here, I would like to print the word with some context around it (i.e. a few words before and after it) } </code></pre> <p>Three problems:</p> <p>1) Is my $word_delimiter pattern catching all reasonable characters I can expect to separate words? Of course, I would not want to separate hyphenated words, etc. [Note: I am using UTF-8 throughout but only English and German text; and I understand what reasonably separates a word might be a matter of judgment]</p> <p>2) When the file to be analzed contains text like "goodbye hello hello goodbye", the counter is incremented only once, because the regex only matches the first occurence of " hello ". After all, the second time it could find "hello", it is not preceeded by another whitespace. Any ideas on how to catch the second occurence, too? Should I maybe somehow reset pos()?</p> <p>3) How to (reasonably efficiently) print out a few words before and after any matched word?</p> <p>Thanks!</p>
<h3>1. Is my <code>$word_delimiter</code> pattern catching all reasonable characters I can expect to separate words?</h3> <ul> <li>Word characters are denoted by the character class <code>\w</code>. It also matches digits and characters from non-roman scripts.</li> <li><code>\W</code> represents the negated sense (non-word characters).</li> <li><code>\b</code> represents a word boundary and has zero-length.</li> </ul> <p>Using these already available character classes should suffice.</p> <h3>2. Any ideas on how to catch the second occurence, too?</h3> <p>Use zero-length word boundaries.</p> <pre><code>while ( $lines =~ /\b$word\b/g ) { ++$count; } </code></pre>