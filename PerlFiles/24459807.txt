How to use a Perl variable in a SQL script (using backticks)
<p>I have seen various examples but I am unable to use DBI. How would I use a perl variable in an external sql script? For example the code in the perl script I would want would be:</p> <pre><code>$text = 'Germany'; @sql_output = `sqlplus -s user/pass\@databasename &lt;&lt;! @/pathtofile/test.sql; QUIT; !`; print @sql_output; </code></pre> <p>The sql script would be:</p> <pre><code>SELECT DISTINCT City FROM Customers Where Country = '$text' </code></pre> <p>(Just as an example, I'm using the code comes from w3schools.com sql tutorial <a href="http://www.w3schools.com/SQl/trysql.asp?filename=trysql_select_distinct" rel="nofollow">http://www.w3schools.com/SQl/trysql.asp?filename=trysql_select_distinct</a>)</p> <p>An example that I found through searching had:</p> <pre><code>@/pathtofile/test.sql $text; </code></pre> <p>But it did not work when I tried it with my code. Is this the correct way to incorporate a perl variable into an external sql script?</p>
<p>This one works, basically the flow is as below</p> <ol> <li>Open the SQL File </li> <li>Replace the $text with the variable value</li> <li>Write it to the temporary file</li> <li>Execute SQL plus on the temporary file (Every time when you re-run this it will replace the file)</li> </ol> <p>Try out and let me know. </p> <p>test.pl</p> <pre><code>#!/usr/bin/perl $text = 'Germany1'; open(HEADER,"SQLQuery.sql"); while(&lt;HEADER&gt;) { $_ =~ s/\$text/$text/g; $output .= $_; } close(HEADER); print "$output"; open (MYFILE, '&gt;SQLQueryTemp.sql'); print MYFILE $output; close(MYFILE); #SQLQueryTemp.sql contains the $text replaced with 'Germany' #@sql_output = `sqlplus -s user/pass\@databasename &lt;&lt;! #@/pathtofile/SQLQueryTemp.sql; #QUIT; #!`; #print @sql_output; </code></pre> <p>SQLQuery.sql</p> <pre><code>SELECT DISTINCT City FROM Customers Where Country = '$text' </code></pre>
<ol> <li>Define your replacement variable(s)</li> <li>Use them in a here doc based on the content of your test.sql</li> <li>Save it to test.sql</li> <li>Execute your backtick command</li> </ol> <p>OR</p> <ul> <li>If you want to learn basic SQL: Install a DBMS with a GUI that allows interactive/ad hoc queries (eg SQLite/SQliteman/SQLite browser plugin, MySQL/MySQLWorkbench, Access, OO/LO Base, ...)</li> <li>If you want to work with Oracle: Concentrate on a complete/working install (which includes DBD:Oracle if your scripting language is Perl)</li> </ul>