What is the best way to save data in a medium sized database?
<p>I would like to save some data in a structured way to use it later on. Right now, I have different bash/perl scripts to extract a lot of data and format it in numerous different text files. I am automating all of that. Now I have a list of observations (environment, like rain, hail..) with some variables in lines (each line is an observation). I can extract this all right with bash, but with the time and zome (Lat/Long) I need to check other variables, 800 per observation. I wonder how can I store the thounsands of observations (or more) with those 800 variables (names, values) to use it later on. I'm wondering if I should find something else then .txt files.</p> <p>On top of it, all the 800 variables are in fact a repetition of the same variables (same name) at different times (00, 03, 06, ..., 48). Also, for some reason, a couple of variables have the same name with different values at the same time (this is not <em>my</em> data).</p> <p>Right now, I can read each line of my observations and see each variable. Now I need to place 1 observation with 1 stack of variables (the 800), and do this for every line.</p> <p>Would you have an idea for me on the format to use (the less programs/extensions/etc is the best) to store this? I see .csv files, or .txt files, but I can't seem to figure a simple way to classify all of this (and how to do it).</p> <p>I've wrote something like this;</p> <pre><code>while IFS=' ' read -r year month date lat long #And other variables to read line. do ./MyExtractionScript.ksh $lat $long #I need lat/long for position. done &lt; "$File" </code></pre> <p>Right now my <em>MyExtractionScript.ksh</em> saves all to <code>${fileout}</code> in a format where each line is a variable in a file in <em>TMPDIR</em>, like this;</p> <pre><code>BS 8500 0 7.5339 RE 0 0 5.9412 UU 12000 3 6.0882 VV 12000 3 -11.0595 </code></pre> <p>The "0" that becomes "3" is the hour (0 to 48), and the "VV" are the names.</p> <p>Should I do observations objects in csv, with time objects inside for each hour? How? :(</p> <p>I'm sorry my question is long and far from precise, short or concise. I am not, by all means, an expert. Please help me with this problem.</p> <p>Thanks in advance. Have a great day.</p> <p>PS: Sorry for my english, I am a french canadian from Montr√©al.</p>
<p>For your problem I'd simply recommend using <a href="http://www.sqlite.org/" rel="nofollow">SQLite</a>.</p>
<p>You can use a <a href="http://en.wikipedia.org/wiki/Comma-separated_values" rel="nofollow">CSV</a> file. That is a comma separated values file. The robust, and probably easiest way is to <a href="https://metacpan.org/pod/Text%3a%3aCSV_XS" rel="nofollow">Text::CSV_XS</a> in Perl. This is what a CSV file should look like, I believe it's self explanatory and a simple format:</p> <pre><code>Year,Make,Model,Description,Price 1997,Ford,E350,"ac, abs, moon",3000.00 1999,Chevy,"Venture ""Extended Edition""","",4900.00 1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00 1996,Jeep,Grand Cherokee,"MUST SELL! air, moon roof, loaded",4799.00 </code></pre> <p>What you want is this:</p> <pre><code># Write array of arrays as csv file csv (in =&gt; $aoa, out =&gt; "file.csv", sep_char=&gt; ";"); </code></pre> <p>Then to open it later:</p> <pre><code>my $aoa = csv (in =&gt; "data.csv"); </code></pre> <p>Then to retrieve the data to either edit or review: </p> <pre><code>my @rows; my $csv = Text::CSV_XS-&gt;new ({ binary =&gt; 1, auto_diag =&gt; 1 }); open my $fh, "&lt;:encoding(utf8)", "test.csv" or die "test.csv: $!"; while (my $row = $csv-&gt;getline ($fh)) { $row-&gt;[2] =~ m/pattern/ or next; # 3rd field should match push @rows, $row; } close $fh; $csv-&gt;eol ("\r\n"); open $fh, "&gt;:encoding(utf8)", "new.csv" or die "new.csv: $!"; $csv-&gt;print ($fh, $_) for @rows; close $fh or die "new.csv: $!"; </code></pre> <p>The synopsis it provides should be suitable for your needs unless you want a real database with <a href="http://en.wikipedia.org/wiki/ACID" rel="nofollow">ACID</a> properties.</p>