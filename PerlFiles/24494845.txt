Undefined subroutine &amp;PDL::divide
<p>I'm trying Perl's PDL in the following code: </p> <pre><code>#!/usr/bin/perl -w use strict; use PDL::Core qw(pdl); use PDL::Math qw(isfinite); use PDL::Primitive qw(statsover); my $div = 4; my @array1 = (0..10); my $pdl_array = log(pdl(@array1)/$div); $pdl_array-&gt;where(!isfinite($pdl_array)) .= 0; my($mean,$stdev) = statsover($pdl_array); die $pdl_array,"\n",$mean," ",$stdev,"\n"; </code></pre> <p>and I'm getting this error:</p> <p>Undefined subroutine &amp;PDL::divide called at ./compare_const.pl line 10.</p> <p>Any hint, please?Thanks a lot.</p>
<p>Just add <a href="https://metacpan.org/pod/PDL" rel="nofollow"><code>use PDL;</code></a> and your code will work:</p> <pre><code>#!/usr/bin/perl -w use strict; use PDL; use PDL::Core qw(pdl); use PDL::Math qw(isfinite); use PDL::Primitive qw(statsover); my $div = 4; my @array1 = (0..10); my $pdl_array = log( pdl(@array1) / $div ); $pdl_array-&gt;where(!isfinite($pdl_array)) .= 0; my ($mean, $stdev) = statsover($pdl_array); die $pdl_array, "\n", $mean, " ", $stdev, "\n"; </code></pre> <p>Outputs:</p> <pre><code>[0 -1.3862944 -0.69314718 -0.28768207 0 0.22314355 0.40546511 0.55961579 0.69314718 0.81093022 0.91629073] 0.112860814716055 0.696414187766251 </code></pre>
<p>PDL is unusual in its design, and therefore has an unusual and somewhat fragile import mechanism. Each PDL module adds functionality to PDL by <a href="https://github.com/PDLPorters/pdl/blob/b0e235/Basic/Reduce.pm#L133" rel="nofollow">inserting a new method directly into PDL's package</a>. This decision was made very early in the design of PDL v2, and has not been changed in the intervening decade. (There's no reason it couldn't be changed, even in a backward compatible way, but none of the PDL developers have set aside the time to do so.)</p> <p>As a result, you must load a handful of modules to ensure that PDL has its requisite, basic functionality. If you take a look at PDL's import function, you'll notice that <a href="https://github.com/PDLPorters/pdl/blob/b0e235/Basic/PDL.pm#L153" rel="nofollow">it explicitly loads a number of packages into the caller's namespace</a>. The reason for this is good---splitting functionality across multiple modules to keep the distribution sane---but the implementation is not aligned with common Perl practices. This is why your attempt to import specific functions into your namespace failed.</p> <p>The solution has already been explained. Either replace all of your <code>use PDL::...</code> statements with a single <code>use PDL</code>:</p> <pre><code>use strict; use warnings; use PDL; my $div = 4; ... </code></pre> <p>or say <code>use PDL::Lite</code> (to ensure that PDL's package is complete) and then import the specific functions into your (main) package</p> <pre><code>use strict; use warnings; use PDL::Lite; use PDL::Core qw(pdl); use PDL::Math qw(isfinite); use PDL::Primitive qw(statsover); my $div = 4; ... </code></pre>
<p>PDL has a minimum set of things that must be loaded. To get these all properly loaded, you must either <code>use PDL</code> (which also exports a bunch of stuff) or <code>use PDL::Lite</code>.</p> <p>(I for some reason thought you were explicitly calling PDL::divide directly and getting that error, hence my original answer below.)</p> <p>Original answer:</p> <p>I'm wondering why you think that <em>should</em> work?</p> <p>Yes, PDL exports a bunch of stuff (if you use it, which you do not), but that doesn't give you any guarantee about where it is exporting it <em>from</em>. (In point of fact, it appears to export from a number of different places directly into the use`ing package.)</p> <p>If you are trying to avoid namespace pollution, I would recommend either importing into a designated package and using stuff from there:</p> <pre><code>{ package My::PDL; use PDL; } ... My::PDL::divide... </code></pre> <p>or using the OO interface (see PDL::Lite, I think?)</p>