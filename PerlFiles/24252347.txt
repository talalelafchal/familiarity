Perl script to read 500 entries from a file as input
<p>I'm trying to run a perl script which reads a text file that contains say 500 entries, read one entry at a time and send a command.</p> <p>The command is <code>server hostname</code> where the value of hostname is the list of hostnames in the text file. </p> <p>I'm new to programming,As per my understanding we need to open the file that contains the host name and read it <code>open (ENABLE, "&lt;hostanmes.txt") || die "could not open output file";</code></p> <p>use a for loop to read the 512 host names in it <code>for($i=1; $i&lt;=512; $i++)</code></p> <p>But I'm not sure how to connect this file to the command <code>server hostname</code></p> <p>The program is incomplete.I'm struck and not really sure.Can somebody please help me with this ?</p> <pre><code>#!/usr/bin/perl ## Library import use Net::SSH::Expect; use strict; use warnings; use autodie; print "\n [INFO] script Execution Started \n"; my $ssh = Net::SSH::Expect-&gt;new (host =&gt; "ip addr", password=&gt; 'pwd', user =&gt; 'username', raw_pty =&gt; 1); my $login_output = $ssh-&gt;login(); print "\n [INFO] add host rules \n"; open (ENABLE, "&lt;hostanmes.txt") || die "could not open output file"; for($i=1; $i&lt;=512; $i++) { my $cfg = $ssh-&gt;exec("config"); my $cmd = $ssh-&gt;exec("server www.google.com"); my $cmd = $ssh-&gt;exec("exit"); } close(ENABLE); </code></pre>
<p>The essence of the answer is that you can <em>interpolate</em> the value of scalar or array variables into a <em>double-quoted</em> string by just naming them inside the string. For instance</p> <pre><code>my $x = 42; print "x = $x\n"; </code></pre> <p>will print</p> <pre><code>x = 42 </code></pre> <p>Here are some other points about your program</p> <ul> <li><p>The <code>use</code> for any modules should come <em>after</em> <code>use strict</code> and <code>use warnings</code>, which should ordinarily be the very first lines of a program</p></li> <li><p>It is best practice to use <em>lexical file handles</em> with the three-parameter form of <code>open</code>, and if you have <code>use autodie</code> in place then it is pointless to check the success of the open as it has already been done for you. So</p> <pre><code>open (ENABLE, "&lt;hostanmes.txt") || die "could not open output file"; </code></pre> <p>should be </p> <pre><code>open my $enable, '&lt;', 'hostnames.txt'; </code></pre></li> <li><p>Unless you need the array indices for another reason, it is best in Perl to iterate over just the array <em>values</em>.</p></li> </ul> <p>Here is a rewrite of your code that takes into account these points. It looks like it will do what you need</p> <pre><code>use strict; use warnings; use autodie; use Net::SSH::Expect; print "\n[INFO] script Execution Started\n"; my $ssh = Net::SSH::Expect-&gt;new( host =&gt; "ip addr", password =&gt; 'pwd', user =&gt; 'username', raw_pty =&gt; 1, ); my $login_output = $ssh-&gt;login; print "\n[INFO] add host rules\n"; open my $enable, '&lt;', 'hostnames.txt'; while (my $server = &lt;$enable&gt;) { chomp $server; $ssh-&gt;exec('config'); $ssh-&gt;exec("server $server"); $ssh-&gt;exec('exit'); } </code></pre>
<p>To iterate through ENABLE once you have it you should use a simple while loop:</p> <pre><code>while(&lt;ENABLE&gt;){ chomp; //each line read from ENABLE will be stored in $_ per loop } </code></pre> <p>This way you do not need a for loop to iterate. So in essence you would run the "server hostname" command in this while loop:</p> <pre><code>... while(&lt;ENABLE&gt;) { chomp; $ssh-&gt;exec("server $_"); } ... </code></pre> <p><a href="http://perl.about.com/od/perltutorials/a/readwritefiles.htm" rel="nofollow" title="Here">Check here</a> for details.</p>