If a subroutine is in the same directory as my main function, how do I call it?
<p>Alright I'm rewriting this to elaborate more. I am fairly new to Perl &amp; programming so please bear with me. Essentially, I want to know how run one or more files (I am guessing modules?) inside of the main .pl file when they come from within the same directory. My code works fine with them all plugged in at the bottom of my file as a subroutine but not if I pull the subroutines out and turn them into modules. </p>
<p>Here's a couple of steps to hopefully get you started. This exports some subs to package <code>MyModule</code>.</p> <p>Firstly Create <code>MyModule.pm</code> in the same directory as your main program. For example:</p> <pre><code>package MyModule; use warnings; use strict; sub foo { my $p = shift; print "foo called with param: $p\n"; bar(); } sub bar { print "bar called\n"; } 1; # don't delete this line </code></pre> <p>Then to load and call subs from this package from your main program:</p> <pre><code>#/usr/bin/perl use warnings; use strict; use File::Basename qw(dirname); use lib dirname(__FILE__); # prepend source directory to the include path use MyModule; MyModule::foo(42); </code></pre> <p>The statement <code>use lib dirname(__FILE__)</code> is prepending the source directory of the main program to the module include path.</p>
<p>I have a library file full of all my subroutines I made, I call it util.pl. Let's say it's in $HOME/perl/lib/util.pl. </p> <p>Now I have a perl script in $HOME/perl/project1/myscript.pl</p> <p>In myscript.pl, at the top I put: require '$HOME/perl/lib/util.pl';</p> <p>Now I can call any subroutine in util.pl while from myscript.pl. For example, undupespace() is in util.pl. In myscript.pl I can call it: $s=undupespace($s);</p> <p>After I install a module, I put this at the top of myscript.pl: use File::Copy;</p> <p>Is that what you wanted OP? </p>