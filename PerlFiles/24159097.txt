Perl - variable as hash key
<ol> <li><p>I'm returning a hash from the subroutine</p> <pre><code>my %hash = %{subroutine()}; </code></pre></li> <li><p>later on I want to use the hash element as follows</p> <pre><code>if (defined $hash{LEVEL_1_KEY}{LEVEL_2_KEY}){ . . .} </code></pre></li> </ol> <p>This works well. But If I want to try to use same element with LEVEL_1_KEY coming from variable. It doesn't work. e.g.</p> <pre><code>my $var = "LEVEL_1_KEY"; if (defined $hash{$var}{LEVEL_2_KEY}){ ... } </code></pre> <p>What am I doing wrong? Should I use some apostrophes, or quotes with $var? I tried several things, but no success yet.</p>
<p>Your code should work as written, so there's something left out of your code.</p> <p>My first impulse is the use of <code>defined</code>. Checking with <code>exists</code> or <code>defined</code> is a red flag. It means your code is using trinary or even quadrary logic. True, false, defined and existence. Worse, they overlap: true is also defined; undefined is also false; existence combines with any of the others; and so on. There are valid uses for checking if a thing is <code>defined</code>, but casual use is confusing and error prone. It's very easy for a false value to sneak into a slot that's supposed to remain undefined. Consider changing the defined check to a truth check.</p> <p>(The primary use of <code>defined</code> would be where 0 or <code>''</code> is a valid value).</p> <p>Here's general debugging ideas.</p> <ul> <li>Does <code>$var</code> contain what you think it contains?</li> </ul> <p>Print it out just before it is used.</p> <ul> <li>Does <code>$var</code> <em>really</em> contain what you think it contains?</li> </ul> <p>Print it out <em>with quotes</em> like <code>print qq['$var']</code> to catch any trailing whitespace.</p> <ul> <li>Does <code>$var</code> <em>really</em> <em>really</em> contain what you think it contains?</li> </ul> <p>Is it coming from a filehandle? Could it contain special Unicode that looks like plain ASCII? Try <code>print "Yes" if $var eq "LEVEL_1_KEY"</code></p> <ul> <li>Are you sure you don't have single quotes around <code>$var</code>?</li> </ul> <p>It's <code>$hash{$var}</code> right? Not <code>$hash{'$var'}</code>.</p> <ul> <li>Does <code>%hash</code> contain what you think it contains?</li> </ul> <p>Dump it out using Data::Dumper just before you use it.</p> <ul> <li>Is that line of code even reached?</li> </ul> <p>Print a print statement before the condition.</p> <ul> <li>Does the condition block do anything?</li> </ul> <p>Maybe the condition is working, but the code inside the block doesn't. Put a print statement <em>inside</em> the block just after the condition.</p> <ul> <li>Just because it's defined doesn't mean it's true.</li> </ul> <p>You're checking the value is defined, not true. It could be an empty string. It could be all spaces. It could be 0. Does the rest of the code want a defined value or a true value?</p> <p>As a side note, you're somewhat better off leaving the return value from your subroutine as a hash reference, rather than dereferencing it. Dereferencing causes a temporary copy of the hash to be made which can use CPU and memory. How much impact this will really have depends on how big the hash is, and you should get used to working with references for general efficiency.</p>
<p>There's a typo in your code</p> <pre><code>if (defined $hash{LEVEL_1_KEY}{LEVEL_2_KEY){ </code></pre> <p>should be</p> <pre><code>if (defined $hash{LEVEL_1_KEY}{LEVEL_2_KEY}){ </code></pre> <hr> <p>Rest it works fine, you can check it here: <a href="http://ideone.com/QT36e4" rel="nofollow">http://ideone.com/QT36e4</a></p> <p>Are you sure you are writing $var like you stated or are you taking the name from some file or STDIN?</p>