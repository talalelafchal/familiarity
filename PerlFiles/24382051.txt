perl assign variables to an array with relationship
<p>Please advice how to pass 3 variables in an array with relation.</p> <pre><code>@item = ($a , $b , $c); @record = push(@array, @item); </code></pre> <p>I want to assign value in a @array so that if I look for any instance I should get value of all a,b,c.</p> <p>Is there any way apart from comma to assign a value in array. like $a:$b:$c or $a>$b>$c I need this because i am want to grep 1 record(a) and get (a:b:c)</p> <pre><code>@array1 = grep(!/$a/, @array); expected output should be a:b:c </code></pre> <p>Thanks, </p>
<p>The question is not very clear. Maybe you should rephrase it. However, I understand you want an array with groups of three elements.</p> <p>You might want to use array references.</p> <pre><code>@item = ($a , $b , $c); push(@array, \@item); </code></pre> <p>or</p> <pre><code>$item = [$a , $b , $c]; push(@array, $item); </code></pre> <p>Also, <code>push</code>won't return an array as you expect. Perldoc says:</p> <blockquote> <p>Returns the number of elements in the array following the completed "push".</p> </blockquote> <p>Now if you want to filter these groups of three elements, you can do something like that:</p> <pre><code>my @output = (); L1: foreach ( @array ){ L2: foreach( @$_ ){ next L1 if $_ eq $a; } push @output, $_; } </code></pre> <p>Please note that if you want an exact match you should use the <code>eq</code> operator instead of a regex...</p>