backtick in Perl printing output on terminal
<p>I am trying to get the output of a command in a variable and checking whether its matching with other variable.</p> <pre><code> $login1=`ssh ****************** date`; </code></pre> <p>This command when typed manually will expect a prompt " Password: " . When i run it from the script it is ruuning that command and printing that prompt waiting for user to enter, but i dont need that. I just need to get that output and compare </p> <pre><code> if($login1=~ /Password:/) { print " yes"; } else { print "No "; } </code></pre> <p>However the script is just stopping at Password prompt . Please suggest me on how to achieve this .</p>
<p>You might want to look at the <code>-f</code> flag for <code>ssh</code>:</p> <blockquote> <pre><code> -f Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background. This implies -n. The recommended way to start X11 programs at a remote site is with something like ssh -f host xterm. </code></pre> </blockquote> <p>If you want to avoid passwords, set up a public/private key pair with no passphrase (dangerous, but much less dangerous than putting a password in a script) and copy the public key to the remote site. IIRC, it goes something like this:</p> <pre><code>localhost $ ssh-keygen -b 2048 -t ecdsa -N '' -f ./datekey localhost $ scp ./datekey.pub remotehost:/tmp localhost $ ssh remotehost (login) remotehost $ cat /tmp/datekey.pub &gt;&gt; ~/.ssh/authorized_keys remotehost $ logout localhost $ ssh -i ./datekey remotehost date </code></pre> <p>Make sure you store <code>./datekey</code> somewhere no other user can access it at all -- not even read access.</p> <hr> <p>If you're just trying to detect, you might simply need to feed it EOF to get it to move along:</p> <pre><code>$login1=`ssh ****************** date &lt; /dev/null`; </code></pre>