individual test result to database
<p>I have lot's of *.t file each having number of test I am executing all the *.t file through Test::Harness. How I can write the individual test status (Pass/Fail to a DB)</p> <p>example</p> <pre><code>use Test::More ; use strict; ok( $foo eq $bar, "TestCase1 " ) ? &amp;subUpdateResult(pass) : &amp;subUpdateResult(Fail) ; ok( $1 eq $2, 'test case 2' ); ok( $3 eq $4, 'test case 3' ); sub subUpdateResult { #now a only dummy code I will update this code to connect DB later my $val=sfift; print "val is $val\n"; } done_testing(); </code></pre> <p>but I am getting result like </p> <pre><code>ok 1 - TestCase1 ok 2 val is sfift ok 3 - test case 2 ok 4 - test case 3 1..4 </code></pre> <p>query:why I am getting the print result after test case 2? and how to get the individual test status so that I can either update a database or write to an excel file</p>
<ol> <li><p>write <code>shift</code> not <code>sfift</code>.</p></li> <li><p>The part which gives you error is</p> <pre><code>sub ok { my($self, $test, $name) = @_; # $test might contain an object which we don't want to accidentally # store, so we turn it into a boolean. $test = $test ? 1 : 0; unless( $Have_Plan ) { require Carp; Carp::croak("You tried to run a test without a plan! Gotta have a plan."); } lock $Curr_Test; $Curr_Test++; $self-&gt;diag(&lt;&lt;ERR) if defined $name and $name =~ /^[\d\s]+$/; You named your test '$name'. You shouldn't use numbers for your test names. </code></pre></li> </ol> <p>This is where the error is coming from, <code>$name</code> argument can't be only numbers and whitespace. You need to correct line number 3 of your script, use the concatenation operator. (See: <a href="http://stackoverflow.com/questions/12116954/how-do-i-interpolate-a-line-number-from-line-into-the-name-of-a-test-in-perl">How do I interpolate a line number from __LINE__ into the name of a test in Perl?</a>)</p> <p>Your code doesn't even compile well, I think you are providing different data in order not to put your code in public. I modified it like below and it works. You'll have to do something similar. Also I don't know what <code>$1</code> and <code>$2</code> are here for?</p> <pre><code> #!/usr/local/bin/perl use warnings; use Test::More ; use strict; my $foo = "something"; my $bar = "something"; ok( $foo eq $bar, "TestCase1 " ) ? &amp;subUpdateResult('pass') : &amp;subUpdateResult('fail') ; ok( $1 eq $2, 'test case 2' ); ok( $3 eq $4, 'test case 3' ); sub subUpdateResult { #now a only dummy code I will update this code to connect DB later my $val=shift; print "val is $val\n"; } done_testing(); </code></pre>