Returning Date values from Bash script that runs a Perl Script
<p>I am trying to fix a script that is supposed to return 3 date values: 1 week ago, 1 month ago and 3 months ago. It uses a Perl module from CPAN called Time::ParseDate but I cannot figure out how it works nor where it is going wrong.</p> <pre><code>getdate(){ echo $* | perl -MPOSIX -MTime::ParseDate -e'print strftime("%D",localtime(parsedate(&lt;&gt;)))' return 0 } oneweekago='getdate now - 1week' onemonthago='getdate now - 1month' threemonthsago='getdate now - 3month' </code></pre> <p>When I run this from the shell I get this output:</p> <pre><code>-bash-4.1$ oneweekago='getdate now - 1week' -bash: : command not found -bash: : command not found -bash-4.1$ onemonthago='getdate now - 1month' -bash: : command not found -bash: : command not found -bash-4.1$ threemonthsago='getdate now - 3month' -bash: : command not found -bash: : command not found </code></pre> <p>I am totally new to unix scripting so I am sure this is some basic syntax I am missing but I cannot find it. Btw I have already installed the Time::ParseDate module and verified it is installed properly.</p>
<p>If you just want to output the values immediately upon calling the function this works for me:</p> <p>EDIT: Modified to get the return value. You were using single quotes, not backtics. </p> <pre><code>#!/bin/bash function getdate() { echo $* | perl -MPOSIX -MTime::ParseDate -e'print strftime("%D",localtime(parsedate(&lt;&gt;)))' return 0 } oneweekago=$( getdate now - 1week ) # Using backtics this would look like: oneweekago=`getdate now - 1week` # However, I prefer $() for clarity. onemonthago=$( getdate now - 1month) threemonthsago=$(getdate now - 3month) #getdate "now - 1week" #getdate "now - 1month" #getdate "now - 3month" echo $oneweekago echo $onemonthago echo $threemonthsago </code></pre>