Replace dates in a file with date-n hours
<p>I'm trying to replace occurrences of a date formatted as YYYYMMDDHHMMSS with the that time minus 7 hours.</p> <p>The file would look like this</p> <pre><code>File with text and some dates 20140716223000 20140716013000 </code></pre> <p>and I would like the output to look like</p> <pre><code>File with text and some dates 20140716153000 20140715183000 </code></pre> <p>The best I could come up with was a perl subsitition:</p> <pre><code>perl -ape 's/(-*\d+.\d+)/$1-70000/ge' file.txt </code></pre> <p>but obviously this isn't doing date subtraction, but simple arithmetic. Any bash or perl statement will work for me. Perhaps a sed or awk statement? Thanks!</p>
<p>Not all questions should use regex.</p> <p>How about using Date::Calc? it has a function that are exactly what you need:</p> <pre><code>($year,$month,$day, $hour,$min,$sec) = Add_Delta_DHMS($year,$month,$day, $hour,$min,$sec, $Dd,$Dh,$Dm,$Ds); </code></pre> <p>And you can use a simple regex to break the date-strings to year/month/day/hour/min/sec variables.and the $Dx parameters can be negative. </p> <p>On a note, I hope that when you say "minus 7 hours" you are not trying to do timezone math. because that is a different question with a different solution. </p>
<p>You can make use of <a href="https://metacpan.org/module/Time::Piece" rel="nofollow"><code>Time::Piece</code></a> to parse the date-time string and do the arithmetic. It has been a core module since version 10 of Perl 5 and so shouldn't need to be installed.</p> <p>The related <a href="https://metacpan.org/module/Time::Seconds" rel="nofollow"><code>Time::Seconds</code></a> module provides useful constants for various time intervals in seconds.</p> <p>This program does as you require using an executable substitution as you do in your question. Note that it won't handle daylight saving periods properly as it just does a simplistic subtraction of 25,200 seconds from each value.</p> <pre><code>use strict; use warnings; use 5.010; use Time::Piece; use Time::Seconds qw/ ONE_HOUR /; my $text = 'File with text and some dates 20140716223000 20140716013000'; say "Before: $text"; $text =~ s{(\d{14})}{ my $dt = Time::Piece-&gt;strptime($1, '%Y%m%d%H%M%S'); $dt -= 7 * ONE_HOUR; $dt-&gt;strftime('%Y%m%d%H%M%S'); }ge; say " After: $text"; </code></pre> <p><strong>output</strong></p> <pre><code>Before: File with text and some dates 20140716223000 20140716013000 After: File with text and some dates 20140716153000 20140715183000 </code></pre>
<p>Since you have GNU Bash, you most probably have GNU Coreutils too, so why donâ€™t you use GNU <code>date</code>?</p> <pre><code>$ cat file File with text and some dates 20140716223000 20140716013000 $ cat script #!/bin/bash while read -a LINE; do for i in "${!LINE[@]}"; do [[ ${LINE[$i]} =~ ^[0-9]{14}$ ]] &amp;&amp; { DATE="${LINE[$i]}" YEAR="${DATE:0:4}" MONTH="${DATE:4:2}" DAY="${DATE:6:2}" HOUR="${DATE:8:2}" MINUTE="${DATE:10:2}" SECOND="${DATE:12:2}" NEWDATE="$(date -d \ "-7 hours ${YEAR}-${MONTH}-${DAY}T${HOUR}:${MINUTE}:${SECOND}" \ +'%Y%m%d%H%M%S')" LINE[$i]="$NEWDATE" } done echo "${LINE[@]}" done &lt; "$1" $ ./script file File with text and some dates 20140716153000 20140715183000 </code></pre>
<p>Using GNU awk for gensub() and time functions:</p> <pre><code>$ cat tst.awk { head = "" tail = $0 while ( match(tail,/\&lt;[[:digit:]]{14}\&gt;/) ) { oldTime = substr(tail,RSTART,RLENGTH) secs = mktime( gensub(/(....)(..)(..)(..)(..)(..)/,"\\1 \\2 \\3 \\4 \\5 \\6","",oldTime) ) newTime = strftime("%Y%m%d%H%M%S", secs - (7 * 60 * 60)) head = head substr(tail,1,RSTART-1) newTime tail = substr(tail,RSTART+RLENGTH) } print head tail } $ $ awk -f tst.awk file File with text and some dates 20140716153000 20140715183000 </code></pre>