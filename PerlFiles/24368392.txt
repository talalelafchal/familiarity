Splitting a binary file with 0xff stuffing
<p>I would like to split a binary file into subfiles named with a prefix followed by a decimal offset like <code>prefix-3200.bin, prefix-3201.bin</code>. </p> <p>I found that I can split my file with </p> <pre><code>split -b128k -d input.bin </code></pre> <p>which generates files named x00, x01, x02, ...</p> <p>Unfortunately I still need to translate the blocks names and fill the last block with 0xff because all my blocks should have the same size of 128kB. </p> <p>I'm thinking to use Perl to do the job but it would be much better if I can only use standard GNU tools. </p> <p>How I can easily rename and pad my last binary block ? </p> <p>I tried to use dd with this:</p> <pre><code>dd if=/dev/zero ibs=1k count=128 | tr "\000" "\377" &gt; block dd if=block of=block conv=notrunc </code></pre> <p><strong>Edit:</strong> </p> <p>I can now generates the correct <code>prefix-XXXX</code> with </p> <pre><code>split -b128k -d -a4 input.bin prefix- </code></pre>
<p>Having GNU split, you can use the following <code>split</code> command:</p> <pre><code>split -b128k --additional-suffix=".bin" -a4 --numeric-suffixes=3200 INPUT_FILE "prefix-" </code></pre> <p>However, you would need to explicitly fill the last file with <code>0xFF</code>s afterwards. You might use <code>dd</code> for that, as described <a href="http://superuser.com/questions/274972/how-to-pad-a-file-with-ff-using-dd">here</a></p>
<pre><code>my $block_size = 128*1024; open(my $fh_in, '&lt;:raw', 'input.bin') or die $!; local $/ = \$block_size; my $counter = 0; while (&lt;$fh_in&gt;) { open(my $fh_out, '&gt;:raw', sprintf("prefix-%04d.bin", $counter++)) or die $!; $_ = substr($_.("\xFF" x $block_size), 0, $block_size); print($fh_out $_); } </code></pre>