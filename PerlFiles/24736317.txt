To upload multiple files in one Net::SFTP::Foreign session in perl
<p>I am trying to upload a set of files to a remote machine in perl using Net::SFTP::Foreign module. The file names are stored in a text file .But all the files are not getting uploaded . Only one file is getting uploaded. </p> <pre><code>#!/usr/local/roadm/bin/perl # This is compiled with threading support use strict; use warnings; use threads; use threads::shared; use Net::SFTP::Foreign; my $count=0; my %args = ( user =&gt; 'root', password =&gt; 'Ht5h10N2', more =&gt; '-v', autodisconnect =&gt; 0 ); print "Starting main program\n"; open(fa ,"&lt;file_list.txt"); my @con =&lt;fa&gt;; close fa; my $sftp = Net::SFTP::Foreign-&gt;new('hadoop-dev2', %args); foreach (@con) { chomp $_; $sftp-&gt;put($_,"$_"); } </code></pre>
<p>You never check the status of your various operations! Did your initial constructor creating<code>$sftp</code> work? Was that file you opened really opened? Does that file exist on the remote system?</p> <p>You must always check the status of your commands in Perl!</p> <pre><code>use strict; use warnings; use feature qw(say); use File::Basename; use threads; use threads::shared; use Net::SFTP::Foreign; my %args = ( user =&gt; 'root', password =&gt; 'Ht5h10N2', more =&gt; '-v', autodisconnect =&gt; 0 ); # Where is `%args` coming from? my $sftp = Net::SFTP::Foreign-&gt;new('hadoop-dev2', %args); # Check whether succeeded or failed! if ( $sftp-&gt;error ) { die qq(Could not establish the SFTP connection); } say "Starting main program"; open my $fh, "&lt;", "file_list.txt" # Check whether succeeded or failed! or die qq(Could not open file "file_list.txt"); } while ( my $file = &lt;$fh&gt; ) { chomp $file; $sftp-&gt;put( $file, $file ) ); # Check whether succeeded or failed! if ( $sftp-&gt;error ) { warn qq(Could not download file "$file"); my $remote_files_ref = $sftp-&gt;ls(); # Check whether succeeded or failed! if ( $sftp-&gt;error ) { warn qq(Cannot get stat or remote directory.); } else { say qq(List of files in "$remote_dir":); for my $remote_file ( @{ $remote_files_ref } ) { say " $remote_file"; } } } } </code></pre> <p>Note I check whether my <code>open</code> worked, whether the constructor for <code>$sftp</code> worked, and every time I use a method from <code>Net::SFTP::Foreign</code>. For example, I can't download a file that doesn't exist. Maybe it doesn't exist, thus I do a <code>$sftp-&gt;ls</code> to see when it doesn't work.</p> <p>You can use <code>autodie</code> which is a <a href="http://perldoc.perl.org/autodie.html" rel="nofollow">pragma</a> for various file commands in Perl, and is a setting you can use for <code>Net::SFTP::Foreign</code>. Autodie is nice because it kills your program automatically upon an error, thus turning perl into more of an <em>exception based</em> language. This way, if there's an error, and you don't catch it, your program dies.</p> <p>If you don't want you program to outright fail, you can use <code>eval</code> to test whether something worked or not:</p> <pre><code>$sftp-&gt;Net::SFTP::Foreign( yadda, yadda, { autodie =&gt; 1} ); #Autodie is now turned on: eval { # Checks whether the file exists $sftp-&gt;get( $file, $file ); } if ( $@ ) { warn qq(ERROR: File "$file" is not found!); } else { say qq(Downloaded "$file".); } </code></pre> <hr> <h1>Reply</h1> <blockquote> <p>Theres no error i ran your code, but i still cant upload :( Any help would be appreciated</p> </blockquote> <p>So, you're saying that <code>$sftp-&gt;get</code> doesn't download the file, but neither sets <code>$sftp-&gt;error</code>?</p> <p>There are a few places in the code where I see that an <code>undef</code> is returned, but <code>sftp-&gt;_set_error</code> isn't be called. Let's just see if <code>$sftp-&gt;get</code> returns a <em>true</em> or <em>undef</em>. According to the source code, that's what it should be doing. If it's undef, we'll assume it failed.</p> <pre><code>while ( my $file = &lt;$fh&gt; ) { chomp $file; if ( not $sftp-&gt;put( $file, $file ) ) { # Check whether succeeded or failed! warn qq(Could not download file "$file"); my $remote_files_ref; if ( $remote_files_ref = $sftp-&gt;ls() ) { # Check whether succeeded or failed! warn qq(Cannot get stat or remote directory.); } else { say qq(List of files in "$remote_dir":); for my $remote_file ( @{ $remote_files_ref } ) { say " $remote_file"; } } } } </code></pre>
<p>The problem was ,the code was being run on windows with cygwin so one of the major errors were there was thread competition to the single VTY resource and the threads used to get TIMED OUT, So i resolved it using an expect script </p>
<p>I'll bet that the problem is that you have some full paths to files in your <code>file_list.txt</code> and that the paths to the files do not exist on the FTP server. Remember that FTP doesn't create directories for you, so if you have</p> <pre><code>/etc/passwd </code></pre> <p>in your <code>file_list.txt</code>, you better have a directory called</p> <pre><code>/etc </code></pre> <p>on your FTP server.</p>