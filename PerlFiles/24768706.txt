Using cpanm to install Perl modules
<p>Maybe it's a stupid question? If I install a module like <code>File</code> using</p> <pre><code>cpanm File </code></pre> <p>will it install everything under <code>File</code>, like <code>File:Listing</code> etc?</p>
<p>When you request to install a module, a CPAN client (such as cpanm) will check an index to find out which archive (i.e. probably a .tar.gz file, but perhaps .tar.bz2 or .zip) contains the latest authorized version of that module.</p> <p>The client will then download that archive, and run the installation script found inside, which may indeed install not just the module you requested, but other bundled modules. (Though a large number archives on CPAN contain only a single module each.)</p> <p>Along the way, the client may also detect that what you're installing has dependencies that also need installation, and automatically add them to the queue to be installed.</p> <p>The names of the modules are not relevant. If you install <code>Foo</code>, you won't automatically get <code>Foo::Bar</code> just because it has a similar name. You'd only automatically get <code>Foo::Bar</code> if it were in the same archive file as <code>Foo</code>.</p>
<p>It's not a stupid question, and I can understand why you wouldn't want to just try it.</p> <p>But you can go ahead and do</p> <pre><code>cpanm File </code></pre> <p>and very little will happen as there isn't a module called <code>File</code>.</p> <p>The modules on CPAN are organized by <em>distribution</em>. A single distribution can contain one or more related modules, so <code>cpanm</code> first checks which distribution contains the module you asked for and fetches it.</p> <p>That distribution is checked for dependencies, and if there are any that are out of date or not installed at all then it will fetch and install each of those in turn. Eventually either all dependencies will be resolved or there will have been a critical error that stops <code>cpanm</code> from proceeding.</p> <p>When all dependencies are installed, the distribution that contains your module can be unpacked and installed.</p> <p>All being well that is the end of things, so in brief</p> <pre><code>cpanm File </code></pre> <p>will install nothing, because there is no <code>File</code> module.</p> <pre><code>cpanm File:Listing </code></pre> <p>will install the distribution that contains <code>File::Listing</code>, which at the time of writing is <code>GAAS/File-Listing-6.04.tar.gz</code></p> <p>That distribution also happens to contain these modules</p> <pre><code>File::Listing::apache File::Listing::dosftp File::Listing::netware File::Listing::unix File::Listing::vms </code></pre> <p>so <code>cpanm</code> will first ensure that all of <em>those</em> modules' dependencies are fulfilled and continue recursively on the same basis.</p> <hr> <p><strong>Note</strong> that it may be useful to experiment with the <code>cpan</code> command, which has a more comprehensive set of commands. Most significantly, it will list modules, distributions, authors and bundles by name or by regular expression.</p> <p>Enter <code>cpan</code> and get the prompt</p> <pre><code>cpan&gt; </code></pre> <p>when you can ask for </p> <pre><code>cpan&gt; help </code></pre> <p>and it will list a summary of the available commands. For instance I can examine the <code>File::Listing</code> module</p> <pre><code>cpan&gt; m File::Listing </code></pre> <p>to see the author, distribution ("CPAN_FILE"), version etc. like this</p> <pre><code>Module id = File::Listing CPAN_USERID GAAS (Gisle Aas &lt;gisle@ActiveState.com&gt;) CPAN_VERSION 6.04 CPAN_FILE G/GA/GAAS/File-Listing-6.04.tar.gz UPLOAD_DATE 2012-02-15 MANPAGE File::Listing - parse directory listing INST_FILE C:\Strawberry\perl\vendor\lib\File\Listing.pm INST_VERSION 6.04 </code></pre> <p>I can also look for distributions with a similar name, using a regex</p> <pre><code>cpan&gt; d /File-Listing/ </code></pre> <p>to see that there are <em>two</em> matching distributions</p> <pre><code>Distribution GAAS/File-Listing-6.04.tar.gz Distribution PLICEASE/File-Listing-Ftpcopy-0.05.tar.gz 2 items found </code></pre> <p>and I can look at just Gisle Aas' <code>File-Listing</code> distribution with</p> <pre><code>cpan&gt; d GAAS/File-Listing-6.04.tar.gz </code></pre> <p>and I am told about that distribution's member modules ("CONTAINSMODS") amongst other things</p> <pre><code>Distribution id = G/GA/GAAS/File-Listing-6.04.tar.gz CPAN_USERID GAAS (Gisle Aas &lt;gisle@ActiveState.com&gt;) CPAN_VERSION 6.04 CONTAINSMODS File::Listing File::Listing::apache File::Listing::dosftp File::Listing::netware File::Listing::unix File::Listing::vms UPLOAD_DATE 2012-02-15 </code></pre> <p><code>cpanm</code> has no such browsing facilities, so I suggest you experiment with <code>cpan</code> itself and use the <code>m</code> and perhaps the <code>d</code> commands for a while, with both full names and regex patterns.</p> <p>Once you have understood the structure of the CPAN repository you will find <code>cpanm</code> much quicker and more precise for general use.</p>
<p>CPAN doesn't have a hierarchical organization like you're imagining â€” just because <code>Foo</code> exists and <code>Foo::Bar</code> exists doesn't mean that <code>Foo::Bar</code> is "under" <code>Foo</code> in a meaningful sense. It might be, but in many cases it isn't. <code>Net::SSH::Perl</code> isn't a part of <code>Net::SSH</code>; and <code>IO::Async</code> definitely isn't part of <code>IO</code>.</p> <p>As tobyink and Borodin have pretty well explained, Perl modules are part of "distributions", which are the package files uploaded to CPAN. When you ask for a module to be installed, the CPAN client will install the distribution containing that module, and any distributions that that distribution depends on to build or run.</p>