kill multiple process in linux using perl script
<p>I have multiple running process that has a name of cpu2006. I try to kill all of the process using one command in linux:</p> <pre><code>kill -9 `ps -ef | grep cpu2006 | grep -v grep | awk '{print $2}'` </code></pre> <p>And it works.</p> <p>The problem is when I try to use Perl script:</p> <pre><code>system("kill -9 `ps -ef | grep cpu2006 | grep -v grep | awk '{print $2}'`"); </code></pre> <p>It doesn't work.</p> <p>Can someone correct my code? Your help is very much appreciated </p>
<p>It would be helpful to know what "<em>It doesn't work.</em>" looks like (error messages? silent failure?), whether the script is running with permissions sufficient to do the kill, what surrounding code exists in the script, and so on.</p> <p>However, there is one glaring issue: You're using double-quotes. Double-quotes allow for variable interpolation. So the <code>$2</code>, which I believe you intend to be populated by <code>awk</code>, is being interpolated as a Perl variable, which probably contains an undefined value. That undefined value (undef) gets concatenated into the string such that what your shell sees is something like this:</p> <pre><code>kill -9 `ps -ef | grep cpu2006 | grep -v grep | awk '{print }'` </code></pre> <p>(Note that the $2 has been replaced by Perl with an empty string, which is the stringified version of an undefined value.)</p> <p>To solve <em>that</em> problem, don't use double quotes. And since you already need literal single quotes within the string, the easiest alternative is the <code>q/..../</code> quote-like operator. Use it like this:</p> <pre><code>system(q/kill -9 `ps -ef | grep cpu2006 | grep -v grep | awk '{print $2}'`/); </code></pre> <p>It's unclear to me whether this will solve all of your problems, but it will solve one of them.</p>
<p>Try <a href="http://search.cpan.org/~jwb/Proc-ProcessTable-0.50_01/Killall.pm" rel="nofollow">Proc::Killall</a> module. It supports pattern matching also. </p>