Why does this code throw a &quot;Useless use of anonymous hash ({}) in void context&quot; warning.
<p>I'm re-factoring a Perl program I inherited. The following line </p> <pre><code>(! exists $self-&gt;{DEVEL}) &amp;&amp; { @$d = $nsaobj-&gt;filter_list(@$d) }; </code></pre> <p>is throwing the following warning...</p> <pre><code>Useless use of anonymous hash ({}) in void context... </code></pre> <p>First I want to understand what is happening here. Am I correct that this is just a different way of writing the statement below?</p> <pre><code>if (! exists $self-&gt;{DEVEL}) { @$d = $nsaobj-&gt;filter_list(@$d); } </code></pre> <p>My best guess is that the original line works due to lazy evaluation, if so, what is the rational to writing it that way? </p> <p>Second, why does this particular line throw the "useless use.." warning? </p>
<blockquote> <p>First I want to understand what is happening here. Am I correct that this is just a different way of writing the statement below?</p> </blockquote> <p>Yes, it seems like that's the intent of the original code, however that's not exactly what it is doing. Perl's warning is correct. The original author likely meant to write</p> <pre><code>(! exists $self-&gt;{DEVEL}) &amp;&amp; do { @$d = $nsaobj-&gt;filter_list(@$d); }; </code></pre> <p>The <code>do</code> is the important part here as it states to execute the subsequent block. Without the <code>do</code>, Perl instead creates an anonymous hash reference with the contents of <code>@$d</code> but that value is then not bound to any variable, hence the warning. It could even result in a runtime error if <code>@$d</code> ends up being an array with an odd number of elements.</p> <p>If there's a desire to keep this as a one-liner, this would be a more typical construct</p> <pre><code>@$d = $nsaobj-&gt;filter_list(@$d) unless exists $self-&gt;{DEVEL}; </code></pre>
<p>Perl considers the part after <code>&amp;&amp;</code> to be an anonymous hash reference. You can omit the braces <code>{</code> and <code>}</code> as it is a single command anyway, and the warning would disappear.</p>