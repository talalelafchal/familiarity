Adding lists of key/values to an existing hash
<p>I can initialize a hash from a list, e.g:</p> <pre><code>my %hash = (1..10); my %hash2 = split /[\n=]/; </code></pre> <p>Is there a better (briefer) way to add lists of new key/values to a hash than using temporary variables?</p> <pre><code>while (&lt;&gt;) { my ($k, $v) = split /=/, $_, 2; $hash{$k} = $v; } </code></pre>
<p>Maybe I'm wrong but the next</p> <pre><code>use 5.014; use warnings; use Data::Dumper; #create a hash my %hash = map { "oldvar" . $_ =&gt; "oldval" . $_ } (1..3); #add to the hash %hash = (%hash, map {split /[=\n]/} &lt;DATA&gt;); say Dumper \%hash; __DATA__ var1=val1 var2=val2 var3=val3 </code></pre> <p>prints</p> <pre><code>$VAR1 = { 'oldvar1' =&gt; 'oldval1', 'oldvar2' =&gt; 'oldval2', 'var1' =&gt; 'val1', 'var3' =&gt; 'val3', 'oldvar3' =&gt; 'oldval3', 'var2' =&gt; 'val2' }; </code></pre>
<p>It's possible, yes. It's rather like adding some numbers to an existing total - you might accomplish that like this:</p> <pre><code>my $total = 1 + 2 + 3; # here's the existing total # let's add some additional numbers $total = $total + 4 + 5; # the $total variable appears both # left and right of the equals sign </code></pre> <p>You can do similar when inserting values to an existing hash...</p> <pre><code>my %hash = (a =&gt; 1, b =&gt; 2); # here's the existing hash. # let's add some additional values $_ = "c=3" . "\n" . "d=4"; %hash = (%hash, split /[\n=]/); # the %hash variable appears both # left and right of the equals sign </code></pre> <p>With addition, there's a nice shortcut for this:</p> <pre><code> $total += 4 + 5; </code></pre> <p>With inserting values to a hash, there's no such shortcut.</p>