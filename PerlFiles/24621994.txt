HTML::Parser handler sends undefined parameter to callback function?
<p>How its being declared:</p> <pre><code>my $HTML_GRABBER = HTML::Parser-&gt;new('api_version' =&gt; 2, 'handlers' =&gt; { 'start' =&gt; [\&amp;start_tag,"tagname,text"], 'text' =&gt; [\&amp;read_text,"tagname, text"], 'end' =&gt; [\&amp;end_tag,"tagname"] } ); </code></pre> <p>callback function:</p> <pre><code>sub read_text { print Dumper(@_); die "\n"; my ($tag,$stuff) = @_; if(($DO_NOTHING==0)&amp;&amp;($tag eq $current_tag)) { push @{$data_queue}, $stuff; } } </code></pre> <p>result:</p> <pre><code>$VAR1 = undef; $VAR2 = ' '; </code></pre> <p>so it passes an undefined value and an empty string for tag and text, apparently. THis is reading from a saved HTML file on my harddrive. IDK </p> <p>I had something like this in mind:</p> <pre><code>#DOC structure: #( # "title"=&gt; {"text"=&gt;@("text")} # "div" =&gt; [ # { # "p"=&gt; [ # { # "class" =&gt; string # "id" =&gt; string # "style" =&gt; string # "data"=&gt;["first line", "second line"] # } # ], # "class" =&gt; string # "id" =&gt; string # "style" =&gt; string # } # ] #) </code></pre>
<p>You've told it to.</p> <p>You specified which parameters should be passed to the text handler:</p> <pre><code>'text' =&gt; [\&amp;read_text,"tagname, text"], </code></pre> <p>Well, there is no <code>tagname</code> for a text token, and therefore it passes you <code>undef</code> as the first paramter.</p> <p>What exactly are you trying to do? If you describe your actual goal, we might be able to suggest a better solution instead of just pointing out the flaws in your current implementation. Check out: <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">What is an XY Problem?</a></p> <h3>Addendum about Mojo::DOM</h3> <p>There are modern modules like <a href="https://metacpan.org/pod/Mojo::DOM" rel="nofollow"><code>Mojo::DOM</code></a> that are much better for navigating a document structure and finding specific data. Check out <a href="http://mojocasts.com/e5" rel="nofollow"><code>Mojocast Episode 5</code></a> for a helpful 8 minute introductory video.</p> <p>You appear to be prematurely worried about efficiency of the parse. Initially, I'd advise you to just store the raw html in the database, and reparse it whenever you need to pull new information.</p> <p>If you <a href="http://perldoc.perl.org/Benchmark.html" rel="nofollow"><code>Benchmark</code></a> and decide this is too slow, then you can use <a href="http://perldoc.perl.org/Storable.html" rel="nofollow"><code>Storable</code></a> to save a serialized copy of the parsed $dom object. However, this should definitely be in addition to the saved html.</p> <pre><code>use strict; use warnings; use Mojo::DOM; use Storable qw(freeze thaw); my $dom = Mojo::DOM-&gt;new(do {local $/; &lt;DATA&gt;}); # Serializing to memory - Can then put it into a DB if you want my $serialized = freeze $dom; my $newdom = thaw($serialized); # Load Title from Serialized dom print $newdom-&gt;find('title')-&gt;text; __DATA__ &lt;html&gt; &lt;head&gt;&lt;title&gt;My Title&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;My Header one&lt;/h1&gt; &lt;p&gt;My Paragraph One&lt;/p&gt; &lt;p&gt;My Paragraph Two&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; </code></pre> <p>Outputs:</p> <pre><code>My Title </code></pre>