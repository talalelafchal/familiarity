Java equivalent of perl unpack function
<p>I have a perl code (say client) which sends packed data as HTTP POST to another perl code running on apache mod_perl module (say server).</p> <p>In client side, I have the pack function like this,</p> <pre><code>$postData = pack("N a*", length($metaData), $metaData); </code></pre> <p>From perl pack document, it seems,</p> <pre><code>N -&gt; An unsigned long (32-bit) in "network" (big-endian) order. a -&gt; A string with arbitrary binary data, will be null padded. </code></pre> <p>Now the $postData will be sent to server using perl LWP User Agent.</p> <p>In the server side perl, we used to unpack like this,</p> <pre><code># first reading the metaData Length my $buf; $request-&gt;read($buf, 4); #$request is apache request handler my $metaDataLength = unpack("N", $buf); # now read the metaData itself $request-&gt;read($buf, $metaDataLength); </code></pre> <p>Now I have to do this server side data parsing in java (moving away from perl for some reasons). I have searched google for this and it seems to be not a single line solution as in perl. Some suggested to write our own unpack function. I am using java 1.7 version. </p> <p>Is there any simple solution available in java for the above server side data parsing ?</p> <p><strong>Edit</strong>: Thanks Elliot for 'ByteBuffer' idea. The following code works fine for me,</p> <pre><code>InputStream is = request.getInputStream(); //request is HTTPServletRequest byte[] bArr = new byte[4]; //reading first 4 bytes to get metaDataLength int bytesRead = is.read(bArr); ByteBuffer buf = ByteBuffer.wrap(bArr); int metaDataLength = buf.getInt(); //shows value matches with clientside perl code. </code></pre>
<p>potentially <a href="https://code.google.com/p/java-binary-block-parser/" rel="nofollow">JBBP</a> can be such one</p> <pre><code>final int value = JBBPParser.prepare("int;").parse(theInputStream).findFieldForType(JBBPFieldInt.class).getAsInt(); </code></pre>