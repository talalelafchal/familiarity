how to run command in local or may be on remote machine
<p>I have a setup HOSTA where all the software application components are installed .I have written a script which perfectly works if run it from the same host (HOSTA) .The kind of operation I am doing is like truncate a file ,read a pattern from a file etc. but in some other cases where all the components may not be installed in the same host .may be component A is on HOSTA, component b and c are on HOSTB.How to write the script to handle such situation?</p> <p>some of code where i am performing action .Now I want if I provide truncateLogfile(/path/to/file) then it should truncate regardless whether it is on local machine or remote machine. </p> <pre><code>sub truncateLogfile { my $pathFile = shift; if (! -e $pathFile ){ warn "The [$pathFile] does not exist\n" } ; system("truncate $pathFile --size 0") == 0 or warn "Failed "; } sub folderClean { my $self = shift; my $pathFolder = shift; opendir (DIR,$pathFolder) or warn "[!] Failed to open the Dir $!"; my @files = map { $pathFolder . '/' . $_ } grep { !/^\.{1,2}$/ } readdir (DIR); closedir (DIR); print "\nNo files present in $pathFolder\n" if !@files; foreach my $file (@files) { print "Removing $file...\n"; unlink "$file"; } } </code></pre>
<p>If my understanding of your question is correct, the requirement is to run your script from one host but want to perform the file operations on several hosts without knowing on which host the folder/file is available. There are many ways it can be handled. </p> <p>One easy way is to have your "system" command inside a for loop and each iteration should ssh into the respective host machine. The pseudo code will be like the below.</p> <pre><code>my @hosts = (hostA, hostB, hostC, hostD); # Assume that you have these four hosts. foreach (@hosts) { system("ssh $_ truncate $pathFile --size 0") == 0 or warn "Failed "; } </code></pre> <p>The above code will let your program iterate through all the hosts and perform the required operation. I have used 'ssh' in this example to mention a secured shell login. Depending on the typical login method, you can use sqsh, rsh, etc. instead of ssh.</p> <p>The above method works even if the same file is available in multple hosts. I hope that is OK with your requirement.</p>