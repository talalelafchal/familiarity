How does use of &quot;my&quot; keyword distiguish the results in perl?
<p>I dont understand how the "my" keyword works here. This is my perl script. </p> <pre><code>$line = ' sdfaad(asdvfr)'; </code></pre> <p>code1:</p> <pre><code>if ($tmp = $line =~ /(\(\s*[^)]+\))/ ) { print $tmp; } </code></pre> <p>Outputs:</p> <pre><code>1 </code></pre> <p>code2:</p> <pre><code>if (my ($tmp) = $line =~ /(\(\s*[^)]+\))/ ) { print $tmp; } </code></pre> <p>Outputs:</p> <pre><code>(asdvfr) </code></pre> <p>Why are the two outputs different? Does it have to do with the use of <code>my</code>?</p>
<p>Perl has two different assignment operators; a list assignment operator and a scalar assignment operator. A list assignment gives its right operand list context, while a scalar assignment gives its right operand scalar context. A match operation returns differently depending on this context.</p> <p>Which operator <code>=</code> is depends on what is on the left side; if it is an array, a hash, a slice, or a parenthesized expression, it is a list assignment; otherwise it is a scalar assignment.</p>
<p>It is not <code>my</code> that makes the difference, but scalar/list context. Braces around <code>$tmp</code> are imposing list context,</p> <pre><code>if (($tmp) = $line=~ /(\(\s*[^)]+\))/ ) # braces makes difference, not 'my' </code></pre> <p>while <code>my</code> only declares variable as lexical scoped one.</p>