dynamic scope in recursion function
<p>Is it better to pass args to recursive function or let dynamic scope deal with it?</p> <pre><code>sub rec { my ($arg1, $arg2 ..) = (@_); .. rec(..); } </code></pre> <p>or rather:</p> <pre><code>sub main { our ($arg1, $arg2 ..) = (@_); sub rec { my $arg1 = shift; .. # use $args &gt; 1 rec($arg1); } </code></pre> <p>Since I have several rec subs in main I prefer 2nd option which doesn't require passing vars all the time and reduces amount bloated code. Said that it's probably not efficient because it will go thru every stack frame in order to resolve dynamic scope?</p>
<p>If you're using a recursive function that relies on global variables, it can almost certainly be recoded as an iterative subroutine that uses locally scoped variables instead.</p> <p>I would strongly recommend that you always pass variables and return values, and that you rethink the design of your algorithms to use iteration (<code>while</code> loops) versus recursion.</p> <p>If you add details for your methods, we might be able to suggest an actual implementation. But given the amount of information you've shared, all we can do is advise design theory.</p>
<p>Don't place a named subroutine inside another. This causes problems (although <code>use warnings;</code> will find them). If you want to avoid passing a constant argument to every recursion, I recommend the following instead:</p> <pre><code>sub recurse { my ($constant, ...) = @_; local *_recurse = sub { my (...) = @_; ... _recurse(...); ... }; _recurse(...); } </code></pre> <p>(No idea why you used <code>our</code>. I switched back to <code>my</code>.)</p> <p>Or with a sufficiently new version of Perl (5.16+):</p> <pre><code>sub recurse { my ($constant, ...) = @_; my $_recurse = sub { my (...) = @_; ... __SUB__-&gt;(...); ... }; $_recurse-&gt;(...); } </code></pre> <p>Whatever you do, though, don't do the following as it leaks.</p> <pre><code>sub recurse { ... my $_recurse; $_recurse = sub { ... $_recurse-&gt;(...); ... }; ... } </code></pre> <p>(The inner sub references <code>$_recurse</code> which holds a reference to the inner sub, forming a reference cycle and thus a memory leak.)</p>