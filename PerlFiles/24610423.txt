Use capture group when \K construct
<p>I'm playing around with the \K construct during a substitution operation, but it appears that capture groups aren't available to the right side.</p> <p><strong>Code:</strong></p> <pre><code>my $string = 'lowerupper'; $string =~ s/lower\K(\w+)/\U$1/; print $string; </code></pre> <p><strong>Output:</strong></p> <pre><code>lowerupper </code></pre> <p><strong>Expected Output:</strong></p> <pre><code>lowerUPPER </code></pre> <p>Why is this / is it possible to achieve the above without capturing 'lower'.</p> <p>Thanks,</p> <p>Chris</p>
<p>The change isn't occurring because the pattern doesn't match because you are using a version of Perl that predates the addition of <code>\K</code>. Always use <code>use strict; use warnings;</code>!</p> <p>With 5.8,</p> <pre><code>$ perl -wle' my $string = "lowerupper"; $string =~ s/lower\K(\w+)/\U$1/; print $string; ' Unrecognized escape \K passed through at -e line 3. lowerupper </code></pre> <p>With 5.10+,</p> <pre><code>$ perl -wle' my $string = "lowerupper"; $string =~ s/lower\K(\w+)/\U$1/; print $string; ' lowerUPPER </code></pre> <p>You can obtain the result you want using</p> <pre><code>s/(lower)(\w+)/$1\U$2/; </code></pre> <p>and</p> <pre><code>s/(?&lt;=lower)(\w+)/\U$1/; </code></pre> <p>The first is probably a little more efficient.</p>