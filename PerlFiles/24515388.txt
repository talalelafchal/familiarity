How can I build a Perl distribution with DIst::Zilla and use Carton for dependencies?
<p>I have a perl distribution I have built with <a href="https://metacpan.org/release/Dist-Zilla">Dist::Zilla</a>, and so I do not have to contaminate my installed Perl's lib with the dependencies, I have used <a href="https://metacpan.org/release/Carton">Carton</a> to manage them.</p> <p>Things work great in development, but when I run <code>dzil test</code> or <code>dzil release</code> and tests are run, then the dependencies are not found and tests fail because the modules cannot be loaded.</p> <p>I have tried <code>carton exec -- dzil test</code> and <code>PERL5LIB=local/lib/perl5 dzil test</code> but I think that means i need to put all my Dist::Zilla deps into the cpanfile, which seems plain wrong (I do have Dist::Zilla and the deps I need installed in my perl's lib path).</p> <p>Is there a better way?</p>
<p>You can use <code>dzil build &amp;&amp; perl Makefile.PL</code> to make you <code>MYMETA.*</code> files (if you do not have them already) so you can feed to <a href="https://metacpan.org/pod/Module%3a%3aCPANfile" rel="nofollow">Module::CPANfile</a>'s <code>mymeta-cpanfile</code> utility to make a <code>cpanfile</code>:</p> <pre><code>$ dzil build &amp;&amp; perl Makefile.PL $ mymeta-cpanfile --no-configure &gt; cpanfile </code></pre> <p>You can then run Carton and put <code>cpanfile{,.snapshot}</code> into your version control, and optionally add more of your required modules to <code>cpanfile</code> that <code>mymeta-cpanfile</code> may miss (like dependencies on Moose, etc. that are indirectly pulled in by Dist::Zilla.)</p>
<p>I solved it with:</p> <pre><code>export PERL5LIB=$PERL5LIB:/absolute/path/to/project/local/lib/perl5; dzil release </code></pre>