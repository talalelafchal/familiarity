Subroutine that processes the array it returns?
<p>I would like to </p> <pre><code>my @Array; for (my $i=1; $i &lt;= 10000; $i++) { ProsArray(\@Array); } sub ProsArray { my @Array = @{$_[0]}; #do stuff to @Array (e.g., remove or add elements... push(@Array,10); return(@Array); } </code></pre> <p>But, the subroutine acts on my <code>@Array</code> that was initially declared--not on the <code>@Array</code> it returns in the previous iteration. </p> <p>I would like something like </p> <pre><code>while(...){ @Array = ProsArray(\@Array); } </code></pre> <p>So it would process the returned array and not the initial. </p>
<p>If you want to operate on your array inplace, you need to work against the reference you pass. Alternately, you need to store the return value.</p> <pre><code>use strict; use warnings; use Data::Printer; my @array_inplace = (1 .. 5); my @array_return = (1 .. 5); for (1 .. 3) { ProsArrayInplace(\@array_inplace); @array_return = ProsArrayRet(\@array_return); # replace array with retval } sub ProsArrayInplace { my ($array) = @_; #do stuff to @$Array (e.g., remove or add elements... push(@$array,10); # modify in place } sub ProsArrayRet { my @array = @{$_[0]}; #dereference #do stuff to @$Array (e.g., remove or add elements... push(@array,10); #modify array scoped to sub return @array; #return modified array } p(@array_inplace); p(@array_return); </code></pre> <p>Results:</p> <pre><code>[ [0] 1, [1] 2, [2] 3, [3] 4, [4] 5, [5] 10, [6] 10, [7] 10 ] [ [0] 1, [1] 2, [2] 3, [3] 4, [4] 5, [5] 10, [6] 10, [7] 10 ] </code></pre>
<p>From the comments: </p> <p>I believe the problem you are facing is caused by the way you are doing recursion. </p> <p>In </p> <pre><code>@Array = ProsArray(\@Array); </code></pre> <p>You pass the same reference in to the original @array object every time. Try removing that "\" and rerunning your code. </p>