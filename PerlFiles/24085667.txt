how to access the hash elements which have both hash reference and array references
<p>I have a hash which contains few levels of hashes which has array and hash references. So I have written a code like the one below to access both using output of <code>ref($var)</code>. The <code>%c</code> is my hash. After 3rd level of for loop I am getting hash reference and array reference so I want to access the array elements. I am using <code>my $array_ref = [%$new_values];</code> in my else loop to access the array elements. But I am getting below error:</p> <pre><code>Type of arg 1 to keys must be hash (not array dereference) </code></pre> <h1>My code:</h1> <pre><code>foreach my $item ( keys %c ) { print "$item: \n"; # print keys my $hash = $c{$item}; foreach my $key2 ( keys %$hash ) { print "\t", $key2, "\n\t"; # print keys my $hashref = $hash-&gt;{$key2}; my $myref = ref($hashref); #print("ref type is $myref\n"); foreach my $key3 (keys %{$hashref}) { my $values = $hashref-&gt;{$key3}; my $myref1 = ref($values); # print("ref type is $myref1\n"); foreach my $key4 (keys %{$values}) { my $new_values = $values-&gt;{$key4}; my $myref2 = ref($new_values); if ($myref2 eq HASH) { #print("ref type is $myref2\n"); print "\t", join "\t", map { %$_ } %$new_values; print "\n"; } elsif ($myref2 eq ARRAY) { print "\t", join "\t", map { @$_ } @$new_values; print "\n"; my $array_ref = [%$new_values]; my $new_type = ref($array_ref); print "$new_type\n"; foreach my $key_array ( keys @$array_ref) { print "$key_array\n"; } print "\t", $key_array, "\n\t"; } } } } } </code></pre>
<p>The lines</p> <pre><code>print "\t", join "\t", map { %$_ } %$new_values; </code></pre> <p>and</p> <pre><code>print "\t", join "\t", map { @$_ } @$new_values; </code></pre> <p>contain <em>two</em> dereferences instead of one, and <code>map {...}, %hash</code> will pass all the keys and values to the block, so an attempt to dereference a key inside the block will always fail as it cannot be a reference.</p> <p>It isn't clear exactly what these should be. Presumably you just want a list of the values in the case that <code>$new_values</code> is an array reference, so you want</p> <pre><code>print "\t", join "\t", @$new_values; </code></pre> <p>or just</p> <pre><code>print "\t$_" for @$new_values; </code></pre> <p>but in the case of the hash, do you want to see the keys or just the values? If it is the latter then you should write</p> <pre><code>print "\t", join "\t", values %$new_values; </code></pre> <p>but there are many ways to dump both the key and value for each hash element. Here's a suggestion</p> <pre><code>print "\t", join ', ', map "$_ =&gt; '$new_values-&gt;{$_}'", keys %$new_values; </code></pre> <p>I can't understand what it is you're intending in your last section</p> <pre><code>my $array_ref = [%$new_values]; my $new_type = ref($array_ref); print "$new_type\n"; foreach my $key_array ( keys @$array_ref) { print "$key_array\n"; } print "\t", $key_array, "\n\t"; </code></pre> <p>but it is clear that your attempt to dereference <code>$new_values</code> as a hash in <code>my $array_ref = [%$new_values]</code> will fail, as this is within a block where you have confirmed that <code>$new_values</code> is an <em>array</em> reference.</p> <p>Also, the line <code>my $new_type = ref($array_ref)</code> seems superfluous as you have just created <code>$array_ref</code> as an array reference, so <code>$new_type</code> will <em>always</em> be <code>ARRAY</code>.</p> <p>Finally, your <code>for</code> loop over <code>keys @$array_ref</code> probably doesn't do what you think it does. Before version 12 of Perl 5 it was a syntax error, but since then it will return the list of array indices, so it is the same as <code>0 .. $#$array_ref</code>.</p> <p>If you explain this section a little better then I will gladly help you to get it working.</p>