Perl use and instead of if
<p>Is it idiomatic Perl to use a chain of statements linked by <code>and</code> operators instead of an <code>if</code> with multiple conditions linked by <code>&amp;&amp;</code>?</p> <p>Example: instead of</p> <pre><code>if ($foo &amp;&amp; bar() &amp;&amp; baz()) { do_something(); } </code></pre> <p>use:</p> <pre><code>$foo and bar() and baz() and do_something(); </code></pre>
<p>My question went more for opinions rather than exact answers, triggering a lot of comments.</p> <p>Just to summarize them, the commenters found <code>if ($foo &amp;&amp; bar() &amp;&amp; baz) { do() }</code> a bit easier on my fellow humand beings than the flat chain <code>$foo and bar() and baz() and do();</code></p>
<p>As an alternative to</p> <pre><code>if ($foo &amp;&amp; bar() &amp;&amp; baz()) { do_something(); } </code></pre> <p>it could be used</p> <pre><code>do_something() if $foo &amp;&amp; bar() &amp;&amp; baz(); </code></pre> <p>which preserves separation of condition from desired action and brings simplicity like in <code>$x &amp;&amp; $y &amp;&amp; $z</code>.</p>
<p>You might want to read <em>Perl Best Practices</em> by Damian Conway. Mr. Conway has struggled with a lot of these issues and put his findings in this book.</p> <p>It comes down to what the user expects. When you chain the operations, it might be easy to miss that the last item is something you execute and not merely another boolean statement</p> <pre><code>$foo and bar and baz() and do_something(); </code></pre> <p>By making it a true <code>if</code> statement, it's much easier to see that you have a condition, and if that condition is <em>true</em>, you're executing the subroutine <code>do_something</code>.</p> <p>I prefer the use of <code>and</code> instead of <code>&amp;&amp;</code>:</p> <pre><code>if ($foo and bar() and baz()) { do_something(); } </code></pre> <p>This makes it easy to see that you have three conditions and if they're met, you're running something. I like <code>and</code> because it's easier to read which makes it a wee bit faster to comprehend, and because it has a <em>lower</em> precedence than <code>&amp;&amp;</code> and seems to work better in certain places:</p> <pre><code>open my $file, "&lt;", $foo or die qq(Can't open "$foo" for reading); </code></pre> <p>works while:</p> <pre><code>open my $file "&lt;", $foo || die qq(Can't open "$foo" for reading); </code></pre> <p>Doesn't unless you put parentheses around the <code>open</code> statement:</p> <pre><code>open ( my $file "&lt;", $foo ) || die qq(Can't open "$foo" for reading); </code></pre> <p>Some people say you can use the postfix <code>if</code>, but Conway is doesn't recommend it:</p> <pre><code>do_something() if $foo and bar() and baz(); </code></pre> <p>According to Conway, it's easy to miss to miss the conditional. He recommends to use this when the command is short, and it's a way of getting out of exceptions:</p> <pre><code>while ( my $foo = &lt; $bar_fh &gt; ) { next if $foo eq $bar; ... } </code></pre> <p>Is preferred over this:</p> <pre><code>while ( my $foo = &lt; $bar_fh &gt; ) { if ($foo eq $bar) { next; } ... } </code></pre> <p>Conway says that the <code>next</code> statement is short, and it's handling an exception. In other words, you're doing a loop unless you find when <code>$foo</code> is equal to <code>bar</code>. In the second, you lose that flow.</p> <p>Again, if you have these types of questions (and these are good questions. I wish more people took an interest in better coding structure and readability), read <em>Perl Best Practices</em>.</p>