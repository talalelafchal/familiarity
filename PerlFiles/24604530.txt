Jumping to lines in a file the fastest way in perl
<p>I have a very large file of size about 300-500 MB. I need to search for String1 in that file first. Then search for String2 starting from the position of String1. Then again search for String3 starting from the position of String2. For example,</p> <pre><code>String1 = "abc" String2 = "123" String3 = "opq" </code></pre> <p>File :</p> <pre><code>def 123 opq opq 123 opq abc //come here first blah blah 123 //come here next blah opq //read this finally and print afg 123 blah blah 123 def </code></pre> <p>Methods I followed,</p> <ol> <li><p>I tried reading the file line by line and searching for the matching pattern.</p> <p>It was a very slow method (had to wait for minutes).</p></li> <li><p>Then I stored the whole file into an array and grepped the matching lines to get the final line.</p> <p>It was quite fast in searching but slower in loading the file into an array. The memory consumed is also high.</p></li> </ol> <p>Is there an efficient method to perform such a task?</p>
<p>Using a perl one liner and range operators:</p> <pre><code>perl -ne 'print("$. $_") &amp;&amp; exit if (/abc/ .. 1) &amp;&amp; (/123/ .. 1) &amp;&amp; /opq/' file </code></pre> <p>Outputs:</p> <pre><code>11 opq //read this finally and print </code></pre> <h3>Explanation:</h3> <p><strong>Switches</strong>: </p> <ul> <li><code>-n</code>: Creates a <code>while(&lt;&gt;){..}</code> loop for each line in your input file. </li> <li><code>-e</code>: Tells <code>perl</code> to execute the code on command line. </li> </ul> <p><strong>Code</strong>:</p> <ul> <li><code>print("$. $_")</code>: prints the line number <code>$.</code> followed by the current line <code>$_</code> </li> <li><code>exit</code>: Terminate processing after desired line is found.</li> <li><code>if (/abc/ .. 1) &amp;&amp; (/123/ .. 1) &amp;&amp; /opq/</code>: Find patterns in order. </li> </ul> <h3>Addendum - for including functionality inside a script</h3> <p>I would advise against shelling out to another perl process to achieve this functionality. Instead just convert this to a non-commandline version:</p> <pre><code>use strict; use warnings; use autodie; open my $fh, '&lt;', 'file'; while (&lt;$fh&gt;) { if ((/abc/ .. 1) &amp;&amp; (/123/ .. 1) &amp;&amp; /opq/) { print "$. $_"; last; } } </code></pre>