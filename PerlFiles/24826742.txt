multidimensional array: argument isn't numeric in array element
<p>OS: AIX</p> <p>Shell: KSH</p> <p>Following the accepted answer on <a href="http://stackoverflow.com/questions/317310/how-can-i-create-multidimensional-arrays-in-perl">this question</a> I have created an multimensional array. Only, I get an error while trying to print the content of the array.</p> <p><strong>Error:</strong></p> <pre><code>Argument "content of $pvid" isn't numeric in array element at... </code></pre> <p><strong>The script:</strong></p> <pre><code>#!/usr/bin/perl use warnings; use strict; use Term::ANSIColor; my @arrpvid = (); print colored( sprintf("%-10s %9s %8s %8s %8s", 'PVID', 'AIX', 'VIO', 'VTD', 'VHOST'), 'green' ), "\n"; foreach my $pvid (`lspv | awk '{print \$2'}`) { foreach my $hdaix (`lspv | awk '{print \$1'}`) { chomp $pvid; chomp $hdaix; push @{ $arrpvid[$pvid] }, $hdaix; } } print $arrpvid[0][0]; </code></pre> <p><strong>Some explanation</strong>:</p> <p>Basically I want to print 5 variables of 5 different arrays next to each other. The code is written only for 2 arrays. </p> <p><strong>The content of $pvid:</strong></p> <pre><code>00088da343b00d9b 00088da38100f93c </code></pre> <p><strong>The content of $hdaix:</strong></p> <pre><code>hdisk0 hdisk1 </code></pre>
<h3>Quick Fix</h3> <p>Looks like you want to use a hash rather than an array, making your inner <code>push</code></p> <pre><code>push @{ $arrpvid{$pvid} }, $hdaix; </code></pre> <p>Note the change from square brackets to curly braces immediately surrounding <code>$pvid</code>. This tells the compiler that you want <code>%arrpvid</code> and not <code>@arrpvid</code>, so be sure to tweak your <code>my</code> declaration as well.</p> <p>At the end to print the contents of <code>%arrpvid</code>, use</p> <pre><code>foreach my $pvid (sort { hex $a &lt;=&gt; hex $b } keys %arrpvid) { local $" = "]["; # handy trick due to mjd print "$pvid: [@{$arrpvid{$pvid}}]\n"; } </code></pre> <p>The <a href="http://perldoc.perl.org/Data/Dumper.html" rel="nofollow">Data::Dumper</a> module is quick and easy output tool.</p> <pre><code>use Data::Dumper; $Data::Dumper::Indent = $Data::Dumper::Terse = 1; print Dumper \%arrpvid; </code></pre> <h3>More Details</h3> <p>You might be tempted to obtain the numeric value corresponding to each hexadecimal string in <code>$pvid</code> with <a href="http://perldoc.perl.org/functions/hex.html" rel="nofollow"><code>hex</code></a> as in</p> <pre><code>push @{ $arrpvid[hex $pvid] }, ... </code></pre> <p>but given the large example values in your question, <code>@arrpvid</code> would become enormous. Use a hash to create a <a href="https://en.wikipedia.org/wiki/Sparse_array" rel="nofollow">sparse array</a> instead.</p> <p>Be sure that all the values of <code>$pvid</code> have the same padding. Otherwise, like values may not hash together appropriately. If you need to normalize, use code along the lines of</p> <pre><code>$pvid = sprintf "%016x", hex $pvid; </code></pre>
<p>The problem lies in:</p> <pre><code>push @{ $arrpvid[$pvid] }, $hdaix; </code></pre> <p>The <code>$pvid</code> should be a numeric value like 0 or 5 and not i.e. <code>00088da343b00d9b</code></p>