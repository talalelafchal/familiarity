Pod::Usage help formatting
<p>I would like to correctly format my help message for my Perl scripts and if possible by using a standard module such as <code>Pod::Usage</code>. Unfortunately I do not really like the output format of pod2usage. For instance, with <code>grep</code> I get the following help structure: </p> <pre><code>$ grep --help Usage: grep [OPTION]... PATTERN [FILE]... Search for PATTERN in each FILE or standard input. PATTERN is, by default, a basic regular expression (BRE). Example: grep -i 'hello world' menu.h main.c Regexp selection and interpretation: -E, --extended-regexp PATTERN is an extended regular expression (ERE) -F, --fixed-strings PATTERN is a set of newline-separated fixed strings -G, --basic-regexp PATTERN is a basic regular expression (BRE) -P, --perl-regexp PATTERN is a Perl regular expression </code></pre> <p>But this is very different with <code>Pod::Usage</code> and I get unwanted <code>\n</code> and <code>\t</code>:</p> <pre><code>$ ./sample.pl --help Usage: sample [options] [file ...] This program will read the given input file(s) and do something useful with the contents thereof. Options: --help Print a brief help message and exits. --man Prints the manual page and exits. </code></pre> <p>I would like to modify the format of my help in the traditional way i.e. without <code>\n</code> and without leading <code>\t</code>. In fact, I am looking to solution that allows me to write this:</p> <pre><code>__END__ =head1 SYNOPSIS sample [options] [file ...] B&lt;This program&gt; will read the given input file(s) and do something useful with the contents thereof. =head1 OPTIONS =item B&lt;-h,--help&gt; Print a brief help message and exits. =item B&lt;-v,--version&gt; Prints the version and exits. =cut </code></pre> <p>And get this:</p> <pre><code>Usage: sample [options] [file ...] This program will read the given input file(s) and do something useful with the contents thereof. Options: -h, --help Print a brief help message and exits. -v, --version Prints the version and exits. </code></pre> <p>Not this:</p> <pre><code>Usage: sample [options] [file ...] This program will read the given input file(s) and do something useful with the contents thereof. Options: -h,--help Print a brief help message and exits. -v,--version Prints the version and exits. </code></pre> <p>Any clue ? </p>
<p>Two things you can try:</p> <p>The <a href="https://metacpan.org/pod/Pod::Usage#noperldoc" rel="nofollow">-noperldoc option</a> to make it switch to Pod::Text, which is a simpler formatter.</p> <p>or</p> <p><a href="https://metacpan.org/pod/Pod::Usage#Formatting-base-class" rel="nofollow">Set a different formatter</a></p> <p><code>Pod::Text</code> has several formatting options as well, such as the left margin, indent level, page width which may make it more to your liking.</p>
<p>When you use <code>=item</code>, you should prefix it with an <code>=over x</code> where <code>x</code> is how far you want to move over. After you finish your items, you need to use <code>=back</code>. If <code>=over x</code> is far enough over, the paragraph for that item will print on the same line as the <code>=item</code>. I played around and found <code>=over 20</code> looks pretty good:</p> <pre><code>use strict; use warnings; use Pod::Usage; pod2usage( -verbose =&gt; 1); =pod =head1 SYNOPSIS sample [options] [file ...] B&lt;This program&gt; will read the given input file(s) and do something useful with the contents thereof. =head1 OPTIONS =over 20 =item B&lt;-h&gt;, B&lt;--help&gt; Print a brief help message and exits. =item B&lt;-v&gt;, B&lt;--version&gt; Prints the version and exits. =back =cut </code></pre> <p>This prints out:</p> <pre><code>Usage: sample [options] [file ...] This program will read the given input file(s) and do something useful with the contents thereof. Options: -h, --help Print a brief help message and exits. -v, --version Prints the version and exits. </code></pre> <p>There's not much you can do with the <code>v, --version</code> stuff in POD to get it to print in pretty three column format. What you can do is give a bit more space between the <code>-h</code> and <code>--help</code> like I did above in order to improve readability.</p> <p>Remember, the important stuff is the data in your POD and not the absolute formatting. Use the formatting to make it easy to read, but don't sweat the details too much.</p> <p>I highly recommend you use the old standard Man page layout (which <code>Pod2Usage</code> assumes).</p>