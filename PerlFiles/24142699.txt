So what exactly does &lt;FILE&gt; do?
<p>So, I've used <code>&lt;FILE&gt;</code> a large number of times. A simple example would be: </p> <pre><code>open (FILE, '&lt;', "someFile.txt"); while (my $line = &lt;FILE&gt;){ print $line; } </code></pre> <p>So, I had thought that using <code>&lt;FILE&gt;</code> would take a a part of a file at a time (a line specifically) and use it, and when it was called on again, it would go to the next line. And indeed, whenever I set <code>&lt;FILE&gt;</code> to a scalar, that's exactly what it would do. But, when I told the computer a line like this one:</p> <pre><code>print &lt;FILE&gt;; </code></pre> <p>it printed the entire file, newlines and all. So my question is, what does the computer think when it's passed <code>&lt;FILE&gt;</code>, exactly?</p>
<p>It depends if it's used in a scalar context or a list context.</p> <p>In scalar context: <code>my $line = &lt;file&gt;</code> it reads one line at a tie.<br> In list context: <code>my @lines = &lt;FILE&gt;</code> it reads the whole file.</p> <p>When you say <code>print &lt;FILE&gt;;</code> it's list context.</p>
<p>Diamond operator <code>&lt;&gt;</code> used to read from file is actually built-in <code>readline</code> function. </p> <p>From <a href="http://perldoc.perl.org/functions/readline.html"><code>perldoc -f readline</code></a></p> <blockquote> <p>Reads from the filehandle whose typeglob is contained in EXPR (or from *ARGV if EXPR is not provided). In <strong>scalar context</strong>, each call reads and returns the next line until end-of-file is reached, whereupon the subsequent call returns undef. In <strong>list context</strong>, reads until end-of-file is reached and returns a list of lines. </p> </blockquote> <p>If you would like to check particular context in perl,</p> <pre><code>sub context { return wantarray ? "LIST" : "SCALAR" } print my $line = context(), "\n"; print my @array = context(), "\n"; print context(), "\n"; </code></pre> <p>output</p> <pre><code>SCALAR LIST LIST </code></pre>
<p>The behaviour is different depending on what context it is being evaluated in:</p> <pre><code>my $scalar = &lt;FILE&gt;; # Read one line from FILE into $scalar my @array = &lt;FILE&gt;; # Read all lines from FILE into @array </code></pre> <p>As <a href="http://perldoc.perl.org/functions/print.html" rel="nofollow"><code>print</code></a> takes a list argument, <code>&lt;FILE&gt;</code> is evaluated in list context and behaves in the latter way.</p>