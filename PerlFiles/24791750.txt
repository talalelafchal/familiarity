How to handle requests in a small-medium perl project
<p>I'm going to start my first perl project which is going to be a simple record tracking system.</p> <p>I plan to use template toolkit for rendering views with data and individual perl modules to handle things like reporting and database queries, hopefully getting a basic OOP style application going.</p> <p>My confusion is: how should I handle requests? Should I have a routes.pl file, where I can listen for <em>all</em> GET/POST requests and based on those requests, call the appropriate .pm method and return a TT template, basically acting like a front controller? (I come from the PHP framework world, if that helps to understand my viewpoint)</p>
<p>Simple things rarely stay simple, so you should not go the route of rolling your own dispatcher. You'll be reinventing wheels which others have already long solved. And, by going with a framework you're also getting a lot of extra functionality for free, usually through plug-ins.</p> <p>Have a look at the various Perl frameworks, the ones I can readily think of:</p> <p><code>Dancer</code> (<a href="http://www.perldancer.org/" rel="nofollow">http://www.perldancer.org/</a>)</p> <p><code>Mojolicious</code> (<a href="http://mojolicio.us/" rel="nofollow">http://mojolicio.us/</a>)</p> <p><code>Mason + Poet</code> (<a href="http://www.masonhq.com/" rel="nofollow">http://www.masonhq.com/</a>)</p> <p><code>Catalyst</code> (<a href="http://www.catalystframework.org/" rel="nofollow">http://www.catalystframework.org/</a>)</p> <p>I only have experience with <code>Mason + Poet</code> and <code>Catalyst</code>, though <code>Catalyst</code> is far from simple.</p>