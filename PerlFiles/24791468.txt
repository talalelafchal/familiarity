Pass high number of arguments to Perl subroutine or?
<p>I've written a few perl scripts to generate some HTML files. There is one main script which takes in arguments from the user, then this script takes the arguments and passes some of them along to other scripts which contain subroutines to generate the HTML. It's working great, but I keep thinking of new things to add which results in me needing more parameters for the scripts. I'm up to 7 arguments on the main script and 6 for the subroutines and I feel like it's going to be difficult to modify this code in the future as it is beginning to look confusing. Is there a more reasonable/organized way to pass a bunch of arguments to a script?</p> <p>Thanks for any suggestions!</p>
<p>Pass a hash reference, e.g.</p> <pre><code>sub named_parameters { ... } named_parameters( { foo =&gt; $val1, bar =&gt; $val2, baz =&gt; ... } ); </code></pre> <p>Then you can access the arguments by name:</p> <pre><code>my $arg_ref = shift; do_stuff_with $arg_ref-&gt;{foo}; ... </code></pre> <p>You could also pass a list of key/value pairs (or an ordinary hash), and use that:</p> <pre><code>my %arg = @_; </code></pre> <p>This could cause headaches with mixed named and positional parameters, but that's a rather debaucherous way to design a function's interface which I wouldn't recommend anyway.</p>