Multiple telnet clients/commands under AnyEvent
<p>If I'm reading multiple <code>$_-&gt;{thand}-&gt;cmd($cmd)</code> commands through same telnet connection, I've got disconnects.</p> <p>This manifests as multiple calls to <code>ae_connect()</code>. How to properly send and fetch data under <code>AnyEvent</code>?</p> <pre><code>use strict; use warnings; use Data::Dumper; use AnyEvent::Socket; use AnyEvent; use Net::Telnet; $| = 1; my $arr = [ { username =&gt; "user+ct", passwd =&gt; "1234", Host =&gt; "92.242.254.8", Port =&gt; 1094 }, { username =&gt; "user+ct", passwd =&gt; "1234", Host =&gt; "92.242.254.8", Port =&gt; 1095 }, { username =&gt; "user+ct", passwd =&gt; "1234", Host =&gt; "92.242.254.8", Port =&gt; 1096 }, ]; sub main_loop { my $cmd = "/ip firewall filter export"; my $i=0; for (@$arr) { if (!$_-&gt;{thand}) { ae_connect($_); print("skip ", Dumper $_); next; } # print Dumper $_; $i++; my $s; $s = join "", $_-&gt;{thand}-&gt;cmd($cmd); # print "\n==1&gt;$i \n$s"; $s = join "", $_-&gt;{thand}-&gt;cmd($cmd); $s = join "", $_-&gt;{thand}-&gt;cmd($cmd); } print "\n\n"; #die @$arr*1 if $i; } sub ae_connect { my ($tc) = @_; print "=========== $tc-&gt;{Host} ============\n"; tcp_connect $tc-&gt;{Host}, $tc-&gt;{Port} //23, sub { my ($fh) = @_ or return; # die "failed: $!"; # my $t = new Net::Telnet-&gt;new(Fhopen =&gt; $fh) or return; eval { $t-&gt;login($tc-&gt;{username}, $tc-&gt;{passwd}) } or return; $t-&gt;timeout($tc-&gt;{Timeout}); $tc-&gt;{thand} = $t; # $tc-&gt;{fh} = $fh; }; } my $w = AnyEvent-&gt;timer(after =&gt; 0, interval =&gt; 1, cb =&gt; \&amp;main_loop); my $cv = AnyEvent-&gt;condvar; $cv-&gt;recv; </code></pre>
<p>I don't think AnyEvent and Net::Telnet will work together. AnyEvent is event based where you have multiple event sources and will act on new data depending on the event source, while Net::Telnet just has a single file handle and blocks waiting for exactly the data it needs at the moment. </p> <p>If you need multiple Net::Telnet connections in parallel you need to use multiple processes or multiple threads or you might try to use Coroutines (e.g. Coro module).</p>