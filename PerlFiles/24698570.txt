Cannot get apache mod_perl with mpirun to work
<p>I am trying to build a simple web service that runs on an ubuntu machine with apache and mod_perl2. The service runs <code>mpirun</code> and returns the output of the call. I invoke a call of the apache response handler via the web browser. The problem is that the <code>mpirun</code> command seems to hang. </p> <p><strong>Important:</strong> This problem occurs on a server running Ubuntu (12.04.4) with apache, mod_perl and openmpi. When running it on my mac (Macos 10.9.3), it works fine and mpirun returns. On both machines, openmpi is installed in the same version (1.6.5)</p> <p>Here my mod_perl handler:</p> <pre><code>package MyHandler; use Apache2::Const '-compile' =&gt; 'OK'; sub handler { my $command = "mpirun -np 4 echo test"; my $out = qx($command); print $out; return Apache2::Const::OK; } 1; </code></pre> <p>The mpirun job does not seem to finish. A <code>ps aux | grep mpirun</code> gives me this:</p> <pre><code>www-data 24023 0.0 0.1 23600 2424 ? S 13:02 0:00 mpirun -np 4 echo test </code></pre> <p>When I do a <code>kilall -9 mpirun</code>, the service comes back with the result.</p> <p>No errors are written to the apache error log.</p> <p>Here is what I tried/tested:</p> <ul> <li>made sure that the command <code>mpirun -np 4 echo test</code> generates the correct output when run as user <code>www-data</code></li> <li>tried to invoke <code>mpirun</code> in different ways: Using <code>IPC::Run</code> and <code>IPC::Run3</code>, as suggested by Sergei, I also tried using pipes, but everytime mpirun dies not finish.</li> <li>tried to call the handler directly via a perl script and not via the browser: mpirun finishes and the handler prints the desired output.</li> <li>compared the outputs of <code>ompi_info --param mpi all</code> on both machines, mac and ubuntu, but found no differences</li> </ul> <p>Any idea why mpirun would hang in my situation or any idea how I could debug this?</p> <p><strong>Edit</strong></p> <p>I tried to use <a href="http://perl.apache.org/docs/2.0/api/Apache2/SubProcess.html" rel="nofollow">Apache2::SubProcess</a> as suggested by hrunting. Here my code following the simple example from the link:</p> <pre><code>package MyHandler; use Apache2::SubProcess (); use Apache2::Const '-compile' =&gt; 'OK'; use Apache2::Request; use Config; use constant PERLIO_IS_ENABLED =&gt; $Config{useperlio}; sub handler { my $r = shift; my $command = "mpirun -np 4 echo test"; my ($in_fh, $out_fh, $err_fh) = $r-&gt;spawn_proc_prog($command); $r-&gt;content_type('text/plain'); my $output = read_data($out_fh); my $error = read_data($err_fh); print "output : $output \n"; print "error : $error \n"; return Apache2::Const::OK; } # helper function to work w/ and w/o perlio-enabled Perl sub read_data { my ($fh) = @_; my $data; if (PERLIO_IS_ENABLED || IO::Select-&gt;new($fh)-&gt;can_read(10)) { $data = &lt;$fh&gt;; } return defined $data ? $data : ''; } 1; </code></pre> <p>This does not work for me. When calling the handler from the browser, I get the output: </p> <pre><code>output : error : </code></pre> <p>and <code>ps aux</code> tells me that mpirun is not running.</p> <p>Any further ideas of how I could debug this and get <code>mpirun</code> to work with my configuration?</p>
<p>Try IPC::Run or IPC::Run3 to run your command.</p>
<p><a href="https://metacpan.org/pod/Capture::Tiny" rel="nofollow" title="meta::cpan Capture::Tiny"><code>Capture::Tiny</code></a> works for me. I'm not sure it'll work well under <code>mod_perl</code> (it may interact badly with the file handles for the request and response) but it works fine as a regular script:</p> <pre><code>use Capture::Tiny 'capture'; my ( $stdout, $stderr, $exit ) = capture { system( qw(mpirun -np 4 echo test) ); }; print "stdout: $stdout\n"; print "stderr: $stderr\n"; print "exit: $exit\n"; </code></pre> <p>Prints:</p> <pre><code>stdout: test test test test stderr: exit: 0 </code></pre>
<p>Look at <a href="http://perl.apache.org/docs/2.0/api/Apache2/SubProcess.html" rel="nofollow"><code>Apache2::SubProcess</code></a>. When you're running external processes within a mod_perl handler, Apache memory, I/O and process management come into play. Remember, your code is running within Apache itself and is subject to the Apache environment. The <code>Apache2::SubProcess</code> module is designed to make <code>exec()</code>- and <code>system()</code>-style calls work properly under within Apache.</p> <p>Note that the module documentation outlines caveats for dealing with different Perl configurations.</p>