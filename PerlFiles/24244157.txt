Calling subroutine with system command inside the another script
<p>I am running perl under Windows 7 x86 and I get an error when I call subroutine which execute external commands from another script.</p> <p>I have two scripts, <em>script1</em> has a subroutine that executes a program (<code>patt.exe</code>) and <em>script2</em> that use this subroutine via <code>require</code>.</p> <p>When I run <em>script1</em>, it works properly. But when I try to use this subroutine from inside <em>script2</em>, I get the following error.</p> <p><strong>Error:</strong></p> <pre><code>'patt.exe' is not recognized as an internal or external command, operable program or batch file. </code></pre> <p><strong>script1</strong>:</p> <pre><code>#patt('file.txt'); sub patt { my $filename=shift@; system("cmd.exe /c patt.exe -S $filename"); } 1; </code></pre> <p><strong>script2</strong>:</p> <pre><code>require 'sub-directory/script1.pl'; patt('file.txt'); </code></pre> <p>I should mention that <em>script1</em> and <em>patt.exe</em> are located in the sub-directory (<code>require 'sub-directory/script1.pl';</code>) and when I put all files in same directory ( <code>require 'script1.pl';</code>) everything works correctly. This problem remains if I use <code>qx</code> or when I pass arguments to the script as array.</p> <p>I would be very thankful if anyone could help me.</p>
<p>One solution is that you can change the current working directory to that of your external program. To do that you can utilize <code>__FILE__</code> variable of the perl script that shares the same directory as your program. </p> <p>Of course, one thing to note is that you'll probably need to provide fully qualified paths to your <code>$filename</code> if you go with this solution:</p> <pre><code>use strict; use warnings; use Cwd; use File::Spec; sub patt { my $filename = shift; # Temporarily change cwd my $oldcwd = cwd; my ($vol, $path) = File::Spec-&gt;splitpath(__FILE__); chdir($path); # Execute program. Note that $filename will likely need to be a fully qualified path system("patt.exe -S $filename"); # Revert cwd chdir($oldcwd); } 1; </code></pre>
<p>First of all, you don't need to call <code>pratt.exe</code> via <code>cmd.exe</code>. You should be able to do this:</p> <pre><code>system "patt.exe -S $filename"; </code></pre> <p>The error is coming from the system command not being able to find the command <code>patt.exe</code> in order to execute it. Try this:</p> <pre><code> warn "WARN: \@INC: " . join "\n ", $ENV{PATH}; </code></pre> <p>This will print out all of the directories that Will be searched for the executable. Usually in Windows the <em>current directory</em> is the last entry in <code>$PATH</code>. I'm not 100% sure how <code>require</code> works in relationship to the current working directory. For example, it could be that when you put your subroutine in a file in another directory, it can't find <code>pratt.exe</code> located in the current directory since the current directory is now where the subroutine is located. </p> <p>So, another thing you might want to do is use the <code>Cwd</code> to import the <code>cad</code> command:</p> <pre><code>use strict; # Always! This will help point to errors. use warnings; # Always! This will help point to errors. use Cwd; sub patt { my $filename = shift; warn "Current Working Directory is: " . cwd; warn "PATH is: " . join "\n", $ENV{PATH}; my $error = system("cmd.exe /c patt.exe -S $filename"); if ( $error ) { die qq(Patt failed.); } } 1; </code></pre> <p>Check the current working directory against the Windows PATH and see if that gives you a hint why <code>patt</code> isn't getting executed.</p>