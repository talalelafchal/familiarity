processing a json file
<p>In the process of a summer internship I am stuck at the following problem.</p> <p>I have been given a json file to extract urls and most importantly the message and body part of various sections in the json file. So far I have succeeded in extracting the 'message' and 'body' part using regex techniques and I am trying to extract the urls using the urifind module of cpan.</p> <p>My question is : Given a json file are there ways to extract the above mentioned data without converting it to a text file (hence having to resort to text processing methods).</p> <p>The link for the data is given below:</p> <p><a href="http://pastebin.com/qhuC3LbY" rel="nofollow">http://pastebin.com/qhuC3LbY</a></p>
<p>JSON is a programming language independent data format. It is great because it is easy to be read by a human and because it is lightweight and parses faster than XML.</p> <p>In perl I always use the JSON::XS module to encode/decode JSON structures. It is a C implementation.</p> <p>From <a href="http://search.cpan.org/~mlehmann/JSON-XS-3.01/XS.pm" rel="nofollow">http://search.cpan.org/~mlehmann/JSON-XS-3.01/XS.pm</a></p> <blockquote> <p>This module converts Perl data structures to JSON and vice versa. Its primary goal is to be correct and its secondary goal is to be fast. To reach the latter goal it was written in C.</p> </blockquote> <p>Example:</p> <pre><code>use strict; use warnings; use JSON::XS (); # Create a JSON parser object my $parser = JSON::XS-&gt;new(); my $hash = { 'json' =&gt; 'xs', 'is' =&gt; 'awesome', }; # Use parser object to encode the hash print $parser-&gt;encode($hash); print "\n"; # Use direct method print JSON::XS::encode_json($hash); print "\n"; </code></pre>
<p>Use the <a href="https://metacpan.org/pod/JSON" rel="nofollow"><code>JSON</code></a> module to decode json data.</p> <pre><code>use strict; use warnings; use JSON; my $data = from_json(do {local $/; &lt;DATA&gt;}); print $data-&gt;{foo}[5]; __DATA__ {"foo":[0,1,2,3,4,"hello world"],"baz":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"bar":[9,10,11,12]} </code></pre> <p>Outputs:</p> <pre><code>hello world </code></pre>
<p>A json file is a text file already, 1) you have to read the text file and store the text in a variable 2) use the decode_json function to convert the text to a json array</p> <pre><code>use strict; use warnings; binmode STDOUT, ":utf8"; use utf8; use JSON; use Data::Dumper; my $json; { local $/; #Enable 'slurp' mode open my $fh, "&lt;", "data.json"; $json = &lt;$fh&gt;; close $fh; } my $data = decode_json($json); print Dumper($data); </code></pre>