Pre-declaring a perl 2-D array reference
<p>I have a Perl program which will end up filling every index in a 5000 x 26 2-D array ref.</p> <p>So consider:</p> <pre><code>my $aLarge2dArray; for (my $i = 0; $i &lt; 5000; $i++) { for (my $j = 0; $j &lt; 26; $j++) { $aLarge2dArray-&gt;[$i][$j] = 'TRUE'; }; }; </code></pre> <p>I am running this on beast of a computer with TONS of memory, so am not worried about sparing the memory but I am keen on speed.</p> <p>My gut feeling is that I would benefit from predeclaring $aLarge2dArray to make things faster and I have done so as follows:</p> <pre><code>my $aLarge2dArray; $aLarge2dArray-&gt;[4999][25] = 0; </code></pre> <p>My questions:</p> <p>1) is this the correct/best way to predeclare (and instantiate) the 2d array ref at initialisation?</p> <p>2) is this going to make things any faster (remember memory is not an issue, I have plenty enough)?</p> <p>Thanks for any answers/pointers.</p>
<p>No, you'll get only last cell in last array set to zero,</p> <pre><code>my $aLarge2dArray; $aLarge2dArray-&gt;[10][5] = 0; use Data::Dumper; print Dumper $aLarge2dArray; </code></pre> <p>output</p> <pre><code>$VAR1 = [ undef, undef, undef, undef, undef, undef, undef, undef, undef, undef, [ undef, undef, undef, undef, undef, 0 ] ]; </code></pre> <p>You might want to try this,</p> <pre><code>@$aLarge2dArray = map [ (0) x26 ], 0..4999; </code></pre>