Perform regular expression on a PERL PDL variable
<p>Is it possible to perform a regular expression on a n-dimension <a href="https://metacpan.org/pod/PDL" rel="nofollow"><code>PDL</code></a> variable?</p> <p>For example I can add 100 to all the elements by doing </p> <pre><code>$a1 = pdl [1,2]; print $a1 + 100; </code></pre> <p>However what if my array was a bunch of strings that I would like to perform some task on. For example this fails:</p> <pre><code>$a = pdl ['suze','david']; $a =~ s/suze/female/; print $a; </code></pre> <p>Not sure if this is even possible, but thanks in advance. </p>
<p>The point is, that <a href="http://p3rl.org/PDL" rel="nofollow"><code>PDL</code></a> is a perl extension that is designed for scientific and bulk numeric data processing and display. So its really not made for String manipulating. When you try to iterate through a piddle:</p> <pre><code>use strict; use warnings; use PDL; my $a = pdl ['suze','david']; print $_ . "\n" foreach ($a-&gt;list); </code></pre> <p>You will get:</p> <pre><code>Argument "suze" isn't numeric in subroutine entry at Basic/Core/Core.pm.PL (i.e. PDL::Core.pm) line 1296, &lt;DATA&gt; line 207. 0 0 Argument "david" isn't numeric in subroutine entry at Basic/Core/Core.pm.PL (i.e. PDL::Core.pm) line 1296, &lt;DATA&gt; line 207. </code></pre> <p>When you take a deeper look into the POD, you will find:</p> <pre><code>$a = pdl(SCALAR|ARRAY REFERENCE|ARRAY|STRING); </code></pre> <p>For the constructor and the followed text for <code>STRING</code></p> <blockquote> <p>The <strong>string version</strong> of pdl also allows you to use the strings <strong>bad</strong>, <strong>inf</strong>, and <strong>nan</strong>, and it will insert the values that you mean (and set the bad flag if you use bad). You can mix and match case, though you shouldn't. </p> </blockquote> <p>Back to your main problem, why do you use <code>PDL</code> for strings? - Why not using a simple Array?</p> <pre><code>use strict; use warnings; use Data::Dumper; my $a = ['suze','david']; s/suze/female/ for @{$a}; print Dumper $a; </code></pre> <p>Output:</p> <pre><code>$VAR1 = [ 'female', 'david' ]; </code></pre>
<p>As a follow-up to Paulchenkiller's answer, PDL has rudimentary support for strings via <a href="https://metacpan.org/pod/PDL%3a%3aChar" rel="nofollow">PDL::Char</a>. However, each string in a PDL::Char array must have the same length, or be null padded. Your example changes the length of the first entry to something longer than you had previously allocated. This is one reason you cannot apply a regex against a PDL::Char. </p> <p>Furthermore, Perl's strings have almost no extraneous memory and looping over the elements in an array oughtn't be too costly when you're applying a regex to each member of the array.</p>