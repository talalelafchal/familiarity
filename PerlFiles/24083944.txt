normalize columns into rows from pipe-delimited text stream
<p>I am looking for a concise, command line tool/script to take the output of another command and transform the text into a normalized data set for import to a database.</p> <p>My input stream currently looks like this:</p> <pre><code>timestamp|identifier|column1|column2|...|column n </code></pre> <p>(representing n observations at the same time, for the same identifier (person) )</p> <p>I want to grab the first two fields and then prepend them to column1-n to produce output like this:</p> <pre><code>timestamp|identifier|column1 timestamp|identifier|column2 timestamp|identifier|column3 ... timestamp|identifier|column n </code></pre> <p>sed? awk? perl? or, would it be better to load this data into a database table as-is, then use some kind of transform script stored procedure? I believe I've done this before in SQL Server using PIVOT</p>
<p>This can make it:</p> <pre><code>$ awk 'BEGIN{FS=OFS="|"} {for (i=3; i&lt;=NF; i++) print $1, $2, $i}' file timestamp|identifier|column1 timestamp|identifier|column2 timestamp|identifier|... timestamp|identifier|column n </code></pre> <h3>Explanation</h3> <ul> <li><code>BEGIN{FS=OFS="|"}</code> set input and output field separator as <code>|</code>.</li> <li><code>for (i=3; i&lt;=NF; i++) print $1, $2, $i</code> loop through all fields since 3rd printing 1st col, 2nd col + current field.</li> </ul>
<pre><code>perl -F'\|' -lane 'print join "|", @F[0,1],$_ for @F[2..$#F]' file </code></pre> <p>output</p> <pre><code>timestamp|identifier|column1 timestamp|identifier|column2 timestamp|identifier|column n </code></pre> <p>Explanation:</p> <p><code>-F'\|'</code> is delimiter for implicit split, and it should it be escaped since it is regex</p> <p><code>-l</code> auto chomp newline, and adds one when printing</p> <p><code>-a</code> auto split into <code>@F</code> array</p> <p><code>-n</code> adds implicit <code>while(&lt;&gt;)</code> loop</p> <p>or letting perl speak for itself,</p> <pre><code>perl -MO=Deparse -F'\|' -lane 'print join "|", @F[0,1],$_ for @F[2..$#F]' BEGIN { $/ = "\n"; $\ = "\n"; } LINE: while (defined($_ = &lt;ARGV&gt;)) { chomp $_; our(@F) = split(/\|/, $_, 0); print join('|', @F[0, 1], $_) foreach (@F[2 .. $#F]); } </code></pre>