How to dynamically add a program's library path to @INC in Perl program?
<p>I'm working on an application that is written in Perl. The application is so large now that I want to move each class out into a separate file. This complicated building and installing the program; when it was only file it could easily be copied in place anywhere. Now I have to use a build system like <code>Build::Module</code> or <code>ExtUtils::MakeMaker</code>.</p> <p>I have structured my source tree so that I have two directories: <code>bin</code> where the program launcher is, and <code>lib</code> where a number of modules are. <code>Bin</code> contains an executable Perl script which the user invokes, and it loads the necessary module from the lib directory.</p> <p>The problem that I have is that I want the user to be able to specify a prefix where they want the program installed, similar to the <code>--prefix</code> option offered by packages based on GNU Autotools. Since this might not be a standard path where Perl looks for modules (for example /opt/program) the user will see a message saying something like <code>Can't locate Program.pm in @INC</code>.</p> <p>Is there a way to make the program detect where the modules should be loaded frm and dynamically add that path to <code>@INC</code>? I don't want the user to have to manually work with environment variables like <code>PERL5LIB</code> in order to get the program running.</p>
<p>Couldn't you use <a href="http://perldoc.perl.org/FindBin.html" rel="nofollow">findbin</a> and <a href="http://perldoc.perl.org/lib.html" rel="nofollow">lib</a> ?:</p> <pre><code>use FindBin qw($Bin); use lib "$Bin/lib"; </code></pre>
<p>The following code works for me. You supply a command line option like (--prefix abc) and that value is appended to the lib path very early in your script. So all following modules will be searched with the dynamically set path.</p> <pre><code>use strict; use warnings; use Getopt::Long; my $prefix = ''; BEGIN { GetOptions ('prefix=s' =&gt; \$prefix ); $prefix = $prefix || '.'; } use lib "$prefix"; use mymod; # uses the dynamical search path </code></pre>
<p>If I understand you, you're breaking up a big large program into smaller components. Good for you! That's great programming technique. Making each class a true Perl module is a great idea. It makes your program so much easier to maintain.</p> <p>I do this all of the time. First, I use the module name <code>Local::</code> as my prefix. CPAN will never use <code>Local</code> as a module prefix, so I know I will never clash with some CPAN Module. Then, I put my <code>Local</code> module directory in the same directory as my script. In most standard Perl installations, when Perl searches <code>@INC</code> for modules, the last directory it searches for is the current directory (<code>.</code>). Since my module names will never clash with any CPAN modules, I know Perl will find my modules and only my modules under that <code>./Local</code> directory.</p> <p>You can now distribute the entire directory structure to other users. All a user has to do is install your entire directory (which includes the scripts and modules) and run the script. No need to go through an entire install process.</p>