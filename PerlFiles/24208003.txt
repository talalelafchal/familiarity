Connecting one dropdown list to another perl
<p>In Perl, I have script that creates a dropdown list based on a database that contains a list of vendors. I would like to use the selection of the first list to populate the second list with values of different contacts given that specific vendor.</p> <p><em>ie. Haliburton is vendor....once this is chosen contact Jim, Paul, George are available in contact list that is next to it.</em></p> <p>Currently I am getting the list of vendors and the list of contacts separately. <strong>How do I get the list of contacts based on the vendor in the database to be populated in the CGI popup_menu?</strong></p> <p>The following is my current code:</p> <pre><code>#!c:\perl\bin\perl.exe use CGI; use strict; use warnings; require ("data_eXchangeSubs.pm"); $query = new CGI; print $query-&gt;header(-expires=&gt;'-1d'); print $query-&gt;start_html(-title=&gt;'Dex Vendor Testing', -bgcolor=&gt;'white' ); my $dataX = ${ConnectToDatabase($main::DB1, $main::DBEnv)}; $resultSet = $dataX-&gt;Execute("select vendor from vendor_info group by vendor"); my @list_of_vendors; while(!$resultSet-&gt;EOF) { push @list_of_vendors, $resultSet-&gt;Fields("vendor")-&gt;Value; $resultSet-&gt;MoveNext; } </code></pre> <p>From here, I would like to populate another dropdown list with <strong>contacts</strong> from the vendor_info data table. Currently I'm making a separate query execution but I would like to take a given vendor from the previous array and populate only those contacts specific to the chosen vendor.</p> <p>I know I have to change the values of the contacts but don't know how to :(</p> <pre><code>$resultContact = $dataX-&gt;Execute("select contact from vendor_info"); my @list_of_contacts; while(!$resultContact-&gt;EOF) { push @list_of_contacts, $resultContact-&gt;Fields("contact")-&gt;Value; $resultContact-&gt;MoveNext; } print $query-&gt;popup_menu( -name =&gt; 'vendors' , -values =&gt;\@list_of_vendors , -default =&gt; $default_vendor , -style=&gt; 'width:200px' ); print $query-&gt;popup_menu( -name =&gt; 'contacts' , -values =&gt; \@list_of_contacts , -default =&gt; $default_vendor ); print $query-&gt;end_html; </code></pre>
<p>With CGI, you need to use <a href="http://perldoc.perl.org/CGI.html#FETCHING-THE-VALUE-OR-VALUES-OF-A-SINGLE-NAMED-PARAMETER%3a" rel="nofollow"><code>CGI::param</code></a> method. </p> <pre><code># I know the name of the select is "vendors", # but it makes more sense calling it here with 'vendor' # *you would have to change the name of the element* my $vendor_name = $query-&gt;param( 'vendor' ); </code></pre> <p>And I'm not sure how your database object works (kind of looks like the Microsoft iteration model), but using the proper way of parameterized queries in DBI, it looks like this:</p> <pre><code>my $stmt = $dbh-&gt;prepare( 'select contact from vendor_info where vendor_name=?' ); $stmt-&gt;execute( $vendor_name ); # binds the variable to the query. </code></pre> <p>Then you step through the rows of the query and build your list of contacts. Of course, you'd mostly likely use <code>fetchrow_array</code> or <code>fetchrow_arrayref</code> methods to walk through them. </p> <p>Although this might be better off utilizing a more modern strategy by getting a combined list of vendors and contacts for JavaScript or using Ajax to query the contacts for a vendor. </p> <p>There is no "connecting" structure in basic Perl CGI. You would have to use a more modern web framework for that. </p>
<p>This is a very broad question. You have a couple of simple options.</p> <p>1) Create an HTML form with the list of vendors, take (and sanitize!) the user's selection, and return the list of contacts. This is a traditional dynamic CGI form.</p> <p>2) Use JavaScript. This only works for a reasonable amount of data. There are several ways to do it but the gist of the idea is: a) associate each contact with the correct vendor, b) hide all the contacts initially, c) when a vendor is selected, display the correct contacts.</p> <p>JQuery is a handy JavaScript tool for this kind of manipulation and magically hides many browser incompatibility problems.</p> <p>3) You could create a fancy, modern AJAX-ified form, but from your question, this is probably overkill.</p> <p>Sorry there is no quick-and-dirty solution but I'm hoping to give you enough here to start Googling in the right direction! Best!</p>