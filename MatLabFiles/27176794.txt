Use a counter for nonindexed variables and putting them in an array
<p>I have 20 cities in Matlab. </p> <pre><code>city1='arad' ... city20='neamt' </code></pre> <p>My question is, how to use a counter as 'i' for call my cities and put them all in an array. </p> <p>I have tried these: </p> <pre><code> function [city,neighbor,list]=m() main; //referred to my cities name in main.m for i=1:20 //i used a loop city=cityi // what i whises is city1...city20 list=[city]// i want all cities in an array! end </code></pre> <p>But it doesn't work.</p>
<p>If you want to avoid using <code>eval</code>, you can save all of your workspace variables that have <code>city</code> at the beginning of them to a temporary <code>.mat</code> file, then reload the <code>.mat</code> file by storing its contents into a variable. This variable would essentially be a structure where each field is named according to the variables that you saved from your workspace. Once you load this structure in, you can use <a href="http://www.mathworks.com/help/matlab/ref/struct2cell.html" rel="nofollow"><code>struct2cell</code></a> to convert each structure field into a separate entry in a cell array. As Kamtal has noted in his post, it is suggested that you put all of these in a cell array, especially since the length of each city will change per variable.</p> <p>When you load in the <code>.mat</code> file, the way the structure fields are ordered should be numerically sorted, and so we don't have to worry about ordering anything. If you are truly concerned, consider using <a href="http://www.mathworks.com/help/matlab/ref/orderfields.html" rel="nofollow"><code>orderfields</code></a> to ensure that the fields are ordered numerically.... but I'm pretty sure this won't be a problem.</p> <p>The end result will be a cell array that contains all of your cities. Once you're done with this <code>.mat</code> file, you can delete it from your computer.</p> <p>Assuming that you only want to save those variable names that start with <code>city</code> (i.e. <code>city1, ..., city20</code>) in your workspace, try doing this:</p> <pre><code>save('data.mat', 'city*'); %// Save the variables to a MAT file data = load('data.mat'); %// Load them back into a structure that contains fields corresponding to the variable names cellArray = struct2cell(data); %// Convert structure to cell array delete('data.mat'); %// Delete the temporary file </code></pre> <p><code>cellArray</code> will contain all of your cities indexed from 1 up to 20. Therefore, if you want to access a particular city, simply do:</p> <pre><code>city = cellArray{idx}; </code></pre> <p><code>idx</code> is the city ID that you want to access. Therefore, if you wanted to access <code>city15</code>, do:</p> <pre><code>city = cellArray{15}; </code></pre>
<p>You should put them in a <code>cell</code></p> <pre><code>for i = 1 : 20 eval(['A{',num2str(i),'} = city',num2str(i)]); end </code></pre> <p>I don't see other choice but to use <code>eval</code>.</p>