How do I determine the coefficients for a linear regression line in MATLAB?
<p>I'm going to write a program where the input is a data set of 2D points and the output is the regression coefficients of the line of best fit by minimizing the minimum MSE error.</p> <p>I have some sample points that I would like to process:</p> <pre><code> X Y 1.00 1.00 2.00 2.00 3.00 1.30 4.00 3.75 5.00 2.25 </code></pre> <p>How would I do this in MATLAB?</p> <p>Specifically, I need to get the following formula:</p> <pre><code>y = A + Bx + e </code></pre> <p><code>A</code> is the intercept and <code>B</code> is the slope while <code>e</code> is the residual error per point.</p>
<p>Judging from the link you provided, and my understanding of your problem, you want to calculate the line of best fit for a set of data points. You also want to do this from first principles. This will require some basic Calculus as well as some linear algebra for solving a 2 x 2 system of equations. If you recall from linear regression theory, we wish to find the best slope <code>m</code> and intercept <code>b</code> such that for a set of points <code>([x_1,y_1], [x_2,y_2], ..., [x_n,y_n])</code> (that is, we have <code>n</code> data points), we want to minimize the sum of squared residuals between this line and the data points.</p> <p>In other words, we wish to minimize the cost function <code>F(m,b,x,y)</code>:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cmathbf%7BF%7D%28m%2C%20b;%5Cmathbf%7Bx%7D,%5Cmathbf%7By%7D%29%20%3D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20%28y_i%20-%20%28mx_i%20&plus;%20b%29%29%5E2" alt=""></p> <p><code>m</code> and <code>b</code> are our slope and intercept for this best fit line, while <code>x</code> and <code>y</code> are a vector of <code>x</code> and <code>y</code> co-ordinates that form our data set.</p> <p>This function is convex, so there is an optimal minimum that we can determine. The minimum can be determined by finding the derivative with respect to each parameter, and setting these equal to 0. We then solve for <code>m</code> and <code>b</code>. The intuition behind this is that we are simultaneously finding <code>m</code> and <code>b</code> such that the cost function is jointly minimized by these two parameters. In other words:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20m%7D%20%3D%20%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20b%7D%20%3D%200" alt=""></p> <p>OK, so let's find the first quantity <img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20m%7D" alt="">:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20m%7D%20%3D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%202%28y_i%20-%20mx_i%20-%20b%29%28-x_i%29%20%3D%200" alt=""></p> <p>We can drop the factor 2 from the derivative as the other side of the equation is equal to 0, and we can also do some distribution of terms by multiplying the <code>-x_i</code> term throughout:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20m%7D%20%3D%20-%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_iy_i%20&plus;%20m%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%5E%7B2%7D%20&plus;%20b%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%20%3D%200" alt=""></p> <p>Next, let's tackle the next parameter <img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20b%7D" alt="">:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20b%7D%20%3D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%202%28y_i%20-%20mx_i%20-%20b%29%28-1%29%20%3D%200" alt=""></p> <p>We can again drop the factor of 2 and distribute the -1 throughout the expression:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20b%7D%20%3D%20-%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dy_i%20&plus;%20m%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%20&plus;%20b%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%201=0" alt=""></p> <p>Knowing that <img src="http://latex.codecogs.com/gif.latex?%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%201" alt=""> is simply <code>n</code>, we can simplify the above to:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7BF%7D%7D%7D%7B%5Cpartial%20b%7D%20%3D%20-%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dy_i%20&plus;%20m%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%20&plus;%20bn%3D0" alt=""></p> <p>Now, we need to simultaneously solve for <code>m</code> and <code>b</code> with the above two equations. This will jointly minimize the cost function which finds the best line of fit for our data points.</p> <p>Doing some re-arranging, we can isolate <code>m</code> and <code>b</code> on one side of the equations and the rest on the other sides:</p> <p><img src="http://latex.codecogs.com/gif.latex?m%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%20&plus;%20bn%20%3D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20y_i" alt=""></p> <p><img src="http://latex.codecogs.com/gif.latex?m%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%5E%7B2%7D%20&plus;%20b%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_i%20%3D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_iy_i" alt=""></p> <p>As you can see, we can formulate this into a 2 x 2 system of equations to solve for <code>m</code> and <code>b</code>. Specifically, let's re-arrange the two equations above so that it's in matrix form:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20%3D%20%5Cmathbf%7Bb%7D" alt=""></p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_i%20%26%20n%20%5C%5C%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%5E%7B2%7D%20%26%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%20%5Cend%7Bbmatrix%7D%20%5Cbegin%7Bbmatrix%7D%20m%5C%5Cb%20%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20y_i%20%5C%5C%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_iy_i%20%5Cend%7Bbmatrix%7D" alt=""></p> <hr> <p>With regards to above, we can decompose the problem by solving a linear system: <code>Ax = b</code>. All you have to do is solve for <code>x</code>, which is <code>x = A^{-1}*b</code>. To find the inverse of a 2 x 2 system, given the matrix:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cmathbf%7BA%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%20a%20%26%20b%20%5C%5C%20c%20%26%20d%5Cend%7Bbmatrix%7D" alt=""></p> <p>The inverse is simply:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cmathbf%7BA%7D%5E%7B-1%7D%20%3D%20%5Cfrac%7B1%7D%7Bad-bc%7D%20%5Cbegin%7Bbmatrix%7D%20d%20%26%20-b%20%5C%5C%20-c%20%26%20a%20%5Cend%7Bbmatrix%7D" alt=""></p> <p>Therefore, by substituting our quantities into the above equation, we solve for <code>m</code> and <code>b</code> in matrix form, and it simplifies to this:</p> <p><img src="http://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7D%20m%20%5C%5C%20b%20%5Cend%7Bbmatrix%7D%20%3D%20%5Cfrac%7B1%7D%7B%28%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%29%5E2%20-%20n%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_i%5E2%7D%20%5Cbegin%7Bbmatrix%7D%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_i%20%26%20-n%20%5C%5C%20-%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_i%5E%7B2%7D%20%26%20%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%5Cend%7Bbmatrix%7D%5Cbegin%7Bbmatrix%7D%20%5Csum_%7Bi%3D1%7D%5En%20y_i%5C%5C%20%5Csum_%7Bi%3D1%7D%5En%20x_iy_i%5Cend%7Bbmatrix%7D" alt=""></p> <p>Carrying out this multiplication and solving for <code>m</code> and <code>b</code> individually, this gives:</p> <p><img src="http://latex.codecogs.com/gif.latex?m%20%3D%20%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5En%20x_i%20%5Csum_%7Bi%3D1%7D%5En%20y_i%20-%20n%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_iy_i%7D%7B%28%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%29%5E2%20-%20n%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_i%5E%7B2%7D%7D" alt=""></p> <p><img src="http://latex.codecogs.com/gif.latex?b%20%3D%20%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5En%20x_iy_i%20%5Csum_%7Bi%3D1%7D%5En%20x_i%20-%20%5Csum_%7Bi%3D1%7D%5En%20y_i%20%5Csum_%7Bi%3D1%7D%5En%20x_i%5E%7B2%7D%7D%7B%28%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%20x_i%29%5E2%20-%20n%5Csum_%7Bi%3D1%7D%5E%7Bn%7Dx_i%5E%7B2%7D%7D" alt=""></p> <hr> <p>As such, to find the best slope and intercept to best fit your data, you need to calculate <code>m</code> and <code>b</code> using the above equations.</p> <p>Given your data specified in the link in your comments, we can do this quite easily:</p> <pre><code>%// Define points X = 1:5; Y = [1 2 1.3 3.75 2.25]; %// Get total number of points n = numel(X); % // Define relevant quantities for finding quantities sumxi = sum(X); sumyi = sum(Y); sumxiyi = sum(X.*Y); sumxi2 = sum(X.^2); sumyi2 = sum(Y.^2); %// Determine slope and intercept m = (sumxi * sumyi - n*sumxiyi) / (sumxi^2 - n*sumxi2); b = (sumxiyi * sumxi - sumyi * sumxi2) / (sumxi^2 - n*sumxi2); %// Display them disp([m b]) </code></pre> <p>... and we get:</p> <pre><code>0.4250 0.7850 </code></pre> <p>Therefore, the line of best fit that minimizes the error is:</p> <pre><code>y = 0.4250*x + 0.7850 </code></pre> <hr> <p>However, if you want to use built-in MATLAB tools, you can use <a href="http://www.mathworks.com/help/matlab/ref/polyfit.html" rel="nofollow noreferrer"><code>polyfit</code></a> (credit goes to Luis Mendo for providing the hint). <code>polyfit</code> determines the line (or n<sup>th</sup> order polynomial curve rather...) of best fit by linear regression by minimizing the sum of squared errors between the best fit line and your data points. How you call the function is so:</p> <pre><code>coeff = polyfit(x,y,order); </code></pre> <p><code>x</code> and <code>y</code> are the <code>x</code> and <code>y</code> points of your data while <code>order</code> determines the order of the line of best fit you want. As an example, <code>order=1</code> means that the line is linear, <code>order=2</code> means that the line is quadratic and so on. Essentially, <code>polyfit</code> fits a polynomial of order <code>order</code> given your data points. Given your problem, <code>order=1</code>. As such, given the data in the link, you would simply do:</p> <pre><code>X = 1:5; Y = [1 2 1.3 3.75 2.25]; coeff = polyfit(X,Y,1) coeff = 0.4250 0.7850 </code></pre> <p>The way <code>coeff</code> works is that these are the coefficients of the regression line, starting from the highest order in decreasing value. As such, the above <code>coeff</code> variable means that the regression line was fitted as:</p> <pre><code>y = 0.4250*x + 0.7850 </code></pre> <p>The first coefficient is the slope while the second coefficient is the intercept. You'll also see that this matches up with the link you provided.</p> <p>If you want a visual representation, here's a plot of the data points as well as the regression line that best fits these points:</p> <pre><code>plot(X, Y, 'r.', X, polyval(coeff, X)); </code></pre> <p>Here's the plot:</p> <p><img src="https://i.stack.imgur.com/bgLWQ.png" alt="enter image description here"></p> <p><a href="http://www.mathworks.com/help/matlab/ref/polyval.html" rel="nofollow noreferrer"><code>polyval</code></a> takes an array of coefficients (usually produced by <code>polyfit</code>), and you provide a set of <code>x</code> co-ordinates and it calculates what the <code>y</code> values are given the values of <code>x</code>. Essentially, you are evaluating what the points are along the best fit line.</p> <hr> <h1>Edit - Extending to higher orders</h1> <p>If you want to extend so that you're finding the best fit for any n<sup>th</sup> order polynomial, I won't go into the details, but it boils down to constructing the following linear system. Given the relationship for the i<sup>th</sup> point between <code>(x_i, y_i)</code>:</p> <p><img src="http://upload.wikimedia.org/math/8/2/a/82a06600a40dc780c38133bbffd6e222.png" alt=""></p> <p>You would construct the following linear system:</p> <p><img src="http://upload.wikimedia.org/math/b/b/0/bb04575d400332c9617c4f5c24095fc2.png" alt=""></p> <p>Basically, you would create a vector of points <code>y</code>, and you would construct a matrix <code>X</code> such that each column denotes taking your vector of points <code>x</code> and applying a power operation to each column. Specifically, the first column is the zero-th power, the first column is the first power, the second column is the second power and so on. You would do this up until <code>m</code>, which is the order polynomial you want. The vector of <code>e</code> would be the residual error for each point in your set.</p> <p>Specifically, the formulation of the problem can be written in matrix form as:</p> <p><img src="http://upload.wikimedia.org/math/e/3/9/e392e1af4306677d1ba82ab448a6cc97.png" alt=""></p> <p>Once you construct this matrix, you would find the parameters by least-squares by calculating the <a href="http://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse" rel="nofollow noreferrer">pseudo-inverse</a>. How the pseudo-inverse is derived, you can read it up on the Wikipedia article I linked to, but this is the basis for minimizing a system by least-squares. The pseudo-inverse is the backbone behind least-squares minimization. Specifically:</p> <p><img src="http://upload.wikimedia.org/math/3/e/e/3eece3d7248bdd1a93e009f353a6b0df.png" alt=""></p> <p><code>(X^{T}*X)^{-1}*X^{T}</code> is the pseudo-inverse. <code>X</code> itself is a very popular matrix, which is known as the <a href="http://en.wikipedia.org/wiki/Vandermonde_matrix" rel="nofollow noreferrer">Vandermonde matrix</a> and MATLAB has a command called <a href="http://www.mathworks.com/help/matlab/ref/vander.html" rel="nofollow noreferrer"><code>vander</code></a> to help you compute that matrix. A small note is that <code>vander</code> in MATLAB is returned in reverse order. The powers decrease from <code>m-1</code> down to 0. If you want to have this reversed, you'd need to call <a href="http://www.mathworks.com/help/matlab/ref/fliplr.html" rel="nofollow noreferrer"><code>fliplr</code></a> on that output matrix. Also, you will need to append one more column at the end of it, which is the vector with all of its elements raised to the m<sup>th</sup> power.</p> <p>I won't go into how you'd repeat your example for anything higher order than linear. I'm going to leave that to you as a learning exercise, but simply construct the vector <code>y</code>, the matrix <code>X</code> with <code>vander</code>, then find the parameters by applying the pseudo-inverse of <code>X</code> with the above to solve for your parameters.</p> <hr> <p>Good luck!</p>