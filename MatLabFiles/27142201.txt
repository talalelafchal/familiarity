Vectorizing the Sum of a Triple For Loop
<p>Currently, I am trying to build the matrix Alpha through this triple-loop:</p> <pre><code>Alpha = zeros(a_length, b_length); for a = 1:a_length for b = 1:b_length for c = 1:c_length Alpha(a,b) = Alpha(a,b) + Beta(c,a) * Gamma(b,c); end end end </code></pre> <p>Is there a way to pass in two vectors to the Beta and Gamma Matrices, such that I can construct the entirety of Alpha in a single, vectorized line of elegant code?</p>
<p>You could use simple <code>matrix multiplication</code> to your rescue -</p> <pre><code>Alpha = (Gamma*Beta).' </code></pre> <p>Or this way -</p> <pre><code>Alpha = Beta.'*Gamma.' </code></pre> <p>Or a bit complicated <code>bsxfun</code> based approach -</p> <pre><code>Alpha = sum(bsxfun(@times,permute(Gamma,[3 1 2]),permute(Beta,[2 3 1])),3) </code></pre> <p>And if you want to avoid one <code>permute</code> from the earlier <code>bsxfun</code> approach -</p> <pre><code>Alpha = squeeze(sum(bsxfun(@times,Gamma,permute(Beta,[3 1 2])),2)).' </code></pre> <p>Or this -</p> <pre><code>Alpha = squeeze(sum(bsxfun(@times,Beta.',permute(Gamma,[3 2 1])),2)) </code></pre>