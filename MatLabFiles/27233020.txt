Is it possible to make a matrix with rows that have different #rows on Matlab?
<p>I want to make a matrix, or another kind of variable that as rows. The thing is that with the first row there can be 10 numbers(columns), and the second only 3, and the third 5, and so on... Is that possible? And how?</p> <p>EDIT: I need to through a matrix, then store the numbers. It's a m-by-2 matrix. I'm going through it with a for loop. Like so:</p> <pre><code>rows = size (mtx, 1); for i = 1 : rows var = m (i, :); if m(2) is in A{something} if m(3) is in A{something} continue (ignore) else store m(3) in A{something} end else if m(3) is in A{something} store m(2) in A{something} else store both m(2) and m(3) in A{Newsomething} end end end </code></pre>
<p>Not as a matrix, but as a <a href="http://uk.mathworks.com/help/matlab/cell-arrays.html" rel="nofollow">cell array</a>, yes:</p> <pre><code>A{1} = [1 2 3 4 5 6 7 8 9 10]; A{2} = [1 2 3]; A{3} = [1 2 3 4 5]; &gt;&gt; A A = { [1,1] = 1 2 3 4 5 6 7 8 9 10 [1,2] = 1 2 3 [1,3] = 1 2 3 4 5 } </code></pre>
<p>If you know the absolute maximum of elements you may have, you might fill some number of elements with your numbers and all others elements in a row with NaN. After that you could take all non-nan elements from a,say first row, as <code>A(1, ~isnan(A(1,:)))</code></p> <p>if you need to process all rows, you could write:</p> <pre><code>for i = 1 : size(A,1) row_to_process = A(i, ~isnan(A(i,:))) do_some_stuff(row_to_process) end </code></pre>