How to get that click is in the shape or outside the shap.
<p>I need to make the program there is a triangle, when I click in triangle message box will show "In the Triangle" and if click outside then "Outside the triangle"</p> <p>There is code of triangle and to get click coordinates. but i am not able to make logic of that mention above. </p> <p>If there is better way to draw the triangle then tell me that to. or if this work is easy in matlab then suggest me that too.</p> <p><strong>Class 1</strong> draws triangle </p> <pre><code>public class Triangle extends JComponent { public void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D) g; g2.draw(new Line2D.Double (100, 100, 200, 100)); g2.draw(new Line2D.Double (100, 100, 150, 200)); g2.draw(new Line2D.Double (150, 200, 200, 100)); } } </code></pre> <p><strong>Class 2</strong></p> <pre><code>public class Tri_Angle extends MouseAdapter { Tri_Angle(){ addMouseListener(new MouseAdapter() { public void mousePressed(MouseEvent me) { int x= me.getX(); int y= me.getY(); System.out.println("clicked at (" + x + ", " + y + ")"); } }); } public static void main(String[] args) { Triangle component = new Triangle (); JFrame frame = new JFrame (); final int FRAME_WIDTH = 250; final int FRAME_HEIGHT = 250; frame.setSize (FRAME_WIDTH, FRAME_HEIGHT); frame.addMouseListener(new MouseAdapter() { public void mousePressed(MouseEvent me) { int x= me.getX(); int y= me.getY(); System.out.println("clicked at (" + x + ", " + y + ")"); } }); frame.setTitle("A Test Frame"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); frame.add(component); } </code></pre>
<p>It is quite simple. </p> <ul> <li>take triangle vertexes: p1(100, 100), p2(200, 100), p3(150, 200);</li> <li>recover line equation for each line;</li> <li>for click coordinates and each triangle vertex sign of the opposite line function should be the same.</li> </ul> <p>Java code:</p> <pre><code>public class Point { public final double x; public final double y; ... } // -1 - point is "below" line, 0 - point is on line, +1 - point is "above" line private int getPointPosition(Point p, Point p1, Point p2) { // Line equation: (p.x - p1.x) / (p1.x - p2.x) - (p.y - p1.y) / (p1.y - p2.y)) = 0 // Canonical form: F = Ax + By + C return Double.sign((p.x - p1.x) * (p1.y - p2.y) - (p.y - p1.y) * (p1.x - p2.x)); } private boolean isInTriangle(Point p, Point p1, Point p2, Point p3) { return getPointPosition(p, p1, p2) == getPointPosition(p3, p1, p2) &amp;&amp; getPointPosition(p, p1, p3) == getPointPosition(p2, p1, p3) &amp;&amp; getPointPosition(p, p2, p3) == getPointPosition(p1, p2, p3); } </code></pre> <p>For better understanding of this math you can draw an image on paper and play with equations.</p>