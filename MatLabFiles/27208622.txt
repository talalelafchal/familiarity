Matlab - better understanding the FFT and finding Pitch
<p>I know there are tons of topics on finding pitch from the FFT, and I've gained a decent understanding of the whole process from turning data samples from time-domain -> frequency-domain, but there are still some areas (probably more advanced) that I'm a little stuck on. </p> <p>I'm going to walk step by step through my current process and so hopefully someone can help me understand where I'm going wrong!</p> <p>Before I start, the example I'm using here is a Wav file that I created in Logic which is simply a Piano preset in the <strong>A scale</strong>, starting at <strong>Key A4</strong>, and it simply moves up the scale (A4, B4, C#5, D5...) every half bar for a total of <strong>4 seconds</strong> at <strong>120 bpm</strong>. Here's a link to the wav if it helps: [a <a href="https://www.dropbox.com/s/zq1u9aylh5cwlmm/PianoA4_120.wav?dl=0]" rel="nofollow">https://www.dropbox.com/s/zq1u9aylh5cwlmm/PianoA4_120.wav?dl=0]</a></p> <p><strong>Step 1:</strong> I parse out the metadata and the actual sample data. Metadata: <code> channels =&gt; 2, sample_rate =&gt; 44100, byte_rate =&gt; 176400, bits_per_sample =&gt; 16, data_chunk_size =&gt; 705600, data =&gt; ... </code></p> <p><strong>Step 2:</strong> Since there are 2 channels, I have a left &amp; right array full of the corresponding sample data and then put each of them through their on FFT. The results of each FFT give me magnitudes and phases for a given frequency</p> <p><strong>Step 3:</strong> I need to now find the max magnitude of each FFT. I do this by finding all the magnitudes of the real / complex results and then finding the max value. I'm using Matlab to help me so I run <code>max(abs(fft(data)))</code>. The values I got from finding the max of each FFT were <strong>1275.6</strong> and <strong>1084.0</strong>.</p> <p><strong>Step 4:</strong> Find the index of those max values from their respective FFTs and then find the frequency at that index of the mapped frequency-domain values. This gave me <strong>1177.0 Hz</strong> and <strong>1177.5 Hz</strong>.</p> <p>This is where I'm confused! I've plotted the time-domain graph and seen how the pitch is found to be <strong>A4</strong> simply by looking at the Period and knowing what the period of A4 is but I'm trying to understand how I can come to the same conclusion via the FFT. Any help / places to point me to would be greatly appreciated!</p>
<p>A4 is usually 440Hz. My guess is that you've detected the 3rd harmonic of 440Hz and have an off-by-one error.</p> <p>Here are some observations on the steps you're using:</p> <p>Step 2: </p> <p>There's likely to be nothing gained from performing analysis for both channels. Convert to a mono signal by summing the two together</p> <p>Step 3: </p> <p>This doesn't work for polyphonic signals reliably (or for that matter, real-world monophonic instrument signals), furthermore, with monophonic signals, there are cases where the power from two adjacent bins have identical values - this is because each bin is a band-pass filter with a exponential tail in its frequency response. A signal sitting precisely in the middle of two bands contributes equally to both, and in the case of real signals, neither band may have the highest energy in the spectrum despite being the predominant frequency: remember that harmonics will be present and may be large. Also be aware that with some real-world instruments sounds, the fundamentally might not even have the highest energy of the partials. </p> <p>The phase component of the FFT gives plenty of clues that signals straddle bands.</p> <p>Step 4:</p> <p>You're finding the centre frequency of the FFT bin which has the highest energy. As the musical scale is logarithmic base-2, this is reasonably approximate for higher frequency, but at low frequency, won't do the job, even if you use large FFTs (in which cases, you burn a lot of CPU cycles and lose temporal resolution). </p> <p>To do better than this, you can use the <a href="http://en.wikipedia.org/wiki/Short-time_Fourier_transform" rel="nofollow">Short-time Fourier Transform</a> and make use of i) The phase (Phi) from successive windows of FFT data ii) and that F = dPhi/dt </p> <p>From this you can get pretty accurate results.</p>