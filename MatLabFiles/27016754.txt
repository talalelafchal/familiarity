Call overloaded function from specific toolbox in MATLAB
<p>I have some Matlab-Toolboxes installed. In my Matlab version one of the Toolbox-Functions collides with another. In this case it is hessian. I want to use the hessian function of the symbolic-Toolbox.</p> <p>When in C/C++ Functions are multiple defined like the function for cos and I still want to use the “standard” cos-function I can write:</p> <p><code>std::cos(x);</code></p> <p>Is there something similar in matlab?</p>
<p>If you have overloaded methods and want to call the built in one, you can use the function <code>builtin</code>. From the <a href="http://se.mathworks.com/help/matlab/ref/builtin.html" rel="nofollow">official documentation</a>:</p> <blockquote> <p><code>builtin(function,x1,...,xn)</code> executes the built-in function with the input arguments x1 through xn. Use builtin to execute the original built-in from within a method that overloads the function. To work properly, you must never overload builtin.</p> </blockquote> <p>The syntax for using it is:</p> <pre><code>[y1,...,yn] = builtin(function,x1,...,xn) </code></pre> <p><sub>Friendly advice: If you want to try overloading builtin ("hmm, I wonder what would happen"), remember to save stuff first. </sub></p>
<p>In a very similar way that you were describing for c/c++, you can use a specific toolbox function by adding the name of the toolbox first : <code>ToolboxName\function2call()</code></p> <p>First use the <a href="http://uk.mathworks.com/help/matlab/ref/which.html" rel="nofollow"><code>which</code></a> command to make sure of which function from which toolbox will be loaded with a specific call syntax.</p> <p>Since I do not have the toolbox you are mentioning i'll use the classic <code>fopen</code> function as an example.</p> <p>The first <code>fopen</code> function called without any other parameter will be the built in function which is used to return a handle to a file. Indeed, the <code>which</code> command confirms that:</p> <pre><code>&gt;&gt; which fopen built-in (C:\TLAB13a\toolbox\matlab\iofun\fopen) </code></pre> <p>Now let's say I want to use the <code>fopen</code> function to open a serial port, I need to prefix the call to <code>fopen</code> with the name of the toolbox/object, like so: <code>serial\fopen</code>. Let's first make sure this way of calling point to the right function:</p> <pre><code>&gt;&gt; which serial\fopen C:\TLAB13a\toolbox\matlab\iofun\@serial\fopen.m % serial method </code></pre> <p>Bingo !</p> <p>And just to make sure this works when you are calling these functions, let's call them for real (with dummy parameters):</p> <pre><code>&gt;&gt; fopen('toto') ans = -1 &gt;&gt; serial\fopen('toto') Error using serial (line 72) The PORT must be specified. </code></pre> <p>It worked. The first simple call to <code>fopen('toto')</code> return <code>-1</code> because it couldn't find a file named "toto".<br> The second call to <code>serial\fopen('toto')</code> errored because the serial port was not defined, but the right function was called.</p> <hr> <p>Edit: You can also override the order in which Matlab will fetch functions by re-ordering the Matlab path. If you put the symbolic toolbox before the other one in your path, then when called without explicit information, Matlab will execute the first function it finds in the path.</p> <p>I would still recommend the first solution with explicit declaration though, because changing the path order could mess up other function call in case you have many overloaded functions.</p>