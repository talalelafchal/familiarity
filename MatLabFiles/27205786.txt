Create series of matrices from data contained within one matrix
<p>I am trying to create a series of matrices from the data contained within a pre-defined matrix. </p> <p>I have written some code which asks the user to specify the number of rows of a 4 column matrix.</p> <p>Then the user is to input 4 elements for every row that they have specified which will thereby create a k x 4 matrix. </p> <p>I.e if the user selects 3 rows then they will enter x1,x2,x3,x4 for row 1 and then y1,y2,y3,y3 for row 2 and then z1,z2,z3,z4 for row three, hence the matrix created becomes: <code>J = [x1,x2,x3,x4;y1,y2,y3,y3;z1,z2,z3,z4]</code>.</p> <p>My problem is, is that I need to get the data out of matrix J to create a series of new matrices. The number of new matrices is dependent on the number of rows that matrix J consists of, i.e. if matrix J has 5 rows then I need to create 5 new matrices from the data contained within matrix J, e.g T1, T2, T3, T4, T5.</p> <p>The newly created matrices (T) require elements from the J matrix like this:</p> <pre><code>T1 = [cos(J(1,1)), -cos(J(1,4))*sin(x(1,1)), sin(J(1,4))*sin(J(1,1)),J(1,3)*cos(J(1,1)); sin(J(1,1)), cos(J(1,4))*cos(J(1,1)), -sin(J(1,4))*cos(J(1,1)),J(1,3)*sin(J(1,1)); 0,sin(J(1,4)),cos(J(1,4)),J(1,2); 0,0,0,1]; </code></pre> <p>And then,</p> <pre><code>T2 = [cos(J(2,1)), -cos(J(2,4))*sin(x(2,1)), sin(J(2,4))*sin(J(2,1)),J(2,3)*cos(J(2,1)); sin(J(2,1)), cos(J(2,4))*cos(J(2,1)), -sin(J(2,4))*cos(J(2,1)),J(2,3)*sin(J(2,1)); 0,sin(J(2,4)),cos(J(2,4)),J(2,2); 0,0,0,1]; </code></pre> <p>This procedure continues until all T matrices have been created.</p> <p>This is my code so far:</p> <pre><code>function EE582_ASSIGNMENT2_Q4() k = input('Enter the number of link and joint parameters, k: '); x = zeros(k,4); for n = 1:k disp(['Row: ', num2str(n)]) fprintf('Arrange the Kinematic Parameters in the following syntax: [theta_%d,d_%d,l_%d,alpha_%d]\n',n,n,n,n); x(n,:) = input('Enter the Parameters: '); for v = 1:k T{v} = [cos(x(v,1)), -cos(x(v,4))*sin(x(v,1)), sin(x(v,4))*sin(x(v,1)),x(v,3)*cos(x(v,1)); sin(x(v,1)), cos(x(v,4))*cos(x(v,1)), -sin(x(v,4))*cos(x(v,1)),x(v,3)*sin(x(v,1)); 0,sin(x(v,4)),cos(x(v,4)),x(v,2); 0,0,0,1] end end </code></pre>
<p>I would probably go about this quite differently - why not have your <code>x</code> as a function input parameter? Then call <code>T = {FUNCTION NAME}(x)</code>?</p> <p>But following your route, this should work:</p> <pre><code>function [T] = EE582_ASSIGNMENT2_Q4() k = input('Enter the number of link and joint parameters, k: '); x = zeros(k,4); for n = 1:k disp(['Row: ', num2str(n)]) fprintf('Arrange the Kinematic Parameters in the following syntax: [theta_%d,d_%d,l_%d,alpha_% d]\n',n,n,n,n); x(n,:) = input('Enter the Parameters: '); end for v = 1:k T{v} = [cos(x(v,1)), -cos(x(v,4))*sin(x(v,1)), sin(x(v,4))*sin(x(v,1)),x(v,3)*cos(x(v,1)); sin(x(v,1)), cos(x(v,4))*cos(x(v,1)), -sin(x(v,4))*cos(x(v,1)),x(v,3)*sin(x(v,1)); 0,sin(x(v,4)),cos(x(v,4)),x(v,2); 0,0,0,1]; end </code></pre> <p>Your problems were with the looping variables. The sytax needed to call this function is: <code>T = EE582_ASSIGNMENT2_Q4</code>, where <code>T</code> can be whatever variable name you want.</p>