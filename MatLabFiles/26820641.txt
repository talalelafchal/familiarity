Rotating triangle in image - MATLAB
<p>I'm writing a program for detecting basic shape in MATLAB. when I detect the shape I evaluate its Orientation then I rotate the shape to make its Orientation Zero, then I can evaluate its Projection and specify what it is.</p> <p>The problem is the MATLAB function: <code>regionprops()</code> doesn't evaluate Orientation of Triangle correctly.</p> <pre><code>I = zeros(256,256); pos_triangle = [64 64 128 192 128 128]; Is = insertShape(I, 'FilledPolygon', pos_triangle); imshow(Is) original = Is; originalBW = im2bw(original); figure; imshow(originalBW); S = regionprops(originalBW,'All'); bwr=imrotate(originalBW,S.Orientation); S2 = regionprops(bwr,'Centroid','Orientation'); figure;imshow(bwr); </code></pre> <p>I use imrotate fnc for rotating image, I don't have problem with rotation, imrotate is working well. the problem is in calculating the Orientation [using 'regionprps()' fnc] of the image! for example:I want to turn the triangle from this position</p> <p><img src="http://postimg.org/image/4un4sc7pn/"></p> <p>Orentation value: -28.9621 So I rotate it 28.9621 degree to change its postion to this</p> <p><img src="http://postimg.org/image/x68opdrm3/"></p> <p>but the output is this:</p> <p><img src="http://postimg.org/image/yf15or8y3/"></p> <p>using their Orientation (or other possible property of image)</p> <p>an other example: changing the position from Up-Left 2nd triangle to Up-Left 1st triangle</p> <p><img src="http://media-cache-ak0.pinimg.com/236x/b9/16/ed/b916ed82ef3198f468556729419b194f.jpg"></p>
<p>I'm not an expert in image processing but to achieve rotation is not hard. The only thing you need to know the center of your image. In Matlab, the center of an image in the upper left corner. To rotate an object around the center, you need to multiply every point by the rotation matrix. Let's rotate the triangle around the center of the image. </p> <pre><code>clear clc close all I = zeros(256,256); pos_triangle = [64 64 128 192 128 128]; xt = [64 128 128]; yt = [64 192 128]; a = deg2rad(20); R = [cos(a) -sin(a); sin(a) cos(a)]; p1 = R*[64; 64] p2 = R*[128; 192] p3 = R*[128; 128] % the rotated points x1 = [p1(1) p2(1) p3(1)]; y1 = [p1(2) p2(2) p3(2)]; imshow(I) hold on fill(x1,y1,'r') fill(xt,yt,'w') hold off </code></pre> <p>The result is now </p> <p><img src="https://i.stack.imgur.com/lohMy.png" alt="enter image description here"></p> <p>If you would like to rotate it around itself, then you need to translate the center of the image to the center of the triangle. This is not a complete solution but I hope it helps. </p>
<p>Here is a way to work it out. Notice that:</p> <p>1) I don't have the Computer Vision System Toolbox so I can't use <code>insertShape</code>; instead I used the <code>fill</code> function to create the triangle in the image and then <code>getframe</code> to obtain the actual image. I guess it comes down to the same than using <code>insertShape</code>.</p> <p>2) I used the '<code>FilledArea</code>' property of <code>regionprops</code> to detect the triangular shape. That's easy when there is a single shape, but if there were many of them you would have to modify a bit the code.</p> <p>3) I performed a rotation equal to -1* the orientation given by regionprops to bring it back to 0. You can of course change it. The rotated image is bigger to account for the rotation.</p> <p>Here is the code:</p> <pre><code>clear clc close all I = zeros(256,256); pos_triangle = [64 64 128 192 128 128]; xt = [64 128 128]; yt = [64 192 128]; %// Since I don't have the Computer Vision System Toolbox I use 'fill'. %//Is = insertShape(I, 'FilledPolygon', pos_triangle); imshow(I) hold on fill(xt,yt,'w') hold off </code></pre> <p>The original triangle:</p> <p><img src="https://i.stack.imgur.com/KMVBE.jpg" alt="enter image description here"></p> <pre><code>%// Create image using getframe. hFrame = getframe(gca); original = hFrame.cdata; originalBW = im2bw(original(:,:,1)); %// Remove border of the image. originalBW = imclearborder(originalBW); figure; imshow(originalBW); S = regionprops(originalBW,'FilledArea','Orientation'); %// Find region filled with the most pixels: that's the shape. [a,b] =max([S.FilledArea]); %// Get corresponding orientation Orientation = S(b).Orientation; %// Rotate by the inverse of the orientation; I'm not sur that's what you %// want but it looks OK. bwr=imrotate(originalBW,-1*Orientation); S2 = regionprops(bwr,'Centroid','Orientation'); figure;imshow(bwr); </code></pre> <p>The rotated triangle, which looks like its orientation is 0.:</p> <p><img src="https://i.stack.imgur.com/lD6qH.jpg" alt="enter image description here"></p> <p>Hope that helps! </p>