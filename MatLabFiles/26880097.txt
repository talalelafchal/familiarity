error in box averaging filter of an image using matlab
<p>I need to downsize an image using a box averaging filter , I tried to write this code but there was an error : <code>Unknown command option.</code> , where is the error and what is the correct algorithm for box filter i know the idea of it ,the new pixel = averaging the four neighboring pixels . the code:</p> <pre><code>clear, clc image=imread('p128.jpg'); old_size=size(image); out_image=zeros(old_size(1)/2 , old_size(2)/2); for i = 1 : old_size(1) - 1 for j= 1 : old_size(2) - 1 for k= i : i+1 for t= j : j+1 out_image(k,t)=(image(i,j)+image(i+1,j)+image(i,j+1)+... image(i+1,j+1))/4 ; end end end end figure(1), imshow(out_image) </code></pre>
<p>You can use <strong><a href="http://www.mathworks.in/help/images/ref/im2col.html" rel="nofollow noreferrer"><code>im2cols</code> with <code>'distinct'</code></a></strong> from Image Processing Toolbox to re-arrange the windows elements into columns and then calculate the average of each column, which would represent the average of each window. Now, in the comments you said you don't want to use any function from IP toolbox, so we have replaced <code>im2cols</code> with our own custom made implementation. Thus, assuming <code>im</code> to be the input grayscale image data, you can use this -</p> <pre><code>box_len = 2; %// length of the box im_cols = im2col_distinct(im,[box_len box_len]); im_downsized = uint8(reshape(mean(im_cols,1),size(im,1)/box_len,[])); </code></pre> <p>Associated function -</p> <pre><code>function out = im2col_distinct(A,blocksize) nrows = blocksize(1); ncols = blocksize(2); nele = nrows*ncols; row_ext = mod(size(A,1),nrows); col_ext = mod(size(A,2),ncols); padrowlen = (row_ext~=0)*(nrows - row_ext); padcollen = (col_ext~=0)*(ncols - col_ext); A1 = zeros(size(A,1)+padrowlen,size(A,2)+padcollen); A1(1:size(A,1),1:size(A,2)) = A; t1 = reshape(A1,nrows,size(A1,1)/nrows,[]); t2 = reshape(permute(t1,[1 3 2]),size(t1,1)*size(t1,3),[]); t3 = permute(reshape(t2,nele,size(t2,1)/nele,[]),[1 3 2]); out = reshape(t3,nele,[]); return; </code></pre> <p>Thus, you would be avoiding all that messy nested loops with your original code.</p> <p>Input :</p> <p><img src="https://i.stack.imgur.com/zGctp.png" alt="enter image description here"></p> <p>Output :</p> <p><img src="https://i.stack.imgur.com/Idg5Y.png" alt="enter image description here"></p>