How using reshape with cell arrays?
<p>Unfortunately I have to work with a dataset of cell arrays, which don't even have the same input.. My dataset (the relevant columns of cell arrays) look as follows: </p> <pre><code>Data = 1 'd2' 1 'd3' 2 'u2' 2 'd2' 2 'u3' 3 'e2' ... ... </code></pre> <p>I want to reshape them in a way, that all inputs of the second column of all rows containing the same number in the first column, are stored in new columns. Because the single rows of each number in the first column aren't always the same (but at highest 4) I wrote following code:</p> <pre><code>% creating 4 new cell arrays for the new columns cells = cell(length(Data(:,1)),4); Data = [Data,cells]; % reshaping Data Data(:,3:6) = reshape(Data(Data(:,1) == 1,2),1,[]); Data(:,3:6) = reshape(Data(Data(:,1) == 2,2),1,[]); </code></pre> <p>This would perfectly work with matrices. But unfortunately, it doesn't work on cell arrays! Please could you help me out, where I have to place the curly brackets, so it would work? I didn't get it so far and maybe I'm just overseeing it now! ;-)</p> <p>Thank you a lot!</p>
<p>This could be one approach that uses the masking capability of <strong><a href="http://in.mathworks.com/help/matlab/ref/bsxfun.html" rel="nofollow"><code>bsxfun</code></a></strong> -</p> <pre><code>%// Input Data = { 1 'd2' 1 'd3' 2 'u2' 2 'd2' 2 'u3' 3 'e2'} %// Find the IDs and the unique IDs ids = cell2mat(Data(:,1)) id_out = num2cell([1:max(ids)]') %//'# To be used as the first col of desired o/p %// Find the extents of each group/ID members grp_extents = sum(bsxfun(@eq,[1:max(ids)],ids),1) %// Or use accumarray which could be faster - %// grp_extents = accumarray(ids,ones(1,numel(ids))).' %// Get a cell array with the members (strings) from the second column of Data %// put into specific columns based on their IDs string_out = cell(max(grp_extents),numel(grp_extents)) string_out(bsxfun(@le,[1:max(grp_extents)]',grp_extents)) = Data(:,2) %//'# This is %// where the masking is being used for logical indexing %// Transpose the string cell array and horizontally concatenate with 1D %// cell array containing the IDs to form the desired output Data_out = [id_out string_out'] </code></pre> <p>Output -</p> <pre><code>Data_out = [1] 'd2' 'd3' [] [2] 'u2' 'd2' 'u3' [3] 'e2' [] [] </code></pre>
<p>Personally I find a loop to be the most simple and flexible solution in this case:</p> <pre><code>mydata={1 'd2' 1 'd3' 2 'u2' 2 'd2' 2 'u3' 3 'e2'} list = unique([mydata{:,1}]) result = {}; for t=1:numel(list) count=0; for u =1:size(mydata,1) if mydata{u,1}==list(1,t) count = count+1; result(t,count)=mydata(u,2) end end end </code></pre> <p>Note that a vectorized approach will likely be more efficient, but unless your data is big it should not matter much.</p>