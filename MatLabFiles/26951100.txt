MATLAB : What Is cumsum Doing In This Code?
<p>This is the MATLAB question given by our instructor: <img src="https://i.stack.imgur.com/4lLNR.png" alt="Image Of The Question"></p> <p>Here is my code for how I solved the problem. I looked at the answer key and realized that my professor used cumsum, but I cannot understand what it is actually doing in my code in regards to the probability. I have gotten the correct output, but I want to have clarification:</p> <pre><code>clear; clc; m = input('Type size of map : '); totalSteps = 0; x = 0; y = 0; Prob = [ 2 3 4 5 6 5 4 3 ]/32; trials = input('Type number of trials : '); CumProb = Prob; for i = (0:length(trials)); for n = 2:length(Prob) CumProb(n) = CumProb(n-1) + Prob(n); end while abs(x)&lt;m || abs(y)&lt;m r = rand(1,1); if r &lt;= CumProb(1) x=x+1; elseif r&lt;=CumProb(2) x=x+1 ; y=y+1; elseif r&lt;= CumProb(3) y=y+1; elseif r&lt;=CumProb(4) x = x-1 ; y=y+1; elseif r&lt;=CumProb(5) x=x-1; elseif r&lt;=CumProb(6) x=x-1; y=y-1; elseif r&lt;=CumProb(7) y=y-2; else x = x+1 ; x=y; end totalSteps = totalSteps+1; end i = i+1; end averagesteps = totalSteps/length(trials) </code></pre> <p>My question is, what is cumsum actually doing to get the correct probabilities? I feel as though cumsum might even be giving me the wrong answer as I would not have used it if I wasn't told to.</p>
<p><code>cumsusm</code> helps you generate <strong>weighted</strong> choice for the direction of each step.</p> <pre><code>Prob = [ 2 3 4 5 6 5 4 3 ]/32; CumProb = cumsum(Prob); p = rand; Direction = find(CumProb &gt; p,1); </code></pre> <p>To help understand the problem, let's reduce it to just two choices: left or right with probabilities of 0.2 and 0.8: <code>Prob = [0.2 0.8]; CumProb = [0.2 1]</code>. When you generate <code>p</code> as a random number between 0 to 1, the index of the first value in <code>CumProb</code> that is greater than <code>p</code> is the direction you take:</p> <ul> <li><code>p = 0.1</code> => left</li> <li><code>p = 0.2</code> => left</li> <li><code>p = 0.3</code> => right</li> <li><code>p = 0.4</code> => right</li> <li><code>p = 0.5</code> => right, etc</li> </ul>
<p>your code:</p> <pre><code>CumProb = Prob; for n = 2:length(Prob) CumProb(n) = CumProb(n-1) + Prob(n); end </code></pre> <p>is equal to:</p> <pre><code>CumProb = cumsum(Prob) </code></pre>