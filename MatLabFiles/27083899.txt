Substitute value to Matrices by given a Row Vector and Their Corresponding Location Matrix
<p><br> I have a A=[m,n] matrix and a B=[1,n] matrix. </p> <p>A is a matrix that have permutation of 1:n for m row.</p> <blockquote> <p>A =<br> [2 4 1 5 3<br> 5 2 3 4 1<br> 1 2 3 4 5] </p> </blockquote> <p>B is simply just a normal row vector (The value of each cells are not necessary unique)</p> <blockquote> <p>B = [0.05 0.03 0.06 0.04 0.02]</p> </blockquote> <p>Now, I would like to to permute B according to each row of Matrix A. For example,</p> <blockquote> <p>i = 1<br> B(index(i,:)) = [0.03 0.04 0.05 0.02 0.06]</p> </blockquote> <p>After for loop, then is the result I want:</p> <blockquote> <p>C =<br> [0.03 0.04 0.05 0.02 0.06<br> 0.02 0.03 0.06 0.04 0.05<br> 0.05 0.03 0.06 0.04 0.02]</p> </blockquote> <p>However, the current matrix that I deal is quite large, for example m = 100, n = 80, is there any build in function to do it instead of using for loop?</p>
<p>Pretty easy. Simply use <code>A</code> to index into <code>B</code>:</p> <pre><code>A = [2 4 1 5 3; 5 2 3 4 1; 1 2 3 4 5]; B = [0.05 0.03 0.06 0.04 0.02]; B(A) ans = 0.0300 0.0400 0.0500 0.0200 0.0600 0.0200 0.0300 0.0600 0.0400 0.0500 0.0500 0.0300 0.0600 0.0400 0.0200 </code></pre> <hr> <p>You're probably thinking... woah!... how the heck does this work? Because of how <code>A</code> is structured, each element of <code>A</code> is an exact index to access a particular element in <code>B</code>, so we can get away with using <code>A</code> directly as we don't have any elements that are out of bounds with respect to the length of the vector <code>B.</code> If you had such a case where any element is zero, negative or greater than the length of <code>B</code> (or any floating point number too...), then the above code will not work. </p> <p>How MATLAB indexing works is that if you provide a vector or a matrix of indices as an argument for accessing into another vector, the output will be of the same shape as this input argument and each output element will correspond to the value at each position that you want to access.</p> <hr> <p>For example, supposing I had this vector:</p> <pre><code>B = [9 8 7 6 5]; </code></pre> <p>... and I had this matrix: </p> <pre><code>A = [1 1 1; 2 2 2; 3 3 3]; </code></pre> <p>My output would be:</p> <pre><code>B(A) ans = 9 9 9 8 8 8 7 7 7 </code></pre> <p>Whatever shape <code>A</code> takes, that will be the output's shape, and each element of the output accesses the value indexed by the matrix <code>A</code>. Therefore, because the first row of <code>A</code> is all 1, we will have an entire row of 9, which is the first element of <code>B</code>. After, the second row of <code>A</code> is all 2 and the output of <code>B</code> will be 8, and so on.</p> <p>I provide a nice tutorial on how this works on one of my previous posts (...actually, one of the first posts I've ever written here on StackOverflow...) here:</p> <p><a href="http://stackoverflow.com/questions/22997632/got-confused-with-a-vector-indexed-by-a-matrix-in-matlab/22997867#22997867">Got confused with a vector indexed by a matrix, in Matlab</a></p> <p>Good luck!</p>