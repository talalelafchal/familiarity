Is it possible to initialize a vector in C++ like in Matlab?
<p>In Matlab, you can initialize vectors like this:</p> <pre><code>&gt;&gt; a = 3; &gt;&gt; b = 4.6; &gt;&gt; c = [2, 1.3, a, b] c = 2.0000 1.3000 3.0000 4.6000 </code></pre> <p>I'd like to use a similar syntax in C++. Specifically, I have my own vector class Vec:</p> <pre><code>class Vec { public: unsigned N; //number of elements double* e; //array of elements Vec(unsigned); //constructor ~Vec(void); //destructor Vec(const Vec&amp;); //copy constructor Vec&amp; operator=(const Vec&amp;); //copy assignment operator }; </code></pre> <p>And I'd like to initialize it like this:</p> <pre><code>Vec v; int a = 3; double b = 4.6; v = {2, 1.3, a, b}; //a is converted from int to double std::cout &lt;&lt; "N = " &lt;&lt; v.N &lt;&lt; std::endl; std::cout &lt;&lt; "v = [" &lt;&lt; v.e[0] &lt;&lt; ", " &lt;&lt; v.e[1] &lt;&lt; ", " &lt;&lt; v.e[2] &lt;&lt; ", " &lt;&lt; v.e[3] &lt;&lt; "]" &lt;&lt; std::endl; </code></pre> <p>So that it would print:</p> <pre><code>N = 4 v = [2, 1.3, 3, 4.6] </code></pre> <p>Is that possible? If so, how?</p> <hr> <p>There's a similar question <a href="http://stackoverflow.com/questions/26260331/c11-initializer-list-constructor-with-header-and-cpp-file-for-custom-vector-cl">here</a>, but the answer is about the copy constructor, not the copy assignment operator.</p>
<p>Just use <code>std::vector</code>.</p> <p>If you must write it yourself with arrays, probably the easiest way is to first write an initializer list constructor as described in the question you linked to:</p> <pre><code>Vec(unsigned size) : N(size), e(new double[size]) {} Vec(std::initializer_list&lt;double&gt; l) : Vec(l.size()) { std::copy(l.begin(), l.end(), e); } </code></pre> <p>Then write a no-throw <code>swap</code>:</p> <pre><code>void swap(Vec&amp; rhs) noexcept { std::swap(e, rhs.e); std::swap(N, rhs.N); } </code></pre> <p>and finally, a standard assignment operator:</p> <pre><code>Vec&amp; operator=(Vec rhs) { swap(rhs); return *this; } </code></pre> <p>Then it will convert the <code>initializer_list</code> to a <code>Vec</code> using the initializer list constructor and then assign using the assignment operator.</p> <p>But seriously, just use <code>std::vector</code>.</p>