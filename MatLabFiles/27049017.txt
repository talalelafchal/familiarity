How to determine if a function was called followed by a semicolon (&quot;;&quot;)?
<p>In a Matlab script I call a user-defined function (m-function). My function returns a value while printing the value to the command window using <code>disp</code> and/or <code>fprintf</code> calls.</p> <p>When writing an expression or a statement, one puts <code>;</code> at its end to suppress printing. When the expression calls my function, the <code>;</code> can suppress the printing of the returned value. However, this does not effect the <code>disp</code> output from within the function called.</p> <p>I want to eliminate the display output of the function when appropriate. <strong>Is there a way to determine whether a function call was made in an expression ending with <code>;</code></strong>?</p>
<p>I like the spirit of what you're trying to do, but I think that it probably goes against the common programming patterns in Matlab. As you correctly state, the purpose of the terminating semicolon is to supress printing of returned values. Trying to get it to incorporate your other feature might well require some deep hacking and ugly hard-to-maintain code. The standard way to implement what you describe is via property name-value pair arguments. For example, Matlab's optimization suite has a property called <code>'Display'</code> that can be set to various values to indicate the desired level of verbosity (see <a href="http://www.mathworks.com/help/matlab/ref/optimset.html" rel="nofollow"><code>optimset</code></a>).</p> <p>If you want to try looking for a way to check for terminating semicolons, you might look into the undocumented <code>mint</code>, <code>mlintmex</code>, and <code>mtree</code> functions â€“ <a href="http://undocumentedmatlab.com/blog/parsing-mlint-code-analyzer-output" rel="nofollow">read more here</a>. Unfortunately, using mlint to simply check for the "Terminate statement with semicolon to suppress output" warning (<a href="http://www.mathworks.com/matlabcentral/fileexchange/41873-check-missing-semicolons/content//checksemicolons.m" rel="nofollow">see this function on the MatlabCental File Exchange</a>) won't work in all cases as a function call by itself doesn't produce this warning.</p> <p><strong>Update</strong></p> <p>Here's an attempt at code that could be inserted into a called function to determine if the line of the caller is terminated by a semicolon. You should be aware that this has not been thoroughly tested and is likely very fragile. I have not tested it with sub-functions or anonymous functions and I know that it fails if you wrap a line over multiple lines using <code>...</code>.</p> <pre><code>st = dbstack('-completenames'); % M-file of caller and line number caller = st(2); str = mlint('-lex',caller.file); % Struct containing parsed data isSemicolon = false; % Assume no semicolon for i = 1:length(str) % Find end-of-line corresponding to function call c = strsplit(str(i).message,'/'); if str2double(c{1}) == caller.line &amp;&amp; strcmp(c{2}(end-5:end-1),'&lt;EOL&gt;') % Check for comments j = i-1; if ~isempty(strfind(str(j).message,'%')) j = j-1; end % Check for semicolon if strcmp(str(j).message(end-2),';') isSemicolon = true; % Semicolon found break; end end end </code></pre> <p>In other words, play around with this to learn, but I would not recommend actually using it.</p>
<p>Here's a possible workaround (to be clear - this is not a real answer to the question per-se, just a way to avoid the unwanted behaviour). Say my function is:</p> <pre><code>function y = prt_test(x) y = x + 1; disp('IN PRT_TEST') end </code></pre> <p>Calling:</p> <pre class="lang-matlab prettyprint-override"><code>&gt;&gt; % Regular use - message and output are displayed: &gt;&gt; y = prt_test(1) IN PRT_TEST y = 2 &gt;&gt; % Regular use w/ ";" - only message is displayed: &gt;&gt; y = prt_test(2); IN PRT_TEST &gt;&gt; % Use "evalc()" - message and output are displayed: &gt;&gt; evalc('y = prt_test(3)') ans = IN PRT_TEST y = 4 &gt;&gt; % Use "evalc()" w/ func ";" - only message is displayed: &gt;&gt; evalc('y = prt_test(4);') ans = IN PRT_TEST &gt;&gt; % Use "evalc();" - no output: &gt;&gt; evalc('y = prt_test(5)'); &gt;&gt; % Use "evalc();" w/ func ";" - no output: &gt;&gt; evalc('y = prt_test(6);'); &gt;&gt; </code></pre>
<p>I'm afraid that the answer to your question is <strong>no</strong>. That information is simply not passed on to the function being called.</p> <p>You shouldn't think about adding the semicolon as a means to "suppress printing", but rather that the lack of a semicolon instructs MATLAB to call the <code>display</code> function on the output variables of the function call. In other words, MATLAB interprets this code:</p> <pre><code>y = myFunc(x) </code></pre> <p>as:</p> <pre><code>y = myFunc(x); display(y); </code></pre> <p>I think adding a 'print' or 'verbose' parameter to your function is your best bet for achieving what you want.</p>
<p>You may suppress <code>disp</code> outputs by locally redefining it at the beginning of the function:</p> <pre><code>function [] = hideDisplay() %[ % Override `disp` behavior disp = @(x)doNothing; % Next `disp` calls will no longer appear in matlab console disp('Hello') disp('World!') %] end %% --- function [] = doNothing() %[ %] end </code></pre>
<p>I think the simplest method to achieve the results you want (i.e. whether or not <code>disp</code>'s get displayed) is to add an extra function input or output. For example, adding an input (optional, you can set default behaviour):</p> <pre><code>function y=myFunc(a,displayResults) if nargin==1 displayResults=true; %// set the default behaviour end %// if you want to print something if displayResults disp(a) end end </code></pre> <p>Or an extra output. In this case <code>foo</code> produces no output to the screen, but all the messages are saved into a cell array, which can be accessed if desired:</p> <pre><code>function [x,m] = foo(a) m={}; %// initialise cell array of output messages x=a; m{length(m)+1}=a; %// some message m{length(m)+1}='another message'; %// another message end </code></pre> <p>I think the first option will be better, the second will not deal with <code>fprintf</code> well, and displaying elements of <code>m</code> could be tricky depending on what it contains. The first method is very simple, and does not even require you to change existing code, as you can make the <code>displayResults</code> input optional and set the default to be what you want.</p>