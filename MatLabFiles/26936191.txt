Bitxor and Count the different rows values between two matrixes
<p>I have two matrixes such as</p> <pre><code>A = 0 1 1 0 0 0 1 1 1 1 1 1 1 0 1 0 0 0 0 0 </code></pre> <p>And B is B =</p> <pre><code> 0 1 1 0 1 1 1 1 -1 -1 -1 -1 1 0 1 0 0 0 0 0 </code></pre> <p>My task is how to count the number of different row by row between A and B. For example, the values of second row A and second row B is different, then count increase 1. The values in third row A and third row B are different, then count values is 2 now. Hence, the total different values row by row between A and B is 2. How to implement it by matlab?</p> <p><strong>Update:</strong> Thank Nemesis for the first question. Now I have a other question with matrix A. I want implement the bitxor between rows of matrix A. For simplicity, I use the <code>rem</code> function with 2. The index of rows that xor together are store in index array. This is my code</p> <pre><code>index=[1 2 4] % row 1,2,4 will xor output=rem(sum(A(index,:)),2); </code></pre> <p>The above code works with index size >1. When index size equals 1 that mean the output values is copied from the a row of A. For example, index=[1] then <code>ouput=A(1)=0 1 1 0</code>. My problem is that I cannot apply the above code when index size equals 1. What is happen? Could you edit for me?</p>
<p>This basically almost the same question as <a href="http://stackoverflow.com/questions/26827975/how-to-find-the-indices-of-nonzero-rows-in-a-matrix/26827993#26827993">here</a>, but with a small extension. Summarized, you can use the answer from @Andrey</p> <pre><code>ix = sum(sum(abs(A-B),2)~=0) ix = 2 </code></pre> <p>Regarding the update of your question. The issue is, that <code>sum</code> for a single row will use <code>2</code> as direction (instead of default <code>1</code> that is what you want), since <code>size(...,1)==1</code>. You can force the direction in the following way:</p> <pre><code>output=rem(sum(A(index,:),1),2) </code></pre>