calculating minimum Euclidean distance within a data frame
<p>I have a data frame </p> <pre><code>x=[1;2;3;4;5] </code></pre> <p>I would like to find the minimum Euclidean Distance (ED) . I did it manually because I am not good in programming. I hope somebody will help me.</p> <p>The manual way that did was :</p> <pre><code>assign the first data to a variable A A=1; assign the second data to a variable b B=2; assign the third data to variable C and so on until the last data. find the ED D1=norm(A-B); find the second ED D2=norm(B-C); D3=norm(C-D); find the minimum ED minxED=min(D1,D2,D3) </code></pre> <p>please help me. I would like to expand the question a little bit..</p> <p>now the data frame is in the matrix form of [3000 X 13].</p> <p>how to calculate the ED of each row (total of 3000 row, and calculate the average of it?</p> <p>Previously, I used the answer given below </p> <pre><code>y = min(abs(x(2:end) - x(1:end-1); y1= min(abs(z(2:end) - z(1:end-1); y2=min(abs(s(2:end) - s(1:end-1); </code></pre> <p>and then assign the answer to a variable ans;</p> <pre><code>an1=[y,y1,y2]; then find the average avr=mean(an1); </code></pre> <p>how to do this? thanks a lot</p>
<p>If I followed your question correctly then it would seem that you want something like this:</p> <pre><code>minxED = min(abs(x(2:end) - x(1:end-1))); </code></pre> <p>which gets the L1 distance between adjacent elements in the vector <code>x</code> and then finds the minimum distance.</p>