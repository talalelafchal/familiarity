find intersect of Multi arrays
<p>If I have several arrays:</p> <pre><code>A = [7 1 7 7 4]; B = [7 0 4 4 0]; C = [0 0 4 1 5]; D = [5 7 2 4 0]; </code></pre> <p>I know in Matlab "intersect" can find the shared elements between two matrices with their indexes. If I want to use it for four matrices, how can I do it?</p> <p>Note: This can be used for two matrices as: [K,ia,ib] = intersect(A,B)</p> <p><a href="http://uk.mathworks.com/help/matlab/ref/intersect.html" rel="nofollow">http://uk.mathworks.com/help/matlab/ref/intersect.html</a></p>
<p>You could concatenate all input arrays (vectors) into a <code>2D</code> array and then try to find the unique elements that exist in all input arrays. The <code>bsxfun</code> based code presented next tries to achieve the same -</p> <pre><code>%// Concatenate all vector arrays into a 2D array M = cat(1,A,B,C,D) %// Find unique values for all elements in all arrays unqvals = unique(M(:),'stable')' %//' %// Find which unqiue elements are common across all arrays, which is the %// desired output out = unqvals(all(any(bsxfun(@eq,M,permute(unqvals,[1 3 2])),2),1)) </code></pre> <p>Code Output -</p> <pre><code>M = 7 1 7 7 4 7 0 4 4 0 0 0 4 1 5 5 7 2 4 0 unqvals = 7 1 4 0 5 2 out = 4 </code></pre> <p>To verify against an <code>intersect</code> based code, one form of whose would look like this -</p> <pre><code>out1 = intersect(intersect(intersect(A,B,'stable'),C,'stable'),D,'stable') </code></pre> <p>For the given inputs, it would give -</p> <pre><code>out1 = 4 </code></pre> <p>To verify it further, let's say you introduce a <code>7</code> into <code>C</code> i.e. <code>C = [0 7 4 1 5]</code>, making <code>7</code> available in all input arrays, you would have the output as <code>[7 4]</code>.</p> <hr> <p>If you would like to make <code>bsxfun</code> work with a <code>2D</code> array which could be more memory efficient, here's an alternative -</p> <pre><code>%// Concatenate all vector arrays into a 2D array M = cat(1,A,B,C,D) %// Find unique values for all elements in all arrays unqvals = unique(M(:),'stable')' %//' [m1,m2] = size(M) %// Get size of concatenated 2D array %// Matches for all elements in all arrays against the unique elements matches = bsxfun(@eq,reshape(M',[],1),unqvals) %//' %// Desired output out = unqvals(all(any(permute(reshape(matches,m2,m1,[]),[1 3 2]),1),3)) </code></pre>