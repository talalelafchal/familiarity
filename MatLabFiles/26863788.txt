How to permute the arrays within a cell array without using loops
<p>I have a two arrays within a &lt;1x2 cell>. I want to permute those arrays. Of course, I could use a loop to permute each one, but is there any way to do that task at once, without using loops?</p> <p>Example:</p> <pre><code>&gt;&gt; whos('M') Name Size Bytes Class Attributes M 1x2 9624 cell &gt;&gt; permute(M,p_matrix) </code></pre> <p>This does not permute the contents of the two arrays within M.</p> <p>I could use something like:</p> <pre><code>&gt;&gt; for k=1:size(M,2), M{k} = permute(M{k},p_matrix); end </code></pre> <p>but I'd prefer not to use loops.</p> <p>Thanks.</p>
<p>This seems to work -</p> <pre><code>num_cells = numel(M) %// Number of cells in input cell array size_cell = size(M{1}) %// Get sizes %// Get size of the numeric array that will hold all of the data from the %// input cell array with the second dimension representing the index of %// each cell from the input cell array size_num_arr = [size_cell(1) num_cells size_cell(2:end)] %// Dimensions array for permuting with the numeric array holding all data perm_dim = [1 3:numel(size_cell)+1 2] %// Store data from input M into a vertically concatenated numeric array num_array = vertcat(M{:}) %// Reshape and permute the numeric array such that the index to be used %// for indexing data from different cells ends up as the final dimension num_array = permute(reshape(num_array,size_num_arr),perm_dim) num_array = permute(num_array,[p_matrix numel(size_cell)+1]) %// Save the numeric array as a cell array with each block from %// thus obtained numeric array from its first to the second last dimension %// forming each cell size_num_arr2 = size(num_array) size_num_arr2c = num2cell(size_num_arr2(1:end-1)) M = squeeze(mat2cell(num_array,size_num_arr2c{:},ones(1,num_cells))) </code></pre> <p>Some quick tests show that <code>mat2cell</code> would prove to be the bottleneck, so if you don't mind indexing into the intermediate numeric array variable <code>num_array</code> and use it's last dimension for an equivalent indexing into M, then this approach could be useful.</p> <p>Now, another approach if you would like to preserve the cell format would be with <code>arrayfun</code>, assuming each cell of <code>M</code> to be a <code>4D</code> numeric array -</p> <pre><code>M = arrayfun(@(x) num_array(:,:,:,:,x),1:N,'Uniform',0) </code></pre> <p>This seems to perform much better than with <code>mat2cell</code> in terms of performance.</p> <p>Please note that <code>arrayfun</code> isn't a vectorized solution as most certainly it uses loops behind-the-scenes and seems like <code>mat2cell</code> is using for loops inside its source code, so please do keep all these issues in mind.</p>