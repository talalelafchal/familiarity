matlab linear equations with mod
<p>I have a simple equations to solve and I want to do it in matlab,however, there are some years, that I didn't use and kinda forgot it. So this</p> <blockquote> <blockquote> <p>linsolve({(387=mod(324*a+b,601)), (491=mod(381*a+b,601))},{a,b}), </p> </blockquote> </blockquote> <p>doesn't give me a result, due to an a mistake I am not able to find. the original set of equations is:</p> <p>(324a+b)mod601=387 (381a+b)mod601=491,</p> <p>affine cipher apparently. Thank you!</p>
<p>Starting with these equations,</p> <pre><code>(324*a + b) mod 601 = 387, (381*a + b) mod 601 = 491, </code></pre> <p>we can conclude that</p> <pre><code>((381*a + b) - (324*a + b)) mod 601 = (491 - 387) mod 601 </code></pre> <p>and therefore (performing the obvious simplifications inside the parentheses on the left-hand side and fully evaluating the right-hand side),</p> <pre><code>(57*a) mod 601 = 104. </code></pre> <p>That looks a lot easier to solve than the system of two equations in two variables. Once you know <code>a</code>, you can return to one of the original equations and solve for <code>b</code>.</p>
<p>Try this First make you function describing equations in a separate file with the name myfunc.m:</p> <pre><code>function y=myfunc(x) y(1)=mod(324*x(1)+x(2),601)-387; y(2)=mod(381*x(1)+x(2),601)-491; </code></pre> <p>than apply <code>fsolve</code> like</p> <pre><code>x0=[1; 1]; [ans,err]=fsolve(@myfunc,x0) </code></pre> <p><code>x0</code> is a guess to the solution. This method gives an approximate numerical solution around your guess.</p> <p><code>fsolve</code> solves a system of nonlinear equations. It has many parameters, you can read about them in MATLAB help. </p> <p>Let me know if it works</p>