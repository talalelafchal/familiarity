Comparing values across unequal matrices in Matlab
<p>I would like to compare rows across two unequal matrices in Matlab and extract these rows to be stored in a different matrix (say D). For example, </p> <pre><code>tmp = [2245; 2345; 2290; 4576] </code></pre> <p>and </p> <pre><code>id=[1 2245 564 8890 123; 2 2445 5673 7846 342; 3 2290 3428 3321 908]. </code></pre> <p>Id is a much larger matrix. I want to locate each value of tmp which is in ‘id’. Although using the intersect command in the line below I have been able to locate the rows of id which contain the values from tmp, I would like to do this for each value of tmp one by one as each value of tmp is repeated multiple times in id. I tried using foreach. However, I get an error message stating that foreach cannot be used for char type array. Could anyone please suggest an alternative how to go about this?</p> <pre><code>for j=1:length(tmp); [D,itmp,id2] = intersect(tmp(j,1),id(:,2), 'rows'); </code></pre> <p>Despite using the loop, the code doesn’t seem to take one value of j at a time. This was the reason behind trying ‘foreach j’. Also after finding the rows common to the two matrices and storing them in D, I would like to append matrix id to include the value of j next to the relevant row within id. For example, if the first value within tmp was repeated in id in rows 1,3,5,10; I would like a column in id which would take the value 1 next to rows 1,3,5,10. Any help on this would be much appreciated! Thanks.</p>
<p>Not sure exactly, what you trying to do, but to search a value in a matrix you can use <a href="http://au.mathworks.com/help/matlab/ref/find.html?nocookie=true" rel="nofollow">find</a>:</p> <pre><code> for i = 1:numel(tmp) [row, col] = find(id == tmp(i)); end </code></pre>
<p>You can easily achieve this using a combination of <a href="http://www.mathworks.com/help/matlab/ref/bsxfun.html" rel="nofollow"><code>bsxfun</code></a> and <a href="http://www.mathworks.com/help/matlab/ref/permute.html" rel="nofollow"><code>permute</code></a>. What you would do is transform the <code>tmp</code> vector so that it is a single 3D vector, then use the <code>eq</code> (equals) function and see which values in your matrix are equal to each value of <code>tmp</code>. Therefore, do something like:</p> <pre><code>%// Your data id=[1 2245 564 8890 123; 2 2445 5673 7846 342; 3 2290 3428 3321 908] tmp = [2245; 2345; 2290; 4576]; tmp2 = permute(tmp, [3 2 1]); %// Make a 3D vector tmp3 = bsxfun(@eq, id, tmp2); %// Find which locations of id are equal to each value of tmp </code></pre> <p>This is what I get for my final output, stored in <code>tmp3</code>:</p> <pre><code>tmp3(:,:,1) = 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 tmp3(:,:,2) = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 tmp3(:,:,3) = 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 tmp3(:,:,4) = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 </code></pre> <hr> <p>As you can see here, each 3D slice tells you which elements in <code>id</code> match the corresponding value in <code>tmp</code>. Therefore, the first slice tells you whether any element in <code>id</code> is equal to <code>tmp(1)</code>, which is 2245. In this case, this would be the first row and second column. For the second slice, no values matched <code>tmp(2) = 2345</code>. For the third slice, one value in <code>id</code> matched <code>tmp(3) = 2290</code>, which is row 3, column 3.</p> <p>Now, what you're really after is determining the rows and columns of where each value of <code>tmp</code> matched each location in <code>id</code>. You want this to be delineated per <code>id</code> number. That can easily be done using <a href="http://www.mathworks.com/help/matlab/ref/ind2sub.html" rel="nofollow"><code>ind2sub</code></a> and <a href="http://www.mathworks.com/help/matlab/ref/find.html" rel="nofollow"><code>find</code></a> on this matrix:</p> <pre><code>[rows, cols, ID] = ind2sub(size(tmp3), find(tmp3)) rows = 1 3 cols = 2 2 ID = 1 3 </code></pre> <p>Therefore, <code>ID</code> tells you which <code>id</code> we have matched to, and <code>rows</code>, <code>cols</code> tells you which rows and columns in <code>id</code> we were able to match with. Therefore, for <code>id = 1</code>, we found a match with <code>tmp(1)= 2245</code>, and this is located at <code>row=1,col=2</code>. Similarly, for <code>id = 3</code>, we found a match with <code>tmp(3)=2290</code> and this is at <code>row=3,col=2</code>.</p> <p>To make this into all one big 2D matrix that contains all the information you want, you can simply concatenate all of these columns into one matrix. Therefore:</p> <pre><code>final = [ID rows cols] final = 1 1 2 3 3 2 </code></pre> <p>You can read this like so:</p> <ul> <li><code>id=1</code> with <code>tmp(1) = 2245</code>, we found this value in <code>row=1,col=2</code>.</li> <li><code>id=3</code>, with <code>tmp(3) = 2290</code>, we found this value in <code>row=3,col=2</code></li> </ul> <hr> <p>Hope this helps!</p>