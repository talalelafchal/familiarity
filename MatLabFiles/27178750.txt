Matlab: Multiplication and sum of products
<p>How can I effeciently perform matrix multiplication for 10 pairs of arrays and sum the corresponding result of multiplication matrices? For example:</p> <p>Create two arrays, A1 and B1.</p> <pre><code>A1 = [1 3 5; 2 4 7]; B1 = [-5 8 11; 3 9 21; 4 0 8]; </code></pre> <p>Calculate the product of A1 and B1.</p> <pre><code>C1 = A1*B1 C1 = 24 35 114 30 52 162 </code></pre> <p>Create another two arrays, A2 and B2.</p> <pre><code>A2 = [7 9 11; 3 5 6]; B2 = [-1 2 3; 4 5 6; 4 1 8]; </code></pre> <p>Calculate the product of A2 and B2.</p> <pre><code>C2 = A2*B2 sum_of_products1 = sum(C1,C2); sum_of_products2 = sum(C3,C4); and so on till . . . sum_of_products5 = sum(C9,C10); </code></pre> <p><strong>UPDATE</strong></p> <p>Based on the reply, I input vectors. The result of summation is coming incorrect.</p> <pre><code>clc; clear all; %VECTORS A1(:,1) = [1 2 3 4].'; A1(:,2) = [5 6 7 8].'; %// Concatenate all An and Bn arrays along third dim to have A, B as 3D arrays A = cat(3,A1(:,1),A1(:,2)); B = cat(3,A1(:,1)',A1(:,2)'); %// You may clear A1, A2,...A10, B1, B2.., B10 at this point for a cleaner workspace %// Get the product values into a 3D array multvals = squeeze(sum(bsxfun(@times,permute(A,[1 2 4 3]),permute(B,[4 1 2 3])),2)) %// Finally get the sum of product values sumvals = squeeze(sum(reshape(multvals,size(A,1),size(A,2),2,[]),3)) </code></pre> <p><strong>Answer</strong></p> <p>multvals(:,:,1) =</p> <pre><code> 1 2 3 4 2 4 6 8 3 6 9 12 4 8 12 16 </code></pre> <p>multvals(:,:,2) =</p> <pre><code>25 30 35 40 30 36 42 48 35 42 49 56 40 48 56 64 </code></pre> <p>sumvals =</p> <pre><code> 3 7 55 75 6 14 66 90 9 21 77 105 12 28 88 120 </code></pre> <p><strong>The correct answer should have been</strong> </p> <pre><code>s1 = multvals(:,:,1); s2 = multvals(:,:,2); sumvals = s1 + s2; sumvals = 26 32 38 44 32 40 48 56 38 48 58 68 44 56 68 80 </code></pre>
<p>Instead of looping through all those arrays, you can concatenate them into two 3D arrays and work with them.</p> <pre><code>%// Concatenate all An and Bn arrays along third dim to have A, B as 3D arrays A = cat(3,A1,A2,...) B = cat(3,B1,B2,...) %// You may clear A1, A2,..., B1, B2..., at this point for a cleaner workspace %// Get the product values into a 3D array multvals = sum(bsxfun(@times,permute(A,[1 2 4 3]),permute(B,[4 1 2 3])),2) %// Finally get the sum of product values [m1,m2,m3,m4] = size(multvals); sumvals = squeeze(sum(reshape(multvals,m1,m2,m3,2,[]),4)) </code></pre> <p>Each slice in the last dimension of <code>multvals</code> would correspond to each of those <code>C</code> arrays. At the end each <code>3D</code> slice of <code>sumvals</code> would correspond to each <code>sum_of_products</code> array.</p> <hr> <h2>Samples runs with vectors and matrices</h2> <p><strong>1) Vector case</strong></p> <pre><code>clear all;clc; %// VECTORS A1 = [1 2 3 4].'; B1 = [5 6 7 8]; A2 = [11 12 13 14].'; B2 = [15 16 17 18]; A = cat(3,A1,A2); B = cat(3,B1,B2); multvals = sum(bsxfun(@times,permute(A,[1 2 4 3]),permute(B,[4 1 2 3])),2); [m1,m2,m3,m4] = size(multvals); sumvals = squeeze(sum(reshape(multvals,m1,m2,m3,2,[]),4)) solution_with_approach_from_question = A1*B1 + A2*B2 %// this should yield values identical to sumvals(:,:,1) </code></pre> <p>Output -</p> <pre><code>sumvals = 170 182 194 206 190 204 218 232 210 226 242 258 230 248 266 284 solution_with_approach_from_question = 170 182 194 206 190 204 218 232 210 226 242 258 230 248 266 284 </code></pre> <p><strong>2) Matrix case</strong></p> <pre><code>clear all;clc; %// MATRICES A1 = [1 3 5; 2 4 7]; B1 = [-5 8 11; 3 9 21; 4 0 8]; A2 = [7 9 11; 3 5 6]; B2 = [-1 2 3; 4 5 6; 4 1 8]; A = cat(3,A1,A2); B = cat(3,B1,B2); multvals = sum(bsxfun(@times,permute(A,[1 2 4 3]),permute(B,[4 1 2 3])),2); [m1,m2,m3,m4] = size(multvals); sumvals = squeeze(sum(reshape(multvals,m1,m2,m3,2,[]),4)) solution_with_approach_from_question = A1*B1 + A2*B2 %// this should yield values identical to sumvals(:,:,1) </code></pre> <p>Output -</p> <pre><code>sumvals = 97 105 277 71 89 249 solution_with_approach_from_question = 97 105 277 71 89 249 </code></pre>