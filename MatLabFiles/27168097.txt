count elements falling within certain thresholds in array in matlab?
<p>I have a huge vector. I have to count values falling within certain ranges. the ranges are like 0-10, 10-20 etc. I have to count the number of values which fall in certain range. </p> <p>I did something like this : </p> <pre><code>for i=1:numel(m1) if (0&lt;m1(i)&lt;=10)==1 k=k+1; end end </code></pre> <p>Also: </p> <pre><code>if not(isnan(m1))==1 x=(0&lt;m1&lt;=10); end </code></pre> <p>But both the times it gives array which contains all 1s. What wrong am I doing? </p>
<p>You can do something like this (also works for non integers)</p> <pre><code>k = sum(m1&gt;0 &amp; m1&lt;=10) </code></pre>
<p>to count the values in a specific range you can use <code>ismember</code>,</p> <p>if <code>m1</code> is vector use,</p> <pre><code>k = sum(ismember(m1,0:10)); </code></pre> <p>If <code>m1</code> is matrix use <code>k = sum(sum(ismember(m1,0:10)));</code></p> <p>for example,</p> <pre><code>m1=randi(20,[5 5]) 9 10 6 10 16 8 9 14 20 6 16 13 14 7 11 16 15 4 12 14 4 16 3 5 18 sum(sum(ismember(m1,1:10))) 12 </code></pre>
<p>You can use <a href="http://www.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html" rel="nofollow">logical indexing</a>. Observe:</p> <pre><code>&gt;&gt; x = randi(40, 1, 10) - 20 x = -2 17 -12 -9 -14 -14 15 4 2 -14 &gt;&gt; x2 = x(0 &lt; x &amp; x &lt; 10) x2 = 4 2 &gt;&gt; length(x2) ans = 2 </code></pre> <p>and the same done in one step:</p> <pre><code>&gt;&gt; length(x(0 &lt; x &amp; x &lt; 10)) ans = 2 </code></pre>
<p>Why not simply do something like this?</p> <pre><code>% Random data m1 = 100*rand(1000,1); %Count elements between 10 and 20 m2 = m1(m1&gt;10 &amp; m1&lt;=20); length(m2) %number of elements of m1 between 10 and 20 </code></pre> <p>You can then put things in a loop</p> <pre><code>% Random data m1 = 100*rand(1000,1); nb_elements = zeros(10,1); for k=1:length(nb_elements) temp = m1(m1&gt;(10*k-10) &amp; m1&lt;=(10*k)); nb_elements(k) = length(temp); end </code></pre> <p>Then <code>nb_elements</code> contains your data with <code>nb_elements(1)</code> for the 0-10 range, <code>nb_elements(2)</code> for the 10-20 range, etc...</p>
<p>Matlab does not know how to evaluate the combined logical expression</p> <pre><code>(0&lt;m1(i)&lt;=10) </code></pre> <p>Insted you should use:</p> <pre><code>for i=1:numel(m1) if (0&lt;m1(i)) &amp;&amp; (m1(i)&lt;=10) k=k+1; end end </code></pre> <p>And to fasten it up probably something like this:</p> <pre><code>sum((0&lt;m1) .* (m1&lt;=10)) </code></pre>
<p>Or you can create logical arrays and then use element-wise multiplication. Don't know how fast this is though and it might use a lot of memory for large arrays.</p> <p>Something like this</p> <pre><code>A(find((A&gt;0.2 .* (A&lt;0.8)) ==1)) </code></pre> <hr> <p>Generate values</p> <p>A= rand(5)</p> <p>A =</p> <pre><code>0.414906 0.350930 0.057642 0.650775 0.525488 0.573207 0.763477 0.120935 0.041357 0.900946 0.333857 0.241653 0.421551 0.737704 0.162307 0.517501 0.491623 0.016663 0.016396 0.254099 0.158867 0.098630 0.198298 0.223716 0.136054 </code></pre> <p>Find the intersection where the values > 0.8 and &lt; 0.2. This will give you two logical arrays and the values where <code>A&gt;0.2</code> and <code>A&lt;0.8</code> will be <code>=1</code> after element-wise multiplication.</p> <pre><code>find((A&gt;0.2 .* (A&lt;0.8)) ==1) </code></pre> <p>Then apply those indices to <code>A</code></p> <pre><code>A(find((A&gt;0.2 .* (A&lt;0.8)) ==1)) ans = 0.41491 0.57321 0.33386 0.51750 0.35093 0.76348 0.24165 0.49162 0.42155 0.65077 0.73770 0.22372 0.52549 0.90095 0.25410 </code></pre>