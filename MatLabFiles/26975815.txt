Finding same value in rows &amp; columns of a 2D array
<p>Hi guys I want to solve sodoku puzzles in matlab. My problem is that I should find same value in every row and every column and every 3*3 sub array.</p> <p>Our 2d array is 9*9 and populated with value 1-9 randomly.</p> <p>I wrote this for finding same value in rows, but I don't know how I should do it for columns and 3*3 sub arrays.</p> <pre><code>conflict_row = 0; for i=1:9 temp = 0; for j=1:9 if (temp==A(i,j)) conflict_row = conflict_row+1; end temp = A(i,j); end end </code></pre> <p>Sorry I'm a newbie.</p>
<p>If you want to work within the same column then you should do something like this (also sorry this is in C# I don't know what language you are working in):</p> <pre><code>int currentCol = 0; foreach (var item in myMultiArray) { int currentColValue = item[currentCol]; } </code></pre> <p>This works because <code>myArray</code> is a array of arrays thus to select a specific column can easily be picked out by just allowing the <code>foreach</code> to perform your row iteration, and you just have to select the column you need with the <code>currentCol</code> value.</p>
<p>Probably not the fastest solution but why don't you make a function of it and use it once for rows and once for columns</p> <pre><code>[conflict_row ] = get_conflict(A) for i=1:9 temp = 0; for j=1:9 if (temp==A(i,j)) conflict_row = conflict_row+1; end temp = A(i,j); end end </code></pre> <p>And then you call it twice</p> <pre><code>conflict_row = get_conflict(A); % Rows </code></pre> <p>Transpose A to get the columns</p> <p>Convert the columns to rows and use the same code as before</p> <pre><code> conflict_col = get_conflict(A.'); </code></pre>
<ol> <li><p>Find values that are present in all columns:</p> <pre><code>v = find(all(any(bsxfun(@eq, A, permute(1:size(A,1), [3 1 2])),1),2)); </code></pre></li> <li><p>Find values that are present in all rows:</p> <pre><code>v = find(all(any(bsxfun(@eq, A, permute(1:size(A,2), [3 1 2])),2),1)); </code></pre></li> <li><p>Find values that are present in all 3x3 blocks: reshape the matrix as in <a href="http://stackoverflow.com/a/20337173/2586922">this answer</a> by A. Donda to transform each block into a 3D-slice; then reshape each block into a column; and apply 1:</p> <pre><code>m = 3; %// columns per block n = 3; %// rows per block B = permute(reshape(permute(reshape(A, size(A, 1), n, []), [2 1 3]), n, m, []), [2 1 3]); B = reshape(B,m*n,[]); v = find(all(any(bsxfun(@eq, B, permute(1:size(B,1), [3 1 2])),1),2)); </code></pre></li> </ol>