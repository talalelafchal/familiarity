How to stop a Matlab script but don’t kill the process?
<p>Strg+C stops and kills a Matlab script (at least sometimes). But is there a way to stop a Matlab, take a look at some variables and continue the calculation?</p> <p>I am not talking about just setting a breakpoint. I want my script, let’s say run for couple hours come back to it hit some buttons that stops the calculations take a look at some variable and then continue the calculation.</p> <p>I tried to find out if there is some shortcut key for this – I am quite sure there isn’t.</p> <p>Now I was thinking about including an if-case that looks if a certain button was pressed by the user. If so there would be a useless k=0 line and a breakpoint on it. And if no one is pressing this button the loop would continue. But this is where my limited Matlab knowledge leaves me. I don’t know if there is a way to ask for a user-button press but don’t wait for a button press like in the function <code>input</code>. Also I just have a running script, I don’t have any GUI.</p>
<p>To drop to the command prompt you need the command <code>keyboard</code> and then type <code>return</code> when you have finished (you don't need a breakpoint). The tricky bit is how to trigger it. There a few options. The easiest is to open a figure window. The following code halts the process when any key is pressed.</p> <pre><code>keyDownListener=@(src,event) keyboard; fig = figure; drawnow set(fig,'KeyPressFcn',keyDownListener) for p=1:10000 %do some thing end </code></pre> <p>You can modify this to test for a specific key since the keypress is contained within the <code>event</code> struct. </p> <p>To use no figure gui at all its more of a problem. I'm not aware of a non blocking keyboard input method. A mex file the runs kbhit() in C might do it, but kbhit() is not standard C so it would only work on Windows. An easier option maybe to test for the presence of a file.</p> <pre><code>for p=1:100000 if exist(fullfile(pwd,'halt.tmp'),'file') keyboard end %do something here end </code></pre> <p>This drops to the debug console when halt.tmp is created in the current directory.</p> <p>Other potential methods could involve using multiple threads to read 'input' (either the Parallel computer toolbox or undocumented Java code), or using <a href="http://psychtoolbox.org/" rel="nofollow">http://psychtoolbox.org/</a> as mentioned by @bdecaf</p>