Matlab: how I can transform this algorithm associated with matrices manipulation?
<p>(For my problem, I use a matrix <code>A</code> <code>4x500000</code>. And the values of A(4,k) varies between 1 and 200).</p> <p>I give here an example for a case <code>A</code> 4x16 and A(4,k) varies between 1 and 10.</p> <p>I want first to match a name to the value from 1 to 5 (=10/2): </p> <pre><code>1 = XXY; 2 = ABC; 3 = EFG; 4 = TXG; 5 = ZPF; </code></pre> <p>My goal is to find,for a vector X, a matrix M from the matrix A:</p> <pre><code>A = [20 52 70 20 52 20 52 20 20 10 52 20 11 1 52 20 32 24 91 44 60 32 24 32 32 12 11 32 2 5 24 32 40 37 24 30 11 40 37 40 40 5 10 40 40 3 37 40 2 4 1 3 4 5 2 1 3 3 8 6 7 9 6 10] </code></pre> <p>A(4,k) takes all values between 1 and 10. These values can be repeated and they all appear on the 4th line.</p> <pre><code> 20 X= 32 =A(1:3,1)=A(1:3,6)=A(1:3,8)=A(1:3,9)=A(1:3,12)=A(1:3,16) 40 A(4,1) = 2; A(4,6) = 5; A(4,8) = 1; A(4,9) = 3; A(4,12) = 6; A(4,16) = 10; </code></pre> <p>for A(4,k) corresponding to X, I associate 2 if A(4,k)&lt;= 5, and 1 if A(4,k)> 5. For the rest of the value of A(4,k) which do not correspond to X, I associate 0:</p> <pre><code> [ 1 2 3 4 5 %% value of the fourth line of A between 1 and 5 2 2 2 0 2 ZX = 6 7 8 9 10 %% value of the fourth line of A between 6 and 10 1 0 0 0 1 2 2 2 0 2 ] %% = max(ZX(2,k),ZX(4,k)) </code></pre> <p>the ultimate goal is to find the matrix M:</p> <pre><code>M = [ 1 2 3 4 5 XXY ABC EFG TXG ZPF 2 2 2 0 2 ] %% M(3,:)=ZX(5,:) </code></pre>
<p>Code -</p> <pre><code>%// Assuming A, X and names to be given to the solution A = [20 52 70 20 52 20 52 20 20 10 52 20 11 1 52 20 32 24 91 44 60 32 24 32 32 12 11 32 2 5 24 32 40 37 24 30 11 40 37 40 40 5 10 40 40 3 37 40 2 4 1 3 4 5 2 1 3 3 8 6 7 9 6 10]; X = [20 ; 32 ; 40]; names = {'XXY','ABC','EFG','TXG','ZPF'}; limit = 10; %// The maximum limit of A(4,:). Edit this to 200 for your actual case %// Find matching 4th row elements matches = A(4,ismember(A(1:3,:)',X','rows')); %// Matches are compared against all possible numbers between 1 and limit matches_pos = ismember(1:limit,matches); %// Finally get the line 3 results of M vals = max(2*matches_pos(1:limit/2),matches_pos( (limit/2)+1:end )); </code></pre> <p>Output -</p> <pre><code>vals = 2 2 2 0 2 </code></pre> <hr> <p>For a better way to present the results, you can use a <code>struct</code> -</p> <pre><code>M_struct = cell2struct(num2cell(vals),names,2) </code></pre> <p>Output -</p> <pre><code>M_struct = XXY: 2 ABC: 2 EFG: 2 TXG: 0 ZPF: 2 </code></pre> <hr> <p>For writing the results to a text file -</p> <pre><code>output_file = 'results.txt'; %// Edit if needed to be saved to a different path fid = fopen(output_file, 'w+'); for ii=1:numel(names) fprintf(fid, '%d %s %d\n',ii, names{ii},vals(ii)); end fclose(fid); </code></pre> <p>Text contents of the text file would be -</p> <pre><code>1 XXY 2 2 ABC 2 3 EFG 2 4 TXG 0 5 ZPF 2 </code></pre>
<p>A <code>bsxfun()</code> based approach.</p> <p>Suppose your inputs are (where <code>N</code> can be set to 200):</p> <pre><code>A = [20 52 70 20 52 20 52 20 20 10 52 20 11 1 52 20 32 24 91 44 60 32 24 32 32 12 11 32 2 5 24 32 40 37 24 30 11 40 37 40 40 5 10 40 40 3 37 40 2 4 1 3 4 5 2 1 3 3 8 6 7 9 6 10] X = [20; 32; 40] N = 10; % Match first 3 rows and return 4th idxA = all(bsxfun(@eq, X, A(1:3,:))); Amatch = A(4,idxA); % Match [1:5; 5:10] to 4th row idxZX = ismember([1:N/2; N/2+1:N], Amatch) idxZX = 1 1 1 0 1 1 0 0 0 1 % Return M3 M3 = max(bsxfun(@times, idxZX, [2;1])) M3 = 2 2 2 0 2 </code></pre>