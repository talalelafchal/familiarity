Optimizing rank computation for very large sparse matrices
<p>I have a sparse matrix such as</p> <pre><code>A = (1,1) 1 (3,1) 1 (1,2) 1 (2,2) 1 (1,3) 1 (3,3) 1 (4,3) 1 (4,4) 1 </code></pre> <p>The full matrix of <code>A</code> can see look like as following:</p> <pre><code>full(A) = 1 1 1 0 0 1 0 0 1 0 1 0 0 0 1 1 </code></pre> <p>I want to find the rank of matrix <code>A</code> by fast way(because my matrix can extend to 10000 x 20000). I try to do it by two ways but it give the different result</p> <ol> <li><p>Convert to full matrix and find rank using</p> <pre><code>rank(full(A)) = 3 </code></pre></li> <li><p>Find the rank using sprank</p> <pre><code>sprank(A) = 4 </code></pre></li> </ol> <p>The true answer must be 3 that means using first way. However, it take long time to find the rank,especially matrix with large size. I know the reason why the second way give 4 because <code>sprank</code> only tells you how many rows/columns of your matrix have non-zero elements, while rank is reporting the actual rank of the matrix which indicates how many rows of your matrix are linearly independent. <code>sprank(A)</code> is 4 but <code>rank(A)</code> is only 3 because you can write the third row as a linear combination of the other rows, specifically <code>A(2,:) - A(1,:)</code>.</p> <p><strong>My problem is that how to find the rank of a sparse matrix with lowest time consumption</strong></p> <p>Update: I tried to use some way. However, it reported larger time consumption</p> <pre><code>%% Create random matrix G = sparse(randi(2,1000,1000))-1; A=sparse(G) %% Because my input matrix is sparse matrix %% Measure performance &gt;&gt; tic; rank(full(A)); toc Elapsed time is 0.710750 seconds. &gt;&gt; tic; svds(A); toc Elapsed time is 1.130674 seconds. &gt;&gt; tic; eigs(A); toc Warning: Only 3 of the 6 requested eigenvalues converged. &gt; In eigs&gt;processEUPDinfo at 1472 In eigs at 365 Elapsed time is 4.894653 seconds. </code></pre>
<p>I don't know which algorithm is best suited for you and I agree that may be more appropriate to ask on math.stackexchange.com. While I was trying with the random matrix you supply <code>G = sparse(randi(2,1000,1000))-1;</code> I noticed that there is little chance that its rank is &lt;1000, and whatever algorithm you use, it is likely that its performance is very data-dependant. For instance using <code>eigs(G)</code> on a 2000-samples square matrix of rank (resp.) [198,325,503,1026,2000] yields the following performance (in seconds): [0.64,0.90,1.38,1.57,4.00] which shows the performance of the eigs function is strongly related with the rank of the matrix.</p> <p>I also searched for existing tools and gave a try to <a href="http://www.math.sjsu.edu/singular/matrices/software/SJsingular/Doc/spnrank.pdf" rel="nofollow">spnrank</a> which I think is not so data-dependant (it gives a better performance than eigs for high ranks and worse if the rank is small).</p> <p>In the end you may want to adapt your technical solution depending on the kind of matrices you are most likely to work with.</p>