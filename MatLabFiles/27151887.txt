Is there a variant of Matlab structs that does not enforce the order of the fields?
<p>I want to add data to an array of structs without the fields of the added structs necessarily having the same <em>order</em> as the fields of the original structs. For example:</p> <pre><code>% Works fine: students.name = 'John'; students.age = 28; student2.name = 'Steve'; student2.age = 23; students(2) = student2; % Error if the order of the fields of student2 is reversed students.name = 'John'; students.age = 28; student2.age = 23; student2.name = 'Steve'; students(2) = student2; % Error: Dissimilar structs </code></pre> <p>Is there a variant of struct I can add data to without having to keep the same order of fields?</p> <p>EDIT: One workaround would be to always use matlabs "orderfields", which orders fields alphabetically. That is, the above erroneous example would become:</p> <pre><code>% Order fields alphabetically students.name = 'John'; students.age = 28; student2.age = 23; student2.name = 'Steve'; students = orderfields(students); student2 = orderfields(student2); students(2) = student2; % Works </code></pre> <p>I am not sure whether this is the most natural solution.</p>
<p>Yes, there is an alternative, that is using classes. See the documentation of <a href="http://fr.mathworks.com/help/matlab/ref/classdef.html" rel="nofollow"><code>classdef</code></a> for example, or more generally the <a href="http://fr.mathworks.com/help/matlab/object-oriented-programming.html" rel="nofollow">start page of Matlab's OOP</a>. Note that it requires from you to write some class files before using them, so it does not be as straightforward as using structs, but it's way more flexible once the class def job is done.</p>
<p>A simple way is to apply <code>orderfields</code> before you assign any struct, as Daniel suggests in the comments</p> <pre><code>&gt;&gt; students(1) = orderfields(struct('name', 'John', 'age', 18)); &gt;&gt; students(2) = orderfields(struct('age', 20, 'name', 'Jane')); </code></pre>
<p>A "natural" solution would be to <strong>initiallize (create) each struct with a fixed order of fields</strong>. Once the struct has been created this way, you can fill its fields in any order.</p> <p>Also, you could <strong>encapsulate the creation in a function</strong>. This simplifies code and assures order is consistent. In your case, the creator function could be</p> <pre><code>create_student = @(x) struct('name',[], 'age',[]); %// empty fields. Fixed order </code></pre> <p>So your code would become</p> <pre><code>students = create_student(); %// call struct creator students.name = 'John'; students.age = 28; student2 = create_student(); %// call struct creator student2.age = 23; student2.name = 'Steve'; students(2) = student2; %// Now this works </code></pre>