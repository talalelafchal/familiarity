Matlab - Continue to next elseif in nested if statements
<p>I have a bunch of nested 'if' statements in one another, and I can't get them to flow the way I want them. I have an if statement, and if it is met, I run a uniqueness test (myuniquetest), and if that shows that my condition gives a unique result, I want to log it and go on. I've got that part all figured out However, if the first condition does not give a unique result, I want to continue with the rest of the elseif statements to see if the subsequent ones give a unique result. (I have a total of 8 elseif statements within this code, but I imagine the methodology iwll be the same.) My code looks something like this: </p> <pre><code>if edgedouble(y0-1, x0) == 1 &amp;&amp; (y0-1)&gt;=y1 &amp;&amp; (y0-1)&lt;=y2; testpt = [y0-1, x0]; uni = myuniquetest(testpt, mypoints); if uni ==1; k = k+1; mypoints{1,k} = testpt; mypoints = testmypoints(mypoints, edgedouble, x1, x2, y1, y2); end elseif edgedouble(y0-1, x0+1) ==1 &amp;&amp; (y0-1)&gt;=y1 &amp;&amp; (y0-1)&lt;=y2 &amp;&amp; ... (x0+1)&gt;=x1 &amp;&amp; (x0+1)&lt;=x2; testpt = [y0-1, x0+1]; uni = myuniquetest(testpt, mypoints); if uni ==1; k = k+1; mypoints{1,k} = testpt; mypoints = testmypoints(mypoints, edgedouble, x1, x2, y1, y2); end etc.... end </code></pre> <p>What I want it to do is, if uni==0, continue onto the elseif(condition2) (and so on), but currently it just stops. I tried adding in a while statement after each of the embedded 'if' statements so they looked like this:</p> <pre><code> if uni ==1; (log my values, move on) end while uni==0 continue end </code></pre> <p>However, it crashed the rest of my code, and subsequently Matlab. Is there an easier way to do this?</p> <p>The code for the uniqueness function is as follows:</p> <pre><code>function[uni] = myuniquetest(testpoint, mypoints) mysize = size(mypoints); for w = 1:mysize(2); myt = isequal(testpoint, mypoints{1,w}); if myt == 1; uni = 0; break else uni = 1; end end </code></pre> <p>All of this works when the conditions are met and are unique, but it doesn't work and just stops when the condition is met but there is not uniqueness.</p> <p>Thanks!!</p>
<p>What I would recommend you do is place all of your Boolean conditions as individual elements into a <code>logical</code> array, as well as all of your possible test points in another array. After, <strong>iterate</strong> over all of your conditions with their corresponding test points and use the <code>testmypoints</code> script to check to see if <code>uni = 1</code> or <code>uni = 0</code>. We will basically keep iterating over all of your conditions and corresponding test points <strong>until</strong> <code>uni = 1</code>, then we can break out of the loop. </p> <p>As such, make a <code>logical</code> array called <code>conditions</code> that does something like this:</p> <pre><code>conditions = [edgedouble(y0-1, x0) == 1 &amp;&amp; (y0-1)&gt;=y1 &amp;&amp; (y0-1)&lt;=y2; edgedouble(y0-1, x0+1) ==1 &amp;&amp; (y0-1)&gt;=y1 &amp;&amp; (y0-1)&lt;=y2 &amp;&amp; (x0+1)&gt;=x1 &amp;&amp; (x0+1)&lt;=x2; ... ...]; </code></pre> <p>Place each condition that you want to check inside a <code>logical</code> array. Next, place your corresponding test points for each condition inside another array. Let's call this <code>testpoints</code>:</p> <pre><code>testpoints = [y0-1 x0; y0-1 x0-1; ... ...]; </code></pre> <p><code>testpoints</code> will be a 2D array, where each row consists of a test point that matches a condition in the corresponding position in <code>conditions</code>. Now, all you have to do is iterate through each condition and corresponding point until we hit <code>uni = 1</code>. If <code>uni = 0</code>, then keep looping and check the other conditions until <code>uni = 1</code>, or if we run out of conditions to check, then this loop will end and you won't get any results logged.</p> <p>Without further ado:</p> <pre><code>for idx = 1 : numel(conditions) if conditions(idx) testpt = testpoints(idx,:); uni = myuniquetest(testpt, mypoints); if uni == 1 k = k + 1; mypoints{1,k} = testpt; mypoints = testmypoints(mypoints, edgedouble, x1, x2, y1, y2); break; end end end </code></pre> <p>Let's walk through this code slowly, first, we check to see whether a particular condition is <code>true</code>. If it is, then let's get the corresponding test point that corresponds to this position, then check with your <code>myuniquetest</code>. Should <code>uni == 1</code>, then we will run the code that happens when <code>uni == 1</code> (truthfully, I don't understand what you're doing here, but if you say it works.... well ok then!). Once this happens, we break out of the loop and your results are logged. If <code>uni == 0</code>, then our condition isn't satisfied, so we should proceed and check the other conditions.</p> <hr> <p>Hope this helps!</p>