Matlab: How can I call object properties using a string?
<p>I am currently working on a data analysis program that contains two objects: <code>Experiment</code> and <code>RunSummary</code>. The <code>Experiment</code> object contains multiple instances of the <code>RunSummary</code> object. Each <code>RunSummary</code> object contains multiple properties (row matrices) each containing different data points for a given run.</p> <p>For example: <code>Experiment.RunSummary(5).Tmean</code> is row matrix containing all of the average torque values for run 5 in my experiment.</p> <p>I am currently trying to find a way to combine selected common properties from specific runs into a single matrix that can be used for further analysis. The current way I have had to do this is:</p> <pre><code>X(:,1) = [Drilling.Runs(1).Tmean,... Drilling.Runs(2).Tmean,... Drilling.Runs(3).Tmean,... Drilling.Runs(5).Tmean]'; X(:,2) = [Drilling.Runs(1).Fmean,... Drilling.Runs(2).Fmean,... Drilling.Runs(3).Fmean,... Drilling.Runs(5).Fmean]'; </code></pre> <p>This code takes the average torque (Tmean) and average force (Fmean) from runs 1, 2, 3, and 5 and combines them in a single matrix, X, with Tmean for all runs in the first column and Fmean in the second. Although this method works, I have over 20 different properties and 15 different runs making this coding very tedious. </p> <p>I have tried using code such as <code>get(Experiment.RunSummary(i),'Tmean')</code> to try and retrieve these property matricies, but was met with the error:</p> <blockquote> <p>Conversion to double from RunSummary is not possible.</p> </blockquote> <ul> <li>Is there a way to easily combine all of these different properties into a single matrix using strings to determine which properties are used?</li> </ul> <p>Thanks, metro</p> <p>Edit: Drilling is the name of the Experiment object. Runs is the name of the RunSummary object.</p>
<p>You can use <a href="http://www.mathworks.com/help/matlab/matlab_prog/generate-field-names-from-variables.html" rel="nofollow">dynamic fields</a>. The documentation is for structs, but the same principal works for classes (at least on my R2012a install). You can also use the comma-separate nature of object array indexing to compress the code. Example:</p> <pre><code>I = [1,2,3,5] ; props = {'Tmean','Fmean'} ; Nprops = length(props) ; X = zeros(length(I),Nprops); for k = 1:Nprops X(:,k) = [Drilling.Runs(I).(props{k})]'; end </code></pre>