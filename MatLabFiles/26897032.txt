Plotting own function in scilab
<p>Hey i have an issuse with plotting my own function in scilab. I want to plot the following function</p> <pre><code>function f = test(n) if n &lt; 0 then f(n) = 0; elseif n &lt;= 1 &amp; n &gt;= 0 then f(n) = sin((%pi * n)/2); else f(n) = 1; end endfunction </code></pre> <p>followed by the the console command </p> <pre><code>x = [-2:0.1:2]; plot(x, test(x)); </code></pre> <p>i loaded the function and get the following error</p> <blockquote> <p>!--error 21 Invalid Index. at line 7 of function lala called by :<br> plot(x, test(x))</p> </blockquote> <p>Can you please tell me how i can fix this</p>
<p>So i now did it with a for loop. I don't think it is the best solution but i can't get the other ones running atm...</p> <pre><code>function f = test(n) f = zeros(size(n)); t = length(n); for i = 1:t if n(i) &lt; 0 then f(i) = 0; elseif n(i) &lt;= 1 &amp; n(i) &gt;= 0 f(i) = sin((%pi * n(i)/2)); elseif n(i) &gt; 1 then f(i) = 1; end end endfunction </code></pre> <p>I guess i need to find a source about this issue and get used with the features and perks matlab/scilab have to over :) Thanks for the help tho </p>
<p>The original sin is</p> <blockquote> <pre><code>function f = test(n) (...) f(n) = (...) (...) endfunction </code></pre> </blockquote> <p><code>f</code> is supposed to be the result of the function. Therefore, <code>f(n)</code> is not "the value that the function <code>test</code> takes on argument <code>n</code>", but "the <code>n</code>-th element of <code>f</code>". Scilab then handles this however it can; on your test case, it tries to access a non-integer index, which results in an error. Your loop solution solves the problem.</p> <p>Replacing all three <code>f(n)</code> by <code>f</code> in your first formulation makes it into something that works... as long as the argument is a scalar (not an array). </p> <p>If you want <code>test</code> to be able to accept vector arguments without making a loop, the problem is that <code>n &lt; 0</code> is a vector of the same size as <code>n</code>. My solution would use logical arrays for indexing each of the three conditions:</p> <pre><code>function f = test(n) f = zeros(size(n)); negative = (n&lt;0);//parentheses are optional, but I like them for readability greater_than_1 = (n&gt;1); others = ~negative &amp; ~greater_than_1; f(isnegative)=0; f(greater_than_1)=1; f(others) = sin(%pi/2*n(others)); endfunction </code></pre>