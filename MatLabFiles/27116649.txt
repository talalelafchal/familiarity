Creating an association mapping between two vectors in MATLAB
<p>I have two MATLAB vectors, one of them a simple ascending order vector, such as the following one:</p> <p><code>ind = [1 2 3 4];</code></p> <p>and another one of the same size as <code>ind</code>, but whose numbers can vary:</p> <p><code>vec=[46 91 9 10];</code></p> <p>Those two vectors are in some correspondence with one another, so I would like to be able to create a mapping M such that <code>M(46) = 1</code>, <code>M(91) = 2</code>, and so on. Of course, a solution using a full matrix M would, in general, be very wasteful since it would assume a matrix whose size is equal to the biggest possible value of <code>vec</code>. How might I be able to compress this mapping?</p> <p>Essentially I'm looking for the MATLAB equivalent of what would otherwise be solved with a Python <code>dict</code> or a C++ <code>std::map&lt;int, int&gt;</code>. </p>
<p>If <code>vec</code> is fixed and what you want it for is not very "heavy" you could define <code>M</code> like this:</p> <pre><code>M = @(x)find(vec == x); </code></pre>
<p>Matlab's nearest builtin equivalent to this is the <code>sparse</code> matrix. Limitations are that you would have to pre-specify the maximum possible index (though this may be very large, at no cost to you) and that the default value (for unassigned entries) must always be 0. But it will work:</p> <pre><code>M = sparse( 20000000, 1 ); M( vec ) = ind </code></pre> <p>For more flexibility, you could create your own class, overshadow the <code>subsref</code> and <code>subsasgn</code> methods, (rough equivalents of Python's <code>__getitem__</code> and <code>__setitem__</code>, respectively) and store the keys and values in your own custom way. Unfortunately, in my experience, this kind of (object-oriented) solution tends to be very slow in Matlab.</p> <p>Update: Luis Mendo's solution <code>M = containers.Map( vec, ind )</code> is much more elegant, and more similar to the equivalent C++ and Python solutions. I hadn't heard of the <code>containers.Map</code> class. I suspect it will be a lot slower though, if timing performance is critical for your application. My preliminary test using these values suggests that retrieval from a <code>sparse</code> matrix is about 10x faster than retrieval from a <code>containers.Map</code>.</p>
<p>You want a <a href="http://es.mathworks.com/help/matlab/map-containers.html" rel="nofollow">map</a>:</p> <pre><code>M = containers.Map(vec, ind); </code></pre>