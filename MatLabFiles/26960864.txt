Matlab formula optimization without for loops
<p>I am trying to implement Hough transform algorithm. Algorithm works, but it's slow. Currently i calculate rho, by this equation in two for loops:</p> <blockquote> <p>for i = 1 : length(x)</p> <pre><code>j=1; for theta = -pi/2:nBinsTheta:pi/2-nBinsTheta ro =round(x(i).*cos(theta) + y(i).*sin(theta)); .... j = j + 1; end </code></pre> <p>end</p> </blockquote> <p>How can i simplify this, to work without for loops? I need to calculate ro without loops, but how can i do this, to cover all possible theta's?</p> <hr> <p>EDIT: Now i need to know how to add 1, to designated cell's in accumulator matrix given x and y coordinate vector. For example let's say that i have vectors like: </p> <blockquote> <p>x: [1 2 1 3]<br> y: [1 3 1 4]</p> </blockquote> <p>I'd like to solve this problem without loops. I know that i need to convert to linear indices using <strong>sub2ind</strong>, but the problem is that there'll be a lot of same linear indices for example that i gave, there will be <strong>2x1 (1,1 coordinate is repeated twice)</strong>. If you try to add 1 like so: </p> <blockquote> <p>A([1 1]) = A([1 1]) + 1;</p> </blockquote> <p>it'll add 1 only once, that's my problem.</p>
<p>Assuming <code>x</code> and <code>y</code> to be row vectors, you can use the following code to pre-calculate all <code>ro</code> values in a 2D matrix which hopefully should speed things up for you inside the nested loops for the rest of the work you might be doing involving the <code>ro</code> values -</p> <pre><code>theta_vec = [-pi/2:nBinsTheta:pi/2-nBinsTheta].'; %//' ro_vals = round( cos(theta_vec)*x + sin(theta_vec)*y ); </code></pre>
<pre><code>assert(all(size(x) == size(y)), 'dimension mismatch: x, y') theta = (-pi/2:nBinsTheta:pi/2-nBinsTheta)'; assert(all(size(theta) == size(y)), 'dimension mismatch: theta, y') rho = x.*cos(theta) + y.*sin(theta); rho_rounded = round(rho); </code></pre> <p>do you really need <code>j</code>?</p> <p>PS: the previous answer might not work because of matrix multiplication operator <code>*</code> instead of elementwise <code>.*</code></p>