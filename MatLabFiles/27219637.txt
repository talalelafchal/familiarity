Bit Error Rate using Test Data
<p>I have the below code. I want to find the bit error rate considering the clustered data as a trained data and send a test data. Can I do that with this code? I appreciate your active support. </p> <pre><code>clear all; clc; T=[ 2+2*i 2-2*i -2+2*i -2-2*i]; A=randn(150,2)+2*ones(150,2); C=randn(150,2)-2*ones(150,2); B=randn(150,2)+2*ones(150,2); F=randn(150,2)-2*ones(150,2); D=randn(150,2)+2*ones(150,2); G=randn(150,2)-2*ones(150,2); E=randn(150,2)+2*ones(150,2); H=randn(150,2)-2*ones(150,2); X = [A; B; D; C; F; E; G; H]; [idx, centroids] = kmeans(X, 4, 'Replicates', 20); x = X(:,1); y = X(:,2); figure; colors = 'rgbk'; [X,Y] = meshgrid(-5:0.05:5, -5:0.05:5); X = X(:); Y = Y(:); figure; hold on; for idx = 1 : numel(X) [dummy,ind] = min(sum(bsxfun(@minus, [X(idx) Y(idx)], centroids).^2, 2)); plot(X(idx), Y(idx), [colors(ind), '.']); end </code></pre>
<p>OK, now your question is more clear. I didn't understand what you meant in your other post. Alright, it looks like your <code>T</code> is your transmission alphabet. Be advised that the clusters that you get through <code>k</code>-means will probably not be the same as those from your transmission alphabet, so you're going to have to figure out which centroids are the closest from to your transmission alphabet. We can do that with the following code:</p> <pre><code>gt = zeros(1,4); for idx = 1 : 4 [dummy,gt(idx)] = min(sum(bsxfun(@minus, [real(T(idx)), imag(T(idx))], centroids).^2, 2)); end </code></pre> <p><code>gt</code> will contain which symbol in your alphabet matches which cluster centroid in your data. For your results to be reproducible, I set the random seed generator to 1234 (i.e. <code>rng(1234);</code>) then ran your code. It gave me the following for <code>gt</code>:</p> <pre><code>gt = 4 2 3 1 </code></pre> <p>Simply put, each element in <code>gt</code> tells you which symbol in <code>T</code> matches up with what centroid in <code>centroids</code>. Therefore, <code>gt(1) = 4</code> means that centroid #1 got matched to the 4th symbol in your transmission alphabet, <code>gt(2) = 2</code> means that centroid #2 got matched to the 2nd symbol in your alphabet and so on.</p> <p>As such, given your test sequence that is composed of the alphabet in <code>T</code>, simply create your test sequence, keeping in mind what <code>gt</code> is. Therefore, you could do something like this:</p> <pre><code>rng(1234); rand_ind = randi(4, 10, 1); test_sequence = T(rand_ind); gt_labels = gt(rand_ind); </code></pre> <p>The above code will generate a random integer sequence from 1 to 4 and there will be 10 of these numbers. I then use this to create a random test sequence using the alphabet from <code>T</code>. <code>gt_labels</code> will also contain what the actual labels of each symbol is with respect to the cluster centroids. Now, let's split this up into real and imaginary components and add some noise.</p> <pre><code>x = real(test_sequence).*randn(1, 10); y = imag(test_sequence).*randn(1, 10); </code></pre> <p>This noise... let's say... this was added as you sent this through a communication channel. Now that we have our real and imaginary components, let's figure out how this sequence was classified as. We would use <code>x</code> and <code>y</code> and determine the cluster that each point belongs to:</p> <pre><code>labels = zeros(1, 10); for idx = 1 : 10 [dummy,labels(idx)] = min(sum(bsxfun(@minus, [x(idx), y(idx)], centroids).^2, 2)); end </code></pre> <p><code>labels</code> will contain how your clustering mechanism classified each point as. I got:</p> <pre><code>labels = 1 4 3 1 4 1 2 2 2 3 </code></pre> <p>Similarly, this is the labelling that was assigned to your test sequence before transmission:</p> <pre><code>gt_labels = 4 3 2 1 1 2 2 1 1 1 </code></pre> <p>As such, the BER (bit error rate) is simply counting the number of mismatches and dividing by the total sequence. You would multiply this by 100% to get this in percentage instead of a proportion. Therefore:</p> <pre><code>BER = sum(labels ~= gt_labels) / 10 * 100; BER = 80 </code></pre> <p>As such, we have a BER of 80%.... not very good! </p> <hr> <p>This should be enough to get you started. Hope this helps!</p>