Roots of a non-linear equation using Matlab
<p>I am using Matlab to find the roots of a non-linear function. The equation is lengthy and I have used another <code>.m</code> to save the function, the code for which goes like</p> <pre><code>function x_c = f_x_c(s,H,VA,Lo,qc,EA,NF,Sj,Fj) if (s &lt; 0) || (s &gt; Lo); disp('The value of s is invalid') disp(['s = ' num2str(s)]); return end C1 = H/qc; if NF == 0 n = 0; sn = 0; sum_Fj = 0; end if NF &gt;= 1 Sj_Q = [0; Sj; Lo]; %Determine n and sn if 0 &lt;= s &lt; Lo: if s &lt; Lo STOP = 0; k = 0; while STOP == 0 k = k + 1; if (s &gt;= Sj_Q(k,1)) &amp;&amp; (s &lt; Sj_Q((k + 1),1)) STOP = 1; end end n = k - 1; sn = Sj_Q(k,1); end %Determine n and sn if s = Lo: if s == Lo n = NF; sn = Sj(NF,1); end sum_Fj = sum(Fj(1:n,1)); end x_c = (H/EA)*s; x_c = x_c + C1*asinh((qc*s - VA + sum_Fj)/H) + ... - C1*asinh((qc*sn - VA + sum_Fj)/H); for j = 1:n sk = Sj_Q((j + 1),1); sk_1 = Sj_Q(j,1); sum_Fj = sum(Fj(1:(j - 1))); x_c = x_c + ... + C1*asinh((qc*sk - VA + sum_Fj)/H) + ... - C1*asinh((qc*sk_1 - VA + sum_Fj)/H); end </code></pre> <p>The variable is <code>H</code> here. There is no problem with the code because it returns me that lengthy equation when I type the following in the main file.</p> <pre><code>syms x equation = -(XB - XA) + f_x_c(s,x,VA,Lo,qc,EA,NF,Sj,Fj); %Replaced H with variable H and all other arguments are pre-defined </code></pre> <p>Now, I want to solve this equation near <code>H0</code>. When I put <code>fzero(@(x)equation, H0)</code>, it gives me an error which goes like</p> <pre><code>Undefined function 'isfinite' for input arguments of type 'sym'. Error in fzero (line 308) elseif ~isfinite(fx) || ~isreal(fx) Error in main (line 50) fzero(@(x)equation, H0) </code></pre> <p>How can I solve this problem?</p> <p><strong>EDIT:</strong></p> <p>The equation has at least one root because if I use <code>ezplot</code> to plot the function, I get the following figure.<img src="https://i.stack.imgur.com/01Aze.jpg" alt="enter image description here"></p>
<p>I do not know what caused the problem as I am not familiar with the symbolic package in Matlab. </p> <p>However you should be able to solve it fairly easy using some numerical solver. From what I can read of your code you want to solve the above equation equal to zero, this is exactly what Newton Rhapson is doing. You can look up the method here: <a href="http://en.wikipedia.org/wiki/Newton" rel="nofollow">http://en.wikipedia.org/wiki/Newton</a>'s_method</p> <p>As you probably do not know the exact derivative of your function you can estimate it using first order approximation, where you simply use the definition of differentials but as we cannot let h go to 0, we choose h very small, in matlab I am typically using sqrt(eps). So that the approximation becomes: f'(x) = (f(x+sqrt(eps))-f(x))/sqrt(eps).</p> <p>Otherwise you can use my method, which works in 1 dimension, you can find it here: <a href="http://imada.sdu.dk/~nmatt11/MM533-2014/" rel="nofollow">http://imada.sdu.dk/~nmatt11/MM533-2014/</a> You have to download fpisimple.m and mynewton.m as newtons method is just an application of fix point iteration it is build on top of that.</p>
<p>I see, I got to almost the same place as you, however, I got to line 309, since apparently using <code>isfinite</code> on a <code>sym</code> does not cause a crash in matlab 2014b. However, <code>isfinite</code> returns false, still giving an error. But to the point: it seems that <code>fzero</code> is not supposes to be used for symbols. Are you sure that symbols are necessary here? Looking at the function call it does not seem to be neccessary, since the output seems as if it is supposed to be a numeric anyway. Also you may argue that</p> <pre><code>syms x; fzero(@(x) x^2-1,1) </code></pre> <p>works, but then the x in @(x) have higher priority which is not a symbol (in programming we say that the variable have a different scope).</p> <p>If it is important that <code>x</code> is a <code>sym</code>, you should use the equation solver <code>solve</code> instead that works for symbolic output.</p> <pre><code>syms x; equation = x^2-3; solve(equation,'x') </code></pre> <p>However, this may fail or give you incredibly long answers for complicated functions (and also for expressions not having nice fractional answers try <code>syms x; equation = x^3-3.17+1.37*x;</code>). It is also slower and is thus not recommended if you do not have arbitary constants in the expression (eg. f = x^2-a &lt;=> x = +- a^(1/2), where a is to be defined later or you want to do something to the solution for multiple values of a).</p>