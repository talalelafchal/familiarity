swapping two vector's elements in matlab
<p>I have two vectors, <code>v1 (1x9)</code> and <code>v2 (1x4)</code>.</p> <p>I have to write a function with two inputs, <code>(x,y)</code> and output of <code>out</code>. </p> <p><code>x</code> should be the index number <code>x</code> in <code>v1</code>.</p> <p><code>y</code> should be the index number <code>y</code> in <code>v2</code>.</p> <p>The function should replace the <code>xth</code> element in <code>v2</code> with the <code>yth</code>element in <code>v1</code> and give the new <code>v2</code> as output.</p> <p>As an example:</p> <pre><code>v1=[1 2 3 4 5 6 7 8 9]; v2=[1 2 3 4]; out = myfun(7,2); </code></pre> <p>then the output should be </p> <pre><code>out = [1 7 3 4]; </code></pre> <p>The next time if <code>x=9</code> and <code>y=1</code></p> <pre><code>out = myfun(9,1); out = [9 7 3 4]; </code></pre> <p>my main program idea is</p> <p>[M Z]=test(A,q) A is matrix (mxn) q is vector of length m i=[1:m];j=[1:n]; c(:,j)=q./A(:,j); find minimum element in c . as example it is c(I,j) then x=I; and y=j;g i = [1:x-1,x+1:m]; j = [1:y-1,y+1:n]; % starting new calculations statementsâ€¦calculation procedures to find matrix M instead of A and vector Z instead of q.</p> <p>end of program</p> <p>now I want to write myfunction which you did before inside this program</p> <pre><code> elseif v(x) &lt;= v1(n) this program must working continuously (holding M and Z as new A and q in input and get the minimum ratio and so the new x and y ) until v(x)==n break </code></pre> <p>please help</p>
<p>You can <code>save</code> the variable and <code>load</code> it in the next call. </p> <pre><code>function v2 = myfun(x,y) v1=[1 2 3 4 5 6 7 8 9]; v2=[1 2 3 4]; if exist('v2.mat', 'file' ) ~= 0 load('v2') end v2(y) = v1(x); save('v2','v2'); end </code></pre> <p>You could also use <code>persistant variable</code>,</p> <pre><code>function out = myfun(x,y) persistent v if isempty(v) v = [1 2 3 4]; end v1=[1 2 3 4 5 6 7 8 9]; v(y) = v1(x); out = v; end </code></pre> <p><strong>Note</strong></p> <blockquote> <p><strong>mlock command</strong> locks the currently running function in memory so that subsequent clear functions do not remove it. Locking a function in memory also prevents any persistent variables defined in the file from getting reinitialized.</p> </blockquote> <p><strong>Edit</strong></p> <p>I got this form your comments, see how it goes,</p> <pre><code>function out = test(x,y) persistent v if isempty(v) v = [1 2 3 4]; end v1 = [1 2 3 4 5 6 7 8 9]; v(y) = v1(x); if x == 3; out = v; return elseif v(y) &lt;= v1(9) statements end out = v; end </code></pre>