Matlab own fft2 without loops
<p>I have a problem.</p> <p>I have a task to write an own fft2 without using for-loops in Matlab. There is a formula for computing this task:</p> <p>F(u,v) = sum (0 to M-1) {sum(o to N-1) {f(m,n)*e^(-i*2pi*(um/M + vn/N))}}</p> <p>Or for better reading: <a href="http://www.directupload.net/file/d/3808/qs3r9ogz_png.htm" rel="nofollow">http://www.directupload.net/file/d/3808/qs3r9ogz_png.htm</a></p> <p>It is easy to do it with two for-loops but I have no idea how to do this without these loops, absolutely no idea. We get no help by the teaching personal. They don't even give a hint or a reference to a book, where we could read about it.</p> <p>Now, I want to try to get help here.</p>
<p>Are you familiar with the matrix form of DFT? have a look here: <a href="http://en.wikipedia.org/wiki/DFT_matrix" rel="nofollow">http://en.wikipedia.org/wiki/DFT_matrix</a> </p> <p>You can do something similar in order to get a matrix form for 2D DFT.<br> You need to transformation matrices. The first is a N-by-N DFT matrix that operates on the columns of <code>f</code>, as explained in the link above. Next you need another M-byM DFT matrix the operates on the rows of <code>f</code>. Finally, you transformed signal is given by </p> <pre><code>F = Wm * f * Wn; </code></pre> <p>without any loops. Note that the DFT matrix can be constructed also without loop by using something like</p> <pre><code>(1:M)*((1:M)') </code></pre>