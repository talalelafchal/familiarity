Using Parfor to create matrix from a vector
<p>I am new to Matlab and would appreciate any assistance possible!</p> <p>I am running a simulation and so the results vary with each run of the simulation. I want to collect the results for analysis.</p> <p>For example, during the first simulation run, the level of a plasma coagulation factor may vary over 5 hours as such: R(1) = [1.0 0.98 0.86 0.96 0.89]</p> <p>In the second run, the levels at each time period may be slightly different, eg. R(2) = [1.0 0.95 0.96 0.89 0.86]</p> <p>I would like to (perhaps by using the parfor function) to create a matrix eg. R = [1.0 0.98 0.86 0.96 0.89 1.0 0.95 0.96 0.89 0.86]</p> <p>I have encountered problems ranging from "In an assignment A(I) = B, the number of elements in B and I must be the same" to getting a matrix of zeros or ones (depending on what I use for the preallocation).</p> <p>I will need the simulation to run about 10000 times in order to collect a meaningful amount of results. </p> <p>Can anyone suggest how this might be achieved? A detailed guidance or (semi)complete code would be much appreciated for someone new to Matlab like me.</p> <p>Thanks in advance!</p> <p>This is my actual code, and as you can see, there are 4 variables that vary over 744 hours (31 days) which I would like to individually collect:</p> <pre><code>Iterations = 10000; PGINR = zeros(Iterations, 744); PGAmount = zeros(Iterations, 744); CAINR = zeros(Iterations, 744); CAAmount = zeros(Iterations, 744); for iii = 1:Iterations [{PGINR(iii)}, {PGAmount(iii)}, {CAINR(iii)}, {CAAmount(iii)}] = ChineseTTRSimulationB(); end filename = 'ChineseTTRSimulationResults.xlsx'; xlswrite(filename, PGINR, 2) xlswrite(filename, PGAmount, 3) xlswrite(filename, CAINR, 5) xlswrite(filename, CAAmount, 6) </code></pre>
<p>Are you looking for something like this? I simplified a little bit your code for better understanding and added some dummy data, function.</p> <p><strong>main.m</strong></p> <pre><code>Iterations = 10; PGINR = zeros(Iterations, 2); PGAmount = zeros(Iterations, 2); %fake data x = rand(Iterations,1); y = rand(Iterations,1); parfor iii = 1:Iterations [PGINR(iii,:), PGAmount(iii,:)] = ChineseTTRSimulationB(x(iii), y(iii)); end </code></pre> <p><strong>ChineseTTRSimulationB.m</strong></p> <pre><code>function [PGINRi, PGAmounti] = ChineseTTRSimulationB(x,y) PGINRi = [x + y, x]; PGAmounti = [x*y, y]; end </code></pre>
<p>save each parfor-result in cells, and combine them later.</p> <pre><code>Iterations = 10000; PGINR = cell(1, Iterations); PGAmount = cell(1, Iterations); CAINR = cell(1, Iterations); CAAmount = cell(1, Iterations); parfor i = 1:Iterations [PGINR{i}, PGAmount{i}, CAINR{i}, CAAmount{i}] = ChineseTTRSimulationB(); end PGINR = cell2mat(PGINR); % 1x7440000 vector %and so on... </code></pre>