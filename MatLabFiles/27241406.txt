Difference between bode and freqz
<p>I am creating a filter in MATLAB like so:</p> <pre><code>[num,den] = ellip(10,0.1,50,4000/22050,'high'); </code></pre> <p>Using <strong>freqz</strong> I then found the frequency response of the filter like so:</p> <pre><code>freqz(num,den) </code></pre> <p>This produces as expected a high pass filter plot. However, if I try to plot the same set of values using the <strong>bode</strong> function I get something entirely different.</p> <pre><code>bode(tr(num,den)) </code></pre> <p>This produces a low pass filter plot. Am I not understanding how these functions work? It was my understanding that freqz took the coefficients of a transfer function as its arguments. This is also what I am doing with the bode function. </p> <p>Why the difference? </p>
<pre><code>[b,a] = ellip(n,Rp,Rs,Wp) </code></pre> <p>where <code>b,a</code> are z-domain representatives, </p> <p><img src="https://i.stack.imgur.com/eVMnJ.png" alt="enter image description here"></p> <p>while <code>tf</code> by default is for s-domain:</p> <p>you can use <code>filt</code> instead,</p> <pre><code>[b,a] = ellip(10,0.1,50,4000/22050,'high'); freqz(b,a) figure bode(filt(b,a)) </code></pre> <p>You can also use <code>bode(tf(b,a,-1,'variable','z^-1'))</code>.</p> <p>Check the <code>variable property</code> for <code>tf</code>.</p> <blockquote> <p>String specifying the transfer function display variable. Variable can take the following values:</p> <p>'s' — Default for continuous-time models</p> <p>'z' — Default for discrete-time models</p> <p>'p' — Equivalent to 's'</p> <p>'q' — Equivalent to 'z'</p> <p>'z^-1' — Inverse of 'z'</p> <p>'q^-1' — Equivalent to 'z^-1'</p> </blockquote>