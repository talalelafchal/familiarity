Accelerometer with FFT - strange output
<p>After reading a lot of research and works on subject I still have got problems applying FFT to my accelerometer data. Most of my code is taken from official MATLAB example: <a href="http://www.mathworks.com/help/matlab/math/fast-fourier-transform-fft.html#brenuoh-1" rel="nofollow noreferrer">FFT for one dimension</a>. After more reading I've found this question: <a href="http://stackoverflow.com/questions/12007071/fft-and-accelerometer-data-why-am-i-getting-this-output">FFT and accelerometer data: why am I getting this output?</a> where there was suggestion to use windowing. So after some more reading I've added hamming window to my code.</p> <p>My data looks like that on plot: <img src="https://i.stack.imgur.com/PdgRp.png" alt="enter image description here"></p> <p>And this is the code that I am using for FFT:</p> <pre><code>fs = 1/0.02; %0.02 comes from picking sample each 20ms m = size(data,1); w = hanning(m); yw = w.*data; n = pow2(nextpow2(yw)); y = fft(yw,size(n,1)); f = (0:size(n,1)-1)*(fs/size(n,1)); power = y.*conj(y)/size(n,1); figure plot(f,power) </code></pre> <p>The problem is that my plot from this code looks like that: <img src="https://i.stack.imgur.com/DR8a0.png" alt="enter image description here"></p> <p>Can someone tell me what is wrong with my code? To be honest I'd excepted it would look better (something like this:<a href="https://imgur.com/wGs43" rel="nofollow noreferrer">http://imgur.com/wGs43</a>) so that's why I am asking this question.</p> <p><strong>EDIT:</strong> My data can be found here: <a href="https://dl.dropboxusercontent.com/u/58774274/exp.txt" rel="nofollow noreferrer">https://dl.dropboxusercontent.com/u/58774274/exp.txt</a></p>
<p>Your plots will look better if you first remove the DC offset (subtract the average of all samples from each point before computing the FFT), and then plot only half the FFT result data points (N/2) or less (since the upper half of an FFT result is just a conjugate mirror of the first half for real data input).</p>
<p>Your <code>Fs</code> is <code>50</code> so the highest frequency in your data can be <code>Fs/2 = 25Hz</code>.</p> <p>See if this code helps.</p> <pre><code>fid = fopen('1.txt','r'); C = textscan(fid, '%f'); fclose(fid); data = C{1}; fs = 50; m = length(data); nfft = 2^nextpow2(m); y = fft(data,nfft)/m; f = fs/2 * linspace(0,1,nfft/2+1); power = abs(y); subplot(211) plot(f,power(1:nfft/2+1)) t = (0 : m-1)/fs; s0 = .8*fs : 3.2*fs; % .8 sec to 3.2 sec p(s0) = .5*cos(2*pi*3.3*t(s0)+.25*pi); p = p + mean(data); subplot(212) plot(t,data);hold on plot(t,p,'r') </code></pre> <p><img src="https://i.stack.imgur.com/ScomU.png" alt="enter image description here"></p> <p>This is your data in frequency domain.</p> <p>There is a peak at <code>3.3 Hz</code>.</p> <p>As a proof I plotted a sinusoidal with frequency of <code>3.3 Hz</code> along with your data,</p> <p>As you can see, it totally matches your data.</p>
<p>What your reference plot shows is just the magnitude on a logarithmic scale (in dB). Also it seems that the DC offset is removed. So you end up with something like this if you adapt it in your code.</p> <pre><code>data = data-mean(data); % DC removal fs = 50; m = length(data); nfft = 2^nextpow2(m); y = fft(data,nfft)/m; f = fs/2 * linspace(0,1,nfft/2+1); power = abs(y); plot(f,10*log10(power(1:nfft/2+1))); % plot log magnitude ylim([-30 0]) %limit axis </code></pre> <p>Looks at least similar to me.</p> <p><img src="https://i.stack.imgur.com/hvmmk.png" alt="enter image description here"></p> <p>If you additionally take the absolute square you are basically estimating the power spectral density of your signal. So meaning you have to change <code>power = abs(y);</code> to <code>power = abs(y.^2);</code> and then obviously have to adapt your <code>ylim([-30 0])</code> to something lower like -50.</p>