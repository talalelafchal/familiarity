Matlab - submatrix for stiffness method
<p>In order to use the stiffness method for trusses, I need to extract certain elements from a large global stiffness matrix.</p> <p>Say I have a 9 x 9 matrix <code>K</code> representing a three-member truss. This means that the first 3 rows and columns correspond to the first node, the second set of three rows and columns with the second node, and the third with the third node. In the code is a vector <code>zDisp</code> that corresponds to each node that has zero displacement. On paper, a zero displacement of a node means you would cross out the rows and columns corresponding to that displacement, leaving you with a smaller and easier to work with K matrix. So if the first and third nodes have zero displacement, you would be left with a 3 x 3 matrix corresponding to the intersection of the middle three rows and the middle three columns. </p> <p>I thought I could accomplish this one node at a time with a function like so:</p> <pre><code>function [ B ] = deleteNode( B, node ) %deleteNode removes the corresponding rows and vectors to a node that has % zero deflection from the global stiffness matrix % --- Problem line - this gets the first location in the matrix corresponding to the node start = 3*node- 2; for i = 0 : 2 B(start+i,:) = []; B(:,start+i) = []; end end </code></pre> <p>So my main project would go something like</p> <pre><code>% Zero displacement nodes zDisp = [1; 3; ]; % --- Create 9 x 9 global matrix Kg --- % Make a copy of the global matrix S = Kg; for(i = 1 : length(zDisp)) S = deleteNode(S, zDisp(i)); end </code></pre> <p>This does not work because once the loop executes for node 1 and removes the first 3 rows and columns, the problem line in the function no longer works to find the correct location in the smaller matrix to find the node. </p> <p>So I think this step needs to be executed all at once. I am thinking I may need to instead input which nodes are NOT zero displacement, and create a submatrix based off of that. Any tips on this? Been thinking on it awhile. Thanks all.</p>
<p>In your example, you want to remove rows/columns 1, 2, 3, 7, 8, and 9, so if <code>zDisp=[1;3]</code>,</p> <pre><code>remCols=bsxfun(@plus,1:3,3*(zDisp-1)) </code></pre> <p>If I understand correctly, you should just be able to first remove the columns given by <code>zDisp</code>:</p> <pre><code>S(remCols(:),:)=[] </code></pre> <p>then remove the rows:</p> <pre><code>S(:,remCols(:))=[] </code></pre>