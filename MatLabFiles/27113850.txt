Error ploting bode , nyquist and nichols responses in gui matlab
<p>I want to create a graphical interface with the GUIDE Matlab that displays diffrent responses of a transfer function : step , impulse , bode , nyquist and nichols responses. it works fine for the step and impulse responses but with nyquist , bode and nichols it dosen't work , i should add 'squeeze' to the 'plot' function but it's not exactly the correct response ! this is the error when i try with plot only :</p> <p><strong>??? Error using ==> plot Data may not have more than 2 dimensions</strong><br> This is th <a href="https://www.dropbox.com/s/4kyzxf2bn2f4p5n/LTI.fig?dl=0" rel="nofollow">LTI</a>.fig file<br> The following code is the content of the .m file </p> <pre><code>function varargout = LTI(varargin) % LTI M-file for LTI.fig % LTI, by itself, creates a new LTI or raises the existing % singleton*. % % H = LTI returns the handle to a new LTI or the handle to % the existing singleton*. % % LTI('CALLBACK',hObject,eventData,handles,...) calls the local % function named CALLBACK in LTI.M with the given input arguments. % % LTI('Property','Value',...) creates a new LTI or raises the % existing singleton*. Starting from the left, property value pairs are % applied to the GUI before LTI_OpeningFcn gets called. An % unrecognized property name or invalid value makes property application % stop. All inputs are passed to LTI_OpeningFcn via varargin. % % *See GUI Options on GUIDE's Tools menu. Choose "GUI allows only one % instance to run (singleton)". % % See also: GUIDE, GUIDATA, GUIHANDLES % Edit the above text to modify the response to help LTI % Last Modified by GUIDE v2.5 24-Nov-2014 10:41:38 % Begin initialization code - DO NOT EDIT gui_Singleton = 1; gui_State = struct('gui_Name', mfilename, ... 'gui_Singleton', gui_Singleton, ... 'gui_OpeningFcn', @LTI_OpeningFcn, ... 'gui_OutputFcn', @LTI_OutputFcn, ... 'gui_LayoutFcn', [] , ... 'gui_Callback', []); if nargin &amp;&amp; ischar(varargin{1}) gui_State.gui_Callback = str2func(varargin{1}); end if nargout [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:}); else gui_mainfcn(gui_State, varargin{:}); end % End initialization code - DO NOT EDIT % --- Executes just before LTI is made visible. function LTI_OpeningFcn(hObject, eventdata, handles, varargin) % This function has no output args, see OutputFcn. % hObject handle to figure % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % varargin command line arguments to LTI (see VARARGIN) % Choose default command line output for LTI handles.output = hObject; % Update handles structure guidata(hObject, handles); % UIWAIT makes LTI wait for user response (see UIRESUME) % uiwait(handles.figure1); % --- Outputs from this function are returned to the command line. function varargout = LTI_OutputFcn(hObject, eventdata, handles) % varargout cell array for returning output args (see VARARGOUT); % hObject handle to figure % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % Get default command line output from handles structure varargout{1} = handles.output; function numerateur_Callback(hObject, eventdata, handles) % hObject handle to numerateur (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % Hints: get(hObject,'String') returns contents of numerateur as text % str2double(get(hObject,'String')) returns contents of numerateur as a double % --- Executes during object creation, after setting all properties. function numerateur_CreateFcn(hObject, eventdata, handles) % hObject handle to numerateur (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles empty - handles not created until after all CreateFcns called % Hint: edit controls usually have a white background on Windows. % See ISPC and COMPUTER. if ispc &amp;&amp; isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end function denumerateur_Callback(hObject, eventdata, handles) % hObject handle to denumerateur (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % Hints: get(hObject,'String') returns contents of denumerateur as text % str2double(get(hObject,'String')) returns contents of denumerateur as a double % --- Executes during object creation, after setting all properties. function denumerateur_CreateFcn(hObject, eventdata, handles) % hObject handle to denumerateur (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles empty - handles not created until after all CreateFcns called % Hint: edit controls usually have a white background on Windows. % See ISPC and COMPUTER. if ispc &amp;&amp; isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end % --- Executes on button press in rep_indic. function rep_indic_Callback(hObject, eventdata, handles) % hObject handle to rep_indic (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) num= str2num(get(handles.numerateur,'String')); denum = str2num(get(handles.denumerateur,'String')); G=tf([num],[denum]); axes(handles.figure) plot(step(G)) grid on % --- Executes on button press in lieu_bode. function lieu_bode_Callback(hObject, eventdata, handles) % hObject handle to lieu_bode (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) num= str2num(get(handles.numerateur,'String')); denum = str2num(get(handles.denumerateur,'String')); G=tf([num],[denum]); axes(handles.figure) plot(squeeze(bode(G))) grid on % --- Executes on button press in rep_impuls. function rep_impuls_Callback(hObject, eventdata, handles) % hObject handle to rep_impuls (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) num= str2num(get(handles.numerateur,'String')); denum = str2num(get(handles.denumerateur,'String')); G=tf([num],[denum]); axes(handles.figure) plot(impulse(G)) grid on % --- Executes on button press in lieu_nyquist. function lieu_nyquist_Callback(hObject, eventdata, handles) % hObject handle to lieu_nyquist (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) num= str2num(get(handles.numerateur,'String')); denum = str2num(get(handles.denumerateur,'String')); G=tf([num],[denum]); axes(handles.figure) plot(s(nyquist(G))) grid on % --- Executes on button press in lieu_nichols. function lieu_nichols_Callback(hObject, eventdata, handles) % hObject handle to lieu_nichols (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) num= str2num(get(handles.numerateur,'String')); denum = str2num(get(handles.denumerateur,'String')); G=tf([num],[denum]); axes(handles.figure) plot(squeeze(nichols(G))) grid on </code></pre>
<p>You don't provide the *.fig file to go with your code, but I suspect I know what the problem is: <a href="http://uk.mathworks.com/help/control/ref/bode.html" rel="nofollow"><code>bode</code></a>, <a href="http://uk.mathworks.com/help/control/ref/nyquist.html" rel="nofollow"><code>nyquist</code></a> and <a href="http://uk.mathworks.com/help/control/ref/nichols.html" rel="nofollow"><code>nichols</code></a> produce the plot automatically, you don't need to call the <code>plot</code> function. Check the documentation for the correct way to call these functions. In your GUI, replace:</p> <ol> <li><code>plot(squeeze(bode(G)))</code> by <code>bode(G)</code></li> <li><code>plot(s(nyquist(G)))</code> [sic] by <code>nyquist(G)</code></li> <li><code>plot(squeeze(nichols(G)))</code> by <code>nichols(G)</code></li> </ol> <p><strong>EDIT based on comments</strong></p> <p>I think all you need to do is</p> <pre><code>num= str2num(get(handles.numerateur,'String')); denum = str2num(get(handles.denumerateur,'String')); G=tf([num],[denum]); axes(handles.figure) step(G) grid on </code></pre> <p>and the same applies for <code>bode</code>, <code>nyquist</code>, <code>nichols</code> and <code>impulse</code>, i.e. just create a set of axes in the figure and the plot will be displayed in those axes by default.</p>