Infinite while loop in Matlab, counter doesn't exit loop
<p>I'm writing a function of the Gauss Seidel method of solving a linear system of equations of the form Ax=b, x being the unknown we are looking for. I am having a problem with the while loop in my function, it seems that it runs infinitely. I can't seem to figure out why. </p> <p>This is my function for creating the coefficient matrix A and the column vectors x and b, all with the same number of rows of course. No problem with this one.</p> <pre><code>function [A, b, x0] = test_system(n) u = ones(n, 1); A = spdiags([u 4*u u], [-1 0 1], n, n); b = zeros(n, 1); b(1) = 3; b(2 : 2 : end-2) = -2; b(3 : 2 : end-1) = 2; b(end) = -3; x0 = ones(n, 1); </code></pre> <p>This is my function for solving the system. I have included all of it just in case, but I believe the real problem is within the while loop at the very end which runs infinitely when I execute the function. The counter doesn't break away from it either. I can't really see what its problem is. Any clues? Be gentle, I'm new at Matlab :)</p> <pre><code>function [x] = GaussSeidel(A,b,x0,tol) % implementation of the GaussSeidel iterative method % for solving a linear system of equations Ax = b %INPUTS: % A: coefficient matrix % b: column vector of constants % x0: setup for the unknown vector (using vector of ones) % tol: result must be within 'tol' of correct answer. %OUTPUTS: % x: unknown %check that A is a matrix if ~(ismatrix(A)) error('A is not a matrix'); end %check that A is square [m,n] = size(A); if m ~= n error('Matrix A is not square'); end %check that b is a column vector if ~(iscolumn(b)) error('b is not a column vector'); end %check that x0 is a column vector if ~(iscolumn(x0)) error('x0 is not a column vector'); end %check that A, b and x0 agree in size [rowA,colA] = size(A); [rowb,colb] = size(b); [rowx0,colx0] = size(x0); if ~isequal(colA,rowb)||~isequal(rowb,rowx0) error('matrix dimensions of A, b and xo do not agree'); end %check that A and b have real entries if ~isreal(A) || ~isreal(b) error('matrix A or vector b do not have real entries'); end %check that the provided tolerance is positive if tol &lt;= 0 error('tolerance must be positive'); end %check that A is strictly diagonally dominant absoluteA = abs(A); row_sum=sum(absoluteA,2); diagonal=diag(absoluteA); if ~all(2*diagonal &gt; row_sum) warning('matrix A is not strictly diagonally dominant'); end L = tril(A,-1); U = triu(A,+1); D = diag(diag(A)); x = x0; M1 = inv(D).*L; M2 = inv(D).*U; M3 = D\b; k = 0; %iterations counter disp(size(M1)); disp(size(M2)); disp(size(M3)); disp(size(x)); while (norm(A*x - b) &gt; tol) for i=1:n x(i) = - M1(i,:).*x - M2(i,:).*x + M3(i,:); end k=k+1; if(k &gt;= 10e4) error('too many iterations carried out'); end end end %end function </code></pre>
<p>I don’t have 50 reputation so I can not comment this.</p> <p>The line <code>if(k &gt;= 10e4)</code>, I think this does not make what you think it would. <code>10e4</code> is 100,000 and <code>1e4</code> is 10,000. This will be the reason why you think your counter does not work. Matlab ist still running because it’s running further than you think it will. Also I run in the same Problem knedlsepp already pointed out.</p>
<h2>Coding Discussion</h2> <p>The source of the coding error is the use of element-wise operations instead of matrix-matrix and matrix-vector operations. These operations produce zero-matrices, so no progress is made. The <code>M</code> matrices should be defined by</p> <pre><code>M1 = inv(D)*L; % Note that D\L is more efficient M2 = inv(D)*U; % Note that D\U is more efficient M3 = D\b; </code></pre> <p>and the iterator performing the update should be</p> <pre><code>x(i) = - M1(i,:)*x - M2(i,:)*x + M3(i,:); </code></pre> <p><br/></p> <h2>Method Discussion</h2> <p>I also think it is worth mentioning that the code is currently implementing the <a href="http://en.wikipedia.org/wiki/Jacobi_method" rel="nofollow noreferrer">Jacobi Method</a> since the updater has the form</p> <p><img src="https://i.stack.imgur.com/plO5D.png" alt="Jacobi update formula"></p> <p>while a <a href="http://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method" rel="nofollow noreferrer">Gauss-Seidel</a> update has the form</p> <p><img src="https://i.stack.imgur.com/B98xf.png" alt="Gauss-Seidel update formula">.</p>