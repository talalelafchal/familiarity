Normalized Image Histogram
<p>I have an RGB image <code>m</code> in MATLAB</p> <p><img src="http://i62.tinypic.com/2nqy5uv.jpg" alt="IMG"></p> <p>I normalized it using the formula </p> <pre><code>im = mean(m,3); im = (im-min(im(:))) / (max(im(:))-min(im(:))); </code></pre> <p>I read that the normalized module stretches the image pixel values to cover the entire pixel value range (0-1) but I still have some steps between 0 and 1 in the histogram of my normalized image.</p> <p><img src="https://i.stack.imgur.com/4C0y0.jpg" alt="enter image description here"></p> <p>Can anyone help me out here by explaining the reason of these grey values.</p> <p>Thank You</p>
<p>I assume you use the mean of the three components instead of the function <code>rgb2gray</code> because it has some advantages in your case. (<code>rgb2gray</code> does something similar: it uses a weighted sum). </p> <p>Subtracting the minimum and dividing by the maximum doesn't convert your image to binary. It will only scale all values to the range (0,1), which is the case in your example. This only means that all values are <em>between</em> 0 and 1, not exactly 0 or 1. If you want a binary image, i.e. only 0 and 1, you will need to use a threshold to convert the grayscale image to binary.</p> <p>A method which is often used, is to calculate a threshold using Otsu's method:</p> <pre><code>threshold = graythresh(im); % calculate threshold binaryImage = im2bw(im,threshold); % convert image to binary </code></pre> <p>If your image is saved as <code>uint8</code> then normalizing the image should convert your image to binary, as <code>uint8</code> only can handle integer numbers and any numbers between are rounded. That means you assume the optimal threshold to be at 0.5.</p>