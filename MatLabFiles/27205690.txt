Function readmtx on matlab
<p>I want to read a matrix that is on my matlab path. I was using the function readmtx but I don't know what to put on 'precision' (mtx = readmtx(fname,nrows,ncols,precision)). I was wondering if you could help me with that. Or suggest a better way to read the matrix</p>
<p>You could read a matrix from text file with <code>load</code> command. If the first line include text, that should be started with <code>%</code>. </p> <p>Note that each row of the text file should be values of a row in matrix, which are separated by a space, for Example:</p> <pre><code>%C1 C2 C3 1 2 3 4 5 6 7 8 9 </code></pre> <p>Then, if you use <code>load</code> command you can read the text file into a matrix, something like:</p> <pre><code>myMatrix = load('textFileName.txt') </code></pre> <p>Now, Let's talk about <code>readmtx</code> ;)</p> <p>About precision as described <a href="http://www.mathworks.com/help/map/ref/readmtx.html" rel="nofollow">here</a>:</p> <p>Both binary and formatted data files can be read. If the file is binary, the precision argument is a format string recognized by fread. Repetition modifiers such as '40*char' are not supported. If the file is formatted, precision is a fscanf and sscanf-style format string of the form '%nX', where n is the number of characters within which the formatted data is found, and X is the conversion character such as 'g' or 'd'. Fortran-style double-precision output such as '0.0D00' can be read using a precision string such as '%nD', where n is the number of characters per element. This is an extension to the C-style format strings accepted by sscanf. Users unfamiliar with C should note that '%d' is preferred over '%i' for formatted integers. MATLAB syntax follows C in interpreting '%i' integers with leading zeros as octal. Formatted files with line endings need to provide the number of trailing bytes per row, which can be 1 for platforms with carriage returns or linefeed (Macintosh, UNIXÂ®), or 2 for platforms with carriage returns and linefeeds (DOS).</p> <p>Check this example also:</p> <p>Write and read a binary matrix file:</p> <pre><code>fid = fopen('binmat','w'); fwrite(fid,1:100,'int16'); fclose(fid); mtx = readmtx('binmat',10,10,'int16') mtx = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 mtx = readmtx('binmat',10,10,'int16',[2 5],3:2:9) mtx = 13 15 17 19 23 25 27 29 33 35 37 39 43 45 47 49 </code></pre>