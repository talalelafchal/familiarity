How to assign key to push button on Matlab?
<p>I have a gui which works fine when i click on them but instead of clicking i want to activate them by just pressing a key (like uparrow) on keyboard.I did create a keypressfnc on first button (C3). but i don't know what to do now.Here is my gui code</p> <pre><code>function varargout = untitled(varargin) gui_Singleton = 1; gui_State = struct('gui_Name', mfilename, ... 'gui_Singleton', gui_Singleton, ... 'gui_OpeningFcn', @untitled_OpeningFcn, ... 'gui_OutputFcn', @untitled_OutputFcn, ... 'gui_LayoutFcn', [] , ... 'gui_Callback', []); if nargin &amp;&amp; ischar(varargin{1}) gui_State.gui_Callback = str2func(varargin{1}); end if nargout [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:}); else gui_mainfcn(gui_State, varargin{:}); end % End initialization code - DO NOT EDIT % --- Executes just before untitled is made visible. function untitled_OpeningFcn(hObject, eventdata, handles, varargin) handles.output = hObject; guidata(hObject, handles); function varargout = untitled_OutputFcn(hObject, eventdata, handles) % varargout cell array for returning output args (see VARARGOUT); % hObject handle to figure % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % Get default command line output from handles structure varargout{1} = handles.output; % --- Executes on button press in pushbutton1. function pushbutton1_Callback(hObject, eventdata, handles) sr = 16000; T = 4; % seconds duration t = 0:(1/sr):T; n = 20; f = ((2^(1/12))^(n-49))*440; a = linspace(0,1,numel(t)); y = exp(-a*4).*sin(2*pi*f*t); sound(y, sr); plot(t, y); % --- Executes on button press in pushbutton2. function pushbutton2_Callback(hObject, eventdata, handles) sr = 16000; T = 4; % seconds duration t = 0:(1/sr):T; n = 40; f = ((2^(1/12))^(n-49))*440; a = linspace(0,1,numel(t)); y = exp(-a*4).*sin(2*pi*f*t); sound(y, sr); plot(t, y); % --- Executes on button press in pushbutton3. function pushbutton3_Callback(hObject, eventdata, handles) % hObject handle to pushbutton3 (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % --- Executes on button press in pushbutton4. function pushbutton4_Callback(hObject, eventdata, handles) % hObject handle to pushbutton4 (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % --- Executes on button press in pushbutton5. function pushbutton5_Callback(hObject, eventdata, handles) % hObject handle to pushbutton5 (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % --- Executes on button press in pushbutton6. function pushbutton6_Callback(hObject, eventdata, handles) % hObject handle to pushbutton6 (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % --- Executes on button press in pushbutton7. function pushbutton7_Callback(hObject, eventdata, handles) % hObject handle to pushbutton7 (see GCBO) % eventdata reserved - to be defined in a future version of MATLAB % handles structure with handles and user data (see GUIDATA) % --- Executes on key press with focus on pushbutton1 and none of its controls % --- Executes on key press with focus on pushbutton1 and none of its controls. % --- Executes on key press with focus on pushbutton1 and none of its controls. function pushbutton1_KeyPressFcn(hObject, eventdata, handles) % hObject handle to pushbutton1 (see GCBO) % eventdata structure with the following fields (see UICONTROL) % Key: name of the key that was pressed, in lower case % Character: character interpretation of the key(s) that was pressed % Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed % handles structure with handles and user data (see GUIDATA) </code></pre>
<p>The <code>KeyPressFcn</code> that is called is going to be the one that belongs to the object in focus when the key is pressed. This is probably going to be the last object that was clicked on. Here you set the <code>KeyPressFcn</code> as a property of the pushbutton but this will only be called when the pushbutton is the object in focus. This includes the figure window as well. This example shows how to implement a key press event for both a button and a figure, where the <code>KeyPressFcn</code> value in both is set to the same function.</p> <pre><code>function KeyPressExample fig = figure(); set(fig, 'KeyPressFcn', @ChangeColorKeyPress, 'Tag', 'MainGUI'); button = uicontrol(fig, 'Units', 'normalized', 'Position', [.4 .4 .2 .2], ... 'String', 'Change Color', ... 'CallBack', @ChangeColorButtonPress, ... 'KeyPressFcn', @ChangeColorKeyPress); function ChangeColorButtonPress(hobj, EventData, handles) set(findobj('Tag', 'MainGUI'), 'Color', rand(3, 1)); end function ChangeColorKeyPress(hobj, EventData, handles) if strcmp(EventData.Key, 'uparrow') set(findobj('Tag', 'MainGUI'), 'Color', rand(3,1)); end end end </code></pre>
<p>You can also combine the key press and click callbacks into a single callback using a try/catch statement: </p> <pre><code>function KeyPressExample fig = figure(); set(fig, 'KeyPressFcn', @ChangeColorButtonPress,'Tag', 'MainGUI'); button = uicontrol(fig, 'Units', 'normalized', 'Position', [.4 .4 .2 .2], ... 'String', 'Change Color', ... 'CallBack', @ChangeColorButtonPress, ... 'KeyPressFcn', @ChangeColorButtonPress); function ChangeColorButtonPress(varargin) EventData=varargin{2} try if strcmp(EventData.Key, 'uparrow') set(findobj('Tag', 'MainGUI'), 'Color', rand(3,1)); end catch set(findobj('Tag', 'MainGUI'), 'Color', rand(3, 1)); end end end </code></pre>