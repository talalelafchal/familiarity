iPython vs. Matlab - Differences in Simple Multiplication
<p>I was hoping that I could get some assistance with this.</p> <p>I'm running a simple script in Matlab:</p> <pre><code>Ao=1.476E21 XN2=0.6 XO2=0.03 P=1 %atm T=2000%K Ru=82.057 %atm*cm^3/mol-K dXNO_dt=Ao*XN2*(XO2^(1/2))*exp(-67520/T)*((P/(Ru*T))^(1/2)) </code></pre> <p>which yields the correct (data confirmed) answer of: </p> <pre><code>dXNO_dt = 824.9806 </code></pre> <p>However, when I switch over to iPython and use a similar script:</p> <pre><code>from numpy import * Ao=1.476E21 XN2=0.6 XO2=0.03 P=1 #atm T=2000#K Ru=82.057 #atm*cm^3/mol-K dXNO_dt=Ao*XN2*(XO2**(1/2))*exp(-67520/T)*((P/(Ru*T))**(1/2)) print 'dXNO_dt = {0}'.format(dXNO_dt) </code></pre> <p>I get the baffling answer of:</p> <pre><code>&gt;&gt;&gt; dXNO_dt = 1517837.30697 </code></pre> <p>Does anyone know why this might be happening? I'm a huge noob when it comes to figuring out the deeper issues like this.</p> <p>This is in Python 2.7.8, IPython 2.3.1</p> <p>Thanks!</p>
<p>Your issue is integer division. In python 2, dividing an integer by an integer will give an integer result, so <code>1/2 == 0</code>. If you use <code>0.5</code> or <code>1.0/2.0</code> as your exponents then you'll get the right answer. Similarly you need to use <code>-67520.0/T</code>.</p> <p>The following gives me a result of 824.98055222082394</p> <pre><code>dXNO_dt=Ao*XN2*(XO2**(1.0/2.0))*exp(-67520.0/T)*((P/(Ru*T))**(1.0/2.0)) </code></pre>