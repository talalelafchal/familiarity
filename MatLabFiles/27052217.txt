Interpolate curve
<p>Interpolate the following data into a smooth curve in the interval ∈ [−2 4.9]. Plot the actual data and the interpolated curve on the same figure.</p> <pre><code>x| -2 -1.7 -1.4 -1.1 -0.8 -0.5 -0.2 0.1 0.4 0.7 1 1.3 y| 0.1029 0.1174 0.1316 0.1448 0.1566 0.1662 0.1733 0.1775 0.1785 0.1764 0.1711 0.1630 x| 1.6 1.9 2.2 2.5 2.8 3.1 3.4 3.7 4 4.3 4.6 4.9 y| 0.1526 0.1402 0.1266 0.1122 0.0977 0.0835 0.0702 0.0579 0.0469 0.0373 0.0291 0.0224 </code></pre> <p><strong>My current code is...but I'm having trouble doing the actual interpolated curve,would it help putting this data into an excel sheet? First time dealing with this.</strong></p> <pre><code>close all clear all clc x = [-2, -1.7, -1.4, -1.1, -0.8, -0.5, -0.2, 0.1, 0.4, 0.7, 1, 1.3, 1.6, 1.9, 2.2, 2.5, 2.8, 3.1, 3.4, 3.7, 4, 4.3, 4.6, 4.9]; y = [0.1029, 0.1174, 0.1316, 0.1448, 0.1566, 0.1662, 0.1733, 0.1775, 0.1785, 0.1764, 0.1711, 0.1630, 0.1526, 0.1402, 0.1266, 0.1122, 0.0977, 0.0835, 0.0702, 0.0579, 0.0469, 0.0373, 0.0291, 0.0224]; plot(x,y) </code></pre>
<p><a href="http://stackoverflow.com/questions/27051100/how-to-plot-a-curved-line-in-matlab-using-a-set-of-points/27051397#27051397">This post that I just recently answered</a> pretty much solves your problem. However, I'll throw you a bone and help you out. Use <a href="http://www.mathworks.com/help/matlab/ref/interp1.html" rel="nofollow noreferrer"><code>interp1</code></a> to do this interpolation for you. What you do is you specify the <code>(x,y)</code> control points, which are those points that are part of your dataset, then you specify a slew of other <code>x</code> points, which have more granularity and have values in between those values of the original <code>x</code> values that you originally specified, and you can see what the output is. </p> <p>Here are the steps you'd need to perform to do this interpolation:</p> <ol> <li>Define your <code>(x,y)</code> points (which is what you have already done).</li> <li>Define a grid of <code>x</code> points that are further granular in comparison to what you have. You would specify <code>x</code> values that are in between the original <code>x</code> values that you have. Use <a href="http://www.mathworks.com/help/matlab/ref/linspace.html" rel="nofollow noreferrer"><code>linspace</code></a> to generate a set number of points in between a minimum and maximum... which in your case is -2 and 4.9 respectively. We can hide this away by using <code>min</code> and <code>max</code> on your <code>x</code> points so that you can adapt this to any dataset you want to use.</li> <li>Use <code>interp1</code> with the grid of points in step (2) and find the interpolated <code>y</code> points.</li> <li>Plot the points.</li> </ol> <p>What I'm going to do is do the above procedure, then produce a plot where I'll draw what the original points that were given, as well as a dashed line that shows the interpolated curve. I'm also going to use spline interpolation to smooth out any irregularities. </p> <p>As such:</p> <pre><code>%// Define your points - Step #1 x = [-2 -1.7 -1.4 -1.1 -0.8 -0.5 -0.2 0.1 0.4 0.7 1 1.3 1.6 1.9 2.2 2.5 2.8 3.1 3.4 3.7 4 4.3 4.6 4.9]; y = [0.1029 0.1174 0.1316 0.1448 0.1566 0.1662 0.1733 0.1775 0.1785 0.1764 0.1711 0.1630 0.1526 0.1402 0.1266 0.1122 0.0977 0.0835 0.0702 0.0579 0.0469 0.0373 0.0291 0.0224]; %// Step #2 - Define grid of x points - Define 100 points in between min and max xval = linspace(min(x), max(x), 100); %// Step #3 - Use interp1 yval = interp1(x, y, xval, 'spline'); %// Step #4 - Plot the stuff plot(x, y, 'bo', xval, yval, 'r--'); %// Throw in a grid too grid; </code></pre> <p>This is the plot I get:</p> <p><img src="https://i.stack.imgur.com/UE0Rw.png" alt="enter image description here"></p> <p>Cool?</p>