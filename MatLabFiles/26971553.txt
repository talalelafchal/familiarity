Creating a one Column Array from Meshgrid Matlab
<p>I am working on a open source code, which should have a mesh file that is a 1D array. I create the mesh via MESHGRID in Matlab and then use FOR loop to stack the data column wise to create the file. It takes a very long time because of the FOR looping. Could anyone suggest me a better algorithm for this problem which will speed-up my process. thanks in advance</p> <pre><code>clear all; clc; close all; th = (0:0.5:360)*pi/180; r = 0:0.2:1; z = 5:.01:15; [TH,R,Z] = meshgrid(th,r,z); [X,Y,Z1] = pol2cart(TH,R,Z); L1 = length(X(:,1,1)) L2 = length(Y(1,:,1)) L3 = length(Z1(1,1,:)) T = 1; for i = 1:1:L1 for j = 1:1:L2 for k = 1:1:L3 M(T,1) = X(i,j,k) ; M(T,2) = Y(i,j,k) ; M(T,3) = Z1(i,j,k) ; T = T+1 end end end dlmwrite('hpts.in',M,'precision','%2.2f','delimiter',' ','-append'); </code></pre>
<p>Hacked into <code>pol2cart.m</code> and used a customized version of <code>meshgrid</code> to achieve your desired result with this code -</p> <pre><code>%// Inputs th = (0:0.5:360)*pi/180; r = 0:0.2:1; z = 5:.01:15; %// Start processing Mcol1 = cos(th)'*r; %//' Mcol1 = repmat(Mcol1(:).',numel(z),1); %//' Mcol2 = sin(th)'*r; %//' Mcol2 = repmat(Mcol2(:).',numel(z),1); %//' M = [Mcol1(:) Mcol2(:) repmat(z(:),numel(r)*numel(th),1)]; dlmwrite('hpts.in',M,'precision','%2.2f','delimiter',' ','-append'); </code></pre> <p>This seems to be about <strong><code>6x</code></strong> faster than for the code you would have gotten with pre-allocating <code>M</code> on my system.</p> <p>Also, you can store transpose of <code>th</code> into a variable and use it at the two places which uses those transpose values - <code>cos(th)'</code> and <code>sin(th)'</code>, so that must speed it up further.</p>
<p>Is it not just:</p> <pre><code>M = [X(:), Y(:), Z1(:)] </code></pre> <p>Although to get technically the same result, you're counting along the third dimension first where as Matlab and the <code>(:)</code> technique are column major i.e. go along dimension 1 first so you need to reorder your dimensions so use <code>permute</code> and either <code>(:)</code> or <code>reshape</code>. With <code>reshape</code> you can neaten things up by using an anonymous function:</p> <pre><code>columize = @(A)reshape(permute(A, [3,2,1]), [],1,1) M = [columize(X), columize(Y), columize(Z1)] </code></pre>