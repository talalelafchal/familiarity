Order of elements in cell array constructed by accumarray
<p>What I'm trying to do: given a 2D matrix, get the column indices of the elements in each row that satisfy some particular condition.</p> <p>For example, say my matrix is</p> <pre><code>M = [16 2 3 13; 5 11 10 8; 9 7 6 12; 4 14 15 1] </code></pre> <p>and my condition is <code>M&gt;6</code>. Then my desired output would be something like</p> <pre><code>Indices = {[1 4]'; [2 3 4]'; [1 2 4]'; [2 3]';} </code></pre> <p>After reading the answers to <a href="http://stackoverflow.com/questions/3910264/find-the-index-of-the-last-non-zero-element-in-each-row-of-a-given-matrix">this similar question</a> I came up with this partial solution using <code>find</code> and <code>accumarray</code>:</p> <pre><code>[ix, iy] = find(M&gt;6); Indices = accumarray(ix,iy,[],@(iy){iy}); </code></pre> <p>This gives very nearly the results I want -- in fact, the indices are all right, but they're not ordered the way I expected. For example, <code>Indices{2} = [2 4 3]'</code> instead of <code>[2 3 4]'</code>, and I can't understand why. There are 3 occurrences of <code>2</code> in <code>ix</code>, at indices <code>3</code>, <code>6</code>, and <code>9</code>. The corresponding values of <code>iy</code> at those indices are <code>2</code>, <code>3</code>, and <code>4</code>, in that order. What exactly is creating the observed order? Is it just arbitrary? Is there a way to force it to be what I want, other than sorting each element of <code>Indices</code> afterwards?</p>
<p>Here's one way to solve it with <strong><a href="http://in.mathworks.com/help/matlab/ref/arrayfun.html" rel="nofollow"><code>arrayfun</code></a></strong> -</p> <pre><code>idx = arrayfun(@(x) find(M(x,:)&gt;6),1:size(M,1),'Uni',0) </code></pre> <p>Display output wtih <code>celldisp(idx)</code> -</p> <pre><code>idx{1} = 1 4 idx{2} = 2 3 4 idx{3} = 1 2 4 idx{4} = 2 3 </code></pre> <hr> <p>To continue working with <code>accumarray</code>, you can wrap <code>iy</code> with <code>sort</code> to get your desired output which doesn't look too pretty maybe -</p> <pre><code>Indices = accumarray(ix,iy,[],@(iy){sort(iy)}) </code></pre> <p>Output -</p> <pre><code>&gt;&gt; celldisp(Indices) Indices{1} = 1 4 Indices{2} = 2 3 4 Indices{3} = 1 2 4 Indices{4} = 2 3 </code></pre>
<p><code>accumarray</code> is not guaranteed to preserve order of each chunk of its second input (see <a href="http://stackoverflow.com/a/17775147/2586922">here</a>, and also <a href="http://stackoverflow.com/a/17537523/2586922">here</a>). However, it does seem to preserve it when the first input is already sorted:</p> <pre><code>[iy, ix] = find(M.'&gt;6); %'// transpose and reverse outputs, to make ix sorted Indices = accumarray(ix,iy,[],@(iy){iy}); $// this line isthe same as yours </code></pre> <p>produces</p> <pre><code>Indices{1} = 1 4 Indices{2} = 2 3 4 Indices{3} = 1 2 4 Indices{4} = 2 3 </code></pre>