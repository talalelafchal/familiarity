Diagonal Matlab
<p>What is the difference between these two methods to create new matrix just with the diagonal values. The first one ran faster but there is any difference in the accuracy?</p> <pre><code>d1=diag(1./diag(A)); d2=inv(diag(diag(A))); </code></pre>
<p>There are some differences,</p> <pre><code>A = [ 0 0 ; -Inf -Inf]; d1=diag(1./diag(A)) Inf 0 0 0 d2=inv(diag(diag(A))) Inf Inf Inf Inf </code></pre>
<p>I would say that there is a difference between the methods. I would also assume that the operation that gave d1 were faster without testing it. What is happening then?</p> <pre><code>d1=diag(1./diag(A)); </code></pre> <p>First you finds the diagonal in A and temporary "store" it in a vector (<code>ans=diag(A)</code>). Then you do a elementwise division on the vector (<code>ans=1./ans</code>). The result for these operations is a vector which length is the min(n,m) where n is the number of rows in <code>A</code> and m is number of columns in <code>A</code>. Then you create a new matrix <code>d1</code> where the elements in the vector <code>1./diag(A)</code> are placed in the diagonal (<code>d1=diag(ans)</code>). The rest of the elements are 0.</p> <pre><code>d2=inv(diag(diag(A))); </code></pre> <p>First you find the diagonal elements with <code>diag(A)</code>. Then you create a diagonal matrix with <code>diag(ans)</code>. Thirdly you invert it.</p> <p>Now what would you think happen in case 2 if one diagonal element is 0? Compare the two cases.</p>