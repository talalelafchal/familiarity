MATLAB CLASSES getter and setters
<p>I come from a Java background. I am having issues with classes in Matlab particularly getters and setters. getting a message saying conflict between handle and value class I'm a little lost with what to do so any help for lack of a better word will be helpful.</p> <pre><code>classdef Person properties(Access = private) name; age; end methods % class constructor function obj = Person(age,name) obj.age = age; obj.name = name; end %getters function name = get.name(obj) end function age = get.age(obj) end %setters function value = set.name(obj,name) end function value = set.age(obj,age) end end </code></pre> <p>end</p>
<h2>Implementation</h2> <p>Since your class is currently a subclass of the default Value class, your setters need to return the modified object:</p> <pre><code>function obj = set.name(obj,name) end function obj = set.age(obj,age) end </code></pre> <p>From <a href="http://www.mathworks.com/help/matlab/matlab_oop/comparing-handle-and-value-classes.html#brfylwk-3">the documention</a>: "If you pass [a value class] to a function, the function must return the modified object." And <a href="http://www.mathworks.com/help/matlab/matlab_oop/comparing-handle-and-value-classes.html#brqera6">in particular</a>: "In value classes, methods ... that modify the object must return a modified object to copy over the existing object variable".</p> <p><br/> Handle classes (<code>classdef Person &lt; handle</code>) do not need to return the modified object (like returning <code>void</code>):</p> <pre><code>function [] = set.name(obj,name) end function [] = set.age(obj,age) end </code></pre> <h2>Value vs. Handle</h2> <p>Going a bit deeper, the difference between a Value class and a Handle class lies mostly in assignment:</p> <ul> <li>Assigning a Value class instance to a variable creates a copy of that class.</li> <li>Assigning a Handle class instance to a variable create a reference (alias) to that instance.</li> </ul> <p>The Mathworks has a <a href="http://www.mathworks.com/help/matlab/matlab_oop/comparing-handle-and-value-classes.html#brfylwk-3">good rundown</a> on this topic. To paraphrase their illustration, the behavior of a Value class is</p> <pre><code>% p is an instance of Polynomial p = Polynomial(); % p2 is also an instance of Polynomial with p's state at assignment p2 = p; </code></pre> <p>and of a Handle class is</p> <pre><code>% db is an instance of Database db = Database(); % db2 is a reference to the db instance db2 = db; </code></pre>
<p>Quick'n Dirty from the Java perspective: - "handle" classes are what your mind is set to. proper object instances with pointers to them. use them. - "value" classes are always returning a full clone of whatever object (which has been modified by what you just did, e.g. setting a name).</p> <p>the reason they have both in Matlab is that in Matlab you would expect the "value" behaviour natively. Imagine you have a matrix <code>A = [1 2; 3 4]</code>, then assign that via <code>B = A</code>. if you now set <code>B(1) = -1</code> you'd hope that <code>A(1)</code> is still 1, right? this is because matlab keeps track of "copies" and truly creates them as you modify different variables initially set to the same matrix. in OOP you'd have <code>A(1)=-1</code> now as everythings an object reference.</p> <p>furthermore, "native" matlab routines dont have a "this/self/me" variable that contains the instance reference to access from within functions. instead, the convention is that the class instance will be prepended to the function's argument list. so for a function call <code>myclass.mymethod(arg1,arg1)</code>, the declaration must be</p> <pre><code>function mymethod(this, arg1, arg2) % Note that the name you choose for "this" is arbitrary! end </code></pre> <p>mind you, this is the java-perspective (and also my favourite one), the above function call is equivalent to <code>mymethod(myclass,arg1,arg1)</code>. this is more native to matlab-style, but somehow makes it harder to see you're calling an objects method.</p> <p>now, regarding setters/getters: for <strong>handle</strong> classes, everything feels java-ish now:</p> <pre><code>classdef MyClass &lt; handle properties MyProp; end methods function set.MyProp(this, value) %Note: setMyProp is also valid! ... % do checks etc, trigger calls, this.MyProp = value; end function value = get.MyProp(this) ... % notify, update, triggers etc value = this.MyProp; end end </code></pre> <p>Of course it goes without saying that you dont need to define a getter if you just want to return the value, i.e. <code>myclassinstance.MyProp</code> will work without any just as well.</p> <p>Finally, getters/setters for value classes are something that [never encountered me/i never needed] in my 7 years of matlab oop, so my advise would be to go with handle classes and enjoy happy matlab coding :-) otherwise, the above explanation &amp; official matlab docs is doing the job for value class getter/setters.</p>