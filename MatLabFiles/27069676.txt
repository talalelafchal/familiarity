How to dynamically create an array of mxArray in a MATLAB mex file
<p>I am trying to dynamically declare an array of <code>mxArray</code> in a <code>MATLAB</code> <code>mex</code> file. </p> <pre><code>#include "mex.h" void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) { #define PRHS_NLEVELS prhs[0] double *NLevel = mxGetPr( PRHS_NLEVELS ); int nLevel = (int) NLevel [0]; mxArray *Ain = (mxArray *) mxMalloc( nLevel * sizeof(mxArray) ); } </code></pre> <p>An image will be input to this <code>mex</code> function and <code>Ain</code> will store its pyramidal images at different levels. The compilation error I get is as follows:</p> <pre><code>mymex.cpp(59) : error C2027: use of undefined type 'mxArray_tag' c:\program files\matlab\r2012b\extern\include\matrix.h(299) : see declaration of 'mxArray_tag' </code></pre>
<p>You could create a cell array of matrices, and return that from the MEX-function.</p> <p>Example:</p> <h3>test_cell_array.cpp</h3> <pre><code>#include "mex.h" void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) { plhs[0] = mxCreateCellMatrix(1, 5); for (mwIndex c=0; c&lt;5; c++) { mxArray *arr = mxCreateDoubleMatrix(3, 3, mxREAL); double *x = mxGetPr(arr); for (mwIndex i=0; i&lt;9; i++) { x[i] = c; } mxSetCell(plhs[0], c, arr); } } </code></pre> <h3>MATLAB</h3> <pre><code>&gt;&gt; c = test_cell_array() c = [3x3 double] [3x3 double] [3x3 double] [3x3 double] [3x3 double] &gt;&gt; c{3} ans = 2 2 2 2 2 2 2 2 2 </code></pre> <p>In your case, each cell will contain the image blurred and resized at different levels to create the pyramid of images, and the number of levels would be specified as function input.</p>
<p>I think you just want an array of <code>mxArray*</code>s, which is straightforward with <code>new</code> or <code>malloc</code>. You can't have an array of <code>mxArray</code>s, only pointers to them.</p> <p>The <code>mxArray</code> comes from <code>typedef struct mxArray_tag mxArray;</code>, where <code>mxArray_tag</code> is not defined, hidden in the MathWorks implementation. Thus, you can't even do something as simple as <code>mxArray x[3];</code> because it is an incomplete type. You can only deal with pointers to the object.</p> <p><strong>testMxArrayMEX.cpp</strong></p> <pre><code>#include "mex.h" void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) { int numLevels = 3; //mxArray **matLevels = (mxArray **) malloc(numLevels * sizeof(mxArray**)); mxArray **matLevels = new mxArray*[numLevels]; matLevels[0] = mxCreateDoubleMatrix(2, 2, mxREAL); matLevels[1] = mxCreateString("second"); matLevels[2] = mxCreateCellMatrix(1, 2); mxSetCell(matLevels[2], 0, mxCreateString("third")); mexPrintf("First:\n"); mexCallMATLAB(0, NULL, 1, matLevels, "disp"); mexPrintf("\nSecond:\n"); mexCallMATLAB(0, NULL, 1, &amp;matLevels[1], "disp"); mexPrintf("\nThird:\n"); mexCallMATLAB(0, NULL, 1, matLevels+2, "disp"); // free(matLevels); // with malloc delete[] matLevels; // with new } </code></pre> <p><strong>Output</strong></p> <pre><code>&gt;&gt; testMxArrayMEX First: 0 0 0 0 Second: second Third: 'third' [] </code></pre>