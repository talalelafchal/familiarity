octave control package tf
<p>Using the octave/matlab control toolbox:</p> <pre><code>octave.exe:1&gt; pkg load control </code></pre> <p>I define the same transfer function in two different ways:</p> <pre><code>octave.exe:2&gt; a = tf('1/(s + 1)') Transfer function 'a' from input 'u1' to output ... y1: 1/(s + 1) Continuous-time model. octave.exe:3&gt; b = 1 / (tf('s') + 1) Transfer function 'b' from input 'u1' to output ... 1 y1: ----- s + 1 Continuous-time model. </code></pre> <p>And then evaluate it at <code>s = j</code>:</p> <pre><code>octave.exe:4&gt; a(1) ans = 0 + 1i octave.exe:5&gt; b(1) ans = 0.50000 - 0.50000i </code></pre> <p>Why are these different!?</p>
<p>I think the way you define <code>a</code> is incorrect. I am not sure why it doesn't error out when you run the command, but it's not how you should define a transfer function. if we consider the following:</p> <pre><code>&gt;&gt; a = tf(1,[1 1]) Transfer function 'a' from input 'u1' to output ... 1 y1: ----- s + 1 Continuous-time model. &gt;&gt; a(1) ans = 0.50000 - 0.50000i &gt;&gt; b = 1/(tf('s')+1) Transfer function 'b' from input 'u1' to output ... 1 y1: ----- s + 1 Continuous-time model. &gt;&gt; b(1) ans = 0.50000 - 0.50000i &gt;&gt; c = tf('1/(s+1)') Transfer function 'c' from input 'u1' to output ... y1: 1/(s+1) Continuous-time model. &gt;&gt; c(1) ans = 0 + 1i &gt;&gt; s = tf('s') Transfer function 's' from input 'u1' to output ... y1: s Continuous-time model. &gt;&gt; d = 1/(s+1) Transfer function 'd' from input 'u1' to output ... 1 y1: ----- s + 1 Continuous-time model. &gt;&gt; d(1) ans = 0.50000 - 0.50000i </code></pre> <p>You'll notice how <code>c</code> in my example (<code>a</code> in yours) is not displayed the same as all the other transfer function, it's all on one line. Maybe it's treating the input <code>1/(s+1)</code> as a string? I really don't know.</p> <p>Anyway, the point is that all 3 other ways of defining the transfer function are correct and equivalent, and all give the same and correct result.</p>