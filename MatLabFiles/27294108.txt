Call multiple functions from cells in MATLAB
<p>I store some functions in cell, e.g. <code>f = {@sin, @cos, @(x)x+4}</code>. </p> <p>Is it possible to call all those functions at the same time (with the same input). I mean something more efficient than using a loop.</p>
<p>This might do the trick</p> <pre><code>functions = {@(arg) sin(arg),@(arg) sqrt(arg)} x = 5; cellfun(@(arg) arg(x),functions) </code></pre> <p>hope this helps.</p> <p>Adrien.</p>
<p>As constructed, the <code>*fun</code> family of functions exists for this purpose (e.g., <a href="http://www.mathworks.com/help/matlab/ref/cellfun.html" rel="nofollow"><code>cellfun</code></a> is the pertinent one here). They are other questions on the <a href="http://stackoverflow.com/questions/16143314/matlab-arrayfun-cellfun-spfun-and-structfun-vs-simple-for-loop">use</a> and <a href="http://stackoverflow.com/questions/15851718/what-is-the-fastest-way-to-perform-arithmetic-operations-on-each-element-of-a-ce">performance</a> of these functions.</p> <p>However, if you construct <code>f</code> as a function that constructs a cell array as</p> <pre><code>f = @(x) {sin(x), cos(x), x+4}; </code></pre> <p>then you can call the function more naturally: <code>f([1,2,3])</code> for example. This method also avoids the need for the (<code>'UniformOutput'</code>,<code>false</code>) option pair needed by <code>cellfun</code> for non-scalar argument.</p> <p>You can also use regular double arrays, but then you need to be wary of input shape for concatenation purposes: <code>@(x) [sin(x), cos(x), x+4]</code> vs. <code>@(x) [sin(x); cos(x); x+4]</code>.</p>
<p>I'm just posting these benchmarking results here, just to illustrate that loops not necessarily are slower than other approaches:</p> <pre><code>f = {@sin, @cos, @(x)x+4}; x = 1:100; tic for ii = 1:1000 for jj = 1:numel(f) res{jj} = f{jj}(x); end end toc tic for ii = 1:1000 res = cellfun(@(arg) arg(x),functions,'uni',0); end toc Elapsed time is 0.042201 seconds. Elapsed time is 0.179229 seconds. </code></pre> <p>Troy's answer is almost twice as fast as the loop approach:</p> <pre><code>tic for ii = 1:1000 res = f((1:100).'); end toc Elapsed time is 0.025378 seconds. </code></pre>