Image gradually erased when overlayed with lines
<p>Apart from the fact there exist special functions to plot vector fields, I have encountered a <em>strange Matlab behaviour</em>: Plotting an image (with <code>imagesc</code> or <code>imshow</code>) and overlaying it with colored lines (with <code>plot</code> or <code>line</code>) leads at some point to an erasement of the background image.</p> <pre><code>%% some data... % random image Image = rand(200,400); % 900 lines of random color color1 = rand(1,900); color2 = rand(2,900); color3 = rand(3,900); % some positions x = 31:60; y = 31:60; [X,Y] = meshgrid(x,y); %% plot process % plot Image (with 'imshow' or 'imagesc') imshow(Image); hold on; % plot the lines (with 'line' or 'plot') for i = 1:900 line([X(i), X(i)+1],[Y(i),Y(i)+2],'color',[color1(i),color2(i),color3(i)]); if i == 100 % nothings happens to background image after 100 vectors pause(); elseif i == 200 % gradually starts to change... pause(); end end % ... at the end it is completely erased </code></pre> <p><strong>Result: 100 lines</strong></p> <p><img src="https://i.stack.imgur.com/2xEQZ.png" alt="after 100 lines"></p> <p><strong>Result: 200 lines</strong></p> <p><img src="https://i.stack.imgur.com/cEx1K.png" alt="after 200 lines"></p> <p><strong>Result: 900 lines</strong></p> <p><img src="https://i.stack.imgur.com/HntqT.png" alt="after 900 lines"></p> <p><strong>Nice side fact</strong> Saving the image as PNG restores the image (but destroys the line resolution).</p>
<p>This is not properly an <em>answer</em>, as it doesn't exactly explain why this is happening, but it provides a workaround, along with some more observations of the weird behaviour.</p> <hr> <h2>Scope:</h2> <p>I tried your example and indeed: </p> <ul> <li>pre HG2 (R2013a): Same behavior than you described</li> <li>HG2 (R2015a) : No problem, everything is there.</li> </ul> <hr> <h2>Workaround:</h2> <p>After a few trial and error, I worked out that it is a specific behaviour of the <code>painter</code> renderer in pre HG2 versions.</p> <p>If you change the renderer to any other than the default <code>painter</code>, you get back your image and your superimposed lines.</p> <pre><code>set(gcf,'Renderer','zbuffer') %// OR set(gcf,'Renderer','opengl') </code></pre> <hr> <h2>Observations:</h2> <p>Note that I also tried to: </p> <ul> <li>display the lines first (no problem), then the image (and reorder using <code>uistack</code>) => same black image.</li> <li>use multiple axes => black frame</li> </ul> <p><img src="https://i.imgur.com/JTazzb7.png" alt="mult"></p> <p>And to show you how <em>persistent</em> is the glitch:</p> <ul> <li>if you delete all the lines, the image does not reappear (=black frame).</li> <li>if you delete all graphics objects, then re display the image => black frame</li> <li>if you <code>cla</code> or even <code>clf</code> then re display the image => black frame</li> </ul> <p>The only way I found to get the image displayed is to change the renderer as described above.</p> <hr> <h2>Printing/Saving</h2> <p>Initially, I thought the change of renderer was happening behind the scene when you were saving the figure, thereby allowing the final output to be fully displayed. Unfortunately, by exploring a bit more it doesn't seem to be so simple. </p> <p>I tried different version with <code>print</code> (instead of <code>saveas</code>) since it allows you to select the renderer. For each renderer I chose 2 formats, <code>PDF</code> which uses the <code>ghostscript</code> engine, and <code>PNG</code> which uses the Matlab engine:</p> <pre><code>%% print(1,'-dpng','-painters','testimageP.png') print(1,'-dpng','-zbuffer' ,'testimageZ.png') print(1,'-dpng','-opengl' ,'testimageO.png') %% print(1,'-dpdf','-painters','testimageP.pdf') print(1,'-dpdf','-zbuffer' ,'testimageZ.pdf') print(1,'-dpdf','-opengl' ,'testimageO.pdf') </code></pre> <p>Well, after results I am still unsure of what is happening. All these saved figures show the proper image and the lines on top... But: </p> <p>The 3x <code>png</code> images (<code>Matlab</code> <em>engine</em>) are <strong>exactly</strong> similar. They do not even show slight difference in saturation like you can observe when you switch the renderer manually. This made me think that Matlab chose to ignore my renderer specification. It just decided which one was the most relevant and went ahead printing 3 times the same figure. So I thought may be the <code>painter</code> renderer wasn't used and that's why the images were shown.</p> <p>Well not so fast. On the 3x <code>pdf</code> images (<code>ghostscript</code> <em>engine</em>) ... I can observe the small nuances between the 3 pictures ... so the renderer wasn't the same between them. The <code>painter</code> was used on one of them, and successfully rendered the image.</p> <hr> <p>So in conclusion, it seems the <code>painter</code> renderer is only glitchy when applied to a (pre-HG2) figure!</p>