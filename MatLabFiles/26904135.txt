Best way to make a random matrix subject to full rank
<p>I want to make a matrix <code>k x n (k rows and n columns)</code> that its rank is k. My idea is that I will check the current rank of matrix at each generation of column. If the current rank is small than number of current column <code>j</code>, I will make the column again until the rank equals current column. This is my code. However, it work very slowly (due to check rank at every step). Please help me to modify it. </p> <pre><code>function G=fullRank(k,n) %% make matrix kxn j=0; while(j&lt;n) d=randi(k,1) column = [ones(1,d) zeros(1,k-d)]; column = column(randperm(k)); G(:,j)=column'; %% check full rank- Modify here if((j&gt;=2)&amp;(rank(full(G))&lt;j)&amp;&amp;(j&lt;=k)) %% Set current column of G to zeros column =zeros(1,k); G(:,j) = column'; else j=j+1; end end </code></pre>
<p>The probability of your matrix not being full-rank depends on how you choose the random values for its entries, but I guess it is low. In that case, you can save time checking only at the end, and generating the full matrix again if needed:</p> <pre><code>maxrank = min(k,n); %// precompute to save a little time G = []; %// this is just to enter the while loop at least once while rank(G)&lt;maxrank G = randi(k,k,n); %// replace by your procedure to generate G end </code></pre>