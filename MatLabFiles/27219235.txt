MTIMES is not fully supported for integer classes. At least one input must be scalar
<p>I'm trying to implement a 1 dimensional DFT without using Matlab built-in functions such as fft(). This is my code</p> <pre><code>function [Xk] = dft1(xn) N=length(xn); n = 0:1:N-1; % row vector for n k = 0:1:N-1; % row vecor for k WN = exp(-1j*2*pi/N); % Twiddle factor (w) nk = n'*k; % creates a N by N matrix of nk values WNnk = WN .^ nk; % DFT matrix Xk = (WNnk*xn ); </code></pre> <p>when i run the code after using the following commands:</p> <pre><code>I = imread('sample.jpg') R = dft1(I) </code></pre> <p>I get this particular error: <strong>Error using * MTIMES is not fully supported for integer classes. At least one input must be scalar. To compute elementwise TIMES, use TIMES (.*) instead.</strong></p> <p>Can someone please help me to figure out how to solve this problem</p> <p>Note: I am still in the very beginning level of learning Matlab thank you very much</p>
<p>You just need to <strong>cast</strong> the data to <code>double</code>, then run your code again. Basically what the error is saying is that you are trying to mix classes of data together when applying a matrix multiplication between two variable. Specifically, the numerical vectors and matrices you define in <code>dft1</code> are all of a <code>double</code> type, yet your image is probably of type <code>uint8</code> when you read this in through <code>imread</code>. This is why you're getting that integer error because <code>uint8</code> is an integer class and you are trying to perform matrix multiplication with this data type with those of a <code>double</code> data type. Bear in mind that you can mix data types, so long as one number is a single number / scalar. This is also what the error is alluding to. Matrix multiplication of varaibles that are not floating point (<code>double</code>, <code>single</code>) is not supported in MATLAB so you need to make sure that your image data and your DFT matrices are the same type before applying your algorithm.</p> <p>As such, simply do:</p> <pre><code>I = imread('sample.jpg'); R = dft1(double(I)); </code></pre> <hr> <h1>Minor Note</h1> <p>This code is quite clever, and it (by default) applies the 1D DFT to all columns of your image. The output will be a matrix of the same size as <code>I</code> where each column is the 1D DFT result of each column from <code>I</code>.</p> <p>This is something to think about, but should you want to apply this to all rows of your image, you would simply transpose <code>I</code> before it goes into <code>dft1</code> so that the rows become columns and you can operate on these new "columns". Once you're done, you simply have to transpose the result back so that you'll get your output from <code>dft1</code> shaped such that the results are applied on a per row basis. Therefore:</p> <pre><code>I = imread('sample.jpg'); R = dft1(double(I.')).'; </code></pre> <hr> <p>Hope this helps! Good luck!</p>