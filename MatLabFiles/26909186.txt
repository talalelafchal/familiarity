C++ multidimensional arrays possibilities
<p>I would like to translate some existing Matlab code that quite naturally uses a lot of multidimensional arrays and I wonder what are the possible options. I want the containers to have copy constructors, default constructors, if possible clear error messages at compilation, access via <code>A[i][j]</code> and in general not to be troublesome. Preferably, they should use the <code>std::move</code> operation for speed.</p> <p>As far as I can see the options boils down to:</p> <ul> <li><p><code>std::vector</code> iterated. It sure works, but it seems stupid to write <code>std::vector&lt;std::vector&lt;std::vector&lt;double&gt; &gt; &gt;</code>for a 3D array. I am also concerned with the overhead in speed and memory.</p></li> <li><p>The <a href="http://www.boost.org/doc/libs/1_57_0/libs/multi_array/doc/" rel="nofollow">boost::multiarray</a> and <a href="http://blitz.sourceforge.net/" rel="nofollow">blitz::Array</a> offer most of the functionality but fails at the copy constructor (see <a href="http://stackoverflow.com/questions/1237723/how-to-assign-copy-a-boostmulti-array">stackoverflow</a>) at runtime. It is unclear to me if there are valid reasons for that.</p></li> <li><p>The <a href="http://eigen.tuxfamily.org/" rel="nofollow">Eigen</a> library seems to be very fast but it does not allow copy at all, and has no default constructor, which means that another container has to be used.</p></li> <li><p>The <code>std::array</code> has the disadvantage that the size has to be known when the object is created, so there is no default constructors.</p></li> </ul> <p>Is there a simpler multidimensional container satisfying all the requests but more frugal than iterated <code>std::vector</code>?</p>
<p>You have missed another option:</p> <ul> <li>std::valarray</li> </ul> <p>Depending on what your requirements are it could be useful. <a href="http://www.cplusplus.com/reference/valarray/" rel="nofollow">http://www.cplusplus.com/reference/valarray/</a></p>
<p>I am not sure this can answer all your needs but I myself had to handle multi-dimensional arrays for creating meshes/grid and wanted to create my own class for that.<br> My class let's call it <em>MultiArray</em> uses a a one-dimension vector as container.</p> <p>For instance, writing <em>MultiArray&lt;4, float, 10, 15, 10, 18> A()</em> would create a multi array A[10][15][10][18] in a vector of size 10*15*10*18.</p> <p>I can access to elements by single index <em>A(i)</em> or by coordinates A[i][j][k][l] by calling <em>A({i,j,k,l})</em>. For performance purpose I have precomputed in the constructor the product of the dimensions in order to compute fastly coordinates->index or index->coordinates.</p> <p>The code is generic for N dimensions. I can detail some parts if you want.</p>
<p>There is good linear algebra package called Armadillo</p> <p><a href="http://arma.sourceforge.net/" rel="nofollow">http://arma.sourceforge.net/</a></p> <p>used it with R, happy user</p>