Efficient allocation of cell array in matlab
<p>I have some which converts a cell array of strings into a cell array of characters.</p> <p>Note. For a number of reasons, both the input (C) and the output (C_itemised) must be cell arrays.</p> <p>The cell array of strings (C) is as follows:</p> <pre><code>&gt;&gt; C(1:10) ans = 't1416933446' '' 't1416933446' '' 't1416933446' '' 't1416933446' '' 't1416933446' '' </code></pre> <p>I have only shown a portion of the array here. In reality it is ~28,000 rows in length.</p> <p>I have some code which does this, although it is very inefficient. The cellstr function takes up 72% of the code's time, as it is currently called thousands of times. The code is as follows:</p> <pre><code>C_itemised=cell(length(C),500); for i=3:length(C) temp=char(C{i}); for j=1:length(temp) C(i-2,j)=cellstr(temp(j)); end end </code></pre> <p>I have a feeling that some minor modifications could take out the inner loop, thus cutting down the overall running time substantially. I have tried a number of ways to do this, but I think I keep getting confused about whether to use {} or (), and haven't been able to find anything online that can help me. Can anyone see a way to make the code more efficient?</p> <p>Please also note that this function is used in conjunction with other functions, and does work, although it is running slower than would be ideal. Therefore, I do not wish to change the format of <code>C_itemised</code>.</p> <p>EDIT: (A sample of) the output of my current function is:</p> <pre><code>C_itemised(1,1:12) ans = Columns 1 through 12 't' '1' '4' '1' '6' '9' '3' '3' '4' '4' '6' [] </code></pre>
<p>One thing I can suggest is to use the undocumented function <a href="http://undocumentedmatlab.com/blog/sprintfc-undocumented-helper-function/#sprintfc" rel="nofollow"><code>sprintfc</code></a>. This function is hidden from normal use in MATLAB, but it is used internally with a variety of other functions. Mainly, if you tried doing <code>help sprintfc</code>, it'll say that there's no function found! It's cool to sniff around the source sometimes!</p> <p>How <code>sprintfc</code> works is that you provide it a formatting string, much like <code>printf</code>, and the data you want printed. It will take each individual element in the data and place them into individual cell arrays. As an example, supposing I had a string <code>D = 'abcdefg';</code>, if we did:</p> <pre><code>out = sprintfc('%c', D); </code></pre> <p>We get:</p> <pre><code>&gt;&gt; celldisp(out) out{1} = a out{2} = b out{3} = c out{4} = d out{5} = e out{6} = f out{7} = g </code></pre> <p>As such, it takes each element in your string and places them as individual characters serving as individual elements in a new cell array. The <code>%c</code> formatting string means that we want to print a single character per element. Check out the link to Undocumented MATLAB that I posted above if you want to learn more!</p> <hr> <p>Therefore, try simplifying your loop to this:</p> <pre><code>C_itemised=cell(length(C)); for i=1:length(C) C_itemised{i} = sprintfc('%c', C{i}); end </code></pre> <p><code>C_itemised</code> will be a cell array, where each element <code>C_itemised{i}</code> is another cell array, with each element in this cell array being a single character that is composed of the string <code>C{i}</code>.</p> <hr> <h1>Minor Note</h1> <p>You said you were confused about <code>{}</code> and <code>()</code> in MATLAB for cells. <code>{}</code> is used to access individual elements inside the cell. So doing <code>C{1}</code> for example will grab whatever is stored in the first element of the cell array. <code>()</code> is used to <strong>slice</strong> and index into the cells. For example, if you wanted to make another cell array that is a subset of the current one, you would do something like <code>C(1:3)</code>. This will create a three element cell array which is composed of the first three cells in <code>C</code>.</p>