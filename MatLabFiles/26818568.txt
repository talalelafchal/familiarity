What's the difference between histeq and adapthisteq?
<p>Except that the algorithms they adjust are different, I want to know their specific effects on the images, and their specific effects on the histograms of the images.</p>
<p>I came here in search for answer but I didn't find one so I found out myself. Even though the OP didn't ask, I'm including <code>imadjust</code> in the answer because I think it is related too.</p> <h1>Summary</h1> <p>I think <a href="http://www.mathworks.com/examples/image/2082-contrast-enhancement-techniques#3" rel="nofollow noreferrer">this article</a> sumamrises the difference well:</p> <blockquote> <ul> <li><p><strong>imadjust</strong> increases the contrast of the image by mapping the values of the input intensity image to new values such that, by default, 1% of the data is saturated at low and high intensities of the input data.</p></li> <li><p><strong>histeq</strong> performs histogram equalization. It enhances the contrast of images by transforming the values in an intensity image so that the histogram of the output image approximately matches a specified histogram (uniform distribution by default).</p></li> <li><p><strong>adapthisteq</strong> performs contrast-limited adaptive histogram equalization. Unlike histeq, it operates on small data regions (tiles) rather than the entire image. Each tile's contrast is enhanced so that the histogram of each output region approximately matches the specified histogram (uniform distribution by default). The contrast enhancement can be limited in order to avoid amplifying the noise which might be present in the image.</p></li> </ul> </blockquote> <p>I've done experiments on 2 images in order to understand the functions and their effects on the image histograms. </p> <p>This is the MATLAB code that I used for the experiments</p> <p><strong>Main script</strong></p> <pre><code>tire = imread('tire.tif'); pout = imread('pout.tif'); drawplots(tire); drawplots(pout); </code></pre> <p><strong>Drawplots.m</strong></p> <pre><code>function drawplots(img) % tire = rgb2gray(tire); imgj = imadjust(img); imghq = histeq(img); imgdp = adapthisteq(img); figure; subplot(1, 2, 1 ); imshow(img); subplot(1, 2, 2 ); imhist(img(:)); title('original'); figure; subplot(1, 2, 1 ); imshow(imgj); subplot(1, 2, 2 ); imhist(imgj(:)); title('imadjust'); figure; subplot(1, 2, 1 ); imshow(imghq); subplot(1, 2, 2 ); imhist(imghq(:)); title('histogram equalisation'); figure; subplot(1, 2, 1 ); imshow(imgdp); subplot(1, 2, 2 ); imhist(imgdp(:)); title('adaptive histogram equalisation'); </code></pre> <h1>imadjust</h1> <p>imadjust just "Stretches" the highest and lowest <code>x%</code> of an image in order to have the intensity range of the image fill the entire available range (normally 0-255). I've done experiments on 2 of Matlab's default image </p> <p><a href="https://i.stack.imgur.com/ansW5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ansW5.png" alt="pout original image"></a></p> <p><a href="https://i.stack.imgur.com/MQnTc.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/MQnTc.png" alt="enter image description here"></a></p> <p>As you can see the image intenseties are basically stretched to fill the entire range. Visually we observe that the darkest pixels turn into black while the brightest pixels turn into white.</p> <p><a href="https://i.stack.imgur.com/vYeDg.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/vYeDg.png" alt="Tires original image"></a></p> <p><a href="https://i.stack.imgur.com/k1R04.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/k1R04.png" alt="Tires image after &lt;code&gt;imadjust&lt;/code&gt;"></a></p> <p>In this example there is no observable effect on the image after the <code>imadjust</code> is applied. This is because the intensities already filled the intensity range!</p> <h1>histeq</h1> <p>So <code>histeq</code> <a href="https://www.youtube.com/watch?v=0wpg3RXdOOQ" rel="nofollow noreferrer">modifies the histogram of the image</a> . By default, MATLAB transforms the probability distribution to a uniform distribution, which means all the intensity ranges have equivalent probabilities</p> <p><a href="https://i.stack.imgur.com/ansW5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ansW5.png" alt="pout original image"></a></p> <p><a href="https://i.stack.imgur.com/0j1WG.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/0j1WG.png" alt="pout histeq image"></a></p> <p>As you can see the histogram is modified to have the counts of all pixels close to each other (uniform distribution). Also notice how visually we can see the contrast of the image is improved (notice how the girl "stands out" more in the histogram equalized image) -- this can be useful in some image processing applications such as <code>foreground detection</code>.</p> <p><a href="https://i.stack.imgur.com/vYeDg.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/vYeDg.png" alt="Tires original image"></a></p> <p><a href="https://i.stack.imgur.com/84hdK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/84hdK.png" alt="Tires histeq image"></a></p> <p>The same case as above, this histogram turns into a uniformly distributed histogram. Notice thought hat histogram equalisation leaves some pixel intensities that are <code>too bright</code>. Keep that in mind while reviewing the <code>adaptive histogram equalization</code> effects bellow.</p> <h1>adapthisteq</h1> <p>Same experiments shown bellow:</p> <p><a href="https://i.stack.imgur.com/ansW5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ansW5.png" alt="pout original image"></a></p> <p><a href="https://i.stack.imgur.com/ACbZz.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ACbZz.png" alt="pout adapthisteq image"></a></p> <p><a href="https://i.stack.imgur.com/vYeDg.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/vYeDg.png" alt="Tires original image"></a></p> <p><a href="https://i.stack.imgur.com/Lbg6O.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Lbg6O.png" alt="Tires adapthisteq image"></a></p> <p>Notice how the histograms are not affected much by the adaptive histogram equalisation. This is because the adaptive function operates on smaller <em>local</em> regions of the image which makes it maintain roughly the same histogram shape. Even though it transforms local histograms to the local probability, it does not modify the global histogram much. In addition, it does not cause some of the intensities to be "extra bright" like histogram equalisation. While on a global level it does not improve the contrast of large objects much, it does indeed make the more subtle (smaller) features in the image more pronounced. For example, notice the small lines (ridges) around the tyre metal plate. Compare those to the ridges in <code>histeq</code>. This makes it more suitable for foreground detection of subtle features. The caveat though, is that it also enhances noise, especially if the "tiles" of the adaptive histogram are very small</p> <hr> <h1>Which one to use ?</h1> <p>Intuitively, I would imagine that <code>imadjust</code> would be used to be able to improve the contrast of the image for visual purposes. <code>imhist</code> seems to be less sensitive to noise but does not improve the contrast of subtle changes by much. On the other hand, <code>adaptimhist</code> is more sensitive to noise but is capable of enhancing subtle changes in the region for image processing purposes.</p>