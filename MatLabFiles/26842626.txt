Set matrix field to Matlab struct
<p>I am interfacing Matlab code with C++ code integrating <code>engine.h</code>.</p> <p>I create a struct with several scalar and matrix fields. I create first the scalar fields using command line syntax, i wrote the helper method</p> <pre><code>void matlabSetStruct(Engine * ep, const std::string structure, const std::string field, T value) { ostringstream ss; ss &lt;&lt; value; std::string setStruct = structure + "." + field + " = " + ss.str() + ";"; matlabExecute(ep, setStruct); } </code></pre> <p>now, I would like to add matrix fields to the same struct. I can successfully create new matrix variables with name <code>MyStruct.Field</code> but they are not recognized as fields of the existing struct <code>MyStruct</code>, but as new variables. I am using </p> <p><code>int ret = engPutVariable(ep, array_name.c_str(), array);</code></p> <p>If I <code>whos</code>, I get</p> <pre><code> MyStruct 1x1 7176 struct MyStruct.CT_F1 1x1795 14360 double MyStruct.CT_F2 1x1795 14360 double </code></pre> <p>--> matrix fields are independent variables</p> <p>I found <code>mxSetField</code>, however this is for adding a field to a struct created with <code>mxCreateStructMatrix</code> and this method is for creating Matlab equivalent of a matrix of struct in C, not quite what I want to achieve.</p>
<p>One option is to create a temp variable, and then to assign its value to a field of the struct:</p> <pre><code>// Create temp variable mxArray* array = convertVectorToMxArray(mat, nb_rows, nb_cols); const std::string temp_name = array_name + "_temp"; int ret = engPutVariable(ep, temp_name.c_str(), array); // Set variable to struct field const std::string cmd = std::string(array_name + " = " + temp_name + "; "); matlabExecute(ep, cmd); // Delete array mxDestroyArray(array); </code></pre>