Cross-Correlation of two signals
<p>I want to find the correlation between two signals x1 and x2.</p> <pre><code>x1 = [1 1 1 1 1] x2 = [1 1 1 1 1] r1 = xcorr(x1,x2) //function in matlab to find cross correlation of x1 and x2 </code></pre> <p>x1 and x2 both look like this <img src="https://i.imgur.com/goN6ZZZ.jpg" alt="x1 or x2"></p> <p>and their cross correlation look like this <img src="https://i.imgur.com/qvBEVnD.jpg" alt="r1"></p> <p>I understand that correlation measures the degree of similarity between two signals, giving highest value to the point which corresponds to maximum similarity (the two signals are shifted relative to each other to measure similarity at different points right?). So in that case, the cross correlation should give a high value at all points but this is not so. The maximum value is at 5th position. Why is that? Can someone explain this to me?</p>
<p>You seem to have a slight misunderstanding of how cross-correlation works. Cross-correlation takes one signal, and compares it with <strong>shifted</strong> versions of another signal. If you recall, the (unnormalized) cross-correlation of two signals is defined as:</p> <p><img src="http://www-rohan.sdsu.edu/~jiracek/DAGSAW/images/eq4_6_7.gif" alt=""></p> <p><code>s</code> and <code>h</code> are two signals. Therefore, we shift versions of the second signal <code>h</code> and take element by element products and sum them all together. The horizontal axis of the cross-correlation plot denote <strong>shifts</strong>, while the vertical axis denotes the output of the cross-correlation at each shift. Let's compute the cross-correlation by hand for the signal so we can better understand the output that MATLAB is giving us.</p> <p>To compute the outputs, both signals need to be zero-padded in order to accommodate for the first point when both signals start to overlap. Specifically, we need to zero-pad so that we have <code>N2-1</code> zeroes to the left of <code>s</code> and <code>N2-1</code> zeroes to the right of <code>s</code> in order to facilitate our computation of the cross correlation. <code>N2</code> in this case is the length of <code>h</code>. For each time you calculate the cross correlation given a shift of the signal <code>h</code>, you would create a signal of all zero that is the same size as the zero-padded version of <code>s</code>, then place the original signal <code>h</code> within this larger signal. You would use this new signal to compare with the zero-padded version of <code>s</code>.</p> <p>Actually, a property of cross-correlation is that it's commutative. If you had one signal that was longer, and a signal that was shorter, it would be easier for you to leave the long signal stationary, while you shifted the shorter one. Bear in mind that you'll certainly get the same results no matter which one you choose the shift, but you should always choose the easier path!</p> <p>Back to where we were, this is what the first value of the cross correlation looks like (<code>shift = 1</code>).</p> <pre><code>s = [0 0 0 0 1 1 1 1 1 0 0 0 0] h = [1 1 1 1 1 0 0 0 0 0 0 0 0] </code></pre> <p>The second signal slides from left to right, and we start where the right end of <code>h</code> begins to overlap the first signal, which is <code>s</code>. We do a point-by-point multiplication between <code>s</code> and <code>h</code>, and we sum up the elements. In this case, we get:</p> <pre><code>s ** h = (0)(1) + (0)(1) + (0)(1) + (0)(1) + (1)(1) + (0)(1) + (0)(1) + (0)(1) + (0)(1) = 1 </code></pre> <p>The <code>**</code> in this case is (my version of) the cross-correlation operator. Let's look at <code>shift = 2</code>:</p> <pre><code>s = [0 0 0 0 1 1 1 1 1 0 0 0 0] h = [0 1 1 1 1 1 0 0 0 0 0 0 0] </code></pre> <p>Remember, we are shifting towards the right by 1 more and <code>s</code> stays the same. Doing the same calculations as above, we should get:</p> <pre><code>s ** h = (0)(1) + (0)(1) + (0)(1) + (0)(1) + (1)(1) + (1)(1) + (0)(1) + (0)(1) + (0)(1) = 2 </code></pre> <p>If you repeat this for the other shifts, you'll see that the values keep increasing by 1, up until we have total overlap, which is the fifth shift (<code>shift = 5</code>). In this case, we get:</p> <pre><code>s = [0 0 0 0 1 1 1 1 1 0 0 0 0] h = [0 0 0 0 1 1 1 1 1 0 0 0 0] </code></pre> <p>When you compute the cross-correlation, we get 5. Now, when we compute the sixth shift (<code>shift = 6</code>), we move to the right by 1, and that's when the cross-correlation starts to drop. Specifically:</p> <pre><code>s = [0 0 0 0 1 1 1 1 1 0 0 0 0] h = [0 0 0 0 0 1 1 1 1 1 0 0 0] </code></pre> <p>If you go ahead and compute the cross-correlation, you'll see that the result is 4. You keep shifting to the right, and you'll see that the values keep decreasing by 1 per shift we take. You get to the final point where there is only one point where both <code>s</code> and <code>h</code> overlap, which is here:</p> <pre><code>s = [0 0 0 0 1 1 1 1 1 0 0 0 0] h = [0 0 0 0 0 0 0 0 1 1 1 1 1] </code></pre> <p>By computing the cross-correlation, we only get the value of 1. You'll also see that this is at <code>shift = 9</code>. Therefore, this explains your graph where the cross-correlation starts to increase, because there is an increasing amount of overlap. It then reaches the maximum at <code>shift = 5</code> because there is total overlap of the two signals. The cross-correlation then starts to decrease because the amount of overlap is also starting to decrease.</p> <p>You'll also notice that the total number of shifts that we need to compute is <code>N1 + N2 - 1</code>, and this is a property of cross correlation. <code>N1</code> and <code>N2</code> are the lengths of <code>s</code> and <code>h</code> respectively. As such, given that <code>N1 = N2 = 5</code>, we see that the total number of shifts is <code>N1 + N2 - 1 = 9</code>, which also corresponds to the last shift we computed above.</p> <hr> <p>Hope this helps!</p>