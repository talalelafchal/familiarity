find a value or the most similar value to an item in an array
<p>I am trying to find a value or the most similar value to an item in an array. As example if the Item is 3 and the array is [1,2,5,6,9] so the most similar value is 2 as it has the least difference. I already did it but I feel that there is a more efficient way to do it as sometimes it gives the values wrong .. any ideas? </p> <p>My code:</p> <pre><code>value = 3; array = [1 2 5 6 9]; cur = array - value; theneededvalue = min(cur); %error as it gets the -ve value and I need the smallest positive value </code></pre>
<p>MrAzzamans answer is perfectly fine. Just to offer an alternative: what you are doing is interpolating to the nearest value, hence you can use the appropriate function for this <code>interp1()</code> with specifying the interpolation method <code>'nearest'</code>.</p> <p>This will probably not be faster than the other solution, but it could be more readable for some people as the word 'nearest' is used, hence we know that something is mapped to a nearest value.</p> <p>This method requires that your <code>array</code> is sorted.</p> <pre><code>value = 3; array = [1 2 5 6 9]; array = sort(array); %// only needed if array is not sorted already idx = interp1(array, 1:length(array), value, 'nearest'); %// interpolate to nearest index array(idx) </code></pre>
<p>You're close. To avoid the problem with the negative values, you can use <code>abs</code> to take the absolute value. You can then get the closest value using the second output of min:</p> <pre><code>value=3; array=[1,2,5,6,9]; cur = abs(array-value); % df is the minimum distance, ind is the index of the minimum distance [df,ind] = min(cur); theneededvalue = array(ind); </code></pre>