fftshift before calculating fourier transform: Matlab
<p>I am looking at some FFT code in a matlab project and the FFT and inverse FFT is computed this way:</p> <pre><code>% Here image is a 2D image. image_fft = fftshift(image,1); image_fft = fftshift(image_fft,2); image_fft = fft(image_fft,[],1); image_fft = fft(image_fft,[],2); image_fft = fftshift(image_fft,1); image_fft = fftshift(image_fft,2); % Some processing and then same sequence of fftshift, ifft and fftshift to move to % time domain </code></pre> <p>I tried to find some information online but am having trouble wondering why the fftshift needs to be done before computing the FFT.</p> <p>Another question I have is whether this is something really Matlab specific. For example, I am planning to port this code to C++ and use KISS FFT. Do I need to be vary of this? </p>
<p>For images, it's better to use <code>fft2</code>. It's matlab's convention to arrange 2D ffts with the DC in the corners. Presumably because of the row/array conventions. <code>fftshift</code> allows for a more intuitive display of the FFT with the DC in the center.</p> <p>I don't fully understand what the piece of code you copied is about, <a href="http://stackoverflow.com/a/22637290/2777181">here</a> is an example of fft and inverse fft of an image using matlab.</p> <p>And a more detailed tutorial <a href="http://matlabgeeks.com/tips-tutorials/how-to-do-a-2-d-fourier-transform-in-matlab/" rel="nofollow">here</a>.</p>
<p>The reason why people like to swap prior to the DFT is because it makes the center pixel of the image the one with zero-phase shift. It often makes algorithms that depend on phase easier to think about and implement. It is not matlab specific and if you want to port an exact version of the code to another language, you'll need to perform the quadswap beforehand too.</p> <p>EDIT:</p> <p>Let me give an example that I hope will clear things up. Let's say that our image is the sum of a bunch of sinc functions with varying locations throughout the image. In the frequency domain, each of these sinc functions is a rect function with the same amplitude but with a different linear phase component that determines the location of the sinc in the image domain. By swapping the image prior to taking the DFT, we make the linear phase component of the frequency domain representation of the center pixel be zero. Moreover, the linear phase components of the other sinc functions will now be a function of their distance from the center pixel. If we didn't swap the image beforehand, then the linear phase components of the rect functions would be a function of their distance from the pixel in the top-left of the image. This would be non-intutive and would involve the same kind of phase wrapping considerations that one sees with equating the frequencies in the range (pi,2pi) rad/sample with more the intuitive (-pi,0) rad/sample.</p>