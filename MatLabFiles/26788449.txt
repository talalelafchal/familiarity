Best Practices with Initialization or Pre-allocation - MATLAB
<p>My question doesn't depend expressly on one snippet of code, but is more conceptual.</p> <p>Unlike some programming languages, MATLAB doesn't require variables to be initialized expressly before they're used. For example, this is perfectly valid to have halfway through a script file to define 'myVector':</p> <pre><code>myVector = vectorA .* vectorB </code></pre> <p>My question is: Is it faster to initialize variables (such as 'myVector' above) to zero and then assign values to them, or to keep initializing things throughout the program?</p> <p>Here's a direct comparison of what I'm talking about:</p> <p>Initializing throughout:</p> <pre><code>varA = 8; varB = 2; varC = varA - varB; varD = varC * varB; </code></pre> <p>Initializing at start:</p> <pre><code>varA = 8; varB = 2; varC = 0; varD = 0; varC = varA - varB; varD = varC * varB; </code></pre> <p>On one hand, it seems a bit of a waste to have these extra lines of code for no reason. On the other hand, though, it makes a little bit of sense that it would be faster to allocate all the memory for a program at once instead of spread out over the runtime.</p> <p>Does anyone have a little insight?</p>
<p>Copy and paste your <code>Initializing at start:</code> code into MATLAB Editor Window and you would get this warning that looks like this -</p> <p><img src="https://i.stack.imgur.com/0Mkz9.png" alt="enter image description here"></p> <p>And if you go into the <code>Details</code>, you would read this -</p> <pre><code>Explanation The code does not appear to use the assignment to the indicated variable. This situation occurs when any of the following are true: Another assignment overwrites the value of the variable before an operation uses it. The specified argument value contains a typographical error, causing it to appear unused. The code does not use all values returned by a function call... </code></pre> <p>In our case, the reason for this warning is <code>The code does not use all values</code>. So, this clarifies that initialization/pre-allocation won't help for that case.</p> <hr> <h2>When should we pre-allocate?</h2> <p>From my experience, pre-allocation helps when you need to later on index into part of it.</p> <p>Thus, if you need to index into a portion of <code>varC</code> to store the results, pre-allocation would help. Hence, this would make more sense -</p> <pre><code>varC = zeros(...) varD = zeros(...) varC(k,:) = varA - varB; varD(k,:) = varC * varB; </code></pre> <p>Again, while indexing if you are going beyond the size of <code>varC</code>, MATLAB would spend time trying to allocate more memory space for it, so that would slow things a bit. So, pre-allocate output variables to the <strong><code>maximum size</code></strong> which you think would be used for storing results. But, if you don't know the size of results, you are in a catch there and have to append results into the output variable(s) and that would slow down things for sure.</p>
<p>Alright! I've done some tests, and here are the results.</p> <p>This is the code I used for the "throughout" variable assignments:</p> <pre><code>tic; a = 1; b = 2; c = 3; d = 4; e = a - b; f = e + c; g = f - a; h = g * c; i = h - g; j = 9 * i; k = [j i h]; l = any(k); b2(numel(b2) + 1) = toc </code></pre> <p>Here's the code for the "At Start" variable assignments:</p> <pre><code>tic; a = 1; b = 2; c = 3; d = 4; e = 0; f = 0; g = 0; h = 0; i = 0; j = 0; k = 0; l = 0; e = a - b; f = e + c; g = f - a; h = g * c; i = h - g; j = 9 * i; k = [j i h]; l = any(k); b1(numel(b1) + 1) = toc </code></pre> <p>I saved the time in the vectors 'b1' and 'b2'. Each was run with only MATLAB and Chrome open, and was the only script file open inside MATLAB. Each was run 201 times. Because the first time a program is run it compiles, I disregarded the first time value for both (I'm not interested in compile time).</p> <p>To find the average, I used</p> <pre><code>mean(b1(2:201)) </code></pre> <p>and</p> <pre><code>mean(b2(2:201)) </code></pre> <p>The results:</p> <p>"Throughout": 1.634311562062418e-05 seconds (0.000016343)</p> <p>"At Start": 2.832598989758290e-05 seconds (0.000028326)</p> <p>Interestingly (or perhaps not, who knows) defining variables only when needed, spread throughout the program was almost twice as fast.</p> <p>I don't know whether this is because of the way MATLAB allocates memory (maybe it just grabs a huge chunk and doesn't need to keep allocating more every time you define a variable?) or if the allocation speed is just so fast that it's eclipsed by the extra lines of code.</p> <p>NOTE: As Divakar points out, mileage may vary when using arrays. My testing should hold true for when the size of variables doesn't change, however.</p> <p><strong>tl;dr Setting variables to zero only to change it later is slow</strong></p>