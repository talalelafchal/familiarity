Array as index in Python
<p>I am trying to use an array (<code>mask</code>) which has binary values to modify another array (<code>data</code>), in order to keep only the values where <code>mask</code> is equal to 1</p> <p>This is my MATLAB example code:</p> <pre><code>mask = [0 0 0 1 1 0 0]; data = [1 2 3 4 5 6 7]; data(mask == 0) = [] </code></pre> <p>My result is then:</p> <pre><code>data = [4 5] </code></pre> <p>What is the equivalent operation to accomplish this in Python?</p>
<p>This is what I got. However, if you want cleaner code then you could wait for some bigwigs to answer:</p> <pre><code>mask = [0,0,0,1,1,0,0] data = [1,2,3,4,5,6,7] for index, one in enumerate(mask): if one == 1: print data[index], print </code></pre> <p><strong>Output :</strong> <code>4,5</code></p>
<p>You can look at <a href="http://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays" rel="nofollow">Boolean index arrays</a> in <code>numpy</code> which do exactly what you describe.</p> <p>For example, your code in <code>numpy</code> flavor looks like:</p> <pre><code>In [38]: import numpy as np In [39]: mask = np.array([False, False, False, True, True, False, False]) In [40]: data = np.array([1, 2, 3, 4, 5, 6, 7]) In [41]: data[mask] Out[41]: array([4, 5]) </code></pre> <p>In general, if you are looking to create a MATLAB like environment in Python, you should try to use <code>numpy</code>, <code>pandas</code>, <code>ipython</code> and <code>matplotlib</code> together. These are all excellent libraries that replicate the MATLAB ecosystem and in some cases give you even more powerful tools. </p>
<p>If you want this purely in Python, you could use <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow"><code>filter</code></a> to filter out those entries in your <code>data</code> list that contain a <code>1</code> in the corresponding entries of <code>mask</code>. Make a list of tuples that combine the <code>data</code> and <code>mask</code> together, use <code>filter</code> and use the first element of each tuple to determine which elements in this list of tuples to keep, then simply extract the <code>data</code> part when you're done using <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a>. Something like:</p> <pre><code>In [1]: mask = [0,0,0,1,1,0,0] In [2]: data = [1,2,3,4,5,6,7] In [3]: L = [(x,y) for (x,y) in zip(mask,data)] In [4]: F = filter(lambda z: z[0], L) In [5]: data = map(lambda z: z[1], F) In [5]: data Out[5]: [4, 5] </code></pre> <p>However, if you want to best do the logical indexing efficiently, I would use <a href="http://www.numpy.org/" rel="nofollow"><code>numpy</code></a> to do that for you. Create a <code>numpy</code> array of your <code>mask</code> and <code>data</code>, then use logical indexing like in MATLAB to get what you want:</p> <pre><code>In [6]: import numpy as np In [7]: L = np.array(data) In [8]: M = np.array(mask, dtype='bool') In [9]: data = list(L[M]) In [10]: data Out[10]: [4, 5] </code></pre> <p>If you're coming from MATLAB and are switching over to Python, <code>numpy</code> is the way to go. The syntax used to slice through the arrays and the built-in functions used on <code>numpy</code> arrays is very akin to how you'd do the same operations in MATLAB.</p> <p>Good luck!</p>