Running feature extraction on region within a boundary
<p>The image below shows a cow where the boundary has been detected using a combination of thresholding and subtracting a background from a 3D depth image. </p> <p>My goal is to perform feature extraction on the area INSDIE the boundary. I have read the other questions and have struggled to implement the steps refereed to in similar questions. I do not want to extract the area in the boundary, I simply want to use it for feature extraction.</p> <p>Please could someone offer a solution that is perhaps simpler? For example, is there a way to give the extractSURFFeatures the boundary coordinates from which to work within?</p> <p>Below is my boundary code which recieves my processed thresholded image (BW1).</p> <p><img src="https://i.stack.imgur.com/LteQu.jpg" alt="enter image description here"></p> <pre><code>figure(1); imshow(ImageCell_int{i-269}); %title('Outlines, from bwboundaries()'); axis square; hold on; boundaries = bwboundaries(BW1); numberOfBoundaries = size(boundaries); for k = 1 : numberOfBoundaries thisBoundary = boundaries{k}; plot(thisBoundary(:,2), thisBoundary(:,1), 'g', 'LineWidth', 2); end hold off; </code></pre> <p>I would be extremely grateful for any assistance on this.</p>
<p>This answer was discovered on Matlab Central and completely solves the problem above for anyone struggling with a similar issue.</p> <p>Start with a grey scale outline of the object of interest (BW1). </p> <pre><code> % Make the mask black and white double(BW1); BW2 = logical(BW1); </code></pre> <p>Next the mask is created and forced to be the same size as the normal image.</p> <pre><code> mask = cast(BW2, class(normalImage)); maskedImage = normalImage .* mask; imshow(maskedImage); </code></pre> <p>Yields the following result:</p> <p>It is now possible to perform feature extraction on the object of interest. </p> <p><img src="https://i.stack.imgur.com/nYR63.jpg" alt="enter image description here"></p>
<p>Great, now I see the cow! :)</p> <p>You cannot specify an irregularly-shaped region of interest for the <code>detectSURFFeatures</code> function. However, you can detect the features in the whole image, and then create a binary mask of the region of interest, and use it to exclude keypoints, which are outside it. </p> <p><strong>Edit:</strong> If your boundary is represented as a polygon, you can use <code>roipoly</code> function to create a binary mask from it.</p> <p>Having said that, features that are outside your object's boundary can actually be useful, because they capture information about the shape of the object.</p> <p>Also, what is your final goal? If you want to recognize individual cows, then local features may not be the best approach. You may do better with a global HOG descriptor (<code>extractHOGFeatures</code>) or with a color histogram, or both.</p>