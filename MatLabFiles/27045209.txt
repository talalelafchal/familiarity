Insert random numbers (between -1 and 1) into multidimensional array
<p>I created the following array:</p> <pre><code>array = zeros(64,1,10); </code></pre> <p>I would like to populate the entire array with random numbers with an interval between -1 and 1 with the rand function. </p> <pre><code>max=1 min=-1 array(:,:,:) = ((max-min).*rand(64,1) + min); </code></pre>
<p>Why don't you just use <code>rand</code> out of the box for multi-dimensional data?</p> <pre><code>array = rand(64,1,10); </code></pre> <p>Also, don't use <a href="http://www.mathworks.com/help/matlab/ref/min.html" rel="nofollow"><code>min</code></a> and <a href="http://www.mathworks.com/help/matlab/ref/max.html" rel="nofollow"><code>max</code></a> as variable names. These are actual functions in MATLAB, so you'd be unintentionally shadowing over the functions with your names. </p> <hr> <p>Given your edited question, you want to generate values between <code>-1</code> to <code>1</code> for a 3D array. <code>rand</code> only generates numbers between 0 and 1, so a trick would be to multiply the output of <code>rand</code> by 2 and subtract 1. Therefore:</p> <pre><code>array = 2*rand(64,1,10) - 1; </code></pre> <p>In general, the formula that you wrote above exactly transforms your data so that it fits between <code>min</code> and <code>max</code>. However, one caveat I will mention is that the data needs to be normalized between <code>[0,1]</code> before doing this transformation. Because the output of <code>rand</code> already guarantees this, then we have nothing to worry about. </p> <p>Therefore, if you did:</p> <pre><code>minVal = -1; maxVal = 1; array = (maxVal-minVal)*rand(64,1,10) + minVal; </code></pre> <p>you're already achieving the <code>[-1,1]</code> restriction that you wanted to begin with. <code>maxVal - minVal</code> will become 2 as <code>1 - (-1) = 2</code>, and <code>minVal</code> will be <code>-1</code>, so you'd be subtracting by 1. As such, the code I had previously equates to what you had in your original post... just that it now works for 3D (or any shape...) arrays!</p>