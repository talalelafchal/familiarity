Plotting inside Matlab Function Block for real time signals in Simulink
<p>I have a simulation running on <code>Simulink</code> and output signals change during simulation. I want to plot them at every step. What I can do is to use <code>to Workspace</code> blocks to transfer them to <code>Matlab</code>, but then I can only plot after the simulation finishes. I would like to plot the value at every instant of the simulation.</p> <p>What I tried:</p> <p>Create a figure in advance as: <code>figure(1)</code> and plot a static graph on it. Then I use</p> <p><code>Matlab</code> function inside <code>Simulink</code> :</p> <pre><code>function fcn(x,y) coder.extrinsic('plot') plot(x,y,'s','Markersize',8,'MarkerFaceColor','g','erasemode','background') </code></pre> <p>Where x and y are my signals as input to matlab function block. However this results in plotting x and y in every timestep, but I would like to plot only the last value of the signal on the figure and delete the previous ones, in other words refresh the plot so that it is going to act as an animation. How can I achieve that? Thanks in advance</p>
<p>You need little more elaborate function than just calling plot to animate your data. You should create a plot_fcn and make that function extrinsic. An example implementation of plot_fcn assuming scalar inputs with range 0 to 100 is</p> <pre><code>function plot_fcn(x,y) persistent f h if isempty(f) f = figure; h = plot(x,y,'s','Markersize',8,'MarkerFaceColor','g','erasemode','background'); axis([0 100 0 100]); axis manual end figure(f); set(h, 'XData', x); set(h, 'YData', y); </code></pre> <p>You can then call this function as</p> <pre><code>function fcn(x,y) coder.extrinsic('plot_fcn') plot_fcn(x,y); </code></pre> <p>Also checkout other questions regarding animation in MATLAB plots.</p>
<p>I think your code should work, with a few minor modifications:</p> <p>I would do the following if I were you:</p> <p>In the model callbacks, define your figure in the <code>InitFcn</code> callback:</p> <pre><code>fig_h = figure; ax_h = axes; set(ax_h,'Xlim',[0 12],'YLim',[0 12]) % or whatever axes limits you want </code></pre> <p>Then in your MATLAB Function block:</p> <pre><code>function fcn(x,y) %#codegen coder.extrinsic('plot') plot(x,y,'s','Markersize',8,'MarkerFaceColor','g','erasemode','background') set(gca,'XLim',[0 12],'Ylim',[0 12]) % or whatever axes limits you want </code></pre>