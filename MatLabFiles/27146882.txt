Call to built-in matlab functions (repmap, ones) in vectorized form
<p>I am currently trying to start using Matlab in a more elegant way by replacing loops with vectorized function calls. However, I am not quite able to make the transition in some cases. One of them is shown below:</p> <pre><code>for i = 1:3 ones(i,i) end </code></pre> <p>I tried</p> <pre><code>i = 1:3 ones(i,i) %or ones([i,i]) </code></pre> <p>but instead of giving me 3 different matrices, I get a 6D matrix, because i is just merely concatenated to [1,2,3,1,2,3]. How can I achieve what I intend to do, which is</p> <pre><code>[1] [1 1; 1 1] [1 1 1; 1 1 1; 1 1 1] </code></pre> <p>Similarly, I would make the following call:</p> <pre><code>x = zeros(3) i = 1:3 x(i,1:1) = repmat(i,1,i) </code></pre> <p>What I would like to see is:</p> <pre><code>x = [1 0 0; 2 2 0; 3 3 3] </code></pre> <p>The first question just involves how to call funtions in a vectorized form and the second is more towards dynamic matrix or vector indexing using vectors of indices. I did read the Matlab documentation on Vectorization, but it did not quite help me with this specific issue.</p> <p>Thanks in advance guys!</p>
<p>For the first case, </p> <pre><code>out = arrayfun(@(n) ones(n),1:3,'Uni',0) %// Not a vectorized solution though! %// It is not possible to have a vectorized solution %// as you are looking to have three different matrices [x1,x2,x3] = deal(out{:}) %// save into different variables </code></pre> <p>Output -</p> <pre><code>x1 = 1 x2 = 1 1 1 1 x3 = 1 1 1 1 1 1 1 1 1 </code></pre> <hr> <p>For the second case, </p> <pre><code>ii = 1:3; x = tril(repmat(ii',[1 3])) </code></pre> <p>Or this -</p> <pre><code>ii = 1:3; x = bsxfun(@ge,[1:3]',1:3).*repmat(ii',[1 3]) </code></pre> <p>Or this -</p> <pre><code>ii = 1:3; x = repmat(ii',[1 3]); x(bsxfun(@lt,[1:3]',1:3))=0; </code></pre> <p>Output -</p> <pre><code>x = 1 0 0 2 2 0 3 3 3 </code></pre>