Matlab - Nested loop for certain column
<p>I have an dataset array <code>M</code> of size <code>500x5</code>, is there any way I can use a nested <code>for</code> loop to run through a particular column of the array? If so how would I go about doing that? I want the <code>if</code> statement in the loop to be something like:</p> <pre><code>if age &lt;= 80 age = 1 else age = 2 end </code></pre> <p>what would I put as the <code>for</code> loop? Would it be better to initialise variables as <code>young =1; old = 2;</code> and then have <code>age = young</code> in the <code>if</code> statement rather than <code>age = 1</code>? I am trying to discretise the data into either <code>1</code> or <code>2</code> with <code>1</code> being young and <code>2</code> being old.</p>
<p>Try this:</p> <pre><code>m = rand(500,5)*100; //your dataset m(m(:,ii) &lt;= 80) = 1; m(m(:,ii) &gt; 80) = 2; </code></pre> <p>where <code>ii</code> is your the column you want to change. E.g. <code>ii</code> = 3</p> <pre><code>m(m(:,3) &lt;= 80) = 1; m(m(:,3) &gt; 80) = 2; </code></pre>
<p>This can be done many ways. You can use nested for loops, like you said, or conditional assignments as Rodrigo suggests.</p> <p>First, here's your data:</p> <pre><code>%// your matrix M = rand(500,5)*100; </code></pre> <p>You'll want to know the number of rows and columns for the loop...</p> <pre><code>%// get the size for the loops [num_rows,num_columns] = size(M); </code></pre> <p>To simply loop through one column, the following should work:</p> <pre><code>%// loop through one column (column #2), save one result col = 2; for row = 1:num_rows if M(row,col) &lt;= 80 age = 1; else age = 2; end end </code></pre> <p>But, you said you wanted to descretize the data, so you'll likely want to change save all the results. The above example will leave you with a variable called 'age' which will only store that last value from the loop.</p> <p>The following should allow you to save all the results from the individual column:</p> <pre><code>%// loop through one column (column #2), save all results col = 2; %// initialize age array age = zeros(500,1); %// do the loop for row = 1:num_rows if M(row,col) &lt;= 80 age(row) = 1; else age(row) = 2; end end </code></pre> <p>To loop through all the columns requires another for loop:</p> <pre><code>%// loop through all columns, save all results %// initialize age array age = zeros(500,5); %// loop through each column for col = 1:num_columns %// loop through each row for row = 1:num_rows if M(row,col) &lt;= 80 age(row,col) = 1; else age(row,col) = 2; end end end </code></pre> <p>Finally, now that you've seen that, the preferred way for many is to take advantage of MATLAB's conditional assignment tricks. The following will produce the same result as the last code snippet:</p> <pre><code>%// now without loops age = zeros(500,5); age(M &lt;= 80) = 1; age(M &gt; 80) = 2; </code></pre> <p>(note that I've used % and // in my comments... you can ignore the // since I only added it so Stack Exchange would recognize my comments)</p> <p>To answer your follow up, its not necessary to add the bit about <code>young = 1</code> and <code>old = 2</code>. It is preferred, however, since it allows you to remove the <a href="http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Unnamed_numerical_constants" rel="nofollow">Magic Numbers</a>.</p> <p><em>EDIT to answer follow-up:</em></p> <p>To save the results in the original array, you can do a few things:</p> <ol> <li>You can assign the new array to a column of the old array at the end</li> <li>You can assign the new values as you loop</li> <li>You can use the conditional replacement Rodrigo mentioned.</li> </ol> <p>The first one is easy... use one of the last two procedures above, then do this:</p> <pre><code>M(:,col_to_replace) = age(:,col_to_replace_with); </code></pre> <p>Or you could add a new column all together:</p> <pre><code>M(:,6) = age(:,col_of_interest); </code></pre> <p>Alternatively, you can just change the loop so the original values are replaced with their discretized value:</p> <pre><code>%// loop through all columns, save all results in original locations %// loop through each column for col = 1:num_columns %// loop through each row for row = 1:num_rows if M(row,col) &lt;= 80 M(row,col) = 1; else M(row,col) = 2; end end end </code></pre> <p>Finally, you can just use the conditional replacement method. The sample below will replace all the rows and columns of M with the discretized value:</p> <pre><code>M(M &lt;= 80) = 1; M(M &gt; 80) = 2; </code></pre> <p>To answer your specific example, this will loop through column 1 and save the result in column 3:</p> <pre><code>%// loop through one column (column #1), save all results in another column (#3) col = 1; save_col = 3; %// do the loop for row = 1:num_rows if M(row,col) &lt;= 80 M(row,save_col) = 1; else M(row,save_col) = 2; end end </code></pre>