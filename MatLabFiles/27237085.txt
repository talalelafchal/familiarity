check if a vector is in a struct
<p>If I have a struct, for example:</p> <pre><code>vars = var1: [3 1 3] var2: [2 2 8] var3: [2 3 4] var4: [1 4 5] </code></pre> <p>How can I check if something like <code>vec = [2 2 8]</code> is somewhere in the struct? Or if a number like 1, is there?</p>
<h2>Searching by field name</h2> <p>You can use <a href="http://uk.mathworks.com/help/matlab/ref/isfield.html" rel="nofollow"><code>isfield</code></a> to search by field name:</p> <pre><code>isfield(vars,'vec') </code></pre> <p>will return <code>true</code> if <code>vec</code> is a field of the structure <code>vars</code>.</p> <h2>Searching by field value</h2> <p>This is quite a bit more complicated. You have to first get all the fields from the structure, then loop through them all and compare them to your data of interest. Here's an example, it may not be the most efficient or elegant one, but it should work:</p> <pre><code>% Data vars.var1 = [3 1 3]; vars.var2 = [2 2 8]; vars.var3 = [2 3 4]; vars.var4 = [1 4 5]; vec = [2 2 8]; % Get field names names = fieldnames(vars); % I assume you do not know a priori what fields are in vars % Go through the fields in the structure idx = false(length(names),1); disp_str = ''; for k=1:length(names) if isequal(vec,vars.(names{k})) idx(k) = true; if isempty(disp_str) disp_str = names{k}; else disp_str = [disp_str ' and ' names{k}]; end end end % Display the results if max(idx)&gt;0 disp(['Match found in ' disp_str]); else disp('No match found') end </code></pre>
<p>Use <a href="http://www.mathworks.com/help/matlab/ref/structfun.html" rel="nofollow"><code>structfun</code></a> to apply a function (i.e. equality check) to each field of a scalar structure:</p> <pre><code>&gt;&gt; vars = struct('var1',[3 1 3],'var2',[2 2 8],'var3',[2 3 4],'var4',[1 4 5]) vars = var1: [3 1 3] var2: [2 2 8] var3: [2 3 4] var4: [1 4 5] &gt;&gt; testVec = [2 2 8]; &gt;&gt; b = structfun(@(f)isequal(f,testVec),vars) b = 0 1 0 0 </code></pre> <p>And change the function to suit your purpose. For example, <code>ismember</code>,<code>intersect</code>, <code>any(f==scalar)</code>, etc.</p>
<p>This problem is more interesting than it seems to be. </p> <p>The answers above only works if the size of vec is equal to the size of the vectors in the struct. What about the second part of the question: <em>"Or if a number like 1, is there?"</em></p> <p>Try the following code. It searches for the occurrence of a vector (of any size) in the field values of a struct. </p> <pre><code>function [fields, ismember] = ipl_ismemberofstruct(struct, needle) % Get needle string needle_str = ipl_getmatstr(needle); % Retrieve field names from struct fields = fieldnames(struct); % Prepare some variables ismember = false(1, length(fields)); delimiters = ' ;'; % Loop through each field looking for needle for i=1:length(fields) [fieldvalue_str] = ipl_getmatstr(struct.(fields{i})); [contains] = ipl_strcontains(fieldvalue_str, needle_str, delimiters); ismember(i) = contains; end end % ------------------------------------------------------------------------ function [contains] = ipl_strcontains(haystack, needle, delimiters) contains = false; % Get occurrences of needle on haystack idxs = strfind(haystack, needle); % Verify each occurrence (just whole occurrences are taken into account) for i=1:length(idxs) % The character before needle must be a delimiter (or the haystack begins with needle) before_idx = idxs(i) - 1; before_clear = true; if(before_idx &gt; 0) k = strfind(delimiters, haystack(before_idx)); if(isempty(k)) before_clear = false; end end % The character after needle must be a delimiter (or the haystack ends with needle) after_idx = idxs(i) + length(needle); after_clear = true; if(after_idx &lt;= length(haystack)) k = strfind(delimiters, haystack(after_idx)); if(isempty(k)) after_clear = false; end end % If both variables are true, then needle is a 'whole' occurrence if(before_clear &amp;&amp; after_clear) contains = true; return; end end end % ------------------------------------------------------------------------ function [matstr] = ipl_getmatstr(mat) % Convert matrix to a string matstr = mat2str(mat); % Remove '[' and ']' characters, if they exists if(numel(mat) &gt; 1) matstr = matstr(2:(length(matstr)-1)); end end </code></pre> <p><strong>Use case 1: Vector [2 2 8] is inside field var2</strong></p> <pre><code>vars = struct('var1',[3 1 3],'var2',[2 2 8],'var3',[2 3 4],'var4',[1 4 5]) vars = var1: [3 1 3] var2: [2 2 8] var3: [2 3 4] var4: [1 4 5] [fields, ismember] = ipl_ismemberofstruct(vars, [2 2 8]) fields = 'var1' 'var2' 'var3' 'var4' ismember = 0 1 0 0 </code></pre> <p><strong>Use case 2: Scalar value [2] is inside fields var2 and var3</strong></p> <pre><code>[fields, ismember] = ipl_ismemberofstruct(vars, 2) fields = 'var1' 'var2' 'var3' 'var4' ismember = 0 1 1 0 </code></pre>