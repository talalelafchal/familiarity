Matlab image filtering with vector coefficients
<p>I'm trying to create a filter that uses vectors as coefficients.</p> <p>A typical kernel used in <code>imfilter</code> looks like:</p> <pre><code>0 1 0 1 -4 1 0 1 0 </code></pre> <p>Where each element is a scalar, and the filtering basically takes all windows of 3x3 of the image (MxN), multiplies the pixel values by the matching coefficients and sums all products to place the output pixel.</p> <p>I would like to extend this, so that each element in the kernel is not a scalar, but actually a vector (Px1). This makes the kernel something like 3x3xP. The rest of the functionality should be the same: Multiply the coefficient (vector) by the image pixel (scalar * vector), sum all products (sum of vectors of same dimensions), and the output matrix should have the dimensions of (MxNxP).</p> <p>I know that <code>imfilter</code> doesn't support that and produces a result of (MxN).</p> <p>Is there another Matlab function that does this, or do I need to implement from scratch?</p> <p>Some comments: The image is usually logical (0 or 1), and some of the filter elements can be zero, and not contribute to the sum.</p>
<p>Without another solution, I would brute-force it. If each vector in your 3x3 filter has P elements, I'd apply each element independently and sum the result.</p> <pre><code>%load my image im = imread(fname); %define my kernel h = zeros(3,3,P); % P elements deep h(:,:,1) = [0 1 0; 1 -4 1; 0 1 0]; %first element my kernel h(:,:,2) = [0.2 1.5 0.2; 1.5 -6 1.5; 0.2 1.5 0.2]; %second element %keep adding elements until you get your P elements %loop over each element in your kernel output = zeros(size(im)) for I=1:size(h,3) output = output + imfilter(im,h(:,:,I)); %apply filter and accumulate end </code></pre>