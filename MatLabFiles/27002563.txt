Display a Gaussian pyramid stored in a cell array in a single figure
<p>I'm working on a Gaussian Pyramid code for matlab. Basically it loads an image, creates a cell array and fills it with different levels of the gaussian pyramid.</p> <p>I want to show the content of my cell array filled with images in one single figure, so you can see the gaussian pyramid effect. Meaning the original image is at full size and the rest are downsampled by 2 each. And all that in one figure.</p> <p>I'm quite the amateur when it comes to Matlab so I don't really know how to do that. I already tried it somewhat with subplots but failed.</p> <p>Thanks in advance.</p>
<p>I used a loop to add zeros at the top of all images then merged them</p> <p>Sample <code>cell</code>,</p> <pre><code>im = imread('peppers.png'); for i = 1 : 5 I{i} = im(1 : 2*i : end, 1 : 2*i : end,:); end </code></pre> <p>The code, <code>I</code> being your cell,</p> <pre><code>m = size(I{1}, 1); newI = I{1}; for i = 2 : numel(I) [q,p,~] = size(I{i}); I{i} = cat(1,repmat(zeros(1, p, 3),[m - q , 1]),I{i}); newI = cat(2,newI,I{i}); end imshow(newI) </code></pre> <p><img src="https://i.stack.imgur.com/CnMw7.png" alt="enter image description here"></p> <p>For 2D images use : <code>I{i} = cat(1,repmat(zeros(1 , p),[m - q , 1]),I{i});</code></p> <p><img src="https://i.stack.imgur.com/9ow1x.png" alt="enter image description here"></p>
<p>How about:</p> <pre><code>subplot(numel(YourCell), 1, 1), imshow(YourCell{1}); for k=2:5 subplot(1,numel(YourCell),k), imshow(YourCell{k}) xlim([1 size(YourCell{1},1)]); ylim([1 size(YourCell{1},2)]); end </code></pre> <p>Result (with dummy data):</p> <p><img src="https://i.stack.imgur.com/cn4lJ.png" alt="cascade"></p> <p><strong>Edit:</strong></p> <p>You can play with the arrangement of your tiles by calculating the position of the next one. Here is a quick and dirty example, you can surely do a better job:</p> <p>Side by side:</p> <pre><code>border=5; MergedImage=ones(size(YourCell{1},1), 2.5*size(YourCell{1},2)); MergedImage(1:size(YourCell{1},1), 1:size(YourCell{1},2))=YourCell{1}; Pos=[1, size(YourCell{1},1)+border]; for k=1:(numel(YourCell)-1) MergedImage(Pos(1):Pos(1)+size(YourCell{k+1}, 1)-1, Pos(2):Pos(2)+size(YourCell{k+1}, 2)-1)=YourCell{k+1}; Pos=[Pos(1), Pos(2)+size(YourCell{k+1}, 2)+border]; end imshow(MergedImage); </code></pre> <p><img src="https://i.stack.imgur.com/MEXzl.png" alt="cascade2"></p> <p>Or a tighter arrangement:</p> <pre><code>border=5; MergedImage=ones(size(YourCell{1},1), 2*size(YourCell{1},2)); MergedImage(1:size(YourCell{1},1), 1:size(YourCell{1},2))=YourCell{1}; Pos=[1, size(YourCell{1},1)+border]; for k=1:(numel(YourCell)-1) MergedImage(Pos(1):Pos(1)+size(YourCell{k+1}, 1)-1, Pos(2):Pos(2)+size(YourCell{k+1}, 2)-1)=YourCell{k+1}; if mod(k,2) == 0 Pos=[Pos(1)+size(YourCell{k+1}, 1)+border, Pos(2)]; else Pos=[Pos(1), Pos(2)+size(YourCell{k+1}, 2)+border]; end end imshow(MergedImage); </code></pre> <p><img src="https://i.stack.imgur.com/8NlEI.png" alt="cascade3"></p>