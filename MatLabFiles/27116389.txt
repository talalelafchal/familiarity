Increase precision of MATLAB variable/data point from a plot
<p>I'm plotting a control system and I need to prove that the steady state error from MATLAB coincides with my calculations.</p> <p>My calculations have given me <code>0.000833333</code>, and on the plot, the data-tip markers have very little precision (no decimal points at the location I selected).</p> <p>However I can right-click the marker and select <code>Export cursor data to workspace...</code></p> <p>This gives me the position location of <code>X=98.0037</code>, <code>Y=98.0028</code></p> <p>That gives me an error of <code>0.0009</code>, so it's not quite the <code>0.00083333</code> from calculations. I know this is correct however, I just would like to know how to increase the precision of the variables/data points from plot past 4 decimal places if possible.</p> <p><img src="https://i.stack.imgur.com/OLuun.png" alt="enter image description here"></p>
<p>There are many different routes to get more precisions from these data tip cursors:</p> <h2>1) Export manually:</h2> <p>As you mentioned in your question, right click on the datatip then select <code>Export cursor data to workspace...</code>. Let's assume you export that in the default variable <code>cursor_info</code>, you then get a structure with 3 fields:</p> <pre><code>cursor_info = Target: 492.0040 Position: [7.3593e+05 10.6353] DataIndex: 7 </code></pre> <p><code>Target</code> is the handle of the <code>line</code> object to which the cursor was <em>snapped</em><br> <code>Position</code> is a 1x2 vector giving the <code>x</code> and <code>y</code> coordinates of the selected data points (it will have a third value if the <code>z</code> coordinates are defined)<br> <code>DataIndex</code> is the index of the selected data point coordinates in the array that was used to plot the line. So you could also ask for :</p> <pre><code>&gt;&gt; x(7) %// or "x(cursor_info.DataIndex)" would be the same ans = 7.3593e+05 &gt;&gt; y(7) ans = 11.3200 </code></pre> <p>Now by default the display of values in the console is limited to a few digits, but the number in the variable has more precision. 2 ways to display more precision:</p> <p>First method is to type <code>format long</code> in the console. After that all your numeric output in the console will be with 15 digits:</p> <pre><code>&gt;&gt; cursor_info.Position ans = 1.0e+05 * 7.359289702215524 0.000106353183026 </code></pre> <p>Second method is to force the precision you desire by using a format specifier and <code>sprintf</code> or <code>fprintf</code>:</p> <pre><code>&gt;&gt; fprintf('x=%15.15d y=%g \n',cursor_info.Position) x=7.359289702215524e+05 y=10.6353 </code></pre> <h2>2) Export programatically</h2> <p>Alternatively to the manual export of the <code>cursor_info</code> data, you can call that with code:</p> <pre><code>dcm = datacursormode(gcf) ; cursor_info = dcm.getCursorInfo ; </code></pre> <p>You then get the same <code>cursor_info</code> variable than if you exported it manually. Displaying the values can be done the same way than above.</p> <h2>3) Direct display (at the wanted precision).</h2> <p>You can also achieve a full customization of what the data tip will display, not only the position but also some calculated or converted values. Right click on the data tip and select <code>Edit text update function</code>. This will open an editor window with the current code for the data tip, which basically query the data tip position and create a cell array of text to be displayed. Modify this function to your needs then save it somewhere you can retrieve it. </p> <p>For an example with the data I was using, I display the <code>x</code> and <code>y</code> coordinates with different precision, then a calculation based on the 2 values, and I also convert the <code>x</code> coordinates to the date representation.</p> <pre><code>function output_txt = myModifiedDatatip(obj,event_obj) pos = get(event_obj,'Position'); output_txt = {['X: ',num2str(pos(1),12)],... %// default code, only the output precision is changed ['Y: ',num2str(pos(2),8)]}; %// add all the informations you want to calculate and display directly here: output_txt{end+1} = ['error (y-x): ',sprintf('%16f', pos(2)-pos(1))]; %// difference between x and x output_txt{end+1} = ['Date: ', datestr(pos(1))]; %// display the date/time </code></pre> <p>This example will display a data tip like so: <img src="https://i.imgur.com/XMr3GLA.png" alt="datatip"></p> <p>After that, on any subsequent plot or figure, you can re-apply this data tip format by right clicking on a data tip, <code>select text update function</code>, then point to the data tip function you saved earlier.</p>