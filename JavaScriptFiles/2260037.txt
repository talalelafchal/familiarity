Using JSON data in a javascript function
<p>I am returing JSON data as a response in a web service I am writing.</p> <p>I am wondering what is the best way to consume the data, returned to a Javascript function (passed as an argument).</p> <p>Do I:</p> <ol> <li>use eval()</li> <li>use Doug Crawfords jSon parser to parse the JSON data into a Javascript object </li> <li>simply use the returned data as an object literal</li> </ol> <p>BTW, I am still learning Javascript, (just started reading the Definitive Guide 2 days ago) so if my question seems a bit naive or asinine - bear with me.</p>
<p>If you are using jQuery you can set it up so it returns as a JSON object. <a href="http://api.jquery.com/jQuery.getJSON/" rel="nofollow noreferrer">http://api.jquery.com/jQuery.getJSON/</a></p>
<p>I would suggest a few things, first, on the web service side:</p> <ol> <li>If a <code>callback=functionName</code> parameter is passed in the query string, then return the properly serialized JSON as the only parameter to the callback function (In this case <code>functionName</code></li> <li>If no callback was requested, then simply return the properly serialized JSON string. (This is helpful for when other languages consume the JSON. PHP or Ruby for instance)</li> </ol> <p>Then, as far as consuming it, if you are on the same domain as the web service, you can retrieve the code and use the <a href="http://www.JSON.org/js.html" rel="nofollow noreferrer"><code>json2.js</code> parser</a> to parse it. If you are on a separate domain, use the <code>callback</code> parameter when requesting the data, and make sure you set up a function to handle the callback.</p> <p><strong>Simple example (Using PHP):</strong></p> <pre><code>&lt;?php $callback = null; if( isset($_REQUEST['callback']) ){ $callback = $_REQUEST['callback']; } $fakeData = array( 'key' =&gt; 'value'); $json = json_encode( $fakeData ); echo $callback ? "$callback($json)" : $json; ?&gt; </code></pre> <p><strong>JS (On different domain than the web service):</strong></p> <pre><code>function handleCallback( data ){ alert( data.key ); } function get_json(){ // Dynamically create the script element var script = document.createElement('script'); script.type = "text/javascript"; script.src = "http://yourwebservice.com/service/?callback=handleCallback"; document.getElementsByTagName('head')[0].appendChild( script ); } </code></pre> <p>Calling <code>get_json</code> would dynamically create the request (as a script element due to cross domain restrictions. You can't use XMLHttpRequest to make cross domain requests in most browsers), and the PHP returned script would correctly call the <code>handleCallback</code> function when the script returns.</p>
<p>Assuming that your webservice is decorated with ScriptService attribute: I would suggest using json2.js to handle the json clientside. It defers to native implementations when they are available.</p>
<p><strong>(1). use eval()</strong></p> <p>Only if you're certain the data is clean. I'd never trust anything from an outside source.</p> <p><strong>(2). use Doug Crawfords jSon parser to parse the JSON data into a Javascript object</strong></p> <p>Best idea overall. Even jQuery uses plain old eval() to parse JSON.</p> <p><strong>(3). simply use the returned data as an object literal</strong></p> <p>When it's returned, it's just a string, not an object unless passed through one of the two aforementioned functions, or wrapped in a function ala <a href="http://en.wikipedia.org/wiki/JSONP#JSONP" rel="nofollow noreferrer">JSONP</a>.</p>