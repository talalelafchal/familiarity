Javascript DateFormat for different timezones
<p>I'm a Java developer and I'm used to the SimpleDateFormat class that allows me to format any date to any format by settings a timezone.</p> <pre><code>Date date = new Date(); SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss"); sdf.setTimeZone(TimeZone.getTimeZone("America/Los_Angeles")); System.out.println(sdf.format(date)); // Prints date in Los Angeles sdf.setTimeZone(TimeZone.getTimeZone("America/Chicago")); System.out.println(sdf.format(date)); // Prints same date in Chicago </code></pre> <p>SimpleDateFormat is a pretty neat solution in Java but unfortunately I can't find any similar alternative in Javascript.</p> <p>I'm extending the Date prototype in <strong>Javascript</strong> to do exactly the same. I have dates in Unix format but I want to format them in different timezones.</p> <pre><code>Date.prototype.format = function(format, timezone) { // Now what? return formattedDate; } </code></pre> <p>I'm looking for a neat way to do this rather than a hack.</p> <p>Thanks</p>
<p>Don't write your own stuff; just get datejs: <a href="http://www.datejs.com/" rel="nofollow noreferrer">http://www.datejs.com/</a></p> <p>You can figure out what the timezone offset is set to in the execution environment like this:</p> <pre><code>var local = new Date(); var utc = Date.UTC(local.getFullYear(), local.getMonth(), local.getDate(), local.getHours(), local.getMinutes(), local.getSeconds(), local.getMilliseconds()); var tz = (utc - local.getTime()) / (60 * 60 * 1000); </code></pre>
<p>If you're just passing the raw TZ there's nothing really complicated about adjusting the hours. My example below is of course abbreviated. Yours may get quite long depending on how many patterns you'd handle.</p> <pre><code>Date.prototype.format = function(format, tzAdjust) { // adjust timezone this.setHours(this.getHours()+tzAdjust) // pad zero helper - return "09" or "12" var two = function(s){ return s+"".length==1 ? "0"+s : s+""; } // replace patterns with date numbers return format.replace(/dd|MM|yyyy|hh|mm|ss/g, function(pattern){ switch(pattern){ case "d" : return this.getDate(); case "dd" : return two(this.getDate()); } }); } </code></pre>
<p>Attempting to (ever so slightly) improve upon mwilcox's suggestion:</p> <pre><code>Date.prototype.format = function(format, tzAdjust) { // get/setup a per-date-instance tzDate object store var tzCache = this.__tzCache = this.__tzCache || (this.__tzCache = {}); // fetch pre-defined date from cache var tzDate = tzCache[tzAdjust]; if ( !tzDate ) { // on miss - then create a new tzDate and cache it tzDate = tzCache[tzAdjust] = new Date( this ); // adjust by tzAdjust (assuming it's in minutes // to handle those weird half-hour TZs :) tzDate.setUTCMinutes( tzDate.getUTCMinutes()+tzAdjust ); } return format.replace(/dd|MM|yyyy|hh|mm|ss/g, function(pattern){ // replace each format tokens with a value // based on tzDate's corresponding UTC property }); } </code></pre>
<p>JavaScript does not have build in support for other time zone than the local one. You can only express a date in local time or in UTC time. There is no way to change the time zone offset of a Date object.</p> <p>Thus, there is no "neat" way to solve your problem.</p>
<p>You are clearly asking two questions in one, formatting and time zone. They need to be addressed separately. Formatting is pretty trivial, if none of the other answers will do for that you will have to be more specific.</p> <p>As for the time and time zone, if you have your server inject the UTC time, preferably as UNIX time in milliseconds, into the JavaScript, you can compare that to the time on the client machine, and thus work out how far from UTC the client is. Then you can calculate the time of any time zone you want.</p> <p>Edit: I actually didn't know JavaScript also had built in UTC time until I checked on the internet, neat.</p> <p>In any case, I suppose this is want you want:</p> <pre><code>Date.prototype.format=function(format,timezone){ var obj=new Date(this.getTime()+this.getTimezoneOffset()*60000+timezone*3600000); var two=function(s){ return s&lt;10?"0"+s:s+""; } return format.replace(/dd|MM|yyyy|hh|mm|ss/g, function(pattern){ switch(pattern){ case "dd" : return two(obj.getDate()); case "MM" : return two(obj.getMonth()+1); case "yyyy" : return obj.getFullYear(); case "hh" : return two(obj.getHours()); case "mm" : return two(obj.getMinutes()); case "ss" : return two(obj.getSeconds()); } }); } </code></pre> <p>You can add in more patterns if you need.</p>
<p>The ISO Extended format for common date is YYYY-MM-DD, and for time is hh:mm:ss. Either format can be understood, unambiguously, worldwide. </p> <p>See also: <a href="http://jibbering.com/faq/#dates" rel="nofollow noreferrer">http://jibbering.com/faq/#dates</a></p>
<p>This is an old question, but since I found it:</p> <p>As mentioned, there's nothing reasonable built-in.</p> <p>As for libs, there is <a href="http://momentjs.com/timezone/" rel="nofollow">Moment Timezone</a> for <a href="http://momentjs.com/" rel="nofollow">Moment.js</a>.</p> <p>Here is a JSfiddle with an example: <a href="http://jsfiddle.net/kunycrkb/" rel="nofollow">http://jsfiddle.net/kunycrkb/</a></p> <p>The same code inline:</p> <pre><code>var m = moment("2014-06-01T13:05:00Z"); var f = "HH:mm z"; $("#results").text(m.tz("UTC").format(f) + " is " + m.tz("EST").format(f) + "!"); </code></pre>