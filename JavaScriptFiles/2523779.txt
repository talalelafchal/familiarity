Javascript eval function returning Octal value
<p>when i try "eval" function as eval ("020 * 05 + 05") it is returning 85 instead off 105. Can someone explain me why eval function behave like this? Also suggest any to overcome this problem.</p>
<p>Numeric constants that start with a zero (like "020") are interpreted as octal. That's true for C, C++, Java, Javascript, and most any other language with even a vague cosmetic relationship to C.</p> <p>If for some reason you really, really need to use "eval()", and you've got these weird strings with bogus leading zeros on the numeric constants, you might try something like this:</p> <pre><code>var answer = eval(weirdString.replace(/\b0(\d+)\b/g, '$1')); </code></pre> <p>However I wish you would find a way around using "eval()" at all. (Note the comment below noting that the hack shown above will have problems with numbers containing fractional parts.)</p>
<p>Javascript treats numbers beginning with 0 as octal. You can either remove the leading 0's or use parseInt(yourNumber,10) to convert to base 10.</p>
<p>Here is a link describing how the ParseInt function works in JavaScript and hence the reason you are getting an unexpected result.</p> <p><a href="http://www.w3schools.com/jsref/jsref_parseInt.asp" rel="nofollow noreferrer">http://www.w3schools.com/jsref/jsref_parseInt.asp</a></p>
<p>"100.<strong>0001</strong>".replace(/\b0(\d+)\b/g, '$1') ="100.<strong>1</strong>" so it dangerous solution</p> <p>My solution:</p> <pre><code>function $calc(n, round, min, max) { /// &lt;summary&gt;calculate expression from string&lt;/summary&gt; /// &lt;param name="round" type="int"&gt;optional&lt;/param&gt; /// &lt;param name="min" type="int"&gt;optional. minimum allowed value. if less return 0&lt;/param&gt; /// &lt;param name="max" type="int"&gt;optional. maximum allowed value. if more return 0&lt;/param&gt; if (!n) return 0; try { n = Number(eval(n .replace(/[^\d\.\-\+\*\/\(\)\e]/g, '')//remove illegal symbols .replace(/^0+/, '')//replace first leading zero .replace(/[^\d\.]+0+/g, function (s) {return s.substr(0, 1);}) //replace leading zero )); } catch (e) { return 0; } if (n == 0 || !isFinite(n)) return 0; if (round != undefined) { var t = Math.pow(10, round); n = Math.round(n * t) / t; } if (min != undefined &amp;&amp; n &lt; min) return 0; if (max != undefined &amp;&amp; n &gt; max) return 0; return n; } </code></pre> <hr> <p>function is safe. if calculation is fail or NaN of infinite, return 0</p> <pre><code>$calc('0100.08-(0.01+00.04)')=100.03 $calc('0/0')=0 //NaN $calc('1/3',2)=0.33 //round </code></pre>