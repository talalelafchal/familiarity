JavaScript !! operators
<blockquote> <p><strong>Possible Duplicate:</strong><br> <a href="http://stackoverflow.com/questions/784929">What is the !! (not not) operator in JavaScript?</a> </p> </blockquote> <p>I've seen operator <code>!</code> used like <code>!!</code>. For example</p> <pre> <code> var filter = !!(document.body.filters); </code> </pre> <p>If I'm not wrong it's equivalent <code>var filters = typeof document.body.filters != 'undefined'</code>?</p> <p>Is it a good practice to use <code>!!</code>? </p>
<p>It's up to you. All <code>!!</code> does is "cast" its argument to a Boolean.</p>
<p>! negates the result of whatever is on the right. So !! negates the negated value thus ending with whatever was originally on the right.</p> <p>edit: the above is true if you have boolean values, results may vary for other types ...</p> <p>edit2 to elaborate some more: !! is a "type cast" operator of sorts. if you have a boolean value on the right then nothing will happen. If you have something other then a boolean value on the right, then the first ! will convert whatever is on the right to the boolean "version" of that value, and the second ! will negate that value. Kinda like saying: return the true value of a non boolean value. Hope that makes sense :)</p>
<p>And what if it is a string with value "undefined"?</p> <p>I think !!(expression) is neat.</p>
<p>It's a common way to convert any return type to boolean (usually to avoid compilation warnings). And second: no, checking if type is "undefined" is mandatory anyway and "!!" can not cover it.</p>
<p><code>var filter = !!(document.body.filters);</code></p> <p>is <strong>NOT</strong> equivalent to </p> <p><code>var filters = typeof document.body.filters != 'undefined'</code></p> <p><code>!!</code> merely checks if the operand is "truthy", i.e. whether it evaluates to true when used in a boolean expression. It has no relation to <code>typeof</code>. In general with host objects (such as <code>document.body.filters</code>) you are best off using <code>typeof</code> checks. The following article is good reading on this subject: <a href="http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting" rel="nofollow noreferrer">http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting</a></p>