Questions about javascript dates
<p>I have 2 questions about dates.</p> <p>The first one is how can I get the "AM/PM" from a date in Javascript?</p> <p>the second question is say I have this code</p> <pre><code> var convertedStartDate = new Date(dueDate); var month = convertedStartDate.getMonth() + 1; var day = convertedStartDate.getDate(); var year = convertedStartDate.getFullYear(); var shortDueDate = month + "/" + day + "/" + year; </code></pre> <p>Now as you can see I want always this format mm/dd/yyyy</p> <p>So I am wondering if say dueDate is 1/9/2010 (mm/dd/yyyy) but the person entered it in as dd/mm/yyyy(some other format version of date).</p> <p>would </p> <p>month = 1 day = 9 year = 2010</p> <p>Or do I have to tell it somehow to always convert into mm/dd/yyyy? Or does it do is own format so that it always would get the right order? Ie it does not matter what order they put the date in it would always get 9 as the day.</p>
<p>Here, give this a try: </p> <pre><code>now = new Date(); hour = now.getHours(); var tag = ""; if (hour &gt;= 12) { tag = "pm"; } else { tag = "am"; } </code></pre> <p>As for the second part of your question, I'd just make those parts of the form separate fields, there really is no way otherwise. You're just going to have to write some hints into your form.</p>
<p>You need to always turn/convert whatever the user entered into a Javascript Date object. Remember - Javascript is local to the client's computer... a person in the USA will have different format settings than a person in the UK or China.</p> <p>To keep things simple... suggest or present a hint near the input textbox the desired input format. Then, validate against that format using a Regex. This way you are almost guaranteed to get the desired date... well... unless the user has Javascript disabled. LOL... in that case... you need to convert on the server-side (you should always be doing this anyway).</p>
<p>To get the AM/PM of a time found some old code I wrote a long time ago. See the (remove am/pm) here you can replace it with a get using the substring.</p> <pre><code>function ValidateAdvancedTime(time, formatType){ time = time.replace(".", ":"); var newTime = time.substring(0, (time.indexOf(":") + 3)); // Strip out the seconds var status = ValidateTime(newTime, formatType); if(status == false) return false; var seconds = time.substring(time.indexOf(":") + 4, time.length); if(seconds.length &gt; 2) **seconds = seconds.substring(0, 2); // Remove any AM/PM afterwards** if(!isNaN(seconds)) { // Make sure its a number and it's between 0 and 59 if((seconds &lt;= 59) &amp;&amp; (seconds &gt;= 0)) return true; } return false; </code></pre> <p>}</p> <p>As far as the dates go I've never had any problems storing 1/9/2010 or 01/09/2010 in the database. </p>