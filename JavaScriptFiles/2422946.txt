javascript check for not null
<p>Below is a code snippet, where we retrieve a form value. Before further processing check if the value is not null..</p> <pre><code>var val = document.FileList.hiddenInfo.value; alert("val is " + val); // this prints null which is as expected if (val != null) { alert("value is "+val.length); // this returns 4 } else { alert("value* is null"); } </code></pre> <p>Any ideas why it happens so.. ??</p>
<p>It's because val is not <code>null</code>, but contains <code>'null'</code> as a string.</p> <p>Try to check with 'null'</p> <pre><code>if ('null' != val) </code></pre>
<p>You should be using the strict <code>not equals</code> comparison operator <code>!==</code> so that if the user inputs <code>"null"</code> then you won't get to the <code>else</code>.</p>
<p>Use <code>!==</code> as <code>!=</code> will get you into a world of nontransitive JavaScript truth table weirdness.</p>
<p>It is possibly because the value of <code>val</code> is actually the string <code>"null"</code> rather than the value <code>null</code>.</p>
<p>this will do the trick for you</p> <pre><code>if (!!val) { alert("this is not null") } else { alert("this is null") } </code></pre>
<p>This should work fine..</p> <pre><code> if(val!= null) { alert("value is "+val.length); //-- this returns 4 } else { alert("value* is null"); } </code></pre>
<p>This will work:</p> <pre><code>if (val) { alert("Not null"); } else { alert("Null"); } </code></pre>
<p>If you want to be able to include 0 as a valid value:</p> <pre><code>if (!!val || val === 0) { ... } </code></pre>
<p>There are 3 ways to check for "not null". My recommendation is to use the Strict Not Version.</p> <h1>1. Strict Not Version</h1> <pre><code>if (val !== null) { ... } </code></pre> <p>The Strict Not Version uses the "Strict Equality Comparison Algorithm" <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6" rel="nofollow">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6</a>. The <code>!==</code> has faster performance, than the <code>!=</code> operator because the Strict Equality Comparison Algorithm doesn't typecast values.</p> <h1>2. Non-strict Not Version</h1> <pre><code>if (val != 'null') { ... } </code></pre> <p>The Non-strict version uses the "Abstract Equality Comparison Algorithm" <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3" rel="nofollow">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3</a>. The <code>!=</code> has slower performance, than the <code>!==</code> operator because the Abstract Equality Comparison Algorithm typecasts values.</p> <h1>3. Double Not Version</h1> <pre><code>if (!!val) { ... } </code></pre> <p>The Double Not Version <code>!!</code> has faster performance, than both the Strict Not Version <code>!==</code> and the Non-Strict Not Version <code>!=</code> (<a href="https://jsperf.com/tfm-not-null/6" rel="nofollow">https://jsperf.com/tfm-not-null/6</a>). However, it will typecast "Falsey" values like <code>undefined</code> and <code>NaN</code> into False (<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-9.2" rel="nofollow">http://www.ecma-international.org/ecma-262/5.1/#sec-9.2</a>) which may lead to unexpected results, and it has worse readability because <code>null</code> isn't explicitly stated.</p>