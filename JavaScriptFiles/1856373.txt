On-Demand javascript
<p>I'm wondering if you guys can help me to perform on-demand javascript using AJAX? If you can help me with a simple example, I would really appreciate it.</p> <p>my question is: how to get a javascript code from my server and execute it?</p> <p>Thanks for the help </p>
<p>Get the JavaScript code from the server enclosed in tags, append it into DOM and execute a function. The function name to execute could come with the same request or it can be predefined.</p> <p>What do need this for? Perhaps if you could elaborate your goals, a more straightforward method could be found.</p>
<p>In fact, you don't even need to use AJAX for this. Simply append a new <code>&lt;script&gt;</code> element to your body.</p> <p><strong>Plain Old Javascript</strong>: </p> <pre><code>var newScript = document.createElement('script'); newScript.type = 'text/javascript'; newScript.src = '/scripts/example.js'; document.body.appendChild(newScript); </code></pre> <p>Here's the same code using <a href="http://jquery.com/" rel="nofollow noreferrer"><strong>jQuery</strong></a>:</p> <pre><code>// Traditional $(document.body) .append('&lt;script type="text/javascript" src="/scripts/example.js" /&gt;'); // Using getScript $.getScript('/scripts/example.js'); </code></pre> <p>Here's the same code using <a href="http://mootools.net/" rel="nofollow noreferrer"><strong>MooTools</strong></a>:</p> <pre><code>// Traditional new Element('script', {type: 'text/javascript', src: '/scripts/example.js'} ).inject(document.body); // Using Assets (Recommended) new Asset.javascript('/scripts/example.js'); </code></pre>
<p>Javascript gets from the web server to the user's browser in a couple of ways:</p> <ul> <li>It is embedded in the web page along with the HTML in a <code>&lt;script&gt;</code> tag</li> <li>It is sent as a separate file along with the web page. The javascript file has a file name extension of .js. The code in the web page <code>&lt;script&gt;</code> tags can call the code in this separate .js file</li> <li>A combination of these can be used. The common javascript functions that are used on many web pages go in the .js file. Javascript that's only used on one web page goes on that page.</li> </ul>
<p>I made the following function for being able to load JavaScript files programmatically:</p> <p><strong>Usage:</strong></p> <pre><code>loadScript('http://site.com/js/libraryXX.js', function () { alert('libraryXX loaded!'); }); </code></pre> <p><strong>Implementation:</strong></p> <pre><code>function loadScript(url, callback) { var head = document.getElementsByTagName("head")[0], script = document.createElement("script"), done = false; script.src = url; // Attach event handlers for all browsers script.onload = script.onreadystatechange = function(){ if ( !done &amp;&amp; (!this.readyState || this.readyState == "loaded" || this.readyState == "complete") ) { done = true; callback(); // execute callback function // Prevent memory leaks in IE script.onload = script.onreadystatechange = null; head.removeChild( script ); } }; head.appendChild(script); } </code></pre> <p>I use a callback function argument, that will be executed when the script is loaded properly.</p> <p>Also notice that the <code>script</code> element is removed from the <code>head</code> after it is loaded and I remove the <code>load</code> and <code>readystatechange</code> events by setting them to <code>null</code>, that is made to prevent memory leaks on IE.</p> <p>Check an example usage <a href="http://jsbin.com/uqula" rel="nofollow noreferrer">here</a>.</p>
<p>I use this code to load-on-demand (using jQuery). Its blocking (but i need it) you can make it synchronous using <code>async:true</code></p> <pre><code>(function(script) { var included_files = new Array(); this.include = function(script) { var js_base = '/js/'; if (_.indexOf(included_files, script) == -1){ included_files.push(script); $.ajax({ url: js_base+script.split('.').join('/')+'.js', type: 'get', dataType: 'script', async: false, global:false, }); } }; })(); </code></pre> <p>It uses <a href="http://jquery.com/" rel="nofollow noreferrer">jQuery</a> and <a href="http://documentcloud.github.com/underscore/" rel="nofollow noreferrer">Underscore.js</a> for <code>.indexOf</code> but you can ommit latter with your own indexOf function.<br> Good luck.</p>
<p>CMS has shown a solid (looking, haven't tested) library independent method. Here's how you do it in Dojo.</p> <pre><code>dojo.require("namespace.object"); </code></pre> <p>You may need to specifiy the path to your namespace (ie: root folder)</p> <pre><code>dojo.registerModulePath("namespace", "../some/folder/path"); </code></pre> <p>See <a href="http://www.dojotoolkit.org/book/dojo-book-0-9/part-3-programmatic-dijit-and-dojo/modules-and-namespaces/what-does-dojo-require-" rel="nofollow noreferrer">the doc</a> for more info.</p>
<p>If you really want to use AJAX (as stated in the question) you can do so too. First, you download the javascript normally using XMLHttpRequest and when the download is finished you either eval() it or insert it inside a generated tag.</p> <pre><code>function xhr_load(url, callback) { xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (xhr.readyState == 4) { if (xhr.status == 200) { callback(xhr.responseText); } } } xhr.open("GET", url, true); xhr.send(null); } // (1) download using XHR and execute using eval() xhr_load('mylib.js', function(response) { eval(response.responseText); }); // (2) download using XHR and execute as an inline script xhr_load('mylib.js', function(response) { var script = document.createElement('script'); document.getElementsByTagName('head')[0].appendChild(script); script.text = response.responseText; }); </code></pre> <p>Also, Steve Souders has done amazing job in this field and I can highly recommend watching his talk on this <a href="http://sites.google.com/site/io/even-faster-web-sites" rel="nofollow noreferrer">video</a>.</p>