Javascript object creation on the fly
<p>I'm sure I've seen some examples of this in jquery. But for me, the following code does not work. The firebug debugger tells me that: 'Location is undefined'. Could you tell me if this is possible?</p> <pre><code>function ResolveGeoCode() { var Location; Location.Ad1 = "Hello "; Location.Ad2 = "World"; return Location; } var loc = ResolveGeoCode(); var String1 = loc.Ad1; //This contains "Hello "? var String2 = loc.Ad2; //This contains "World"? </code></pre> <p>Could a name be given to this type of feature I'm looking for?</p> <p>Thanks.</p>
<pre><code>var ResolveGeoCode = { Ad1 : "Hello", Ad2 : "World" } var String1 = ResolveGeoCode.Ad1; //This contains "Hello "? var String2 = ResolveGeoCode.Ad2; //This contains "World"? </code></pre>
<p>This is the syntax for inline object creation (In this case returned from a function.).</p> <pre><code>function ResolveGeoCode() { return { Ad1: "Hello ", Ad2: "World" }; } </code></pre>
<p>What you're missing here is that {} are the markers for a dynamic object in ECMAScript. So when you see code like ChaosPandion's that's what's actually happening. </p> <p>In your example you could pretty much change the word function to class and you're almost there to a full class. </p>
<p>In your code try to change:</p> <pre><code>var Location; </code></pre> <p>in </p> <pre><code>var Location = {}; </code></pre>
<p>This is what's happening:</p> <pre><code>function ResolveGeoCode() { // Location is declared, but its value is `undefined`, not `object` var Location; alert(typeof Location); // &lt;- proof pudding // Failing here because you're trying to add a // property to an `undefined` value Location.Ad1 = "Hello "; Location.Ad2 = "World"; return Location; } </code></pre> <p>Fix it by declaring <code>Location</code> as an empty object literal before trying to add properties to it:</p> <pre><code>function ResolveGeoCode() { var Location = {}; alert(typeof Location); // now it's an object // Programmatically add properties Location.Ad1 = "Hello "; Location.Ad2 = "World"; return Location; } </code></pre> <p>If you know the properties and their corresponding values ahead of time, you can use a more <em>inline</em> approach:</p> <pre><code>function ResolveGeoCode() { var Location = { Ad1: "Hello ", Ad2: "World" }; // ...further manipulations of Location here... return Location; } </code></pre> <p><a href="http://www.zebrakick.com/blog/object-literals-vs-constructed-objects-in-javascript/" rel="nofollow noreferrer">Read here</a> for more on object literals.</p>
<p>In the "ResolveGeoCode" function:</p> <ol> <li><p>Do what Mic described above: Initialize the variable "Location" by using the empty object constructor, "{}".</p></li> <li><p>Try adding members dynamically like this:</p></li> </ol> <p>Location['Ad1'] = 'Hello';<br/> Location['Ad2'] = 'World';</p>