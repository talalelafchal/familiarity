Does changing window.location stop execution of javascript?
<p>When writing server-side code you need to explicitly stop execution after sending a "Location: ..." header to the client or your code will continue to execute in the background. </p> <p>But what about when you change window.location in a client-side script? Does this immediately stop execution of the current script or is it up to the programmer to make sure that any code located after this call is not reached?</p>
<p>Setting <code>window.location</code> does not implicitly stop JS execution. Take the following as an example:</p> <pre><code>function locationTest() { window.location = 'http://www.google.com/'; window.open('http://www.yahoo.com/'); } locationTest(); </code></pre> <p>Try running that from Firebug/Web Inspector/etc. and you'll notice that the current window will load Google, but a new window will open with Yahoo as well.</p>
<blockquote> <p>Does this immediately stop execution of the current script</p> </blockquote> <p>No, the remaining handler script will execute to the end before control returns to the browser and events start happening. When loading of the new page gets far enough for ‘navigation’ to occur, the <code>beforeunload</code> and <code>unload</code> events will fire, <em>then</em> the page and any script in it will become inactive.</p> <p>However, any further queued events and timeouts might not fire. For example if you navigate the page in a <code>click</code> handler of a form submit button and don't cancel the default action, it is possible (race condition) for the navigation to occur before the <code>submit</code> event queued by the default action of the <code>click</code>.</p>