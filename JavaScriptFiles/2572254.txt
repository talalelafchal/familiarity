Why does Google's closure library not use real private members?
<p>I've been a JavaScript developer for a while now, and I've always thought that the correct way to implement private members in JavaScript is to use the technique outlined by Doug Crockford here: <a href="http://javascript.crockford.com/private.html" rel="nofollow noreferrer">http://javascript.crockford.com/private.html</a>.</p> <p>I didn't think this was a particularly controversial piece of JavaScript wisdom, until I started using the Google Closure library. Imagine my surprise... the library makes no effort to use Crockford-style information hiding. All they do is use a special naming convention and note "private" members in the documentation. I'm in the habit of assuming that the guys at Google are usually on the leading edge of software quality, so what gives? Is there some downside to following Mr. Crockford's advice that's not obvious?</p>
<p>There are a lot of examples of pseudo-privacy in main-stream JavaScript libraries. Facebook Connect's JavaScript library has the same structure.</p> <p>The main reason developers go that route is for performance. Hiding things in closures can be slower and use more memory. Closure-hiding can also be less flexible, as true privacy can't be carried between files without <a href="http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth" rel="nofollow noreferrer">some clever hacks</a>. Closure-hiding is more conceptually pure, IMO, but when performance is a concern, using pseudo-privacy is the way to go.</p> <p>The other reason is that a lot of Google programmers have backgrounds in Python, where there are no private anythings and the underscore prefix is the accepted community standard.</p>
<p>There's also more to the JSDOC notation than meets the eye--when you use the google closure compiler, those "@private" tags are parsed and enforced. If any external objects tries to access one of these variables, a compile error is generated. They do in fact have a philosophical objection to the general Crockford inheritance pattern: <a href="http://www.bolinfest.com/javascript/inheritance.php" rel="nofollow">http://www.bolinfest.com/javascript/inheritance.php</a></p>
<p>Their inheritance model using goog.inherit() and goog.base() simply copy prototype members from the superclass to the subclass.</p> <p>You can see that the <em>sugar</em> function from Doug Crockford does the same. I have personally faced lots of problems while inheriting a <em>privileged</em> member (this.property).</p> <p>With both methods of inheritance, the private variables simply disappear as unlike C++ or Java where you have no access to the superclass' private members but they are still inherited. This has to be the major reason they prefer this approach.</p>