A simple question about Javascript functions, differences in invocation/definition
<p>Can someone please explain the difference between the following function definitions?</p> <pre><code>var alertMessage = function alertMessage(message) { alert(message); } var alertMessage = function(message) { alert(message); } </code></pre> <p>What are the implications of each? Thanks!</p>
<p>Both are <em>function expressions</em>, basically the difference is that the first is named, and the second one is anonymous.</p> <p>For example:</p> <pre><code>var test = function test(message) { alert(message); }; var test1 = function(message) { alert(message); }; test.name; // "test" test1.name // "" or "anonymous" </code></pre> <p><em>Note:</em> The <code>name</code> property of function objects exist on some implementations, but it's non-standard.</p> <p>Also, the name of function expressions it's useful for debugging, as you can inspect the call stack to see where you are.</p> <p>This identifier is only accessible from inside the <code>FunctionBody</code> itself:</p> <pre><code>(function foo(){ typeof foo; // "function" })(); typeof foo; // "undefined" </code></pre> <p>However there is a <a href="http://groups.google.com/group/comp.lang.javascript/msg/5b508b03b004bce8" rel="nofollow noreferrer">bug</a> on the JScript implementation (in all versions of IE), which this name is leaked to its enclosing scope.</p>
<p>Both definitions are function expressions, as opposed to function declarations, or functions created by the <code>Function</code> constructor. They both assign a function to the variable <code>alertMessage</code>. The difference is that the first function is named, while the second is anonymous.</p> <p>Named functions are usually used in function declarations, eg</p> <pre><code>function alertMessage(message) { ... } </code></pre> <p>In that case, the function declaration creates a variable in the current scope called <code>alertMessage</code> that references that function. Function declarations are hoisted to the top of the current scope, so you can call declared functions before they're defined in you <code>js</code> file.</p> <p>A named function used in a function expression (such as the original question) does not create this variable, or get hoisted to the top of the execution scope, so by convention most function expressions are anonymous. The only benefits to naming a function expression are that the <code>name</code> variable is bound within the function (although as CMS mentions, this is implementation dependent) and the function name is output from the function's <code>toString</code> method. This can be useful during debugging (rather than having Firebug output <code>(?)</code> for a huge list of anonymous function calls).</p> <p>Much more detail at <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Functions_and_function_scope#Function_constructor_vs._function_declaration_vs._function_expression" rel="nofollow noreferrer">MDC</a></p>