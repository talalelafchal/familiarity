Creating and parsing huge strings with javascript?
<p>I have a simple piece of data that I'm storing on a server, as a plain string. It is kind of ridiculous, but it looks like this:</p> <pre><code>name|date|grade|description|name|date|grade|description|repeat for a long time </code></pre> <p>this string can be up to 1.4mb in size. The idea is that it's a bunch of student records, just strung together with a simple pipe delimeter. It's a very poor serialization method.</p> <p>Once this massive string is pushed to the client, it is split along the pipes into student records again, using javascript.</p> <p>I've been timing how long it takes to create, and split, these strings on the client side. The times are actually quite good, the slowest run I've seen on a few different machines is 0.2 seconds for 10,000 'student records', which has a final string size of ~1.4mb.</p> <p>I realize this is quite bizarre, just wondering if there are any inherent problems with creating and splitting such large strings using javascript? I don't know how different browsers implement their javascript engines. I've tried this on the 'major' browsers, but don't know how this would perform on earlier versions of each.</p> <p>Yeah looking for any comments on this, this is more for fun than anything else!</p> <p>Thanks</p>
<p>String splitting for 1.4mb data is not a problem for decent machines, instead you should worry about the internet connection speed of your users. I've tried to do spell check with 800 kb dictionary (which is half of your data), main issue was loading time.</p> <p>But looks like your students records data could be put in database, and might not need to load everything at loading time, So, how about do a pagination to show user records or use ajax to request to search certain user names?</p>
<p>If it's a <em>really</em> large string it may pay to continuously slice the string with <code>'string'.slice(from, to)</code> to only process a smaller subset, appending all of the individual items to the end of the output with <code>list.push()</code> or something similar might work.</p> <p>String split methods are probably the most efficient way of doing this though, even in IE. Processing individual characters using <code>string.charAt(x)</code> is extremely slow and will often show a security error as it stalls the browser. Using string split methods would certainly be much faster than splitting using regular expressions.</p> <p>It may also be possible to encode the data using a JSON array, some newer browsers such as IE8/Webkit/FF3.5 have fast JSON parsing built in using <code>JSON.parse(data)</code>. But using <code>eval(JSON)</code> may overflow the browser if there's enough data, so is probably a bad idea. It may pay to compare for performance though.</p> <p>A much better approach in a lot of cases is to use AJAX and only load some of the data at once from the server, which would also save download time.</p>
<p>Besides S. Mark's excellent comments about local vs. x-fer speed and the tip to re-encode using AJAX, I suggest a (longterm) move away from JavaScript in the Browser (<strong>assuming that's were it runs</strong>) to either a non-browser implementation of JS (or possibly another language). </p> <p>A browser based JS seems a week link in a data-x-fer chain and nothing I would want to run unmonitored, since the browsers are upgraded from time to time and breaking your JS-x-fer might be an unanticipates side effect!</p>