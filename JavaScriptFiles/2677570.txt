How to POST data to an HTTP page from an HTTPS page
<p>I know this is a long shot, but I figured I'd ask the question anyway.</p> <p>I have an HTTPS page and am dynamically creating a form. I want to POST the form to an HTTP page. Is this possible without the browser popping up a warning? When I do this on IE8, I get the following message:</p> <blockquote> <p><a href="http://www.freeimagehosting.net/uploads/2536451b5f.png" rel="nofollow noreferrer">Do you want to view only the webpage content that was delivered securely</a>?</p> </blockquote> <p>Essentially, I'm asking about the inverse of question 1554237.</p>
<p>Sadly, I know of absolutely no way to not get warned when posting from HTTPS to HTTP. If you serve the form securely, the browser expects to submit the data securely as well. It would surprise the user if anything else was possible.</p>
<p>Nope, can't be done. Our good friend IE will always pop up that warning.</p>
<p>You can solve this by either acting as a proxy for the form destination yourself (i.e. let the form submit to your server which in turn fires a normal HTTP request and returns the response), or to let access the page with the form by HTTP only.</p>
<p>If you don't need to actually redirect to the insecure page, you can provide a web service (authenticated) that fires off the request for you and returns the data.</p> <p>For example: From the authenticated page, you call <code>doInsecure.action</code> which you create as a web service over https. <code>doInsecure.action</code> then makes a manual POST request to the insecure page and outputs the response data.</p>
<p>You should be able to do this with the opensource project Forge, but it sounds like overkill. The Forge project provides a JavaScript interface (and XmlHttpRequest wrapper) that can do cross-domain requests. The underlying implementation uses Flash to enable cross-domain (including http &lt;=> https) communication.</p> <p><a href="http://github.com/digitalbazaar/forge/blob/master/README" rel="nofollow noreferrer">http://github.com/digitalbazaar/forge/blob/master/README</a></p> <p>So you would load the Forge JavaScript and swf from your server over https and then do a Forge-based XmlHttpRequest over http to do the POST. This would save you from having to do any proxy work on the server, but again, it may be more work than just supporting the POST over https. Also, the assumption here is that there's nothing confidential in the form that is being posted.</p>
<p>There is a way to do this if you write a back-end service of your own. So lets say you want to post an HTTP request to s1 using your front-end service fs1.</p> <p>If you use Spring, you can use an ajax call from fs1 to a 'uri' that is recognized by your spring back-end, say bs1. Now, the service bs1 can make the call to the s1.</p> <p>Pictorial representation here: <a href="http://i.stack.imgur.com/2lTxL.png" rel="nofollow">http://i.stack.imgur.com/2lTxL.png</a></p> <p>code:</p> <pre><code>$.ajax ({ type: "POST", uri:/json/&lt;methodName&gt; data: $('#Form').serialize(), success: function(response) { //handle success here }, error: function (errorResponse) { //handle failure here } }) </code></pre>