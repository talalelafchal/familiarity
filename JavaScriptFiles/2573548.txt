Given a string describing a Javascript function, convert it to a Javascript function
<p>Say I've got a Javascript string like the following</p> <pre><code>var fnStr = "function(){blah1;blah2;blah3; }" ; </code></pre> <p>(This may be from an expression the user has typed in, duly sanitized, or it may be the result of some symbolic computation. It really doesn't matter).</p> <p>I want to define <code>fn</code> as if the following line was in my code:</p> <pre><code>var fn = function(){blah1;blah2;blah3; } ; </code></pre> <p>How do I do that?</p> <p>The best I've come up with is the following:</p> <pre><code>var fn = eval("var f = function(){ return "+fnStr+";}; f() ;") ; </code></pre> <p>This seems to do the trick, even though it uses the dreaded <code>eval()</code>, and uses a slightly convoluted argument. Can I do better? I.e. either not use <code>eval()</code>, or supply it with a simpler argument?</p>
<p>You can do this:</p> <pre><code>//in your case: eval("var fn = " + fnStr); eval("var fn = function(){ blah1;blah2;blah3; }"); fn(); </code></pre> <p>Not sure how to get it much simpler, sometimes there's no (better) way around <code>eval()</code>. Here's a <a href="http://jsfiddle.net/t3ktE/" rel="nofollow noreferrer">quick example of this in action</a>.</p>
<p>There's also the <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function">Function</a> object.</p> <pre><code>var adder = new Function("a", "b", "return a + b"); </code></pre>
<p>Use parentheses.</p> <pre><code>var fn = eval("(function() {...})"); </code></pre> <p>This technique is also good for transmitting JSON values.</p> <p>By the way, it's often better to build functions by composing them directly from other functions. If you are using strings, you have to worry about things like unexpected <a href="http://en.wikipedia.org/wiki/Common_Lisp#Variable_capture_and_shadowing">variable capture</a>.</p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function?redirectlocale=en-US&amp;redirectslug=JavaScript/Reference/Global_Objects/Function" rel="nofollow">Function </a> constructor creates a new Function object. In JavaScript every function is actually a Function object.</p> <pre><code>// Create a function that takes two arguments and returns the sum of those arguments var fun = new Function("a", "b", "return a + b"); // Call the function fun(2, 6); Output: 8 </code></pre>
<p>one way:</p> <pre><code> var a = 'function f(){ alert(111); } function d(){ alert(222);}'; eval(a); d(); </code></pre> <p>second more secure way to convert string to a funciton: </p> <pre><code> // function name and parameters to pass var fnstring = "runMe"; var fnparams = ["aaa", "bbbb", "ccc"]; // find object var fn = window[fnstring]; // is object a function? if (typeof fn === "function") fn.apply(null, fnparams); function runMe(a,b){ alert(b); } </code></pre> <p>look working code <a href="http://plnkr.co/edit/OiQAVd9DMV2PfK0NG9vk" rel="nofollow">http://plnkr.co/edit/OiQAVd9DMV2PfK0NG9vk</a></p>
<p>You can also insert the string into a script element and then insert the script element into the page.</p> <pre><code>script_ele = window.document.createElement("script"); script_ele.innerHTML = 'function my_function(){alert("hi!");}'; window.document.body.appendChild(script_ele); my_function(); </code></pre>