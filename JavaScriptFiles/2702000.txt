Is there a way in JavaScript which clicks an anchor
<p>Is there anyway in JavaScript which emulate user clicks an anchor?</p> <p>Mozilla(Firefox ) does not implement that. <a href="https://developer.mozilla.org/en/DOM/element.click" rel="nofollow noreferrer">https://developer.mozilla.org/en/DOM/element.click</a></p> <p>But is there any browser which does?</p>
<p>Try:</p> <pre><code>window.location = document.getElementById('myAnchorId').href; </code></pre> <p>This will cause the page to navigate to the href.</p> <pre><code>&lt;a href="myAnchorId" href="www.mysite.com"&gt;Test&lt;/a&gt; </code></pre>
<pre><code>$('#suchandsuch').click(); </code></pre> <p>Is this not working for you?</p>
<p>I don't know if any browser would support that behavior, but you could do a "setTimeOut", given a number of seconds you can run a function that will trigger whatever it is that would or could have a click event to it.</p> <p>However, something needs to trigger the initial function, even if it is an "onLoad" event.</p>
<blockquote> <p><em>Is there anyway in JavaScript which emulate user clicks an anchor?</em></p> </blockquote> <p>The <code>click()</code> function is not supposed to navigate to the href of the link. The jQuery's one also doesn't. The <code>click()</code> function will however fire all functions attached to the <code>click</code> event / <code>onclick</code> attribute. To change the window location to be the link href's one, just do</p> <pre><code>window.location = linkElement.href; </code></pre> <p>You can even go a step further:</p> <pre><code>&lt;script&gt; function navigate(link) { window.location = link.href; } &lt;/script&gt; &lt;p&gt;&lt;a id="link" href="http://google.com" onclick="navigate(this)"&gt;link&lt;/a&gt; &lt;script&gt; document.getElementById("link").click(); &lt;/script&gt; </code></pre> <blockquote> <p><em>But is there any browser which does?</em></p> </blockquote> <p>MSIE does it (incorrectly).</p>
<p>I recommend to bind events with jquery, then later programmatically click them also with jquery. However, if you just can't include jquery:</p> <pre><code>function AnchorClick(anchorId) { var elem = document.getElementById(anchorId); if (elem.onclick!=null) { elem.onclick(); } else if ((elem.href!=null) &amp;&amp; (elem.href!="")) { var matches = /^javascript:(.+)$/.exec(elem.href); if ((matches!=null) &amp;&amp; (matches.length&gt;1)) { // the href is a javascript snippet, execute it var tempUndefined; var script = "({func:function(){"+matches[1]+"}})"; var json = eval(script); elem.tempFunc = json.func; // set the eval'd function on the item itself so it will be executed with the correct scope elem.tempFunc(); elem.tempFunc = tempUndefined; // eliminate the temp function } else { // the href wasnt a javascript snippet, just navigate to the href window.location = elem.href; } } } </code></pre> <p>EDITED: This above function was updated to now preserve the scope for any href="javascript:" script handler and supports any of the following anchor formats:</p> <ul> <li><p>anchor with regular script onclick="" attribute. Note the href="javascript:void(0)" is so the link will be rendered as focusable so that in addition to using the mouse, disabled users can use the tab key to navigate to and hit ENTER to cause the click action:</p> <p>&lt;a href="javascript:void(0)" onclick="dostuff();"&gt;fooContent&lt;/a&gt;</p></li> <li><p>anchor with javascript href</p> <p>&lt;a href="javascript:dostuff();"&gt;fooContent&lt;/a&gt;</p></li> <li><p>anchor with normal navigation link</p> <p>&lt;a href="http://www.yahoo.com"&gt;fooContent&lt;/a&gt;</p></li> </ul>