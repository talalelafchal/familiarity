Update calculation function to include dynamically added rows
<p>I have a simple function that computes the difference between two text fields: txtItemAmount1 and txtAdjustmentAmount. The difference it placed in a label (Difference). </p> <p>The problem I'm having is that by clicking the "Add Row" button, the user can add more "txtItemAmount" rows. I would like all of these rows to be included in the calculation. For example, right now if the user enters "20.00" in txtAdjustmentAmount, and "10.00" in txtItemAmount1, the difference label will show "10.00." If I click the "Add row" button, and type in "1.00" I would like that also added to this calculation, thus the difference would be "11." Can someone provide a code example of how to incorporate these newly added fields in the calculation?</p> <p>Thanks!</p> <pre><code>&lt;body&gt; &lt;form name="frmInput" id="frmInput"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;p&gt;&lt;label for="AdjustmentAmount"&gt;Adjustment Amount:&lt;/label&gt;&lt;/p&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;&lt;input name="txtAdjustmentAmount" type="text" id="txtAdjustmentAmount" size="10" maxlength="10"&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;p&gt;&lt;strong&gt;&lt;font color="#FF0000"&gt;Difference:&lt;label for="Difference" id="Difference"&gt;&lt;/label&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;table id="tblDetail"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td colspan="6"&gt;Item Amount:&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="6"&gt; &lt;input type="button" class="button" value= "Add Row" id="btnNewRow" name="btnNewRow" onClick="javascript:addNewRow();"&gt; &lt;input type="hidden" id="txtIndex" name="txtIndex" value="1"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p&gt; &lt;input name="txtItemAmount1" type="text" id="txtItemAmount1" size="10" maxlength="10" onKeyUp="calcDifference(frmInput.txtItemAmount1.value, frmInput.txtAdjustmentAmount.value)"&gt; &lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/form&gt; &lt;script language="javascript"&gt; function addNewRow() { var iX = document.getElementById("txtIndex").value; iX ++; document.getElementById("txtIndex").value = iX; var tbl = document.getElementById("tblDetail").getElementsByTagName("TBODY")[0]; var tr = document.createElement("TR"); tbl.appendChild(tr); //txtItemAmount1 var tdItemAmount = document.createElement("TD"); tr.appendChild(tdItemAmount); var p = document.createElement("P"); tdItemAmount.appendChild(p); var txtItemAmount = document.createElement("input"); p.appendChild(txtItemAmount); txtItemAmount.id = "txtItemAmount" + iX; txtItemAmount.setAttribute('name','txtItemAmount' + iX); txtItemAmount.setAttribute('size',10); } function calcDifference(txtAdjustmentAmount, txtItemAmount) { var txtAdjustmentAmount = parseFloat(document.getElementById('txtAdjustmentAmount').value); var txtItemAmount = parseFloat(document.getElementById('txtItemAmount1').value); var Difference = txtItemAmount - txtAdjustmentAmount; document.getElementById('Difference').innerHTML = Difference } &lt;/script&gt; &lt;/body&gt; </code></pre>
<p>This is where a JavaScript framework comes in handy. If you give these elements the same class name, you can query them out of the DOM easily, loop through them, and calculate your amount. Forget about referring to specific IDs.</p>
<p>Simplify your calcDifference to take no parameters:</p> <pre><code>&lt;input class="txtItemAmount" name="txtItemAmount1" type="text" id="txtItemAmount1" size="10" maxlength="10" onKeyUp="calcDifference()"&gt; </code></pre> <p>Add these lines to your addRow function:</p> <pre><code>txtItemAmount.className = "txtItemAmount"; // Add a class you can reference later txtItemAmount.addEventListener('keyup',calcDifference,false); // Add the key up handler </code></pre> <p>And change calcDifference() to look at all elements with class "txtItemAmount":</p> <pre><code>function calcDifference() { var txtAdjustmentAmount = parseFloat(document.getElementById('txtAdjustmentAmount').value); // Stores total of txtItemAmount elements var total = 0; var items = document.getElementsByClassName("txtItemAmount"); for(var i=0; i&lt;items.length; i++) { // Parse each value var itemVal = parseFloat(items[i].value); // Add it to the total if it is a legal number if(!isNaN(itemVal)) { total += itemVal; } } // Subtract the adjustment from the total document.getElementById('Difference').innerHTML = total - txtAdjustmentAmount; } </code></pre> <p><strong>Update:</strong></p> <p>If you want IE support, without having to rewrite or get a third-party getElementsByClassName function (<a href="http://robertnyman.com/2008/05/27/the-ultimate-getelementsbyclassname-anno-2008/" rel="nofollow noreferrer">http://robertnyman.com/2008/05/27/the-ultimate-getelementsbyclassname-anno-2008/</a>), you can do this:</p> <p>You already track your element count in the hidden input txtIndex. You can use this to look through each element from 1-txtIndex. The problem with this is that this input can persist when you refresh the page, meaning your index will not match your page contents. What you should do is either keep a globally defined variable (such as iX) to track this information, or make sure that you reset the txtIndex on page load and use that to get each element. Assuming the latter:</p> <p>Add init call to body element:</p> <pre><code>&lt;body onload="init()"&gt; </code></pre> <p>Add init function that initializes values:</p> <pre><code>function init() { document.getElementById("txtIndex").value=1; // You could also clear out txtAdjustmentAmount and txtItemAmount1, // if you don't want these to persist after reloading the page document.getElementById("txtAdjustmentAmount").value=""; document.getElementById("txtItemAmount1").value=""; } </code></pre> <p>Change calcDifference to use txtIndex and getElementById:</p> <pre><code>function calcDifference() { var txtAdjustmentAmount = parseFloat(document.getElementById('txtAdjustmentAmount').value); // Stores total of txtItemAmount elements var total = 0; // Retrieve index value var iX = document.getElementById("txtIndex").value; for(var i=1; i&lt;=iX; i++) { // Get value: var item = document.getElementById("txtItemAmount"+i); // Parse each value var itemVal = parseFloat(item.value); // Add it to the total if it is a legal number if(!isNaN(itemVal)) { total += itemVal; } } // Subtract the adjustment from the total document.getElementById('Difference').innerHTML = total - txtAdjustmentAmount; } </code></pre>