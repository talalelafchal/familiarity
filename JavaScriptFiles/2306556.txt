countdown in javascript
<p>I have got a piece of code, that should countdown some number (in this example 1111) and write it into span id="timeframe". But it doesn't work, i dont know why. Can you tell me where is my mistake, please? </p> <pre><code>&lt;script language="JavaScript"&gt; &lt;!-- var txt_minute = "Min"; var txt_second = "s"; var time_left = 1111; var temp=timeleft; houres = Math.floor(temp / 3600); temp %= 3600; minutes = Math.floor(temp / 60)"; temp %= 60; seconds= temp; function display() { time_left -= 1; if (seconds &lt;= 0) { seconds = 59; minutes -= 1; } else { seconds -= 1; } if (minutes &lt;= 0){ minutes=59; houres-=1; } if (time_left &lt;= 0) { seconds = 0; } if (time_left &gt; 0) { document.getElementById("timeframe").innerHTML = houres +" hours" + minutes + " " + txt_minute + " " + seconds + " " + txt_second; } else { window.location.reload(); } setTimeout("display()",1000); } display(); //--&gt; &lt;/script&gt; </code></pre>
<pre><code> minutes = Math.floor(temp / 60)"; </code></pre> <p>?</p>
<p>One thing that jumps out at me is that your calculation at the top (starting with <code>var temp...</code>) should be <em>inside</em> the <code>display</code> function (which probably wants a new name). Where it is, it's only done once. (I'm also not convinced that the actual calcuation is correct. In fact, the code overall is not really ideal, you might not want to get more code from wherever you got this. But I'm not going to rewrite it for this answer.)</p> <p>See also n00b32's answer, there seems to be a syntax error near the top.</p> <p>Also (OT): You can change your <code>setTimeout</code> to: <code>setTimeout(display, 1000)</code>. No need for the quotes and parens.</p>
<p>There are some smaller mistakes:</p> <ol> <li><code>minutes = Math.floor(temp / 60)";</code><br> There is a trailing quotation mark that shouldn't be there.</li> <li><code>var temp=timeleft;</code><br> That should be <code>time_left</code>.</li> <li>Also you should use setTimeout with a <em>reference</em> to the function instead of requiring it to parse the text as code: <code>setTimeout(display,1000);</code></li> </ol> <p><strong>edit:</strong> I wrote a small, clearer countdown script.</p> <pre><code>function startCountdown ( timeLeft ) { var interval = setInterval( countdown, 1000 ); update(); function countdown () { if ( --timeLeft &gt; 0 ) update(); else { clearInterval( interval ); update(); completed(); } } function update () { hours = Math.floor( timeLeft / 3600 ); minutes = Math.floor( ( timeLeft % 3600 ) / 60 ); seconds = timeLeft % 60; alert( '' + hours + ':' + minutes + ':' + seconds ); } function completed () { alert( 'completed' ); } } startCountdown( 1234 ); </code></pre> <p>Just alter the <code>update</code> and <code>completed</code> function to your needs and start the countdown with your desired value.</p> <p>And btw. if you want to change some <code>innerHTML</code> of an element in your code, you should save the reference somewhere, instead of getting it via DOM every call.</p>
<p>All the typos that have been mentioned above and one logic flaw ..</p> <p>If the code is in the head section of the html then the first time you call the <code>display()</code> the timeframe element has not been created yet..</p> <p>instead of <code>display();</code> use <code>window.onload=display;</code> to run it for the first time, after the dom has loaded..</p> <p>here is a fixed working version of your code.. <a href="http://jsbin.com/orege/edit" rel="nofollow noreferrer">http://jsbin.com/orege/edit</a></p>
<p>As an additional improvement (but first get the basic version working by reading everyone else's comments), I like to replace this line</p> <pre><code> setTimeout(display, 1000); </code></pre> <p>with this:</p> <pre><code> var next = 1010 - (new Date()).getTime() % 1000; setTimeout(display, next); </code></pre> <p>The first version will never run exactly every second (due to other processes running and other inaccuracies in <code>setTimeout</code>). This can make your display jump 2 seconds at once when one call of <code>display()</code> happens at the end of second <code>n</code> and the next call only happens at the beginning of <code>n+2</code>. The second version looks at the current time (down to the millisecond), and tries to schedule the next call of <code>display()</code> just after the start of each second, which results in a much smoother display.</p>