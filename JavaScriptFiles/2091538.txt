javascript order of execution
<pre><code>var c = false; if(c=[] &amp;&amp; c.length==0)alert('hi'); </code></pre> <p>hi is not alerted because c is still false when it executes the second operand of &amp;&amp;, can someone explain how the boolean operands in if condition are executed and in what order?</p>
<p>I believe this is just a precedence issue - <code>&amp;&amp;</code> is binding tighter than <code>=</code>. Your code is equivalent to:</p> <pre><code>if (c = ([] &amp;&amp; c.length == 0)) { alert('hi'); } </code></pre> <p>So it's assigning <code>c</code> the value <code>false</code> rather than the empty array.</p> <p>Try this instead:</p> <pre><code>if ((c = []) &amp;&amp; c.length == 0) { alert('hi'); } </code></pre> <p>EDIT: To address Tryptich's comment - I did try this before posting :) As CMS said, an empty array is considered true. Try this:</p> <pre><code>if (c = []) { alert('empty array is true'); } </code></pre> <p>or even just this:</p> <pre><code>if ([]) { alert('empty array is true'); } </code></pre> <p>I checked the spec before posting - I was somewhat surprised that an empty array is considered true, but it is...</p>