Get global variable dynamically by name string in JavaScript
<pre><code>&lt;script&gt; //in one script var someVarName_10 = 20; &lt;/script&gt; </code></pre> <p>I want to get access to this variable from another script by name of variable. With window object its simple, is it possible with local variable?</p> <p>I mean access this var by code like this:</p> <pre><code>&lt;script&gt; alert(all_vars['someVar' + 'Name' + num]); &lt;/script&gt; </code></pre>
<p>If this is what you said:</p> <pre><code>&lt;script type="text/javascript"&gt; var hello = 'test'; &lt;/script&gt; &lt;script type="text/javascript"&gt; alert (hello); &lt;/script&gt; </code></pre> <p>It works because script are finally available to the document and you can access their vars.</p>
<p>Do you want to do something like this?</p> <pre><code>&lt;script&gt; //in one script var someVarName_10 = 20; alert(window["someVarName_10"]); //alert 20 &lt;/script&gt; </code></pre> <p><strong>Update</strong>: because OP edited the question.</p> <pre><code>&lt;script&gt; num=10; alert(window['someVar' + 'Name_' + num]); //alert 20 &lt;/script&gt; </code></pre>
<p>Try</p> <pre><code>&lt;script type="text/javascript"&gt; var hello = 'test'; alert(window.hallo); &lt;/script&gt; </code></pre> <p>or</p> <pre><code>&lt;script type="text/javascript"&gt; var hello = 'test'; alert(window["test"]); &lt;/script&gt; </code></pre> <p>Where "test" may be any Stringname of a variable</p>
<p>I've noticed that everyone is advising global var creation this will lead to variables leak to global namespace. When you dynamically creating classnames or just variables it's easy to keep em local:</p> <pre><code>this['className'] = 123; </code></pre> <p>or </p> <pre><code>this['varName'] = 123; </code></pre> <p>Name-spacing would look like this:</p> <pre><code>vars = {}; vars['varName'] = 123; vars.varName // 123 </code></pre>
<pre><code>&lt;script&gt; var someVarName_10 = 20; var num = 10; alert(eval('someVar' + 'Name_' + num)); //alert 20 &lt;/script&gt; </code></pre>
<p>well, for <strong>debugging purpose only</strong>, you could do something like this. I use it during the development of classes, where some variables must remain private (var). this work even in local variable (and global of curse) </p> <pre><code>function MYCLASS(){ var a=1, b=2, c=3; this.public = "variable"; this.debug = function(sVar){ return eval(sVar); } } var myThing = new MYCLASS(); myThing.debug('a') //return 1 myThing.debug('b') //return 2 myThing.debug('c') //return 3 </code></pre>