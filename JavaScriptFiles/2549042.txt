Dynamic table memory usage
<p>I use a dynamic table:</p> <pre><code>&lt;html&gt; &lt;body&gt; &lt;button id="button"&gt;Build table&lt;/button&gt; &lt;div id="container"&gt; &lt;script type="text/javascript"&gt; window.onload=function(){ var table = null; var row = "&lt;tr&gt;&lt;td&gt;111111111111111111111111111111111111111111111111111111&lt;/td&gt;" + "&lt;td&gt;222222222222222222222222222222222222222222222222222222&lt;/td&gt;" + "&lt;td&gt;333333333333333333333333333333333333333333333333333333&lt;/td&gt;&lt;/tr&gt;"; var data = null; for (var i = 0; i &lt; 2000; i++){ data += row; } var obj = document.getElementById("button"); obj.onclick=function buildTable(){ document.getElementById("container").innerHTML = "&lt;div&gt;&lt;table&gt;&lt;tbody&gt;" + data + "&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;"; }; }; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; </code></pre> <p>Using chromes task manager, each time new data is loaded the memory usage increases considerably and doesn't go down, so after some time the app consumes a lot of memory and requires the browser to be closed. Is there any change in the code I can use to solve this or is it a browser side problem?</p>
<p>Man, you are trying to add 2000 rows for each click! Thats a pritty large table and tables are quite memory consuming. Actually you have 2000 rows from the beginning, so clicking the button once will make i 4000. I would recommend recommend using some kind of pagination, limitied the max numbers of rows on in the document at once. Not more than 2000. What about removing the first 2000 before adding 2000 new ones?</p> <p>Maybe your page will be a bit faster if you redesign your code to use only nested divs instead of <code>&lt;table&gt;&lt;tr&gt;...&lt;/tr&gt;&lt;table&gt;</code> ... but still... 4000+ rows ... its a lot... not very userfriendly... scrolling... etc... What are you trying to make excatly ?</p>
<p>On my computer it works as expected, memory use build up, until the browser decide to run the garbage collector, at which point memory use go down to a base level.</p> <p>Are you sure that memory consumption actually does reach a critical level? If so I'd characterize it as a bug in Chrome, you shouldn't be able to make a memory leak just by feeding it malformed HTML.</p>