How to check and run math expression using Javascript
<p>I'm trying to make a Javascript function that will take a mathematical expression and apply it to a predefined number, for example:</p> <pre><code>var myNum = 10; function EQ(eq){ // code here } </code></pre> <p>For example the input should me something like this:</p> <pre><code>EQ("*100/10"); //output 100 EQ("+100"); //output will be 110 EQ("-+=1"); //output false </code></pre> <p>Is there any way to do that? Thanks</p>
<p>You could probably work <code>eval()</code> into a simple solution. For instance:</p> <pre><code>var myNum = 10; function EQ(eq) { return eval(myNum+eq); } alert( EQ("*100/10") ); // outputs 100 </code></pre> <p>I'd encourage you to expand upon this by implementing a <code>try-catch</code> and handling exceptions.</p>
<p>try this...</p> <pre><code>function EQ(input) { try { var ret = Number(eval('(0+(' + input + '))')); return isNaN(ret) ? null : ret; } catch(err) { } return null; }</code></pre> <p>You can replace the null default with a literal false if you like...</p>
<p>Here's a simple expression evaluator:</p> <pre><code>function evalExpression(text) { var tokens = text.split(" "); var output = []; var operators = []; var reNumber = /^\d+(\.\d+)?$/; var reOperator = /^[\/\+\*\-]$/; var precedence = { "+": 1, "-": 1, "*": 2, "/": 2 }; for (var i = 0; i &lt; tokens.length; ++i) { var t = tokens[i]; if (reNumber.test(t)) output.push(Number(t)); else if (reOperator.test(t)) { while (operators.length &amp;&amp; precedence[t] &lt;= precedence[operators[operators.length - 1]]) { output.push(operators.pop()); } operators.push(t); } else if (t == "(") operators.push(t); else if (t == ")") { while (operators.length &amp;&amp; operators[operators.length - 1] != "(") output.push(operators.pop()); if (!operators.length) return false; operators.pop(); } else return false; } while (operators.length) output.push(operators.pop()); var result = []; for (i = 0; i &lt; output.length; ++i) { t = output[i]; if (reNumber.test(t)) result.push(t); else if (t == "(" || result.length &lt; 2) return false; else { var lhs = result.pop(); var rhs = result.pop(); if (t == "+") result.push(lhs + rhs); if (t == "-") result.push(lhs - rhs); if (t == "*") result.push(lhs * rhs); if (t == "/") result.push(lhs / rhs); } } return result.pop(); } </code></pre> <p>It supports numbers and <code>+ - * / ( )</code>. Tokens must be separated by a single space, e.g.: "1 * ( 2 + 3 )" </p> <p>Anyway, that's the type of code you'd need if you didn't want to use <code>eval</code>. </p>