How to iterate javascript object properties in the order they were written
<p>I identified a bug in my code which I hope to solve with minimal refactoring effort. This bug occurs in Chrome and Opera browsers. Problem:</p> <pre><code>var obj = {23:"AA",12:"BB"}; //iterating through obj's properties for(i in obj) document.write("Key: "+i +" "+"Value: "+obj[i]); </code></pre> <p>Output in FF,IE Key: 23 Value: AA Key: 12 Value: BB</p> <p>Output in Opera and Chrome <strong>(Wrong)</strong><br/> Key: 12 Value BB<br/> Key: 23 Value AA<br/></p> <p>I attempted to make an inverse ordered object like this</p> <pre><code>var obj1={"AA":23,"BB":12}; for(i in obj1) document.write("Key: "+obj[i] +" "+"Value: "+i); </code></pre> <p>However the output is the same. Is there a way to get for all browser the same behaviour with small changes?</p>
<p>No. JavaScript Object properties have no inherent order. It is total luck what order a <code>for...in</code> loop operates.</p> <p>If you want order you'll have to use an array instead:</p> <pre><code>var map= [[23, 'AA'], [12, 'BB']]; for (var i= 0; i&lt;map.length; i++) document.write('Key '+map[i][0]+', value: '+map[i][1]); </code></pre>
<p>I think you'll find the only reliable way to do this would be to use an array rather than an associative array, eg:</p> <pre><code>var arr = [{key:23,val:"AA"},{key:12,val:"BB"}]; for(var i=0; i&lt;arr.length; i++) document.write("Key: "+arr[i].key +" "+"Value: "+arr[i].val); </code></pre>
<p>I did not get your result when the object property identifiers were alphabetic strings. IE8, FF5, Chrome 12, and Opera 9.8 all kept the creation order, i.e.</p> <p>Key: AA Value: 23 Key: BB Value: 12 </p> <p>It was when the identifiers were numbers that the results matched yours:-</p> <p>IE8, FF5 --> Key: 23 Value: AA Key: 12 Value: BB</p> <p>Opera, Chrome --> Key: 12 Value: BB Key: 23 Value: AA</p> <p>Opera and Chrome are storing in reverse of creation order because 12 is less than 23, so if you use instead say:-</p> <pre><code>var obj = {2:"AA",12:"BB"}; </code></pre> <p>then you get this result for all 4 browsers:-</p> <p>Key: 2 Value: AA Key: 12 Value: BB</p> <p>So it is the use of numbers as identifiers that causes the discrepancy. If identifiers are alphabetic then both creation and stored property orders are the same for the 4 browsers. This is despite ECMA rules that the stored order need not be related to creation order.</p> <p>If the string identifiers are numeric e.g. '23' and '12', then Opera and Chrome treat them as numbers and again reverse the creation order, so that type are not permitted either. '23a' types are OK as are 'a23' type.</p> <p>To answer your question, use non-numeric string identifiers and the behaviour will be the same across the 4 browsers (and possibly all browsers).</p>