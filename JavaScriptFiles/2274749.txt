JavaScript how to mock confirm method
<p>I have following code in my JavaScript code.</p> <pre><code>if (window.confirm('Are you sure?')) { AdminData.actOnResult('delete'); } </code></pre> <p>I am writing test for this piece of code. How do I mock window.confirm method? I tried following code but it did not work.</p> <pre><code>window.confirm = function(arg) { return true; }; </code></pre> <p>I can move the window.confirm method to another function and then I can mock that method. However I was wondering if there is a better solution.</p>
<p>Your own code works fine for me in IE. Just the following <em>in the global scope</em> should override it:</p> <pre><code>var confirm = function () { return true; } </code></pre> <p><strong>EDIT</strong><br> I've seen a few questions on SO in the past about trying to override <code>confirm</code>, mostly because they don't like it (and who would?). If you're trying to bypass it for this sort of reason, I suggest you look at changing your code to implement a callback-based replacement for confirm. Take a look at <a href="http://jqueryui.com/demos/dialog/#modal-confirmation" rel="nofollow noreferrer">jQuery UI's modal confirm</a> for a good example of this.</p>
<p>I'd think about implementing a wrapper around static methods on the window (or other) object. Then provide your wrapper to whatever uses the static method. Obviously this is easier if you are using a "class"-based implementation. Then, in order to mock the method, simply provide a different wrapper that returns the value that you want.</p> <pre><code>var windowWrapper = { confirm: function(msg) { return confirm(msg); }, ... }; var mockWrapper = { confirm: function(msg) { return true; }, ... } var wrapper = windowWrapper; if (test) { wrapper = mockWrapper; } </code></pre> <p>...</p> <pre><code>if (wrapper.confirm('Are you sure?')) { AdminData.actOnResult('delete'); } </code></pre>
<p>I am using Jasmine for unit testing and have mocked alert and confirm with the following</p> <pre><code>alert = function (alertString) {debug.log('ALERT:', alertString);}; var confirmValue = true; //set this before you expect the confirm statement to be shown confirm = function (confirmString) { debug.log('CONFIRM:', confirmString, confirmValue); return confirmValue; }; </code></pre> <p>Then I can say:</p> <pre><code>describe("test", function () { it('should test true confirm workflow', function () { confirmValue = true; // or false if you like //expect outcomes that would come from any confirms being called with true }); }); </code></pre> <p>It's not perfect, and if you have multiple confirms that could pop between setting that confirmValue, you could be in trouble. Perhaps then it would be good to setup a cue of expected confirm return values... tricky...</p>