inner object accessing container
<p>Is there a way for an inner object (t1) to access its container object. </p> <pre><code>var t = { fnc1: function(){ alert("fnc1"); }, t1: { fnc2: function(){ alert("fnc2"); }, fnc3: function(){ this.fnc1(); } } }; t.t1.fnc3(); </code></pre> <p>when executing the following code i get an error 'this.fnc1 is not a function' since the this is referring to the t1 object and not the t object. </p> <p>Is there any way to access the fnc1?</p>
<p>Sure, as long as you don't overwrite the variable:</p> <pre><code>t.fnc1() </code></pre> <p>If you want to call <code>fnc1()</code> as a method of <code>t.t1</code>, use <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/call" rel="nofollow noreferrer"><code>call()</code></a> or <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Function/Apply" rel="nofollow noreferrer"><code>apply()</code></a>.</p>
<p>Trying to use Javascript as a pure OO language, drives often to many frustrations.</p> <p>You could try to use instead the Javascript specific features, mainly functions and closures.<br/> I took you example and made a variant of it:</p> <pre><code>var t = function(){ var str = "fnc", fnc1 = function(){ alert( str + "1"); }; return { fnc1:fnc1, t1:{ fnc2:function(){ alert( str + "2"); }, fnc3:fnc1 } }; }; t().t1.fnc3(); </code></pre>