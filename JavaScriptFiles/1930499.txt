Does a javascript if statement with multiple conditions test all of them?
<p>In javascript, when using an if statement with multiple conditions to test for, does javascript test them all regardless, or will it bail before testing them all if it's already false?</p> <p>For example:</p> <pre><code> a = 1 b = 2 c = 1 if (a==1 &amp;&amp; b==1 &amp;&amp; c==1) </code></pre> <p>Will javascript test for all 3 of those conditions or, after seeing that b does not equal 1, and is therefore false, will it exit the statement?</p> <p>I ask from a performance standpoint. If, for instance, I'm testing 3 complex jQuery selectors I'd rather not have jQuery traverse the DOM 3 times if it's obvious via the first one that it's going to return FALSE. (In which case it'd make more sense to nest 3 if statements). </p> <p>ADDENDUM: More of a curiosity, what is the proper term for this? I notice that many of you use the term 'short circuit'. Also, do some languages do this and others dont?</p>
<p>The <code>&amp;&amp;</code> operator "short-circuits" - that is, if the left condition is false, it doesn't bother evaluating the right one.</p> <p>Similarly, the <code>||</code> operator short-circuits if the left condition is true.</p> <p>EDIT: Though, you shouldn't worry about performance until you've benchmarked and determined that it's a problem. Premature micro-optimization is the bane of maintainability.</p>
<p>It exits after seeing that b does not equal one.</p>
<p>It short circuits - only a and b will be compared in your example.</p>
<p>It will only test all the conditions if the first ones are true, test it for yourself:</p> <pre><code>javascript: alert (false &amp;&amp; alert("A") &amp;&amp; false); </code></pre>
<p>That's why you can do in javascript code like </p> <pre><code>var x = x || 2; </code></pre> <p>Which would mean that if x is undefined or otherwise 'false' then the default value is 2.</p>
<p>From a performance standpoint, this is not a micro-optimization.</p> <p>If we have 3 Boolean variables, a, b, c that is a micro-optimization.</p> <p>If we call 3 functions that return Boolean variables, each function may take a long time, and not only is it important to know this short circuits, but in what order. For example:</p> <p>if (takesSeconds() &amp;&amp; takesMinutes())</p> <p>is much better than</p> <p>if (takesMinutes() &amp;&amp; takesSeconds())</p> <p>if both are equally likely to return false.</p>
<p>Another reason why stopping evaluation with 1 or more parameters to the left.</p> <p>if (response.authResponse &amp;&amp; (response.authResponse.accessToken != user.accessToken)){ ... }</p> <p>the second evaluation relies on the first being true and won't throw a compile error if response.authResponse is null or undefined etc because the first condition failed.</p> <p>Other languages had this problem in the early days and I think it's a standard approach in building compilers now.</p>
<p>In case someone's wondering if there is a way to <strong>force the evaluation</strong> of all condition, there are the non short-circuit versions of &amp;&amp; and || which are simply &amp; and | </p> <pre><code>var testOr = true | alert(""); //alert pops up var testAnd = false &amp; alert(""); //alert pops up </code></pre> <p>the curious thing is that <a href="https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/Logical_Operators" rel="nofollow">MDN docs</a> don't talk about this.</p> <p>Hope it helps someone who arrived here looking for information like this (like me) </p>