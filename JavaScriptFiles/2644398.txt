Using a string as an object reference
<p>I currently have a Javascript function that uses a string to reference an object name and acces its properties. I'm currently using eval() to get the the desired effect which I know is very, very wrong. Here is an example of how I'm currently achieving what I want:</p> <pre><code>var stringToObjectRef = function() { var myTestVar = "myTestObject"; var myTestObject = { 'item1' : 100, 'item2' : 12, 'item4' : 18 }; var myValue = eval(myTestVar + '.item1'); alert(myValue); }(); </code></pre> <p>I've tried using something like [myTestVar].item1, but this returns undefined. What is the correct syntax to achieve this?</p> <p>Thanks in advance.</p>
<p>Try this instead:</p> <pre><code>var stringToObjectRef = function() { var myTestObject = { 'item1' : 100, 'item2' : 12, 'item4' : 18 }; var myValue = myTestObject['item1']; alert(myValue); }(); </code></pre>
<p>eval("myTestObject[\"item1\"") should do the trick, as myTestObject.item1 is shorthand for myTestObject["item1"]</p> <p><a href="http://stackoverflow.com/questions/169731/how-do-i-reference-an-object-dynamically/169740#169740">How do I reference an object dynamically?</a> </p>
<p>If you're talking about the <code>item1</code> part, you're looking for:</p> <pre><code>myValue = myTestObject["item1"]; </code></pre> <p>No need for <code>eval</code>. (There almost never is.)</p> <p>If you're talking about getting at the <code>myTestObject</code> variable using a "myTestObject" string, you want to refactor the code so you're not doing that, rather than using <code>eval</code>. Unfortunately the variable object used for symbol resolution within the function is not accessible directly. The refactor could just use an object explicitly:</p> <pre><code>var stringToObjectRef = function() { var objects = {}; var myTestVar = "myTestObject"; objects.myTestObject = { 'item1' : 100, 'item2' : 12, 'item4' : 18 }; var myValue = objects[myTestVar].item1; alert(myValue); }(); </code></pre> <p>Off-topic, I don't recall precisely why, but if you're going to execute that anonymous function immediately like that, you need to put the function expression in parentheses:</p> <pre><code>var x = (function() { return 5; })(); </code></pre> <p>rather than</p> <pre><code>var x = function() { return 5; }(); </code></pre> <p>Again, I don't recall why, and whether it was because of an implementation bug in a popular interpreter or an actual requirement of the syntax.</p>