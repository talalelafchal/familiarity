What do empty parentheses () after a function declaration do in javascript?
<p>I'm trying to read the Prototype source. I've come to this part.(Unfortunately, this snippet is in the beginnning).</p> <p>What does this () mean?</p> <pre><code> Browser: (function(){ var ua = navigator.userAgent; var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]'; return { IE: !!window.attachEvent &amp;&amp; !isOpera, Opera: isOpera, WebKit: ua.indexOf('AppleWebKit/') &gt; -1, Gecko: ua.indexOf('Gecko') &gt; -1 &amp;&amp; ua.indexOf('KHTML') === -1, MobileSafari: /Apple.*Mobile.*Safari/.test(ua) } })(), </code></pre> <p>I am referring to the last line before the comma?</p>
<p>It's a simple function call, no different than <code>foo()</code> except it's invoking an anonymous function literal, the result of the function is assigned to the <code>Browser</code> property.</p>
<p>it calls the anonymous function that was just declared, effectively causing the "block" to be evaluated.</p>
<p>The code is defining an anonymous function (the <code>(function (){ ... })</code> bit) and then calling it (with no arguments). It then assigns the value to the <code>Browser</code> property of the object that is presumably being defined outside of your code snippet. </p> <p>You could also define the function somewhere:</p> <pre><code>function myFunction() { var ua = navigator.userAgent; var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]'; return { IE: !!window.attachEvent &amp;&amp; !isOpera, Opera: isOpera, WebKit: ua.indexOf('AppleWebKit/') &gt; -1, Gecko: ua.indexOf('Gecko') &gt; -1 &amp;&amp; ua.indexOf('KHTML') === -1, MobileSafari: /Apple.*Mobile.*Safari/.test(ua) } </code></pre> <p>and then call it:</p> <pre><code>var foo = myFunction(); </code></pre> <p>and then assign the value:</p> <pre><code>... Browser: foo, ... </code></pre> <p>One downside with doing it that way is that you "pollute your namespace" with a function and a variable that you won't use anywhere else. The second issue is that you can't use the value of any locally-scoped variables in your function definition (the anonymous function behaves as a closure). </p>
<p><code>(function () {})</code> creates an anonymous function.</p> <p>Adding the <code>()</code> to the end calls the function that was just created.</p> <p>In the case of this particular function, the anonymous function returns several properties to the <code>Browser</code> object. So, you end up with boolean values for, e.g., <code>Browser.IE</code>, <code>Browser.Opera</code>, etc.</p>