Create a custom callback in JavaScript
<p>All I need to do is to execute a callback function when my current function execution ends.</p> <pre><code>function LoadData() { alert('The data has been loaded'); //Call my callback with parameters. For example, //callback(loadedData , currentObject); } </code></pre> <p>A consumer for this function should be like this:</p> <pre><code>object.LoadData(success); function success(loadedData , currentObject) { //Todo: some action here } </code></pre> <p>How do I implement this?</p>
<p>Actually, your code will pretty much work as is, just declare your callback as an argument and you can call it directly using the argument name.</p> <h3>The basics</h3> <pre><code>function doSomething(callback) { // ... // Call the callback callback('stuff', 'goes', 'here'); } function foo(a, b, c) { // I'm the callback alert(a + " " + b + " " + c); } doSomething(foo); </code></pre> <p>That will call <code>doSomething</code>, which will call <code>foo</code>, which will alert "stuff goes here".</p> <p>Note that it's very important to pass the function <em>reference</em> (<code>foo</code>), rather than calling the function and passing its result (<code>foo()</code>). In your question, you do it properly, but it's just worth pointing out because it's a common error.</p> <h3>More advanced stuff</h3> <p>Sometimes you want to call the callback so it sees a specific value for <code>this</code>. You can easily do that with the JavaScript <code>call</code> function:</p> <pre><code>function Thing(name) { this.name = name; } Thing.prototype.doSomething = function(callback) { // Call our callback, but using our own instance as the context callback.call(this); } function foo() { alert(this.name); } var t = new Thing('Joe'); t.doSomething(foo); // Alerts "Joe" via `foo` </code></pre> <p>You can also pass arguments:</p> <pre><code>function Thing(name) { this.name = name; } Thing.prototype.doSomething = function(callback, salutation) { // Call our callback, but using our own instance as the context callback.call(this, salutation); } function foo(salutation) { alert(salutation + " " + this.name); } var t = new Thing('Joe'); t.doSomething(foo, 'Hi'); // Alerts "Hi Joe" via `foo` </code></pre> <p>Sometimes it's useful to pass the arguments you want to give the callback as an array, rather than individually. You can use <code>apply</code> to do that:</p> <pre><code>function Thing(name) { this.name = name; } Thing.prototype.doSomething = function(callback) { // Call our callback, but using our own instance as the context callback.apply(this, ['Hi', 3, 2, 1]); } function foo(salutation, three, two, one) { alert(salutation + " " + this.name + " - " + three + " " + two + " " + one); } var t = new Thing('Joe'); t.doSomething(foo); // Alerts "Hi Joe - 3 2 1" via `foo` </code></pre>
<pre><code>function LoadData(callback) { alert('the data have been loaded'); callback(loadedData, currentObject); } </code></pre>
<p>Try:</p> <pre><code>function LoadData (callback) { // ... Process whatever data callback (loadedData, currentObject); } </code></pre> <p>Functions are first class in <a href="http://en.wikipedia.org/wiki/JavaScript" rel="nofollow noreferrer">JavaScript</a>; you can just pass them around.</p>
<p>It is good practice to make sure the callback is an actual function before attempting to execute it:</p> <pre><code>if (callback &amp;&amp; typeof(callback) === "function") { callback(); } </code></pre>
<p>My 2 cent. Same but different...</p> <pre><code>&lt;script&gt; dosomething("blaha", function(){ alert("Yay just like jQuery callbacks!"); }); function dosomething(damsg, callback){ alert(damsg); if(typeof callback == "function") callback(); } &lt;/script&gt; </code></pre>
<pre><code> function callback(e){ return e; } var MyClass = { method: function(args, callback){ console.log(args); if(typeof callback == "function") callback(); } } </code></pre> <p>==============================================</p> <pre><code>MyClass.method("hello",function(){ console.log("world !"); }); </code></pre> <p>==============================================</p> <p>Result is:</p> <pre><code>hello world ! </code></pre>
<pre><code>function loadData(callback) { //execute other requirement if(callback &amp;&amp; typeof callback == "function"){ callback(); } } loadData(function(){ //execute callback }); </code></pre>