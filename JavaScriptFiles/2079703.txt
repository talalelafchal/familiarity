this in event handlers for another object
<p>Class A (mine) implements event handlers for class B (3rd party). Within these event handlers, I would like to access class A's properties.</p> <p>Using <em>this</em> in class A's handlers does not work because it references class B's scope.</p> <p>Global variables seem like the only option. Am I missing a better alternative?</p>
<p>Create a <code>self</code> or <code>that</code> variable, which holds a reference to <code>this</code>. Something like this:</p> <pre><code>var ClassA = function () { var self = this; this.MyProperty1 = 3; self.MyProperty2 = "hello world"; var ClassB_EventHandler = function () { self.MyProperty1; self.MyProperty2; } } </code></pre> <p>You can use <code>this</code> and <code>self</code> interchangeably in <code>ClassA</code>'s scope. In the <code>ClassB</code> event handler, you'll be required to use <code>self</code> to reference <code>ClassA</code> properties.</p>
<p>Another solution is to bind your event handlers to your object!</p> <p>You first need the add the <code>bind</code> method to any function object. Use this code:</p> <pre><code>Function.prototype.bind = function(scope) { var func = this; return function() { return func.apply(scope, arguments); } } </code></pre> <p>Now you can register your <code>class B</code> event handlers to your <code>class A</code> methods this way:</p> <pre><code>var a = new A(); var b = new B(); b.registerEvent(a.eventHandlerMethod.bind(a)); </code></pre> <p>This way any references to <code>this</code> within the code of <code>A.eventHandlerMethod</code> will point to object <code>a</code>.</p> <p>If you need a deeper understanding of this stuff you can read this great article: <a href="http://www.alistapart.com/articles/getoutbindingsituations/" rel="nofollow noreferrer">http://www.alistapart.com/articles/getoutbindingsituations/</a></p> <p>Another article: <a href="http://alternateidea.com/blog/articles/2007/7/18/javascript-scope-and-binding" rel="nofollow noreferrer">http://alternateidea.com/blog/articles/2007/7/18/javascript-scope-and-binding</a></p>