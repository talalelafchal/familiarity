What's the difference in those declarations (in JavaScript)?
<blockquote> <p><strong>Possible Duplicate:</strong><br> <a href="http://stackoverflow.com/questions/336859/javascript-var-functionname-function-vs-function-functionname">Javascript: var functionName = function() {} vs function functionName() {}</a> </p> </blockquote> <p>In Javascript I can write:</p> <pre><code>function TheFunc(arg) { ... } </code></pre> <p>or </p> <pre><code>TheFunc = function(arg) { ... } </code></pre> <p>or</p> <pre><code>TheFunc : function(arg) { ... } </code></pre> <p>What's the real difference and when should I use which?</p>
<p>One difference between the first and second syntax that's not mentioned (not in the linked questions as well) is that if the function returns a function object the results of using 'TheFunc' will be quite different</p> <pre><code>TheFunc = function(arg) { return function(x) { return arg+x; } }(5); res = TheFunc(2); // res == 7 </code></pre> <p>making it equivalent to</p> <pre><code>TheFunc = function(5) { return function(x) { return 5+x; } } res = TheFunc(2); // res == 7 </code></pre> <p>because the function was anonymous. While</p> <pre><code>function TheFunc(arg) { return function(x) { return arg+x; } } byFive = TheFunc(5); res = byFive(2); // res == 7 </code></pre> <p>would have the same result, but making the function factory reusable.</p> <p>The practical uses won't be that clear in these examples, however it can be indispensable, for example, in situations where a complex hook system exists built around callback based calls - such as systems with plug-ins:</p> <pre><code>// state object function state(args) { this.parse = function(data){ data = this.pre_parser(data); // go on transforming data return data; } } state.prototype.pre_parser_factory = function(options){ ... } var st = new state(args); async_call( function(data, options){ st.pre_parser = st.pre_parser_factory(options); res = st.parse(data); }) </code></pre>