Javascript int numbers addition problem
<p>I have numbers in javascript from 01(int) to 09(int) and I want add 1(int) to each one.</p> <p>For example:</p> <pre><code>01 + 1 = 2 02 + 1 = 3 </code></pre> <p>But</p> <pre><code>08 + 1 = 1 09 + 1 = 1 </code></pre> <p>I know the solution. I've defined them as float type.</p> <p><strong>But I want to learn, what is the reason for this result?</strong> </p> <p>Thank you.</p>
<p>This because if your do <code>09 + 1</code> the <code>09</code> is formated as octal (because of being prefixed by 0). Octal values go to 0 to 7, your code seems to prove that certain JavaScript engine convert 8 and 9 to invalid characters and just ignore them. </p> <p>Yu shouldn't prefix by 0 your numbers if you don't want to use the octal (like using the normal decimal numbers).</p> <p>See this page for <a href="http://www.javascripter.net/faq/octalsan.htm" rel="nofollow noreferrer">reference</a> and wikipedia for what is the <a href="http://en.wikipedia.org/wiki/Octal" rel="nofollow noreferrer">octal</a></p>
<p>Javascript, like other languages, may treat numbers beginning with <code>0</code> as octal. That means only the digits 0 through 7 would be valid.</p> <p>What seems to be happening is that <code>08</code> and <code>09</code> are being treated as octal but, because they have invalid characters, those characters are being silently ignored. So what you're actually calculating is <code>0 + 1</code>.</p> <p>Alternatively, it may be that the entire <code>08</code> is being ignored and having <code>0</code> substituted for it.</p> <p>The best way would be to try <code>028 + 1</code> and see if you get <code>3</code> or <code>1</code> (or possibly even <code>30</code> if the interpretation is <em>really</em> weird).</p>
<p>Since you haven't specified the radix it is treated as octal numbers. <code>08</code> and <code>09</code> are not valid octal numbers.</p> <pre><code>parseInt(08,10) + 1; </code></pre> <p>will give you the correct result.</p> <p>See <strong><a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Functions/ParseInt" rel="nofollow noreferrer">parseInt</a></strong></p>
<p>As you may have seen from the answers above, you are having type-conflict. However, I thought I would also suggest the correct solution to your problem...</p> <p>So as we know, 08 and 09 are treated as ocal in this example:</p> <pre><code>08 + 1 = 1 09 + 1 = 1 </code></pre> <p>So you need to specify what they actually are:</p> <pre><code>parseInt("08", 10) + 1 = 1 parseInt("09", 10) + 1 = 1 </code></pre> <p>Don't define them as a float if you want them to be integers.</p>
<p>I just test the numbers, like</p> <p>a= 08; b= 1; c= a+b;</p> <p>It gives me exactly 9</p>