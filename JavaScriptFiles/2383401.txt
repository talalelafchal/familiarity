Javascript: Setting location.href versus location
<p>When would you set <code>location</code> to a URL string versus setting <code>location</code>?</p> <pre><code>location = "http://www.stackoverflow.com"; </code></pre> <p>vs</p> <pre><code>location.href = "http://www.stackoverflow.com"; </code></pre> <p>Reference: <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.location" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/window.location</a></p>
<p>You might set <code>location</code> directly because it's slightly shorter. If you're trying to be terse, you can usually omit the <code>window.</code> too.</p> <p>URL assignments to both <code>location.href</code> and <code>location</code> are defined to work in JavaScript 1.0, back in Netscape 2, and have been implemented in every browser since. So take your pick and use whichever you find clearest.</p>
<p>Even if both work, I would use the latter. <code>location</code> is an object, and assigning a string to an object doesn't bode well for readability or maintenance.</p>
<p>Like as has been said already, <code>location</code> is an object. But that person suggested using either. But, you will do better to use the <code>.href</code> version.</p> <p>Objects have default properties which, if nothing else is specified, they are assumed. In the case of the <code>location</code> object, it has a property called <code>.href</code>. And by not specifying ANY property during the assignment, it will assume "href" by default.</p> <p>This is all well and fine until a later object model version changes and there either is no longer a default property, or the default property is changed. Then your program breaks unexpectedly.</p> <p>If you mean <code>href</code>, you should specify <code>href</code>.</p>
<p>A couple of years ago, <code>location</code> did not work for me in IE and <code>location.href</code> did (and both worked in other browsers). Since then I have always just used <code>location.href</code> and never had trouble again. I can't remember which version of IE that was.</p>
<p>Just to clarify, you can't do <code>location.split('#')</code>, <code>location</code> is an object, not a string. But you can do <code>location.href.split('#');</code> because <code>location.href</code> is a string.</p>
<p>One difference to keep in mind, though.</p> <p>Let's say you want to build some URL using the current URL. The following code will in fact redirect you, because it's not calling <code>String.replace</code> but <code>Location.replace</code>:</p> <pre><code>nextUrl = window.location.replace('/step1', '/step2'); </code></pre> <p>The following codes work:</p> <pre><code>// cast to string nextUrl = (window.location+'').replace('/step1', '/step2'); // href property nextUrl = window.location.href.replace('/step1', '/step2'); </code></pre>