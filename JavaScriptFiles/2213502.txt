Ideas for a comprehensive Javascript assignment
<p>I am likely to be part of the teaching team for the web programming course at my University next semester and I was wondering what kind of Javascript assignment to hand out to the students. The course is not an introductory one from a programming perspective. </p> <p>It is assumed that the students are familiar with OOP, data structures and algorithms, functional programming concepts and working knowledge of networking protocols (HTTP included). This is the first course in which they come in contact with JavaScript</p> <p>I was thinking to give out something framework-specific (using jQuery perhaps) that involves DOM traversal, some animations and AJAX. The three questions I have in mind are:</p> <ul> <li>should they use a framework or should I have them write vanilla JavaScript?</li> <li>should I focus more on the functional programming part and on the prototypal inheritance part (more on the <em>language</em> than on working with the DOM)?</li> <li>how do I automate testing for this? It's better if they have a clear idea on how they will be evaluated. Also, automated testing ensures objectivity and saves me time :).</li> </ul> <hr> <h2>Outcome</h2> <p>I made them do Tic Tac Toe as a jQuery plugin and the results were mostly satisfactory (70% of the students submitted, generally the submissions were ok). </p> <p>To prevent copying code from the net, I thought out an API which they had to implement. At least, they'd have to understand the code they found on the net before copy&amp;pasting it into the methods :).</p> <p>I used QUnit for automated testing, but I also tested each assignment manually because this was the first JavaScript assignment they'd had and I wanted to give relevant feedback.</p> <p>Thank you all for your ideas, they all helped a lot.</p> <p>Cheers,<br> Alex</p>
<blockquote> <p>Should they use a framework or should I have them write vanilla JavaScript?</p> </blockquote> <p>To me, it is overwhelmingly import that people new to the language start with the language proper, not modified versions or advanced/fancy libraries that do a lot of the work for you. Besides, if you're starting off not working with the DOM, then you're not getting much benefit from using almost any library, as the bulk of most JavaScript libraries has to do with handling the DOM. Also, it's easier to spot "bad" or ill-performant code when teaching and learning in a "vanilla" environment since you don't have libraries abstracting away the nitty-gritty.</p> <blockquote> <p>Should I focus more on the functional programming part and on the prototypal inheritance part (more on the language than on working with the DOM)?</p> </blockquote> <p>Yes! On one hand, the DOM is not not that big of a deal; yet it is also the core of what JavaScript is used to interact with. For starters, I suggest that if you're going to be using a browser environment, you should initially avoid the DOM by using Firebug's <code>console.*</code> methods for output so that you can focus on the "functional programming part and on the prototypal inheritance" and other core concepts. After these core concepts have been covered, then start introducing the DOM. It's best to introduce the DOM later as time will need to be dedicated to cross-browser compatibility, which will only confuse the subject if you are trying to teach the core concepts in tandem.</p> <blockquote> <p>How do I automate testing for this? It's better if they have a clear idea on how they will be evaluated. Also, automated testing ensures objectivity and saves me time :).</p> </blockquote> <p>Before (and after) the DOM is introduced, you could use something like <a href="https://github.com/pivotal/jsunit" rel="nofollow noreferrer">JSUnit</a>. Also, see this question: <a href="http://stackoverflow.com/questions/96066/automated-unit-testing-with-javascript">Automated Unit Testing with JavaScript</a>. Once you introduce the DOM, you may want to have the students generate a document that you can walk and validate <a href="http://stackoverflow.com/questions/2213502/ideas-for-a-comprehensive-javascript-assignment/2213524#2213524">as SB suggested</a>.</p>
<p>Start off with vanilla JavaScript to learn the basics. You don't want to create a group that relies on any particular framework that wouldn't know how to do things without it.</p>
<p>I always like the idea of making games to learn new programming concepts. You get a well-defined problem domain that's as simple or complex as you need it, and it's usually more interesting and fun to implement than other problems.</p> <p>When I wanted to learn Ajax programming I used jQuery and Java server-side to implement <a href="http://brasee.com/games/chessSingleClient.htm" rel="nofollow noreferrer">the game of chess</a>. It was a fun project, but pretty complicated (at least for me, but I'm primarily a server side programmer). I think something like Tic-Tac-Toe would be substantially simpler, and might be a good idea for a project assignment.</p> <p>As for the 3 questions:</p> <ol> <li>If this is the only JavaScript assignment, then I'd probably use vanilla instead of jQuery. But if they have a chance to do some assignments before this, I'd consider jQuery, because it just makes JavaScript so much less annoying, and it's also good to know jQuery for future employment possibilities.</li> <li>I'd place an equal emphasis on both the language and the DOM, because the primary purpose of the language IS to work on the DOM, and the DOM does take some getting used to.</li> <li>I think <a href="http://seleniumhq.org/" rel="nofollow noreferrer">Selenium</a> might work for the testing you're trying to do. <a href="https://github.com/pivotal/jsunit" rel="nofollow noreferrer">JsUnit</a> could also be used for unit testing the individual methods.</li> </ol>
<p>I think its useful for the students to know fundamentals about the language before working with frameworks. They need to know about JS Scopes, closures, prototypes, the memory model, and everything that makes JS unique.<p> After that, introduce them to frameworks and the DOM. They'll appreciate them much more since they'll be able to understand the implementation.<p> As for testing, automated testing might be easy if you have them generate a DOM that you can walk and validate. Mozilla might be able to help you out, esp with JSUnit. You can find info <a href="https://developer.mozilla.org/en/Mozilla_automated_testing" rel="nofollow noreferrer">here</a></p>
<ol> <li><p>I would have them write vanilla javascript AND also learn how to use jQuery. jQuery is javascript after all, and they need a working knowledge of the language anyway. They'll also need to become SWAT (skills with advanced tools), and I believe anyone not using one of the JS frameworks (or at least their own!) in today's environment is at a serious disadvantage.</p></li> <li><p>See answer 1. I'd teach them about prototypal inheritance in vanilla JS, and about DOM manipulation in jQuery.</p></li> <li><p>Automated testing could be achieved in several ways. 1: produce the correct output given some sample code to start with for the parts that deal with learning JS. 2: for the parts that deal with jQuery, you could provide a reference image for how you expect the result to look, provide an original document, and have them recreate the reference image using jQuery manipulation... sort of like the ACID tests <a href="http://acid3.acidtests.org/" rel="nofollow noreferrer">http://acid3.acidtests.org/</a></p></li> </ol>
<p>I would most definitely have them write vanilla JavaScript. It will encourage all students to better understand the abstractions that frameworks/libraries provide in particular environments i.e. for the most part, in the browser working with the DOM.</p> <p>I highly recommend having a good text for the course. <a href="http://rads.stackoverflow.com/amzn/click/1847194141" rel="nofollow noreferrer"><strong>Object Oriented JavaScript</strong> by Stoyan Stefanov</a> is in my mind a great text for learning the language, including some of the topics that many people have difficulty with (prototypes, objects, closures, inheritance, etc). I've read numerous JavaScript books and feel that this particular text best balances the core of the language and it's application in the modern client-side development realm.</p> <p>You may then want to look at dissecting certain pieces of the source of a particular JavaScript library to gain insight into patterns and practices used in a real-world scenario.</p>