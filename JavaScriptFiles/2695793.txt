JavaScript: What is addEventListener?
<p>What is this function? Didn't really find any good examples.</p>
<p>The <code>addEventListener</code> method is the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-registration" rel="nofollow noreferrer">W3C standard method</a> to attach an event handler to an element, so that you can do something useful when an event is triggered. The following example would popup an alert message when the element with id <code>my_image_id</code> is clicked:</p> <pre><code>function doSomething() { alert('Image clicked'); } var myImage = document.getElementById('my_image_id'); myImage.addEventListener('click', doSomething, false); </code></pre> <p>Unfortunately this does not work in Internet Explorer, since Microsoft uses a different event registration model. In Internet Explorer 5+, you would have to attach the event handler as follows:</p> <pre><code>myImage.attachEvent('onclick', doSomething); </code></pre> <p>Therefore for a cross browser event registration method, you can use reflection and execute conditionally:</p> <pre><code>function addEventHandler(node, type, f) { if (node.addEventListener) { node.addEventListener(type, f, false); } else if (node.attachEvent) { node.attachEvent("on" + type, f); } else { node["on" + type] = f; } } var myImage = document.getElementById('my_image_id'); addEventHandler(myImage, 'click', doSomething); </code></pre> <p>Further reading:</p> <ul> <li><a href="https://developer.mozilla.org/en/DOM/element.addEventListener" rel="nofollow noreferrer">Mozilla Dev Center: element.addEventListener</a></li> <li><a href="http://www.quirksmode.org/js/events_advanced.html" rel="nofollow noreferrer">Quirksmode: Advanced event registration models</a></li> <li><a href="http://www.javascriptworkshop.com/wp-content/uploads/pdf/AnInconvenientAPI.pdf" rel="nofollow noreferrer">Douglas Crockford: The Theory of the DOM</a></li> </ul>
<p>You may be familiar with adding an event handler like this:</p> <pre><code>window.onload = function() { alert('onload event!'); }; </code></pre> <p>or even in HTML like this:</p> <pre><code>&lt;body onload="alert('onload event!')"&gt; </code></pre> <p>Well, the downside to this is that you can only have one event handler. So if something else later overwrites that "onload" property, the previous event handler is no longer used.</p> <p><strong>addEventListener</strong> is a way to register an event handler without overwriting a previous one. It's supported by most browsers other than Internet Explorer. No to worry, though, because Internet Explorer has its own equivalent: <strong>attachEvent</strong>.</p> <p>Here's a (simplified) example of their use:</p> <pre><code> if (myelement.addEventListener) { // other browsers myelement.addEventListener(eventname, callback, false); } else { myelement.attachEvent("on"+eventname, callback); } </code></pre> <p>It's usually a better idea to register an event using addEventListener or attachEvent methods than the onload/onsomething property because it will not possibly disrupt any other Javascript code from the same page.</p>