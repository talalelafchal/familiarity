Can I determine which Submit button was used in javascript?
<p>I have a very simple form with a name field and two submit buttons: 'change' and 'delete'. I need to do some form validation in javascript when the form is submitted so I need to know which button was clicked. If the user hits the enter key, the 'change' value is the one that makes it to the server. So really, I just need to know if the 'delete' button was clicked or not.</p> <p>Can I determine which button was clicked? Or do I need to change the 'delete' button from a submit to a regular button and catch its onclick event to submit the form?</p> <p>The form looks like this:</p> <pre><code> &lt;form action="update.php" method="post" onsubmit="return checkForm(this);"&gt; &lt;input type="text" name="tagName" size="30" value="name goes here" /&gt; &lt;input type="hidden" name="tagID" value="1" /&gt; &lt;input type="submit" name="submit" value="Change" /&gt; &lt;input type="submit" name="submit" value="Delete" /&gt; &lt;/form&gt; </code></pre> <p>In the <code>checkForm()</code> function, <code>form["submit"]</code> is a node list, not a single element I can grab the value of.</p>
<p>I've been dealing with this problem myself. There's no built-in way to tell which button's submitting a form, but it's a feature which might show up in the future.</p> <p>The workaround I use in production is to store the button somewhere for one event loop on click. The JavaScript could look something like this:</p> <pre><code>function grabSubmitter(input){ input.form.submitter = input; setTimeout(function(){ input.form.submitter = null; }, 0); } </code></pre> <p>... and you'd set an onclick on each button:</p> <pre><code>&lt;input type="submit" name="name" value="value" onclick="grabSubmitter(this)"&gt; </code></pre> <p><code>click</code> fires before <code>submit</code>, so in your submit event, if there's a submitter on your form, a button was clicked.</p> <hr> <p>I'm using jQuery, so I use <code>$.fn.data()</code> instead of expando to store the submitter. I have a tiny plugin to handle temporarily setting data on an element that looks like this:</p> <pre><code>$.fn.briefData = function(key, value){ var $el = this; $el.data(key, value); setTimeout(function(){ $el.removeData(key); }, 0); }; </code></pre> <p>and I attach it to buttons like this:</p> <pre><code>$(':button, :submit').live('click', function () { var $form = $(this.form); if ($form.length) { $form.briefData('submitter', this); } }); </code></pre>
<p>Since you didn't mention using any framework, this is the cleanest way to do it with straight Javascript. With this code what you're doing is passing the button object itself into the go() function. You then have access to all of the button's properties. You don't have to do anything with setTimeout(0) or any other wacky functions.</p> <pre><code>&lt;script type="text/javascript"&gt; function go(button) { if (button.id = 'submit1') //do something else if (button.id = 'submit2') //do something else } &lt;/script&gt; &lt;form action="update.php" method="post"&gt; &lt;input type="text" name="tagName" size="30" value="name goes here" /&gt; &lt;input type="hidden" name="tagID" value="1" /&gt; &lt;input id="submit1" type="submit" name="submit" value="Change" onclick="go(this);"/&gt; &lt;input id="submit2" type="submit" name="submit" value="Delete" onclick="go(this);"/&gt; &lt;/form&gt; </code></pre>
<p>Here's an <strong>unobtrusive approach</strong> using jQuery...</p> <pre><code>$(function () { // for each form on the page... $("form").each(function () { var that = $(this); // define context and reference /* for each of the submit-inputs - in each of the forms on the page - assign click and keypress event */ $("input:submit", that).bind("click keypress", function () { // store the id of the submit-input on it's enclosing form that.data("callerid", this.id); }); }); // assign submit-event to all forms on the page $("form").submit(function () { /* retrieve the id of the input that was clicked, stored on it's enclosing form */ var callerId = $(this).data("callerid"); // determine appropriate action(s) if (callerId == "delete") // do stuff... if (callerId == "change") // do stuff... /* note: you can return false to prevent the default behavior of the form--that is; stop the page from submitting */ }); }); </code></pre> <p><strong>Note:</strong> this code is using the id-property to reference elements, so you have to update your markup. If you want me to update the code in my answer to make use of the name-attribute to determine appropriate actions, let me know.</p>
<p>Some browsers (at least Firefox, Opera and IE) support this:</p> <pre><code>&lt;script type="text/javascript"&gt; function checkForm(form, event) { // Firefox || Opera || IE || unsupported var target = event.explicitOriginalTarget || event.relatedTarget || document.activeElement || {}; alert(target.type + ' ' + target.value); return false; } &lt;/script&gt; &lt;form action="update.php" method="post" onsubmit="return checkForm(this, event);"&gt; &lt;input type="text" name="tagName" size="30" value="name goes here" /&gt; &lt;input type="hidden" name="tagID" value="1" /&gt; &lt;input type="submit" name="submit" value="Change" /&gt; &lt;input type="submit" name="submit" value="Delete" /&gt; &lt;/form&gt; </code></pre> <p>For an inherently cross-browser solution, you'll have to add <code>onclick</code> handlers to the buttons themselves.</p>
<p>Name the delete button something else. Perhaps name one SubmitChange and name the other SubmitDelete.</p>
<p>Give each of the buttons a unique ID such as </p> <pre><code>&lt;input type="submit" id="submitButton" name="submit" value="Change" /&gt; &lt;input type="submit" id="deleteButton" name="submit" value="Delete" /&gt; </code></pre> <p>I'm not sure how to do this in raw javascript but in jquery you can then do</p> <pre><code>$('#submitButton').click(function() { //do something }); $('#deleteButton').click(function() { //do something }); </code></pre> <p>This says that if submitButton is clicked, do whatever is inside it. if deleteButton is clicked, do whatever is inside it</p>
<p>Right now you've got the same problem as you would a normal text input. You've got the same name on two different elements. Change the names to "Change" and "Delete" and then determine if either one of them were clicked by applying an event handler on both submits and providing different methods. I'm assuming you're using pure JavaScript, but if you want it to be quick, take a look at jQuery. </p> <p>What you need is as simple as following what's on <a href="http://w3schools.com/js/js_form_validation.asp" rel="nofollow noreferrer">w3schools</a></p>
<p>You could also use the <code>onclick</code> event in a number of different ways to address the problem.</p> <p>For instance:</p> <pre><code>&lt;input type="submit" name="submit" value="Delete" onclick="return TryingToDelete();" /&gt; </code></pre> <p>In the <code>TryingToDelete()</code> function in JavaScript, do what you want, then <code>return false</code> if do not want the delete to proceed.</p>
<pre><code>&lt;html&gt; &lt;script type="text/javascript"&gt; var submit; function checkForm(form) { alert(submit.value); return false; } function Clicked(button) { submit= button ; } &lt;/script&gt; &lt;body&gt; &lt;form method="post" onsubmit="return checkForm(this);"&gt; &lt;input type="text" name="tagName" size="30" value="name goes here" /&gt; &lt;input type="hidden" name="tagID" value="1" /&gt; &lt;input onclick="Clicked(this);" type="submit" name="submit" value="Change" /&gt; &lt;input onclick="Clicked(this);" type="submit" name="submit" value="Delete" /&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; </code></pre>
<p>In jQuery you can use $.data() to keep data in scope - no need for global variables in that case. First you click submit button, then (depending on it's action) you assign data to form. I'm not preventing default action in click event, so form is submitted right after click event ends.</p> <p>HTML:</p> <pre><code>&lt;form action="update.php" method="post""&gt; &lt;input type="text" name="tagName" size="30" value="name goes here" /&gt; &lt;input type="hidden" name="tagID" value="1" /&gt; &lt;input type="submit" name="submit" value="Change" /&gt; &lt;input type="submit" name="submit" value="Delete" /&gt; &lt;/form&gt; </code></pre> <p>JavaScript:</p> <pre><code> (function ($) { "use strict"; $(document).ready(function () { // click on submit button with action "Change" $('input[value="Change"]').on("click", function () { var $form = $(this).parents('form'); $form.data("action", "Change"); }); // click on submit button with action "Delete" $('input[value="Delete"]').on("click", function () { var $form = $(this).parents('form'); $form.data("action", "Delete"); }); // on form submit $('form').on("submit", function () { var $self = $(this); // retrieve action type from form // If there is none assigned, go for the default one var action = $self.data("action") || "deafult"; // remove data so next time you won't trigger wrong action $self.removeData("action"); // do sth depending on action type if (action === "change") { } }); }); })(jQuery); </code></pre>
<p>A <em>click</em> event anywhere in a form will be caught by a form's <em>click</em> handler (as long as the element clicked on allows it to propagate). It will be processed before the form's <em>submit</em> event.</p> <p>Therefore, one can test whether the click target was an <em>input</em> (or <em>button</em>) tag of the <em>submit</em> type, and save the value of it (say, to a <em>data-button</em> attribute on the form) for processing in the form's <em>submit</em> handler.</p> <p>The submit buttons themselves do not then need any event handlers.</p> <p>I needed to do this to change a form's <em>action</em> and <em>target</em> attributes, depending upon which submit button is clicked.</p> <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-js lang-js prettyprint-override"><code>// TO CAPTURE THE BUTTON CLICKED function get_button(){ var oElement=event.target; var oForm=oElement.form; // IF SUBMIT INPUT BUTTON (CHANGE 'INPUT' TO 'BUTTON' IF USING THAT TAG) if((oElement.tagName=='INPUT')&amp;&amp;(oElement.type=='submit')){ // SAVE THE ACTION oForm.setAttribute('data-button',oElement.value); } } // TO DO THE SUBMIT PROCESSING function submit_form(){ var oForm=event.target; // RETRIEVE THE BUTTON CLICKED, IF ONE WAS USED var sAction=''; if(oForm.hasAttribute('data-button')){ // SAVE THE BUTTON, THEN DELETE THE ATTRIBUTE (SO NOT USED ON ANOTHER SUBMIT) sAction=oForm.getAttribute('data-button'); oForm.removeAttribute('data-button'); } // PROCESS BY THE BUTTON USED switch(sAction){ case'Change': // WHATEVER alert('Change'); break; case'Delete': // WHATEVER alert('Delete'); break; default: // WHATEVER FOR ENTER PRESSED alert('submit: By other means'); break; } } </code></pre> <pre class="snippet-code-html lang-html prettyprint-override"><code> &lt;form action="update.php" method="post" onsubmit="submit_form();" onclick="get_button();"&gt; &lt;input type="text" name="tagName" size="30" value="name goes here" /&gt; &lt;input type="hidden" name="tagID" value="1" /&gt; &lt;input type="submit" name="submit" value="Change" /&gt; &lt;input type="submit" name="submit" value="Delete" /&gt; &lt;/form&gt; &lt;p id="result"&gt;&lt;/p&gt;</code></pre> </div> </div> </p>