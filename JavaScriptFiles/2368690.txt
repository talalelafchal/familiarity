simple &quot;this&quot; issue with JavaScript fundamentals
<pre><code>var name = 'Mike'; var person = { name: 'John', welcome: function(){ var name = 'Mary'; return 'Hi ' + this.name; } } //person.welcome(); // output is // Hi John // I was expecting output to be // Hi Mary person.welcome.call(); // output is // Hi Mike // In this case since no argument is passed to call so this is window and // I get that window.name is Mike </code></pre>
<p>Why were you expecting <code>Hi Mary</code> in the first case?</p> <pre><code>var name = 'Mary'; </code></pre> <p>Doesn't overwrite <code>this.name</code>, but rather creates a local variable named <code>name</code> in the function.</p> <p>In the second case, you are using <code>call</code>, which takes a <code>this</code> argument, and:</p> <blockquote> <p>Determines the value of this inside fun. If thisArg is null or undefined, this will be the global object.</p> </blockquote> <p><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/call" rel="nofollow noreferrer">From here</a>.</p>
<pre><code>var name = 'Mike'; var person = { name: 'John', welcome: function(){ var name = 'Mary'; return 'Hi ' + this.name; } } </code></pre> <p><code>this.name</code> refers to the object property "name"</p> <p><code>name</code> refers to the variable "name"</p> <p>You would get the expected result with <code>return 'Hi ' + name;</code></p>
<p>If you are waiting the output to be <code>Hi Mary</code> then you do not need to use this in the welcome function. This should do it:</p> <pre><code>var name = 'Mike'; var person = { name: 'John', welcome: function(){ var name = 'Mary'; return 'Hi ' + name; } } </code></pre> <p>When you do <code>person.welcome()</code> the <code>this</code> keyword references <code>person</code>, so on the <code>welcome</code> function <code>this.name</code> would become <code>person.name</code> which is John.</p>
<p><code>this</code> always refers to the object you are calling the function from. In most simple cases this would be whatever is in front of the <code>.</code>. For example, in the case of <code>person.welcome()</code> this now refers to person. If you call <code>person.welcome.call()</code> this refers to the window, because you did not specify anything as a parameter to <code>call()</code>.</p>