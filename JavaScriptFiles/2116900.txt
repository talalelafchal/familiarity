Does javascript still allocate memory for the &quot;IF&quot; scenario if the condition evaluates to false?
<p>Soooooooooooooooo... </p> <p>I have an IF statement that nowadays will evaluate to true 99.7% of the time, which consists of a check to see if the browser is DOM 1+ capable, and then load a big block of code.</p> <p>So it's logical to put an "if (true)", and omit the "else" part, but i wonder if the older browsers will still continue to parse the code and allocate memory, before finally deciding to break execution....</p> <p>Not that i care at this point, since we've had decent browsers for 10+ years now, but for future reference, i hope somebody knows.</p> <p>I guess my question is more or less this: does the browser <b>parse the whole file</b> and allocate memory before executing the first conditional statement, which is the first thing before anything else?</p> <p>Thanks in advance :)</p>
<p>Yes, the browser will parse the whole file. As for the "memory allocating" part. If you mean "allocate memory for all variables defined in the file" then no, it will only allocate it when the execution flow comes to that variables.</p>
<p>There are two things that are hoisted out of execution context and will have an effect even if the code in question is never reached: <code>function</code> and <code>var</code>.</p> <p>Putting a <code>var</code> declaration in a code block will “reserve memory” for that variable as soon as the block is entered, but the value of that variable will only be a pointer to the <code>undefined</code> object, so it's only a trivially small number of bytes.</p> <p>Putting a <code>function</code> statement in a code block will both “reserve memory” for the variable and evaluate the <code>function</code>, assigning the resulting <code>Function</code> object to the variable, before the first line of code in the block is executed. That's how you can call a function that's only defined further down the script.</p> <p>Under ECMAScript standard rules, you may only put <code>function</code> statements in the root of the code block; that is to say this:</p> <pre><code>if (true) { function f() { ... } } </code></pre> <p>is illegal. However, browsers still generally allow it and exactly what happens when you do it differs between browsers. Avoid this. (Also avoid named inline function expressions, which are erroneously subject to hoisting and double-evaluation in IE's JScript.)</p> <p>If you really want to stop <em>any</em> memory being allocated for variables and functions you don't intend to use, put them in a function block of their own. This is a common tactic anyway for maintaining clean namespaces in library code. eg.:</p> <pre><code>if (condition) (function() { var foo= 1; function bar() { alert(foo); } })(); </code></pre> <p>The amount of memory you'll save by doing this is pretty minuscule.</p> <p>But every major browser today is DOM Level 1 capable; if you have backup code in your scripts to support Netscape 4, it is long past time to delete that. The baseline desktop browser right now is IE6.</p> <p>The only browser in use today for which simple DOM manipulations are still a problem is IEMobile, versions prior to IEMobile 8/WinMobile 6.1.4. However this browser is so bad almost no scripts will work as-is; workarounds are required for pretty much everything.</p>