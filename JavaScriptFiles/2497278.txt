how can I declare a value deep in an object tree using variable properties in javascript
<p>I am trying to have a javascript object tree behave like a php associative array in the following way.</p> <pre><code>var key1 = 'a'; var key2 = 'b'; var key3 = 'c'; var obj[key1][key2][key3] = 'd'; </code></pre> <p>However, in javascript I believe you need to define each property/object pair individually, forming deeper leaves. Something like:</p> <pre><code>var obj[key1] = {}; var obj[key1][key2] = {}; ... </code></pre> <p>Is there a way to simplify or shorten this script?</p> <p>Thanks</p>
<pre><code>var obj = { key1: { key2: { key3: 'd' } } } </code></pre> <p>This syntax is the basis of the format known as JSON: <a href="http://en.wikipedia.org/wiki/JSON" rel="nofollow noreferrer">http://en.wikipedia.org/wiki/JSON</a></p>
<p>I don't know if there's a "natural" way to do it, but you could do it like this:</p> <pre><code>function phpLike(){}; phpLike.prototype.set = function () { var l = arguments.length; if (l&lt;2) return; var o = this; for (var i=0; i&lt;l-2; i++) { if (o[arguments[i]] === undefined) o[arguments[i]] = {}; o = o[arguments[i]]; } o[arguments[l-2]] = arguments[l-1]; } // Test var key1 = 'a'; var key2 = 'b'; var key3 = 'c'; var obj = new phpLike(); obj.set(key1, key2, key3, 'd'); alert(obj[key1][key2][key3]); </code></pre>
<p>Not directly, as far as I know, but how about using a little helper function?</p> <pre><code>function kv1(k, v) { var o = { }; o[k] = v; return o; } var obj = kv1(key1, kv1(key2, kv1(key3, 'd'))); </code></pre>
<p>I just thought of an answer inspired by Will's post: Construct a json string and then eval().</p> <pre><code>var obj = eval("{" + key1 + ": {... }};"); </code></pre> <p>This kind of fulfils my search for a more concise way of declaring an object tree and deep leaf. But, it is ugly, confusing and I would avoid it like the plague.</p>
<pre><code>function setPropertyByKeyPath(obj, path, val) { var key; while (path.length &gt; 1) { key = path.shift(); obj[key] = typeof obj[key] === "object" ? obj[key] : {}; obj = obj[key]; } obj[path.shift()] = val; } var o = {}; setPropertyByKeyPath(o, ['foo', 'bar'], 5); alert(o.foo.bar) </code></pre>