method to convert form names to valid JavaScript names?
<p>i am processing an object in JavaScript that has been returned from an API that may contain variable names that are not valid JavaScript variable names. (these names are valid in the naming convention of the system of the API i am using)</p> <p>in one case, the name starts with a number, e.g. '5story'</p> <p>what is the best way to convert this name to a valid JavaScript variable name?</p> <p>(i am familiar with the form of legal JavaScript names. a useful answer to this question would be a (hopefully simple) algorithm e.g. prefix a $ to the name and then strip it when returning the form to the API)</p> <p>(i note that it would be preferable if the JavaScript API did not create invalid names)</p>
<p>Note that I'm not sure if you're asking about html identifier names (you mention "form") or Javascript variable identifiers, but how about stripping any character that is not a word character (<code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>_</code>) and prepending with an underscore?</p> <pre><code>var v = ' .-*&amp;*$*$W 5 foo Bar'; v = '_' + v.replace(/\W/g, ''); v; // _W5fooBar </code></pre> <p>The <code>.replace()</code> will strip characters that are <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Variables" rel="nofollow noreferrer">not legal in variable identifiers</a>. </p> <p>You could prepend with the <code>$</code> symbol instead of underscore for a legal variable name too.</p>
<p>You could creat a wrapper object that also contained a back reference to the original name. </p> <pre><code>function MyApiClient() { var _self = this; this.RegisterWrapper = function(strName, objValue, explicitName) { var newName = (explicitName != null) ? explicitName : '_' + strName.replace(/\W/g, ''); _self[newName] = {ApiName : strName, Value : objValue}; return _self[newName]; } } //implementation var client = new MyApiClient(); client.RegisterWrapper('5story', [0,1,2,3,4,5]); console.log(client._5story.Value); //output: Array() [0,1,2,3,4,5]; //or var o = client.RegisterWrapper('5story', {a:'b'}, '_myName'); console.log(o.Value); //outpus Object a: 'b' console.log(client._myName.Value); //outpus Object a: 'b' </code></pre> <p>This extends a couple additional benefits</p> <ul> <li><strong>Scope</strong>: when creating the new objects they will be encapsulated and not globals</li> <li><strong>Reference</strong>: if you have reference to this object - you can use it to hit your API (because it will contain the old name)</li> <li><strong>Flexibility</strong>: you can either register the wrappers dynamically through a loop as you parse a string returned from the api or explicitely like above.</li> </ul> <p>Do you have any more information about the actual api?</p>