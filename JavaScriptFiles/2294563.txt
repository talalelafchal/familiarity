Search in a two dimensional array and return the array list as a array
<p>How can I search in a two dimensional array and return the array list as a array?</p> <pre><code>var dataSet = new Array(new Array()); function searchAsset(){ dataSet.length = 0; var fileName = document.getElementById("fileName").value; var arr = new Array(["view_page.psd","test"],["ok_test.jpg","yes","kk"],["new_banner_2009.fla","good"],["gps-new-web.html","hot"]); var re = new RegExp(fileName ,'i'); var res = null; for(var i = 0;i&lt;arr.length;i++){ var newArr = arr[i][0]; //alert(newArr+":"+newArr.match(re)); var res = newArr.match(re); if(res != null){ dataSet.push("["+arr[i]+"]"); } } alert("Final --- "+dataSet); for(var m = 0;m&lt;dataSet.length;m++){ alert(dataSet[m]); } } </code></pre>
<p>This:</p> <pre><code>var dataSet = new Array(new Array()); </code></pre> <p>...is not a two-dimentional array. It results in an array with (initially) one element, which is a reference to another array with (initially) zero elements. The closest you'll come to a two-dimensional array in JavaScript is an array of arrays, such as:</p> <pre><code>function create2DArray(rows, columns) { var outer, index; outer = new Array(rows); for (index = 0; index &lt; rows; ++index) { outer[index] = new Array(columns); } return outer; } </code></pre> <p>Searching through such a thing is easy:</p> <pre><code>function find(thing, theArray) { var results, col, row, subArray; results = []; // Empty array for (row = 0; row &lt; theArray.length; ++row) { subArray = theArray[row]; for (col = 0; col &lt; subArray.length; ++col) { value = subArray[col]; if (value == thing) { // or whatever your criterion results.push({row: row, col: col}); } } } return results; } </code></pre> <p>That creates an array of objects, each with an <code>col</code> and <code>row</code> property, that tells you where the <code>thing</code>s in <code>theArray</code> are such that <code>theArray[row][col] == thing</code>.</p> <p>Note that rather than doing <code>theArray[row][col]</code> every time in the loop, I grab the sub-array reference <em>once</em> for each row. Also note that since theoretically the sub-arrays could have different lengths, I don't assume they all have the same length.</p> <p>I recommend reading up on JavaScript's arrays, which are fairly different from traditional arrays. They're really dictionaries, <em>associative</em> arrays, not contiguous blocks of memory indexed by an offset. When you do <code>theArray[5]</code>, you're looking up a <em>property</em> called "5" on the array in exactly the way that when you say <code>theObject['frog']</code> you're looking up a property "frog" on the object. (Not that implementations can't optimize that, but since JavaScript arrays are sparse, they have to be careful when doing so.)</p>