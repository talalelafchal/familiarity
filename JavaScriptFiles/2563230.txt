What does 'this' refer to in this function?
<p>The entire code snipped is:</p> <pre><code>var observer = { addSubscriber: function(callback) { this.subscribers[this.subscribers.length] = callback; }, removeSubscriber: function(callback) { for (var i = 0; i &lt; this.subscribers.length; i++) { if (this.subscribers[i] === callback) { delete(this.subscribers[i]); } } }, publish: function(what) { for (var i = 0; i &lt; this.subscribers.length; i++) { if (typeof this.subscribers[i] === 'function') { this.subscribers[i](what); } } }, make: function(o) { // turns an object into a publisher for(var i in this) { o[i] = this[i]; o.subscribers = []; } } }; </code></pre>
<p>this, is how you refere at the scope of a function. it's the function itsel.!!! this example in prototypejs framework is quite handy.</p> <p><a href="http://api.prototypejs.org/language/function/prototype/bind/" rel="nofollow noreferrer">http://api.prototypejs.org/language/function/prototype/bind/</a></p> <p>for example if you the following code.</p> <pre><code>function foo(){ //here this is foo var x = {}; //object var me = this; var img = new Image(); img.load = function(){ //but here this is img.load.. is the scope of the function =) // if you want to use the x object you have to assing this FOO a global variable is why you use me = this; me //is foo :P } } </code></pre>
<p>It depends on how it is called. I see it is part of an object literal called <code>observer</code>.</p> <p><code>observer.make(o)</code> would mean <code>this == observer</code>.</p> <p><code>observer.make.call(otherObj, o)</code> would mean <code>this == otherObj</code>.</p> <p><code>new observer.make(o)</code> would make a new object to be <code>this</code></p> <hr> <p>So it would do something like this.</p> <pre><code>var model = { name: 'bike', id: 4, gears: 7 }; observer.make(model); //now model has methods from observer model.addSubscriber(someListener); model.publish('gearsChanged'); </code></pre>
<p>here is an example of the <a href="http://www.quirksmode.org/js/this.html" rel="nofollow noreferrer">intended use</a> of <strong>this</strong>.</p>
<p>"this" refers to "observer" assuming that is the object in which it was invoked (and in 99% of cases it is);</p> <p>so: observer.addSubscriber</p> <p>in the method addSubscriber, "this" will refer to "observer".</p> <p>When you have objects within objects (or nodes) it can be confusing to resolve "this":</p> <pre><code>observer = { node: $("myDiv"), callIt: function(){ // note "this.node" - node belongs to observer this.node.onclick = function(){ // "this" now refers to the "node" object // onclick was invoked by node } } } </code></pre>