Javascript - is it bad to pass more arguments than the function declares?
<p>I have a function</p> <pre><code>function callback(obj){...} </code></pre> <p>Is it okay to pass in more objects than were declared in the function signature? Eg, call it like this:</p> <pre><code>callback(theObject, extraParam); </code></pre> <p>I tried it out on firefox and it didn't seem to have a problem, but is it bad to do this?</p>
<p>JavaScript allows this, you can pass any arbitrary number of arguments to a function.</p> <p>They are accessible in the <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Functions_and_function_scope/Arguments" rel="nofollow noreferrer"><code>arguments</code></a> object which is an array-like object that has numeric properties containing the values of the arguments that were used when the function was invoked, a <code>length</code> property that tells you how many arguments have been used on the invocation also, and a <code>callee</code> property which is a reference to the function itself, for example you could write:</p> <pre><code>function sum(/*arg1, arg2, ... , argN */) { // no arguments defined var i, result = 0; for (i = 0; i &lt; arguments.length; i++) { result += arguments[i]; } return result; } sum(1, 2, 3, 4); // 10 </code></pre> <p>The <code>arguments</code> object may look like an array, but it is a plain object, that inherits from <code>Object.prototype</code>, but if you want to use Array methods on it, you can invoke them directly from the <code>Array.prototype</code>, for example, a common pattern to get a <em>real array</em> is to use the Array <code>slice</code> method:</p> <pre><code>function test () { var args = Array.prototype.slice.call(arguments); return args.join(" "); } test("hello", "world"); // "hello world" </code></pre> <p>Also, you can know how many arguments a function <em>expects</em>, using the <code>length</code> property of the function object:</p> <pre><code>function test (one, two, three) { // ... } test.length; // 3 </code></pre>
<p>Yes do it - its good practice and is a powerful JavaScript feature </p>