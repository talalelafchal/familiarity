What does `1..something` mean in JavaScript?
<pre><code>&lt;script&gt; 1..z &lt;/script&gt; </code></pre> <p>This gives no syntax or runtime error. Looks like number and variable name can be any other (<code>123..qwerty</code>). I'm wondering what does this statement mean?</p>
<p>Combine these:</p> <pre><code>alert(1.foo); // --&gt; parse error alert(1.4.foo); // --&gt; undefined - number 1.4 doesn't have the property foo alert(1.); // --&gt; 1 (?) </code></pre> <p>To the conclusion:</p> <pre><code>alert(1..foo); // --&gt; undefined </code></pre>
<p>Is <strong>not</strong> a range, the <code>1..z</code> expression will simply return <code>undefined</code>.</p> <p>Why? </p> <p>The first dot ends a representation of a <a href="http://bclary.com/2004/11/07/#a-7.8.3" rel="nofollow noreferrer">Numeric Literal</a>, giving you a <code>Number</code> primitive:</p> <pre><code>var n = 1.; </code></pre> <p>The grammar of a Numeric Literal is expressed like this:</p> <pre><code>DecimalIntegerLiteral . DecimalDigitsopt ExponentPartopt </code></pre> <p>As you can see the DecimalDigits part after the dot is <em>optional</em> (opt suffix).</p> <p>The second dot is the property accessor, it will try only to get the <code>z</code> property, which is <code>undefined</code> because it doesn't exist on the <code>Number.prototype</code> object:</p> <pre><code>1..z; // undefined 1..toString(); // "1" </code></pre> <p>Is equivalent to access a property with the bracket notation property accessor:</p> <pre><code>1['z']; // or 1['toString'](); </code></pre>