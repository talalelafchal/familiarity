Can an Object be false?
<p>Is there any way to make an object return false in javascript?</p> <pre><code>var obj = new Object(); console.log(!!obj) // prints "true" even if it's empty </code></pre>
<p>No. But <code>null</code> will convert to <code>false</code>.</p> <pre><code>&gt; typeof(null) "object" &gt; null instanceof Object false &gt; !!null false </code></pre> <p>To see if the object contains any properties, use (shamelessly copied from <a href="http://stackoverflow.com/questions/1345939/how-do-i-count-javascript-objects-attributes">How do I count a JavaScript object&#39;s attributes?</a>):</p> <pre><code>function isEmpty (obj) { for (var k in obj) if (obj.hasOwnProperty(k)) return false; return true; } </code></pre>
<p>A null "object" (really value) will return false.</p> <pre><code>var obj = null; console.log(!!obj); </code></pre> <p>If you wanted to check if it has no properties, you might try:</p> <pre><code>var obj = new Object(); var empty = true; for (var p in obj) { if (obj.hasOwnProperty(p)) { empty = false; break; } } console.log(empty); </code></pre>
<p>I think that with the first <code>!</code> you are casting obj to a boolean and negating its value- resulting in <code>true</code> if obj is null - , and with the second <code>!</code> negating it again.</p>
<p>No. An object that doesn't have any properties assigned is not considered "empty".</p> <p>The fact that a variable holds an instance of an object is enough to cause javascript to treat the variable as having the value of <code>true</code> when an expression requires a boolean value.</p> <p><strong>Edit</strong></p> <p>There are clearly some nuances to be cleared up looking at the other answers here.</p> <p><code>null</code> is not <strong>an</strong> object, it is the distinct lack of an object. The question refers to an Object, that is one that has just been created. </p>
<p>No.</p> <p>Not sure why you'd want this, but there is a way you could do something <em>like</em> this but it's kinda hacky...</p> <pre><code>var obj = { toString: function() { return ''; } }; alert(!! (''+obj)); </code></pre>
<p>In your case</p> <p><code>console.log(!obj);</code> will return false.</p> <p>because an object or an empty object is always a truthy.</p>
<p>We can overwrite <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf" rel="nofollow"><code>Object.prototype.valueOf</code></a> to make an object appear to be false when it is <strong><em>coerced</em></strong> into a primitive, for example during <code>==</code>.</p> <p>However it <strong><em>will not</em></strong> appear to be false when we force it into a boolean using <code>!!</code>, so it doesn't really work in the general case.</p> <pre><code>var obj = { valueOf: function () { return false } } &gt; obj == false true // Good, we fooled them! &gt; !!obj true // Not so good, we wanted false here &gt; Boolean(obj) true // Not so good, we wanted false here </code></pre>
<p>In console:</p> <pre><code>&gt; ({})?true:false &lt; true </code></pre> <p>So the answer is no.</p>