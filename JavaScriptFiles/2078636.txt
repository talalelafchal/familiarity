Prototypal inheritence - the correct way
<p>I've been looking into doing inheritance in JavaScript the correct prototypal way, according to Douglas Crockford: <a href="http://javascript.crockford.com/prototypal.html" rel="nofollow noreferrer">http://javascript.crockford.com/prototypal.html</a></p> <p>He writes: "So instead of creating classes, you make prototype objects, and then use the object function to make new instances"</p> <p>I figured this was the way to do it:</p> <pre><code>var objA = { func_a : function() { alert('A'); } }; var objB = Object.create(objA); objB.func_a = function() { alert('B'); } objB.func_b = function() { }; var objA_instance1 = Object.create(objA); var objA_instance2 = Object.create(objA); var objB_instance1 = Object.create(objB); var objB_instance2 = Object.create(objB); etc... </code></pre> <p>But wouldn't this mean that there are now four instances of func_a (since it's isn't part of objA.prototype, it's just "inside" it), or am I not understanding this correctly?</p> <p>Also, is there any way I can reach the overridden function of a function (for example call objA.func_a inside objB.func_a)?</p> <p>Thanks in advance.</p>
<p>There is only one instance of <code>func_a</code>, and it is defined on <code>objA</code>, that is because the Crockford's <code>Object.create</code> method uses that object (<code>objA</code>) simply as the prototype of your new objects:</p> <pre><code>console.log(objA_instance1.func_a == objA .func_a); // true console.log(objA_instance2.func_a == objA .func_a); // true </code></pre> <p><code>func_a</code> on your objA_instances are reached by the prototype chain, that objects don't really own that property:</p> <pre><code>console.log(objA_instance1.hasOwnProperty('func_a')); // false console.log(objA_instance2.hasOwnProperty('func_a')); // false </code></pre>
<p>You're confusing the <code>prototype</code> property of constructor functions with the internal <em>[[Prototype]]</em> property of objects, which is inaccessible (FF makes it available as <code>__proto__</code>); using <code>Object.create()</code> sets this internal property to its argument, so <code>objA</code> and <code>objB</code> will be the actual prototypes of your 'instance' objects, ie no function objects will be duplicated.</p> <p>To call the overridden functions, access them via eg <code>objA.func_a</code> and use <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/call" rel="nofollow noreferrer">call()</a> or <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Function/Apply" rel="nofollow noreferrer">apply()</a> to use them on the specific instances, eg</p> <pre><code>objB.func_a = function() { objA.func_a.call(this); // call overridden method with current `this` }; </code></pre>