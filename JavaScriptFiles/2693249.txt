Javascript eval limits
<p>Is there a limit to javascript's eval, like in lenght?</p> <p>I'm trying to build an app where you can store JS code in the DB, which you can later load and eval in order to execute it, but i'm reaching a limit. First of all, the code has to all be in one line. Any multiline statements are not executed. Next, i'm reaching a limit in length (i guess). If i execute the code manually, it works, but put that same code in the db, load it via ajax, and try to execute it, and it fails.</p> <p>Any ideas why?</p>
<p>You don't need to use eval and its not exactly a good thing to use. You could just have it print out to the page and it will run.</p> <p><a href="http://stackoverflow.com/questions/86513/why-is-using-javascript-eval-function-a-bad-idea">Here is the accepted answer on why you should not use eval:</a></p> <ol> <li>Improper use of eval opens up your code for injection attacks</li> <li>Debugging can be more challenging (no line numbers, etc.)</li> <li>eval'd code executes more slowly (no opportunity to compile/cache eval'd code)</li> </ol>
<p>You could create a javascript function that creates a script-tag dynamically (<code>createElement('script')</code> and append it to the head- or bodytag) and point the source to your app. The src can contain parameters, used like a get request, like for example: <code>src="jsapp.aspx?script=myscript&amp;includefunction=loadfn"</code> No eval needed. You can even define an onload handler for your new script tag. Plenty of documentation on the net for that.</p> <p>You wouldn't even have to use XHR (AKA Ajax) for that.</p>
<p>There is nothing wrong with using eval if you control the source of the code. It's no different to embedding the code in a node. If you are doing a lot of DOM manipulation then surely it makes sense to just eval the script rather than add it to an already busy DOM...</p>
<p>I have run into this also. As others have said here - eval comes in handy when you are generating the Javascript on the fly and then want to have it execute on the browser. My usages of this technique are to go small things like a simple function that will just make a call back to the server when a button is pressed. Depending upon the circumstances there might be two functions or just one. I've also used it to display information that changes from a database. The information is always just plain text. So no injection attack can be done.</p> <p>Anyway, I too have run in to this limitation of the Javascript EVAL statement and it seems to me that there is a 1024 character limit. When I go over this I start getting weird things like eval just spitting out the original text. This is really evident because I hex everything before sending it to the browser so I can have things like single and double quotes in the text without it causing eval any problems. (And hexing everything helps prevent injection attacks.)</p> <p>I also side with the person who said to use getscript in jQuery. It works just as well as the eval without the size limitations. The only extra step you have to take is to create the Javascript file first.</p> <p>I hope this helps and answers the original poster's question. That being I believe the size limitation is 1024 bytes.</p>