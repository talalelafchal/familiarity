loop on a function in javascript?
<p>Can we run a loop on a function in javascript, so that the function executes several times?</p>
<p>Yes, you can use a <strong><a href="http://www.w3schools.com/js/js_loop_for.asp" rel="nofollow noreferrer">for</a></strong> loop and a <strong><a href="http://www.w3schools.com/js/js_loop_while.asp" rel="nofollow noreferrer">while</a></strong> loop in javascript</p> <pre><code>for (i=0;i&lt;=5;i++) { MyFunc(); } </code></pre> <p>Where the variable 'i' is the number of times it needs to run</p>
<pre><code>for (var i=0;i&lt;10;i++) //Loop 10 times { //Do something } </code></pre>
<p>Assuming your function is called <code>f</code>.</p> <pre><code>function f() { ... } </code></pre> <p>Here is a Javascript loop that will run your function 10 times.</p> <pre><code>for( int i = 0; i &lt; 10; ++i ) { f(); } </code></pre>
<p>Learn basic JavaScript at <a href="http://www.w3schools.com/js/default.asp" rel="nofollow noreferrer">W3Schools</a>. It's well worth the effort - it won't take long.</p>
<p>if you tired of using standard like (IF, WHILE), here is the another way of doing.. :)</p> <p>you can use setTimeOut and clearTimeOut to execute functions in a certain interval. If you want to execute an function for a specific number of times, you still can acheive it by incrementing index and clearTimeOut as soon as your index reaches to certain point.</p> <blockquote> <p>setTimeout() - executes a code some time in the future </p> <p>clearTimeout() - cancels the setTimeout()</p> </blockquote> <p>example from w3schools</p> <pre><code>&lt;html&gt; &lt;head&gt; &lt;script type="text/javascript"&gt; var c=0; var t; var timer_is_on=0; function timedCount() { document.getElementById('txt').value=c; c=c+1; t=setTimeout("timedCount()",1000); } function doTimer() { if (!timer_is_on) { timer_is_on=1; timedCount(); } } function stopCount() { clearTimeout(t); timer_is_on=0; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form&gt; &lt;input type="button" value="Start count!" onClick="doTimer()"&gt; &lt;input type="text" id="txt"&gt; &lt;input type="button" value="Stop count!" onClick="stopCount()"&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; </code></pre>
<p>Here is another way to iterate (functionaly) over a function, that is also optimised (using loop unrolling), on average it will be up to <code>16</code> times <strong>faster</strong></p> <p>(adapted from a functional lib of mine use as you wish)</p> <pre><code>function iterate( F, i0, i1, F0 ) { if ( i0 &gt; i1 ) return F0; else if ( i0 === i1 ) { F(i0, F0, i0, i1); return F0; } var l=i1-i0+1, i, k, r=l&amp;15, q=r&amp;1; if ( q ) F(i0, F0, i0, i1); for (i=q; i&lt;r; i+=2) { k = i0+i; F( k, F0, i0, i1); F(++k, F0, i0, i1); } for (i=r; i&lt;l; i+=16) { k = i0+i; F( k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); F(++k, F0, i0, i1); } return F0; } </code></pre> <p>use example:</p> <pre><code>function iterated(i, a, i0, i1) { console.log([i, i0, i1]); a.push(i); } var a = iterate(iterated, 0, 9, []); // optionaly one can pass a parameter in the iterator console.log(a); </code></pre> <p>output:</p> <pre><code>[0, 0, 9] [1, 0, 9] [2, 0, 9] [3, 0, 9] [4, 0, 9] [5, 0, 9] [6, 0, 9] [7, 0, 9] [8, 0, 9] [9, 0, 9] [0,1,2,3,4,5,6,7,8,9] </code></pre>