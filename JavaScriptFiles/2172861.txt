difference between these 2 ways of creating a class in javascript
<p>what are the difference between these two ways of creating a class:</p> <pre><code>var apple = { type: "macintosh", color: "red", getInfo: function () { return this.color + ' ' + this.type + ' apple'; } } function Apple (type) { this.type = type; this.color = "red"; this.getInfo = function() { return this.color + ' ' + this.type + ' apple'; }; } </code></pre> <p>and how do you instantiate and use the members?</p>
<p>While JavaScript is an object-oriented language, it does not use classes. You don't create a "class" in JavaScript. You create a "prototype". JavaScript is considered a <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Class-Based_vs._Prototype-Based_Languages" rel="nofollow noreferrer">Prototype-based language</a>.</p> <p>The first example is known as "<a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Literals#Object%20Literals" rel="nofollow noreferrer">object-literal notation</a>" for creating an object (a subset of which is popularly known as <a href="https://developer.mozilla.org/en/JSON" rel="nofollow noreferrer">JSON</a>). An analogy to this in class-based languages is a "static" class, in the sense that you don't need to create a new instance of an object in this case; It "just exists", once you define it. You wouldn't instantiate it, you'd access members of <code>apple</code> immediately since <code>apple</code> is already an object. It is also similar to creating an anonymous class in Java. You'd use it like this:</p> <pre><code>alert(apple.getInfo()); </code></pre> <p>With the second example, you're creating a prototype (not a class), which can be used to instantiate objects of type <code>Apple</code>. You could use it like this:</p> <pre><code>var redDelicious = new Apple("Red Delicious"); alert(redDelicious.getInfo()); </code></pre> <p>JavaScript allows you to modify and add to an object's prototype, so after you declared your <code>Apple</code> prototype, you could still continue to add or change things about it like this:</p> <pre><code>Apple.prototype.size = "7cm"; </code></pre> <p>When you do this, all objects derived from the <code>Apple</code> prototype will gain a <code>size</code> field. This is the basis for how the <a href="http://www.prototypejs.org/" rel="nofollow noreferrer">PrototypeJS framework</a> works to modify native JavaScript objects to add &amp; fix functionality. </p> <p>Keep in mind that it is considered bad practice to modify the prototype of native JavaScript objects, so you should avoid doing it whenever possible.</p>
<p>Your first approach is <a href="http://www.dyn-web.com/tutorials/obj_lit.php" rel="nofollow noreferrer"><strong>JavaScript Object Literal</strong></a> and can be accessed by:</p> <pre><code>apple.type; // returns "macintosh" apple.getInfo(); // prints "red macintosh apple" </code></pre> <p>You can also add your own properties like <code>wasGood</code> or <code>price</code> like so:</p> <pre><code>apple.wasGood = "true"; apple.price = "0.50"; alert(apple.price); // alerts "0.50" </code></pre> <p>Your second approach is instantiating an object and can be accessed by:</p> <pre><code>var myApple = new Apple("macintosh"); myApple.type; // returns "macintosh" myApple.getInfo(); // returns "red macintosh apple" </code></pre> <p>Adding properties to your Apple object you need to use the <a href="http://www.javascriptkit.com/javatutors/proto2.shtml" rel="nofollow noreferrer"><strong><code>prototype</code></strong></a> keyword:</p> <pre><code>Apple.prototype.price = "0.50"; Apple.prototype.wasGood = "true"; alert(myApple.price); // alerts "0.50" </code></pre>
<p>Here are some differences:</p> <ul> <li><p>The first way is incomplete, there is a semicolon missing after the last closing bracket.</p></li> <li><p>The first way creates an object, while the second only declares a constructor that can be used to create objects.</p></li> <li><p>The first way can only create a single object, while the second way can be used by the <code>new</code> keyword to create multiple objects.</p></li> <li><p>The first way can't take any parameters to affect how the object is initialised, while the second can.</p></li> </ul> <p>The first way creates a single object and assigns to the <code>apple</code>variable, which you can use to access the members:</p> <pre><code>alert(apple.type); </code></pre> <p>The second way is used with the <code>new</code> keyword to create instances:</p> <pre><code>var green = new Apple('Signe Tillisch'); alert(green.type); </code></pre>