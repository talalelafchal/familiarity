Arrays in JavaScript
<p>While reading a book about JavaScript I stumbled across an example:</p> <pre><code>var names = new Array("Paul","Catherine","Steve"); var ages = new Array(31,29,34); var concatArray; concatArray = names.concat(ages); </code></pre> <p>My question is, why doesn't the variable <code>concatArray</code> need to be define as a <code>new Array()</code> in order to store the concatenated data for both arrays <i>name</i> and <i>ages</i> , but when I try to treat the <code>concatArray</code> as an array by adding another line of code "<code>document.write(concatArray[0])</code>", it works just like an array and shows me the data stored in the first element. I just wonder why I'm not declaring the <code>concatArray</code> as a new array, yet it still works as one.</p>
<p>You are declaring <code>concatArray</code> as a new array but the declaration is implicit. The <a href="http://www.w3schools.com/jsref/jsref_concat_array.asp" rel="nofollow noreferrer"><code>concat</code></a> function returns a new array which contains concatenated copies of the original two arrays. The type of <code>concatArray</code> is inferred from the return type of the <code>concat</code> function.</p>
<p>Javascript doesn't care what the contents of the var are when it is declared; that is why you can declare <code>var concatArray</code> without needing to specify it as an array. Once you assign it a value and a type (as the result of the <code>concat()</code> function) javascript treats the var as an array.</p>
<p>Simply put, w3schools says it pretty concisely:</p> <blockquote> <p>The concat() method is used to join two or more arrays.</p> <p>This method does not change the existing arrays, <strong>it only returns a copy of the joined arrays.</strong></p> </blockquote> <p><a href="http://www.w3schools.com/jsref/jsref_concat_array.asp" rel="nofollow noreferrer">w3schools</a></p> <p>Looks like Andrew and Matthew beat me to it anyway.</p>
<p>Variable don’t have a specific data type in Javascript like in other languages. You can assign a variable every value you want.</p> <p>That means <code>var concatArray;</code> declares the variable but the value is <code>undefined</code>:</p> <pre><code>var concatArray; alert(typeof concatArray === "undefined"); </code></pre> <p>Only when assigning the return value of <code>names.concat(ages)</code> (an array) to <code>concatArray</code> it get’s that type:</p> <pre><code>var names = new Array("Paul","Catherine","Steve"); var ages = new Array(31,29,34); var concatArray; alert(typeof concatArray === "undefined"); concatArray = names.concat(ages); alert(concatArray.constructor === Array); </code></pre>
<p>I would make an answer slightly different of Andrew's one.<br> JavaScript variables are not strongly typed. You can put a string, then a number, then an object in the same variable. When you use the variable, the interpreter checks its current type is suitable for the usage you try to make. If you write:</p> <pre><code>var a = 45; alert(a[0]); a = [ 5 ]; alert(a[0]); </code></pre> <p>you will get successively <em>undefined</em> then <em>5</em>.</p>
<p>Because Javascript is dynamically typed. A variable doesn't have a specifuc type, and an array is an object that you can assign to any variable.</p> <p>When you declare a variable without assigning it a value, it just exists with an undefined value:</p> <pre><code>var answer; // now the variable exists, but it doesn't have a value answer = 42; // now the variable has the numerical value 42 answer = "hello"; // now the numerical value has been replaced with the string value "hello" answer = []; // now the variable contains an empty array answer[0] = 1337; // now the variable contains an array that contains an item with the value 1337 answer = -1 // now the array is gone and the variable contains the value -1 </code></pre>