webgame with simultaneous players
<p>I have seen many webbrowser based games with players playing simultaneously. Usually after waiting some time you can join a room where everyone is playing or you can play against one other player. All those games use Flash.</p> <p>How they achieve that? It would be very complex to accomplice without Flash?</p> <p>There are any toolkit (rails, etc) or plugin that provides this functionality? Or it is just a matter of storing sessions and mixing them ?</p> <p>Just a quick edit: I am not interested in Flash or Silverlight solutions</p>
<p>Depends what technology you want to use. Flash can be used to create a game like that, so can Silverlight. They both use javascript to send mouse movements and other user input asynchronously to the server so that the game state can be updated on the server.</p> <p>An article of flash game development: <a href="http://www.brighthub.com/internet/web-development/articles/11010.aspx" rel="nofollow noreferrer">http://www.brighthub.com/internet/web-development/articles/11010.aspx</a></p> <p>Silverlight: <a href="http://www.brighthub.com/internet/web-development/articles/14494.aspx" rel="nofollow noreferrer">http://www.brighthub.com/internet/web-development/articles/14494.aspx</a></p>
<p>It's possible to do it without flash if you're comfortable with ajax and your game doesn't require rapid interactions between users. But in either case, I believe you have to poll the server. You might also want to read about comet <a href="http://en.wikipedia.org/wiki/Comet_(programming)" rel="nofollow noreferrer">http://en.wikipedia.org/wiki/Comet_(programming)</a>).</p>
<p>Java Applets are able to communicate with JavaScript (e.g. you want your UI to be HTML&amp;CSS). So in <em>theory</em> you could implement your network code in a signed Java Applet. In this case you would not be limited to the plain client-server model. </p>
<p>Can you clarify what kind of game you would like to make? Turn based or real-time?</p> <p>Since you're not interested in flash or silverlight solutions (which can use sockets and thus scale well with thousands of users) you can use javascript and use ajax to send and receive data. </p> <p>Essentially you can use ajax like a socket by sending out input then letting the script "long poll" the server by having the server delay responding to it until it has data to send. The only problem is that you can only keep a connection open for so long before it times out (~30 seconds). This isn't usually a problem though since you're passing data back and forth frequently.</p> <p>I'd research fastCGI (or so I believe it can work like this) and have a game server daemon respond to the requests directly. That way it can open a single database connection and process all of the clients quickly. While this isn't necessary it would probably scale really well if implemented correctly.</p> <p>At the moment I've been making a proof of concept that's kind of naive. (Less naive than using the database as state and just using PHP scripts to update and receive the database's state. I should note though that for a only a few users and your own database this works rather well. I had 20 clients walking around at 100 ms updates. Sure it doesn't scale well and kills the database with 10 connections per client per second but it "works"). Basically the idea is that I have javascript generate packets and sends them to a PHP script. That PHP script opens a unix domain socket and forwards the data to a C++ daemon. Haven't benchmarked it though, so it's hard to tell how well it'll scale.</p> <p>If you feel comfortable though I really do recommend learning flash and socket networking. Using Epoll on linux or IOCP on windows you can host hundreds of clients. I've done tests of 100 clients on a C# socket server in the past and it took less than 5% CPU handling constant streams of small packets.</p>
<p>There are a couple options for a JavaScript-only solution. They all involve AJAX of one form or another. (See my answer on <a href="http://stackoverflow.com/questions/2073939/ajax-and-client-server-architecture-with-javascript/2074205#2074205">AJAX and Client-Server Architecture with JavaScript</a> for a larger breakdown.)</p> <p>You have a choice between AJAX Polling, Long Polling, COMET, or the upcoming Web Sockets. The first step is to understand AJAX. Once you are comfortable with it, you can setup a polling system (with <code>setInterval</code>) to poll the server for new data every <code>n</code> miliseconds.</p>