How to cleanup unreferenced Javascript libraries
<p>Our project has more than 300 JSP files and more than 200 JavaScript files. I'd like to do some cleanup, removing unnecessary JS files. Even if the JSP includes the JS maybe none of the functions are used. The goal is to reduce both complexity and time needed to load the page. My IDE is Eclipse. Giving the dynamic nature of JavaScript I guess it will be hard or even impossible. </p>
<p>If it's conceivable that the application can be tested with a lot of coverage (i.e. going through every dialog, error message, and situation imaginable) you may be able to work with your access log files - compare the list of JS files to those fetched after period x of heavy use.</p> <p>An alternative implementation of this would be setting up a "honeypot" (see my answer to <a href="http://stackoverflow.com/questions/1949771/finding-unused-images-in-a-rails-app/2016885#2016885"><strong>this question</strong></a>).</p> <p>Both these methods are of course "soft" in that their quality relies in how throroughly the application is actually used during testing time. </p> <p>If you have any way of <code>grep</code>ping all script references, that would be preferable. Maybe you can do a global search on <code>{anything}.js</code>, that would match most ways how to embed a JS file.</p>
<p>To find out what functions and javascript files are used in a project, you need code coverage tools, like <a href="http://siliconforks.com/jscoverage/" rel="nofollow noreferrer">JSCoverage</a> or <a href="http://www.zachleat.com/web/2007/04/18/javascript-code-coverage-tool-for-firebug/" rel="nofollow noreferrer">Code coverage for Firebug</a>. These tools will return the functions used and the files used. Using these with an automated test suit like the <a href="http://www.openqa.org/selenium-ide/" rel="nofollow noreferrer">Selenium</a> or randomized testing should give you a fairly good idea which files are loaded.</p> <p>If the files are loaded dynamically, you can also use Firebug or Fiddler to log the requests for the JS files.</p> <p>Unfortunately if you want certainty, not just extremely high likeliness that you get with the above tools, you would have to generate a calling graph for your entire webapp, maybe using a Javascript Compiler, like Rhino...</p>