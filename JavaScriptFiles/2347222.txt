Calling a JavaScript object class that's in a separate .js file
<p>I have created a string builder <a href="http://en.wikipedia.org/wiki/JavaScript" rel="nofollow noreferrer">JavaScript</a> object and I'm using it with many different .js files in my project.</p> <p>Can I create this class in a separate .js file and call it from all the other scripts that instansiate it, just like a C# class file?</p> <p>Is this possible, or do I continue copying and pasting it into the bottom of every .js file that uses it?</p>
<p>If you include the file in your main HTML page with your other js, you can then use the "class" as you wish:</p> <pre><code>&lt;script src="js1.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="js2.js" type="text/javascript"&gt;&lt;/script&gt; </code></pre> <p>In the above example, you can now instantiate a new instance of an object from js1.js with the code in js2.js. To do this with pure javascript, you would have to add the script tag to the DOM, or use AJAX to fetch the script file and <code>eval()</code> it.</p> <pre><code>// Create a &lt;script&gt; element var scriptEl = document.createElement("script"); scriptEl.src = "js2.js"; scriptEl.type = "text/javascript"; // Append it to the &lt;head&gt; document.getElementsByTagName("head")[0].appendChild(scriptEl); </code></pre>
<p>Yes, this should not be a problem. Just include the .js files in the correct order in your html pages.</p>
<p>To be perfectly correct, it's not the order of inclusion that matter, but rather the order of executing code. In most cases, Andy's and Segfault's instructions are just fine, but sometimes including the class file before its consumers isn't sufficient. For example, if you use ExtJS and you happen to define your class inside an <code>onReady</code> handler like this:</p> <pre><code>Ext.onReady(function() { myClass = ... }.bind(this)); </code></pre> <p>then it won't get executed by the time your second src file is included into the page and executed.</p> <p>I know, the example is a bit far-fetched :) but just make sure that your code is executed in the right order, not just included in the right order.</p>
<p>I came across this question and I wanted to add something (which probably wasn't there a few years ago). </p> <p>Even thought you can add every single script to your "index.html" it's not a very beautiful practice (imho). Especially if you consider that you may want to write a extension (~ framework). You don't want to annoy the user with a bunch of script tags he has to add to his code. What you want is a single line like this: </p> <pre><code>&lt;script src="yourFramework" (...) /&gt; </code></pre> <p>However, with the use of <a href="http://requirejs.org/docs/start.html" rel="nofollow">RequireJS</a> you are able to achieve this. You've the freedom to separate your code and "your user" still don't have to add a novel to his "script section". </p>