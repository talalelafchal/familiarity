Must have JavaScript pro developer tools, libs, utilities and workshop configuration
<p>This is a followup question to the <a href="http://stackoverflow.com/questions/2492123/pro-javascript-programmer-interview-questions-with-answers">Pro JavaScript programmer interview questions (with answers)</a>.</p> <p><strong>What is considered professional and industrial standard</strong> for a professional browser side Java Script developer when it comes to his <strong>workshop configuration</strong>, and maybe <em>from-concept-to-shipment</em> process? </p> <p>What are the most popular IDE's, utilities and probably libraries, <strong>not limited to the free ones</strong>. These that can help cut development time (eg. IDE), help with achieve better quality (eg. unit testing tools), reliability and maintainability.</p> <p>I'm looking for a baseline to which I could compare potential candidates based on their <strong>ability to keep their tools sharp and workshop efficient</strong> (pro's should invest time&amp;money in good tools, right?).</p>
<p>i've been doing pretty heavy JS development for a the last year and a bit and there's a frightening lack of good tools for js. particularly on the IDE front. </p> <p>I was using Spket, but it broke when upgrading to vista and is unusable. the very idea of code-completion in the js world is out the window unless you want to get into eclipse based IDE's which I don't. </p> <p>as for the baseline you're discussing. the baseline you're concerned with is code quality. tools are just that. they increase/decrease productivity but a developer with all the best tools and no experience will still write poorly. </p>
<p>I don't know "what is considered professional and industrial standard" but I use Aptana Studio 2 for an IDE for JavaScript, CSS and JSP/HTML. It's not perfect - navigation to highlighted objects could be better, for example - but it's robust and predictable and because its based on eclipse it feels 'right' to me. </p> <p>For javascript/animation libraries I use prototype.js and scriptaculous because they are cleanly coded and (to my mind) intuitive. Others use JQuery and mootools and are very happy with those choices too - so any of those 3 will work. </p>
<p><strong>Libraries/Frameworks</strong></p> <p>What libraries people use is very much a matter of preference. I was very fond of Prototype back in the day, but have made the switch, as so many others, to jQuery, since that seemed to be what was most desired by employers.</p> <p>If you've got a project up and running that is based on some javascript framework, you want to make sure that the person you're hiring is proficient in that particular framework, regardless of whether or not it is "the best one" for the task, because you do not generally want to mix several javascript frameworks. If, on the other hand, you're a startup, you're more at liberty to go with whatever library your developer prefers.</p> <p>Judging developer skill by library preference would be a real challenge. On one hand, jQuery is quite the new library on the block, so an impressive jQuery proficiency would be a sign that the developer has had the will and ability to quickly adapt to a new framework. On the other hand, jQuery is very easy to get started with, so a basic level understanding of jQuery doesn't really mean anything, and I've seen a lot of people who can use jQuery, but with no real understanding on how plain javascript works. I would really advise against drawing conclusions based on library preference.</p> <p><strong>IDE</strong></p> <p>As others have pointed out, it's hard to find an excellent javascript IDE. I'm from the .NET world so Visual Studio is the obvious IDE choice for me, since it's really well adapted to .NET programming needs. You'll find that a lot of really good javascript developers are not <em>only</em> javascript developers, and as such, their choice of IDE might not be based purely on what's good to write javascript in.</p> <p>For what it's worth, Visual Studio 2010 has some real innovative intellisense for javascript. It has native intellisense for jQuery, and it also understands dynamically created variables (if you write <code>for(var i = 0; i &lt; 10; i++) window['myVar'+i] = i;</code>, and later in your code starts typing <code>myV...</code>, intellisense will pop up suggestions <code>myVar1</code>, <code>myVar2</code>, etc...). VS2010 is only a release candidate, though, and Visual Studio 2008, which is the latest final release is <em>terrible</em> when it comes to javascript.</p> <p>I would see a developer running release candidates as something positive, though =)</p> <p><strong>Tools</strong></p> <p>It cannot be stressed enough how much javascript development is facilitated by Firebug for Firefox. I definitely think that the developer should mention Firebug or Chrome developer tools, for debugging purposes.</p> <p>Another tool it'd be great if the developer used would be PageSpeed for Firefox, which is an excellent way of inspecting what javascript functions can be deferred until after page load, for instance. This one definitely isn't a deal breaker, though.</p> <p>I think the developer should be able to explain what JS Lint is, although there's no need for a proficient javascript developer to use it in everyday development, so it's not alarming if the tool isn't mentioned; it's just a good thing if the interviewee can explain what it is, if you actively ask about it.</p> <p>As for minifying, I don't think that this should be a task that js developers should have to worry about. Minifying and script combining should be an automated deployment task, or an on the fly serverside task. </p>