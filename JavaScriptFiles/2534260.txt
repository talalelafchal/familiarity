var undefined = true;
<p>I'm doing some experimenting with this malicious JavaScript line: <code>var undefined = true;</code></p> <p>Every uninitialized variable in JavaScript has the value of <code>undefined</code> which is just a variable that holds the special value of <code>'undefined'</code>, so the following should execute the <code>alert</code>:</p> <pre><code>var undefined = true, x; if (x) { alert('ok'); } </code></pre> <p>But it doesn't, and my question is why?</p> <p>On further experimentation, I tried the following:</p> <pre><code>var undefined = true, x = undefined; if (x) { alert('ok'); } </code></pre> <p>This time, the <code>alert</code> is executed.</p> <p>So my question is...since in the first snippet <code>x</code> holds <code>undefined</code> (because it is not initialized), why didn't the <code>alert</code> execute? The strange thing is that when explicitly stating that <code>x</code> is <code>undefined</code> (<code>x = undefined</code>), the <code>alert</code> executed...</p>
<p>Uninitialized variables get the special value <code>undefined</code>. When you assign a variable to another variable you're giving it a string that references a variable you've defined within the current scope. In this case you've defined a variable named <code>undefined</code> so the JavaScript engine will look first through the variables, see that you've named one <code>undefined</code> and then assign it that variable.</p>
<p>Just declaring a variable called "undefined" does not mean that you're overriding the built-in concept of what the native "undefined" value is.</p> <p>Imagine if Java would let you use "null" as an identifier. Well, I guess Java doesn't have the same coercion as Javascript. Anyway the Javascript statement</p> <pre><code>if (x) alert("foo"); </code></pre> <p>involves an implicit coercion of the value of "x" to boolean. The value isn't defined, so its coercion to "boolean" results in <code>false</code>.</p>
<p>There is a difference between a variable named <code>undefined</code> and the value called <code>undefined</code>.</p> <pre><code>var undefined = true, x; </code></pre> <p>In this example, the variable <code>undefined</code> is set to the value <code>true</code>, and <code>x</code> to the value (not the variable!) <code>undefined</code>.</p> <pre><code>var undefined = true, x = undefined; </code></pre> <p>In this example, the variable <code>undefined</code> is set to the value <code>true</code> as well, and <code>x</code> is set to the value contained in the variable <code>undefined</code> (which is <code>true</code>).</p> <p>So, while you can declare a variable named <code>undefined</code>, you cannot change the fact that non-initialized variables are set to the value <code>undefined</code>.</p>