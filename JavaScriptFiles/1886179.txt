Why does javascript turn array indexes into strings when iterating?
<p>This Javascript logic puzzles me. I'm creating an array and setting the first element of it to a number. When I interate through it using a "for" loop Javascript turns the array key into a string. Why? I want it to stay a number.</p> <pre><code>stuff = []; stuff[0] = 3; for(var x in stuff) { alert(typeof x); } </code></pre>
<p>It's because you're looping through the array using <code>for...in</code> which is generally used for looping over properties of objects. The javascript engine is probably casting to a string because the string type is suitable for names of object properties.</p> <p>Try this more traditional approach:</p> <pre><code>stuff = []; stuff[0] = 3; for(var i=0; i&lt;stuff.length; i++) { var x = stuff[i]; alert(typeof x); } </code></pre>
<p><code>for..in</code> is not designed to iterate over Arrays. Use a C-style for loop instead.</p> <p>Reference: <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/for...in#Description" rel="nofollow noreferrer">MDC</a></p>
<p>The <code>for .. in</code> loop in Javascript iterates through the <em>properties</em> of the object. In Javascript, property names are strings and arrays are just objects with a bunch of properties that happen to look like numbers.</p>
<p>The <code>for...in</code> statement should be used to iterate over <em>object properties</em>, for Arrays use a simple <code>for</code> loop:</p> <pre><code>var stuff = []; stuff.push(3); for(var i = 0; i &lt; stuff.length; i++) { alert(stuff[i]); } </code></pre> <p>Why shouldn't use <code>for...in</code> with arrays?</p> <ol> <li>It crawls up the prototype chain, it will iterate over properties defined up in the <code>Array.prototype</code> or <code>Object.prototype</code>.</li> <li>The order of iteration is <em>not</em> guaranteed anyhow.</li> </ol> <p>More details on a recently answered question:</p> <ul> <li><a href="http://stackoverflow.com/questions/1885317/strange-behavior-in-javascript-enhanced-for-in-loop/1885365#1885365">Strange behavior in Javascript enhanced forâ€¦in loop</a></li> </ul>
<p>The problem is that it is very easy in JavaScript to switch to associative arrays, which are in fact not arrays but objects. The <code>for..in</code> loop however works on objects, which indices are strings.</p>
<p>Avoid for-in in <a href="http://dev.opera.com/articles/view/efficient-javascript/?page=2" rel="nofollow noreferrer">performance-critical</a> functions.</p> <ul> <li><code>The for-in loop requires the script engine to build a list of all the enumerable properties</code>, and check for duplicates in that list, before it can start the enumeration.</li> <li><code>The for-in loop breaks when you extend Array object using prototype</code>.</li> </ul>