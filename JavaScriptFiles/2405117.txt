Difference between window.location.href=window.location.href and window.location.reload()
<p>What is the difference between JavaScript's</p> <pre><code>window.location.href = window.location.href </code></pre> <p>and </p> <pre><code>window.location.reload() </code></pre> <p>functions?</p>
<p>If you say <code>window.location.reload(true)</code> the browser will skip the cache and reload the page from the server. <code>window.location.reload(false)</code> will do the opposite.</p>
<p>If I remember correctly, <code>window.location.reload()</code> reloads the current page with POST data, while <code>window.location.href=window.location.href</code> does not include the POST data.</p> <p>As noted by @W3Max in the comments below, <code>window.location.href=window.location.href</code> will not reload the page if there's an anchor (#) in the URL - You must use <code>window.location.reload()</code> in this case.</p> <p>Also, as noted by @Mic below, <code>window.location.reload()</code> takes an additional argument <code>skipCache</code> so that with using <code>window.location.reload(true)</code> the browser will skip the cache and reload the page from the server. <code>window.location.reload(false)</code> will do the opposite, and load the page from cache if possible.</p>
<p>No, there shouldn't be. However, it's possible there is differences in some browsers, so either (or neither) may not work in some case. </p>
<p>If you add the boolean true to the reload <code>window.location.reload(true)</code> it will load from server.</p> <p>It is not clear how supported this boolean is, <a href="http://www.w3.org/TR/Window/#location-methods">W3Org</a> mentions that NS <em>used to support</em> it</p> <p>There MIGHT be a difference between the content of window.location.href and <a href="https://developer.mozilla.org/en/DOM/document.URL">document.URL</a> - there at least used to be a difference between location.href and the non-standard and deprecated <a href="https://developer.mozilla.org/en/DOM/document.location">document.location</a> that had to do with redirection, but that is really last millennium.</p> <p>For documentation purposes I would use <a href="https://developer.mozilla.org/en/DOM/window.location#reload">window.location.reload()</a> because that is what you want to do.</p>
<p>from my experience of about 3 years, i could not find any difference...</p> <p>edit : yes, as one of them here has said, only passing a boolean parameter to window.location.reload() is the difference. if you pass <em>true</em>, then the browser loads a fresh page, but if <em>false</em>, then the cache version is loaded...</p>
<p>The difference is that </p> <pre><code>window.location = document.URL; </code></pre> <p>will not reload the page if there is a hash (#) in the URL (with or without something after it), whereas </p> <pre><code>window.location.reload(); </code></pre> <p>will reload the page.</p>
<p>Came across this question researching some aberrant behavior in IE, specifically IE9, didn't check older versions. It seems</p> <pre><code>window.location.reload(); </code></pre> <p>results in a refresh that blanks out the entire screen for a second, where as</p> <pre><code> window.location = document.URL; </code></pre> <p>refreshes the page much more quickly, almost imperceptibly.</p> <p>Doing a bit more research, and some experimentation with fiddler, it seems that <code>window.location.reload()</code> will bypass the cache and reload from the server regardless if you pass the boolean with it or not, this includes getting all of your assets (images, scripts, style sheets, etc) again. So if you just want the page to refresh the HTML, the <code>window.location = document.URL</code> will return much quicker and with less traffic. </p> <p>A difference in behavior between browsers is that when IE9 uses the reload method it clears the visible page and seemingly rebuilds it from scratch, where FF and chrome wait till they get the new assets and rebuild them if they are different.</p>
<p>A difference in Firefox (12.0) is that on a page rendered from a POST, reload() will pop up a warning and do a re-post, while a URL assignment will do a GET.</p> <p>Google Chrome does a GET for both.</p>
<p>Using JSF, I'm now having the issue with refresh after session is expired: <a href="http://stackoverflow.com/questions/15252234/primefaces-viewexpiredexception-after-page-reload">PrimeFaces ViewExpiredException after page reload</a> and with some investigation I have found one difference in FireFox:</p> <p>Calling <code>window.location.reload()</code> works like clicking refresh icon on FF, it adds the line </p> <p><code>Cache-Control max-age=0</code></p> <p>while setting <code>window.location.href</code> works like pressing ENTER in URL line, it does not send that line. </p> <p>Though both are sent as GET, the first (reload) is restoring the previous data and the application is in inconsistent state. </p>
<p>As said, modifying the href when there is a hash (#) in the url would not reload the page. Thus, I use this to reload it instead of regular expressions:</p> <pre><code>if (!window.location.hash) { window.location.href = window.location.href; } else { window.location.reload(); } </code></pre>