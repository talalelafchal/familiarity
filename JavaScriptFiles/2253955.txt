Scope of &quot;this&quot; in JavaScript
<p>I have a JavaScript class that looks like this:</p> <pre><code>function SomeFunction() { this.doSomething(function() { this.doSomethingElse(); }); this.doSomethingElse = function() { } } </code></pre> <p>This code throws an error because the scope of "this" inside the function that is passed into doSomething() is different that than the scope of "this" outside of that function. </p> <p>I understand why this is, but what's the best way to deal with this? This is what I end up doing:</p> <pre><code>function SomeFunction() { var thisObject = this; this.doSomething(function() { thisObject.doSomethingElse(); }); this.doSomethingElse = function() { } } </code></pre> <p>That works fine, but it just feels like a hack. Just wondering if someone has a better way.</p>
<p>That is the correct and commonly-accepted workaround. It's sort of kludgy but it's what everybody does. Typically this extra variable is named <code>self</code>, as in:</p> <pre><code>function SomeFunction() { var self = this; this.doSomething(function() { self.doSomethingElse(); }); this.doSomethingElse = function() { } } </code></pre>
<p><code>this</code> has dynamic "scope". That means that it is set up by whatever binds it, and <code>this</code> is bound by a "method call". That is, <em>any</em> time in your program you see this: <code>w.f()</code> then while <code>f</code> is executed, <code>this</code> is dynamically bound to <code>f</code>, <em>even</em> if <code>f</code> had <code>this</code> in its lexical scope.</p> <p>Most JavaScript frameworks provide some facilities for dealing with this exact problem. With <a href="http://www.prototypejs.org/" rel="nofollow noreferrer">Prototype.js</a> (for example) you can do this:</p> <pre><code>this.doSomething(function() { this.doSomethingElse(); }.bind(this)); </code></pre> <p>Your "hack" however is fine. I usually do a <code>(function (self) { ... })(this)</code> around any functions that I need a lexically-scoped <code>this</code>-like variable.</p>
<p>This commenter had what I was looking for (although the other answers are good too):</p> <p>@Jon Kruger See this, check out their article for call, too: <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Function/Apply" rel="nofollow noreferrer">https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Function/Apply</a>â€“ Jonathon 44 mins ago</p>
<p>It's also worth mentioning that the next version of ECMAScript (the language spec for JavaScript) is going to introduce <code>Function.bind()</code>, which will let you specify a permanent context for a function.</p>