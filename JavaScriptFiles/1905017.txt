Why does javascript:alert(&quot;foo&quot; &amp; &quot;bar&quot;); display zero?
<p>I really think the title explains it thoroughly enough. I stumbled upon this oddity when I used an ampersand instead of a plus sign in some string manipulation code. Found it interesting. Could somebody explain this for me?</p>
<p>JavaScript, like many languages, has a bit operator &amp; This compares the bits at similar positions and returns a 1-bit in those positions where they both have a 1-bit and a 0-bit in those positions where either one has a 0-bit.</p> <p>And the important thing why it returns 0 is not because no bits match, but because it doesn't support strings. :)</p>
<p><strong>&amp;</strong> is the bitwise AND operator (as opposed to <strong>&amp;&amp;</strong>, which is the logical AND operator). A bitwise &amp; makes no sense on strings, so I suppose JavaScript just takes the easy way out and returns 0.</p> <p>There could be a more technical explanation, but basically you gave a nonsensical instruction and got back a nonsensical result. It would have been nicer to get an error, but JavaScript is just not that kind of language!</p>
<p>Because all bitwise operators<strong><sup>1</sup></strong>, including the bitwise and (<code>&amp;</code>), work with 32-bit integers.</p> <p>This operator will convert the two operands to signed 32-bit integers using the abstract <code>ToInt32</code> operation <strong><sup>2</sup></strong>, and if the value is not a number, the result of this conversion is <code>0</code>.</p> <p>At the end your expression becomes evaluated as:</p> <pre><code>0 &amp; 0; // 0 </code></pre> <p>References:</p> <ol> <li><p><em>Binary Bitwise Operators</em> <a href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf" rel="nofollow noreferrer">ECMA-262, 3rd. Ed.</a> Section 11.10</p></li> <li><p><code>ToInt32</code>, <a href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf" rel="nofollow noreferrer">ECMA-262</a>, Section 9.5</p></li> </ol>
<p>that's a bitwise &amp; which is casting its arguments to be numbers. when you cast an arbitrary string to a number, and that string doesn't contain numerical text, then the result is NaN.</p> <p>the result of NaN &amp; NaN is 0 for some reason.</p> <p>try "2" &amp; "3"</p>