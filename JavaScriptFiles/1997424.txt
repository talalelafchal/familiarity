creating objects with new vs. {} in javascript
<p>There are two ways of creating an object in javascript:</p> <ol> <li>use new on a "constructor function"</li> <li>return a dictionary {} and set the proper key/value pairs</li> </ol> <p>The first is, for example</p> <pre><code>FooType = function() { this.hello = function() { alert("hello"); }; }; foo = new FooType(); foo.hello(); </code></pre> <p>the second is</p> <pre><code>fooFactory = function() { return { hello : function() { alert("hello"); } }; }; foo = fooFactory(); foo.hello(); </code></pre> <p>(Code written for the post. not guaranteed correct)</p> <p>Apart from risks of mistakes of having this bound to the global object, are these two method totally equivalent (also considering prototype inheritance etc...)?</p>
<p>In example one, <code>foo</code> inherits from <code>FooType</code>'s prototype (which hasn't had any changes). <code>foo instanceof FooType</code> is true in the example. In example two, there's no inheritance. If you are going to be reusing methods, use example one but define shared methods on <code>FooType.prototype</code>, not in the function body:</p> <pre><code>var FooType = function() {}; FooType.prototype.hello = function() { alert("hello"); }; </code></pre>
<p>They're not equivalent, especially when considering prototype inheritance.</p> <pre><code>FooType = function() { this.hello = function() { alert("hello"); }; }; var foo = new FooType(); FooType.prototype.bye = function() { alert('bye!'); }; foo.bye(); // "bye!" </code></pre> <p>The only way you could achieve that in the fooFactory way would be to add it to the <code>object</code> prototype which is a Very Bad Idea.</p> <p>The first method is much more meaningful in my opinion (since the object has a type you can check against) and can offer much better performance if the prototype is done properly. In your first example, every time you instantiate a new <code>FooType</code> object, it create a new "hello" function. If you have lots of these objects, that's a lot of wasted memory.</p> <p>Consider using this instead:</p> <pre><code>function FooType() { } FooType.prototype.hello = function() { alert('Hello'); }; </code></pre>