Reordering arrays
<p>Say, I have an array that looks like this:</p> <pre><code>var playlist = [ {artist:"Herbie Hancock", title:"Thrust"}, {artist:"Lalo Schifrin", title:"Shifting Gears"}, {artist:"Faze-O", title:"Riding High"} ]; </code></pre> <p>How can move an element to another position?</p> <p>I want to move for example, <code>{artist:"Lalo Schifrin", title:"Shifting Gears"}</code> to the end.</p> <p><br /></p> <p>I tried using splice, like this:</p> <pre><code>var tmp = playlist.splice(2,1); playlist.splice(2,0,tmp); </code></pre> <p>But it doesn't work.</p> <p>Any help would be appreciated.</p>
<p>If you know the indexes you could easily swap the elements, with a simple function like this:</p> <pre><code>function swapElement(array, indexA, indexB) { var tmp = array[indexA]; array[indexA] = array[indexB]; array[indexB] = tmp; } swapElement(playlist, 1, 2); // [{"artist":"Herbie Hancock","title":"Thrust"}, // {"artist":"Faze-O","title":"Riding High"}, // {"artist":"Lalo Schifrin","title":"Shifting Gears"}] </code></pre> <p>Array indexes are just properties of the array object, so you can swap its values.</p>
<p>Change 2 to 1 as the first parameter in the splice call when removing the element:</p> <pre><code>var tmp = playlist.splice(1,1); playlist.splice(2,0,tmp); </code></pre>
<p>You could always use the sort method, if you don't know where the record is at present:</p> <pre><code>playlist.sort(function (a, b) { return a.artist == "Lalo Schifrin" ? 1 // Move it down the list : 0; // Keep it the same }); </code></pre>
<p>The syntax of <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice" rel="nofollow noreferrer"><code>Array.splice</code></a> is:</p> <pre><code>yourArray.splice(index, howmany, element1, /*.....,*/ elementX); </code></pre> <p>Where:</p> <ul> <li><em>index</em> is the position in the array you want to start removing elements from</li> <li><em>howmany</em> is how many elements you want to remove from <em>index</em></li> <li><em>element1, ..., elementX</em> are elements you want inserted from position <em>index</em>.</li> </ul> <p>This means that <code>splice()</code> can be used to remove elements, add elements, or replace elements in an array, depending on the arguments you pass.</p> <p>Note that it returns an array of the removed elements.</p> <p>Something nice and generic would be:</p> <pre><code>Array.prototype.move = function (from, to) { this.splice(to, 0, this.splice(from, 1)[0]); }; </code></pre> <p>Then just use:</p> <pre><code>var ar = [1,2,3,4,5]; ar.move(0,3); alert(ar) // 2,3,4,1,5 </code></pre> <p>Diagram:</p> <p><a href="https://i.stack.imgur.com/eg4JE.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/eg4JE.png" alt="Algorithm diagram"></a></p>
<p>Try this: </p> <pre><code>playlist = playlist.concat(playlist.splice(1, 1)); </code></pre>
<p>If you only ever want to move one item from an arbitrary position to the end of the array, this should work:</p> <pre><code>function toEnd(list, position) { list.push(list.splice(position, 1)); return list; } </code></pre> <p>If you want to move multiple items from some arbitrary position to the end, you can do:</p> <pre><code>function toEnd(list, from, count) { list.push.apply(list, list.splice(from, count)); return list; } </code></pre> <p>If you want to move multiple items from some arbitrary position to some arbitrary position, try:</p> <pre><code>function move(list, from, count, to) { var args = [from &gt; to ? to : to - count, 0]; args.push.apply(args, list.splice(from, count)); list.splice.apply(list, args); return list; } </code></pre>
<p>Here is an immutable version for those who are interested:</p> <pre><code>function immutableMove(arr, from, to) { return arr.reduce((prev, current, idx, self) =&gt; { if (from === to) { prev.push(current); } if (idx === from) { return prev; } if (from &lt; to) { prev.push(current); } if (idx === to) { prev.push(self[from]); } if (from &gt; to) { prev.push(current); } return prev; }, []); } </code></pre>