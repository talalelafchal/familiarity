Running a long operation in javascript?
<p>Is there a good way of performing a long-running operation in javascript? For example, I have a function which may take 2 minutes to run. How do we break up a large operation like this? If I was using java or C, I would perform this task in a background thread. Is there a way to tell the browser to pause execution of the script so it can let its foreground/UI thread work again? Something like this?:</p> <pre><code>function bigJob() { for (i = 0; i &lt; 1000000; i++) { someWork(); sleep(1000); } } </code></pre> <p>Thanks</p>
<p>If you want it to sleep, you would run it in an interval:</p> <pre><code>var i = 0; var jobInterval = setInterval(bigJob, 1000); function bigJob() { somework(); i++; if(i&gt;1000000) { clearInterval(jobInterval); } } </code></pre> <p>You would have to track the number of iterations in the function, and kill the interval when you are done.</p> <p>If someWork() is intensive, you will still hang the browser at each interval.</p>
<p>If popups and such are enabled on the browser, you can open a new window outside of the viewing area and have it execute your script.</p>
<p>Possible ways:</p> <ol> <li>separate window</li> <li>chunks of work interleaved with timer</li> <li>HTML5 worker threads</li> <li>NPAPI plugin</li> <li>Extension</li> </ol> <p>It all comes down to your requirements &amp; constraints.</p>
<p>You could do something like:</p> <pre><code>function bigJob() { setInterval(function() doPartOfTheJob, 100); } </code></pre> <p>This would execute your piece of code every 100 ms.</p>
<p>You can run the long job in the background.</p> <p>Here is a very tiny library that allows you to do that: <a href="http://adambom.github.io/parallel.js/" rel="nofollow">http://adambom.github.io/parallel.js/</a></p> <p>It also uses all the computing power because it spawns across all CPU cores in the background.</p> <p>Sample to put a long task in the background:</p> <pre><code>var slowSquare = function (n) { var i = 0; while (++i &lt; n * n) {} return i; }; // Create a job var p = new Parallel(100000); // Spawn our slow function p.spawn(slowSquare).then(yourCallback); </code></pre> <p>Sample for multicore:</p> <pre><code>var p = new Parallel([40, 41, 42]), log = function () { console.log(arguments); }; function fib(n) { return n &lt; 2 ? 1 : fib(n - 1) + fib(n - 2); }; p.map(fib).then(log); // returns [165580141, 267914296, 433494437] </code></pre> <p>It has a fallback to use Timeouts in case the browser doesn't supports workers.</p>