Pro JavaScript programmer interview questions (with answers)
<p>What are good questions to determine if applicant is really a pro JavaScript (browser side) developer ?</p> <p>Questions that can distinguish if someone is not an ad-hoc JavaScript programmer, but is really doing professional JavaScript development, object-oriented, reusable, and maintainable.</p> <p><strong>Please provide answers</strong>, so an intermediate and ad-hoc JavaScript programmers can interview someone more experienced, coming up with answers to quite few of those advanced questions will elude me. <strong>Please avoid open questions</strong>.</p> <p>Please keep <strong>one <em>interview question/answer</em> per <em>SO answer</em></strong> for better reading experience and easier interview preparation.</p>
<p>Ask how <a href="http://www.jibbering.com/faq/faq_notes/closures.html#clMem" rel="nofollow noreferrer">accidental closures</a> might cause memory leaks in IE.</p>
<p>Ask "What unit testing framework do you use? and why?"</p> <p>You can decide if actually using a testing framework is really necessary, but the conversation might tell you a lot about how expert the person is.</p>
<p>Ask about "this". This is one good question which can be true test of JavaScript developer.</p>
<p>(I'm assuming you mean browser-side JavaScript)</p> <p>Ask him why, despite his infinite knowledge of JavaScript, it is still a good idea to use existing frameworks such as jQuery, Mootools, Prototype, etc.</p> <p>Answer: Good coders code, great coders reuse. Thousands of man hours have been poured into these libraries to abstract DOM capabilities away from browser specific implementations. There's no reason to go through all of the different browser DOM headaches yourself just to reinvent the fixes.</p>
<p>Ask them how they ensure their pages continue to be usable when the user has JavaScript turned off or JavaScript isn't available.</p> <p>There's no One True Answer, but you're fishing for an answer talking about some strategies for <a href="http://en.wikipedia.org/wiki/Progressive_enhancement" rel="nofollow noreferrer">Progressive Enhancement</a>.</p> <blockquote> <p>Progressive Enhancement consists of the following core principles:</p> <ul> <li>basic content should be accessible to all browsers</li> <li>basic functionality should be accessible to all browsers</li> <li>sparse, semantic markup contains all content</li> <li>enhanced layout is provided by externally linked CSS</li> <li>enhanced behavior is provided by [[Unobtrusive JavaScript|unobtrusive]], externally linked JavaScript</li> <li>end user browser preferences are respected</li> </ul> </blockquote>
<p>Because JavaScript is such a small language, yet with incredible complexity, you should be able to ask relatively basic questions and find out if they are really that good based on their answers. For instance, my standard first question to gauge the rest of the interview is:</p> <blockquote> <p>In JavaScript, what is the difference between <code>var x = 1</code> and <code>x = 1</code>? Answer in as much or as little detail as you feel comfortable.</p> </blockquote> <p>Novice JS programmers <em>might</em> have a basic answer about locals vs globals. Intermediate JS guys should definitely have that answer, and should probably mention function-level scope. Anyone calling themselves an "advanced" JS programmer should be prepared to talk about locals, implied globals, the <code>window</code> object, function-scope, declaration hoisting, and scope chains. Furthermore, I'd love to hear about <code>[[DontDelete]]</code>, hoisting precedence (parameters vs <code>var</code> vs <code>function</code>), and <code>undefined</code>.</p> <p>Another good question is to ask them to write a <code>sum()</code> function that accepts any number of arguments, and returns their sum. Then, ask them to use that function (without modification) to sum all the values in an array. They should write a function that looks like this:</p> <pre><code>function sum() { var i, l, result = 0; for (i = 0, l = arguments.length; i &lt; l; i++) { result += arguments[i]; } return result; } sum(1,2,3); // 6 </code></pre> <p>And they should invoke it on your array like this (context for <code>apply</code> can be whatever, I usually use <code>null</code> in that case):</p> <pre><code>var data = [1,2,3]; sum.apply(null, data); // 6 </code></pre> <p>If they've got those answers, they probably know their JavaScript. You should then proceed to asking them about non-JS specific stuff like testing, workflows, version control, etc. to find out if they're a good <em>programmer</em>.</p>
<p><strong>Basic JS programmming</strong></p> <ul> <li><code>Scope of variable</code></li> <li>What is <code>Associative Array</code>? How do we use it?</li> </ul> <p><strong>OOPS JS</strong></p> <ul> <li><code>Difference between Classic Inheritance and Prototypical Inheritance</code> </li> <li>What is <code>difference between private variable, public variable and static variable</code>? How we achieve this in JS?</li> <li>How to <code>add/remove properties to object</code> in run time?</li> <li>How to achieve <code>inheritance</code> ?</li> <li>How to <code>extend built-in objects</code>?</li> <li>Why <code>extending array is bad idea</code>?</li> </ul> <p><strong>DOM and JS</strong></p> <ul> <li><code>Difference between browser detection and feature detection</code></li> <li><code>DOM Event Propagation</code></li> <li><code>Event Delegation</code></li> <li><code>Event bubbling V/s Event Capturing</code></li> </ul> <p><strong>Misc</strong></p> <ul> <li><code>Graceful Degradation V/s Progressive Enhancement</code></li> </ul>
<p>intermediate programmers should have technical mastery of their tools.</p> <p>if he's passed the technical phone screen-esque questions above, make him sketch out something stupid on the spot, like an ajax url shortner. then grill him on his portfolio. no amazing portfolio = intermediate developer in this domain and not the guy you want in charge of your shiny new project.</p>