Best way to return early from a javascript function normally returning a reference
<p>Lets say we have a function of the form:</p> <pre><code>function getReferenceToFoo( idName ) { if( ! document.getElementById( idName ) ) { return; } ... // else return reference to element normally } </code></pre> <p>What is the best way to indicate failure by return type? By my mind I could do one of the following:</p> <ol> <li>Just 'Return' (as above)</li> <li>Return 'null'</li> <li>Return 'undefined'</li> </ol> <p>Which is the best practice and why?</p>
<p>Return false or nothing. Just <code>return</code> will act as null if you're doing:</p> <pre><code>foo = getReferenceToFoo('myID'); if (foo) { // do things } </code></pre>
<p>If you want to <em>return something</em>, I'd return null, because the very purpose of null is to indicate, well, a null content.</p> <p><a href="http://en.wikipedia.org/wiki/Null_(computer_programming)" rel="nofollow noreferrer">Wikipedia for Null</a>:</p> <blockquote> <p>Null is a special pointer value (or other kind of object reference) used to signify that a pointer intentionally does not point to (or refer to) an object.</p> </blockquote> <p>Else if you'd like precision or interruption on failure, you may want to throw an exception.</p>
<p>In JavaScript all functions return, even if you don´t explicitly make them return. If there are no return statement a function will return <code>undefined</code>. There is however one exception to this. If you use the <code>new</code> statement the function will return an instance of <code>this</code>.</p> <p>So:</p> <pre><code>function doFoo() { // do nothing } </code></pre> <p>,</p> <pre><code>function doFoo() { return; } </code></pre> <p>and</p> <pre><code>function doFoo() { return undefined; } </code></pre> <p>are all the same to the JavaScript engine.</p> <p><s>I really can´t recommend using <code>null</code> as return value in JavaScript. <code>null</code> is an object and doing type checking can lead to weird logic. If you use <code>null</code> as return you better change the expression in the <code>if()</code> to be more explicit.</s></p> <p>I would recommend to only return <code>null</code> as a <em>failing value</em> from functions where expected return value is some kind of object. If expected return value is some kind of primitive I would consider <code>undefined</code>.</p> <pre><code>foo = getReferenceToFoo('myID'); // foo might be a reference or null if (null !== foo) { // do things } </code></pre> <p>But honestly I don´t know why you are doing this. The method <code>document.getElementById</code> returns <code>null</code> if it can´t find anything.</p> <p>I know this is a antipattern but I actually do use:</p> <pre><code>var myElmnt; if ((myElmnt = document.getElementById('myId'))) { // do stuff with myElmnt } </code></pre> <p>Yeah, I know, I will burn in hell and all.</p>