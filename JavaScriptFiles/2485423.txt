Is using 'var' to declare variables optional?
<p>Is "var" optional?</p> <pre><code>myObj = 1; </code></pre> <p>same as ?</p> <pre><code>var myObj = 1; </code></pre> <p>I found they both work from my test, I assume <code>var</code> is optional. Is that right?</p>
<p><a href="http://www.webdevelopersnotes.com/tutorials/javascript/global_local_variables_scope_javascript.php3" rel="nofollow noreferrer">They are not the same.</a></p> <p>Undeclared variable (without <code>var</code>) are treated as properties of the global object. (Usually the <code>window</code> object, unless you're in a <code>with</code> block) </p> <p>Variables declared with <code>var</code> are normal local variables, and are not visible outside the function they're declared in. (Note that Javascript does not have block scope)</p>
<p>They mean different things. If you use <code>var</code> the variable is declared within the scope you are in (e.g. of the function). If you don't use <code>var</code>, the variable bubbles up through the layers of scope until it encounters a variable by the given name or the global object (window, if you are doing it in the browser), where it then attaches. It is then <em>very similar</em> to a global variable. However, it can still be deleted with <code>delete</code> (most likely by someone else's code who also failed to use <code>var</code>). If you use <code>var</code> in the global scope, the variable is <em>truly global</em> and cannot be deleted.</p> <p>This is, in my opinion, one of the most dangerous issues with javascript, and should be deprecated, or at least raise warnings over warnings. The reason is, it's easy to forget <code>var</code> and have by accident a common variable name bound to the global object. This produces weird and difficult to debug behavior.</p>
<p><code>var</code> is optional. <code>var</code> puts a variable in local scope. If a variable is defined without <code>var</code>, it is in global scope <strike>and not deletable</strike>.</p> <h3>edit</h3> <p>I thought that the non-deletable part was true at some point in time with a certain environment. I must have dreamed it.</p>
<p>Nope, they are not equivalent.</p> <p>With <code>myObj = 1;</code> you are using a global variable.</p> <p>The latter declaration create a variable local to the scope you are using.</p> <p>Try the following code to understand the differences:</p> <pre><code>external = 5; function firsttry() { var external = 6; alert("first Try: " + external); } function secondtry() { external = 7; alert("second Try: " + external); } alert(external); // Prints 5 firsttry(); // Prints 6 alert(external); // Prints 5 secondtry(); // Prints 7 alert(external); // Prints 7 </code></pre> <p>The second function alters the value of the global variable "external", but the first function doesn't.</p>
<p>The var keyword in Javascript is there for a purpose.</p> <p>If you declare a variable without the var keyword, like this:</p> <pre><code>myVar = 100; </code></pre> <p>It becomes a global variable that can be accessed from any part of your script. If you did not do it intentionally or are not aware of it, it can cause you pain if you re-use the variable name at another place in your javascript.</p> <p>If you declare the variable with the var keyword, like this:</p> <pre><code>var myVar = 100; </code></pre> <p>It is local to the scope ({] - braces, function, file, depending on where you placed it).</p> <p>This a safer way to treat variables. So unless you are doing it on purpose try to declare variable with the var keyword and not without.</p>
<p>Consider this question asked at StackOverflow today:</p> <p><a href="http://stackoverflow.com/questions/2485032/simple-javascript-question/2485053">Simple Javascript question</a></p> <p>A good test and a <strong>practical example</strong> is what happens in the above scenario...<br> The developer used the name of the JavaScript function in one of his variables.</p> <p><strong>What's the problem with the code?</strong><br> The code only works the first time the user clicks the button.</p> <p><strong>What's the solution?</strong><br> Add the <code>var</code> keyword before the variable name.</p>
<p>There's a bit more to it than just local vs global. Global variables created with <code>var</code> are different than those created without. Consider this:</p> <pre><code>var foo = 1; // declared properly bar = 2; // implied global window.baz = 3; // global via window object </code></pre> <p>Based on the answers so far, these global variables, <code>foo</code>, <code>bar</code>, and <code>baz</code> are all equivalent. This is <strong>not</strong> the case. Global variables made with <code>var</code> are (correctly) assigned the internal <code>[[DontDelete]]</code> property, such that they cannot be deleted.</p> <pre><code>delete foo; // false delete bar; // true delete baz; // true foo; // 1 bar; // ReferenceError baz; // ReferenceError </code></pre> <p>This is why you should <strong>always</strong> use <code>var</code>, even for global variables.</p>
<p>This is one of the tricky parts of Javascript, but also one of its core features. A variable declared with <code>var</code> "begins its life" right where you declare it. If you leave out the <code>var</code>, it's like you're talking about a variable that you have used before.</p> <pre><code>var foo = 'first time use'; foo = 'second time use'; </code></pre> <p>With regards to scope, it is <strong><em>not</em></strong> true that variables automatically become global. Rather, Javascript will traverse up the scope chain to see if you have used the variable before. If it finds an instance of a variable of the same name used before, it'll use that and whatever scope it was declared in. If it doesn't encounter the variable anywhere it'll eventually hit the global object (<code>window</code> in a browser) and will attach the variable to it.</p> <pre><code>var foo = "I'm global"; var bar = "So am I"; function () { var foo = "I'm local, the previous 'foo' didn't notice a thing"; var baz = "I'm local, too"; function () { var foo = "I'm even more local, all three 'foos' have different values"; baz = "I just changed 'baz' one scope higher, but it's still not global"; bar = "I just changed the global 'bar' variable"; xyz = "I just created a new global variable"; } } </code></pre> <p>This behavior is really powerful when used with nested functions and callbacks. Learning about what <code>functions</code> are and how scope works is the most important thing in Javascript.</p>
<p>There's so much confusion around this subject, and none of the existing answers cover everything clearly and directly. Here are some examples with comments inline.</p> <pre><code>//this is a declaration var foo; //this is an assignment bar = 3; //this is a declaration and an assignment var dual = 5; </code></pre> <p>A declaration sets a DontDelete flag. An assignment does not.</p> <p>A declaration ties that variable to the current scope.</p> <p>A variable assigned but not declared will look for a scope to attach itself to. That means it will traverse up the food-chain of scope until a variable with the same name is found. If none is found, it will be attached to the top-level scope (which is commonly referred to as global).</p> <pre><code>function example(){ //is a member of the scope defined by the function example var foo; //this function is also part of the scope of the function example var bar = function(){ foo = 12; // traverses scope and assigns example.foo to 12 } } function something_different(){ foo = 15; // traverses scope and assigns global.foo to 15 } </code></pre> <p>For a very clear description of what is happening, this <a href="http://perfectionkills.com/understanding-delete/">analysis of the delete function</a> covers variable instantiation and assignment extensively. </p>
<p><em>Var</em> doesn't let you, the programmer, declare a variable because Javascript doesn't have variables. Javascript has objects. <em>Var</em> declares a name to an undefined object, explicitly. Assignment assigns a name as a handle to an object that has been given a value.</p> <p>Using <em>var</em> tells the Javacript interpreter two things:</p> <ol> <li><strong>not to use</strong> <em>delegation</em> reverse traversal look up value for the name, instead use this one</li> <li><strong>not to delete</strong> the name</li> </ol> <p>Omission of <em>var</em> tells the Javacript interpreter to use the first-found previous instance of an object with the same name. </p> <p>Var as a keyword arose from a poor decision by the language designer much in the same way that Javascript as a name arose from a poor decision. </p> <p>ps. Study the code examples above.</p>
<p>Check out this Fiddle: <a href="http://jsfiddle.net/GWr6Z/2/" rel="nofollow">http://jsfiddle.net/GWr6Z/2/</a></p> <pre><code>function doMe(){ a = "123"; // will be global var b = "321"; // local to doMe alert("a:"+a+" -- b:"+b); b = "something else"; // still local (not global) alert("a:"+a+" -- b:"+b); }; doMe() alert("a:"+a+" -- b:"+b); // `b` will not be defined, check console.log </code></pre>
<p>I just found the answer from a forum referred by one of my colleague. If you declare a variable outside a function, it's always global. No matter if you use var keyword or not. But, if you declare the variable inside a function, it has a big difference. Inside a function, if you declare the variable using var keyword, it will be local, but if you declare the variable without var keyword, it will be global. It can overwrite your previously declared variables. - See more at: <a href="http://forum.webdeveloperszone.com/question/what-is-the-difference-between-using-var-keyword-or-not-using-var-during-variable-declaration/#sthash.xNnLrwc3.dpuf" rel="nofollow">http://forum.webdeveloperszone.com/question/what-is-the-difference-between-using-var-keyword-or-not-using-var-during-variable-declaration/#sthash.xNnLrwc3.dpuf</a></p>
<p>Everything about scope aside, they can be used differently. </p> <pre><code>console.out(var myObj=1); //SyntaxError: Unexpected token var console.out(myObj=1); //1 </code></pre> <p>Something something statement vs expression</p>
<p>No, it is not "required", but it might as well be as it can cause major issues down the line if you don't. Not defining a variable with var put that variable inside the scope of the part of the code it's in. If you don't then it isn't contained in that scope and can overwrite previously defined variables with the same name that are outside the scope of the function you are in.</p>