What's low level Javascript?
<p>I've seen the term "Low level Javascript" come up a few times but I've no idea what it means. Google shows no results surprisingly. Can someone shed some light on it?</p>
<p>Sometimes people make up their own terms when they shouldn't. "Low level Javascript" is one of them. There's nothing "low level" about Javascript. It's interpreted at run-time inside an environment of high-level abstractions, like the DOM.</p>
<p>I would say it is "javascript without using cross-browser frameworks" such as jQuery or YUI.</p> <p>Can be particularly tricky when it comes to supporting multiple browsers.</p>
<p>I suppose it means Javascript without any framework such as prototype/jQuery/YUI, which help with cross-browser compatibility, and generally provide a lot of useful functions, so you don't have to spend your time re-inventing the wheel.</p> <p>Also, maybe it has something to do with the "new" way of doing Javascript -- i.e. object-oriented, using Frameworks, ... In opposition to the crappy code we used to seen a couple of years ago.</p>
<p>As of 2012, someone saying "low level JavaScript" could be refering to <a href="http://mbebenita.github.com/LLJS/">LLJS</a>. It's a subset of JavaScript that compiles to a JavaScript code that is garbage collector friendly but unreadable (making heavy usage of WebGL typed arrays to manage memory).</p>
<p>It's a very specialized tool that allows You to write CPU and Memory (explicit memory management, not GC) optimized JavaScript code. Using binary data, not standard JS objects and types.</p> <p>Why? Because in some cases You need top performance.</p>
<p>low level JS is concise, precise code that executes efficiently, usually taking advantage of the language's intricacies</p> <p>bitwise operation, type conversions / short circuit logical operators, prototype chaining, context binding, ternary assignation, event bubbling / propagation, object referencing, using the GPU, etc.</p>