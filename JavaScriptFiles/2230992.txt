JavaScript: Creating objects based on a prototype without using new + Constructor
<p>is this possible?</p> <p>My thinking: Prototypes are essentially attributes of the Constructor function (whether native Constructor such as Function, String or Object, or your own custom Constructor) and only the 'new' keyword is able to leverage the Constructor and its prototype for object creation</p> <p>Am I missing something?</p>
<p>You are right, but now in the ECMAScript 5th Edition, the <code>Object.create</code> method is able to create object instances using another objects as a prototype:</p> <pre><code>var proto = {foo: 1}; var obj = Object.create(proto); </code></pre> <p>In the above example, <code>obj</code> will be created and it will contain a reference to <code>proto</code> in the <code>[[Prototype]]</code> internal property, and:</p> <pre><code>obj.foo; // 1 obj.hasOwnProperty('foo'); // false </code></pre> <p>This method is from the new specification approved on December 2009, as far I've seen now is available on the <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/create" rel="nofollow noreferrer">Mozilla JavaScript 1.9.3</a> implementation.</p> <p>For now you can mimic the behavior of that method by this, as proposed by <a href="http://javascript.crockford.com/prototypal.html" rel="nofollow noreferrer">Douglas Crockford</a>:</p> <pre><code>if (typeof Object.create !== 'function') { Object.create = function (o) { function F() {} F.prototype = o; return new F(); }; } </code></pre>