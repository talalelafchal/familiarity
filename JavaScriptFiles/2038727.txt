Javascript difference between functions within an object
<p>What is the difference between functions within an object. I have 2 examples which basically do the same thing.</p> <pre><code>function a(param) { function b(input) { return input%10; }; return 'The result is ' + b(param); }; </code></pre> <p>and</p> <pre><code>function a(param) { this.b=function(input) { return input%10; }; return 'The result is ' + this.b(param); }; </code></pre> <p>What is the advantage and the disadvatages in both cases? In the second i know that that function can be called from outside the main function. Is there also a difference when running it? (like time and performance)</p>
<p>You have to be careful with the second example, the <code>this</code> keyword will refer to the Global object if you invoke the function without the <code>new</code> operator, and by looking at your return value, seems that you aren't trying to make a <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Guide/Creating_New_Objects/Using_a_Constructor_Function" rel="nofollow noreferrer">constructor function</a>.</p> <p>I think you need to know how the <code>this</code> keyword (the function context) works:</p> <p>The <code>this</code> keyword is <strong>implicitly</strong> set when:</p> <p>1- When a function is called as a method (the function is invoked as member of an object):</p> <pre><code>obj.method(); // 'this' inside method will refer to obj </code></pre> <p>2- A normal function call:</p> <pre><code>myFunction(); // 'this' inside the function will refer to the Global object // or (function () {})(); </code></pre> <p>3- When the <code>new</code> operator is used:</p> <pre><code>var obj = new MyObj(); // this will refer to a newly created object. </code></pre> <p>And you can also set the <code>this</code> keyword <strong>explicitly</strong>, with the <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/call" rel="nofollow noreferrer"><code>call</code></a> and <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/apply" rel="nofollow noreferrer"><code>apply</code></a> methods:</p> <pre><code>function test () { alert(this); } test.call("Hello world"); // alerts 'Hello world' </code></pre> <p>Now, the difference between the <code>b</code> function of your two examples, is basically that in the first snippet, <code>b</code> is a <em>function declaration</em>, in your second example <code>b</code> is a <em>function expression</em>.</p> <p>Function declaration are subject to <a href="http://stackoverflow.com/questions/1710424/referencing-a-javascript-value-before-it-is-declared-can-someone-explain-this/1710509#1710509">hoisting</a>, and they are evaluated at parse time, on function expressions are defined at run-time.</p> <p>If you want more details of the differences between function declarations and function expressions, I leave you some resources:</p> <ul> <li><a href="http://stackoverflow.com/questions/1634268/explain-javascripts-encapsulated-anonymous-function-syntax/1634321#1634321">Explain JavaScript's Encapsulated Anonymous Function Ssyntax</a></li> <li><a href="http://yura.thinkweb2.com/named-function-expressions/" rel="nofollow noreferrer">Named function expressions demystified</a></li> </ul> <p>And BTW, you don't need the <a href="http://stackoverflow.com/questions/1834642/best-practice-for-semicolon-after-every-function-in-javascript/1834674#1834674">semicolon after function declarations</a>.</p>