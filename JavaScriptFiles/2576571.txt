Assign variable in if condition statement, good practice or not?
<p>I moved one years ago from classic OO languages such like Java to JavaScript. The following code is definitely not recommended (or even not correct) in Java:</p> <pre><code>if(dayNumber = getClickedDayNumber(dayInfo)) { alert("day number found : " + dayNumber); } function getClickedDayNumber(dayInfo) { dayNumber = dayInfo.indexOf("fc-day"); if(dayNumber != -1) //substring found { //normally any calendar month consists of "40" days, so this will definitely pick up its day number. return parseInt(dayInfo.substring(dayNumber+6, dayNumber+8)); } else return false; } </code></pre> <p>Basically I just found out that I can assign a variable to a value in an if condition statement, and immediately check the assigned value as if it is boolean.</p> <p>For a safer bet, I usually separate that into two lines of code, assign first then check the variable, but now that I found this, I am just wondering whether is it good practice or not in the eyes of experienced JavaScript developers?</p>
<p>You can do this in Java too. And no, it's not a good practice. :)</p> <p>(And use the <code>===</code> in Javascript for typed equality. Read Crockford's The Good Parts book on JS.)</p>
<p>I would consider this more of an old-school C style; it is not really good practice in JavaScript so you should avoid it.</p>
<p>I did it many times. To bypass the JavaScript warning, I add two parens:</p> <pre><code>if ((result = get_something())) { } </code></pre> <p>You should avoid it, if you really want to use it, write a comment above it saying what you are doing.</p>
<p>I wouldn't recommend it. The problem is, it looks like a common error where you try to compare values, but use a single <code>=</code> instead of <code>==</code> or <code>===</code>. For example, when you see this:</p> <pre><code>if (value = someFunction()) { ... } </code></pre> <p>you don't know if that's what they meant to do, or if they intended to write this:</p> <pre><code>if (value == someFunction()) { ... } </code></pre> <p>If you really want to do the assignment in place, I would recommend doing an explicit comparison as well:</p> <pre><code>if ((value = someFunction()) === &lt;whatever truthy value you are expecting&gt;) { ... } </code></pre>
<p>It's not good practice. You soon will get confused about it. It looks similiar to a common error: misuse "=" and "==" operators.</p> <p>You should break it into 2 lines of codes. It not only helps to make the code clearer, but also easy to refactor in the future. Imagine that you change the IF condition? You may accidently remove the line and your variable no longer get the value assigned to it.</p>
<p>You can do assignments within if statements in Java as well. A good example would be reading something in and writing it out:</p> <p><a href="http://www.exampledepot.com/egs/java.io/CopyFile.html?l=new" rel="nofollow noreferrer">http://www.exampledepot.com/egs/java.io/CopyFile.html?l=new</a></p> <p>The code:</p> <pre><code>// Copies src file to dst file. // If the dst file does not exist, it is created void copy(File src, File dst) throws IOException { InputStream in = new FileInputStream(src); OutputStream out = new FileOutputStream(dst); // Transfer bytes from in to out byte[] buf = new byte[1024]; int len; while ((len = in.read(buf)) &gt; 0) { out.write(buf, 0, len); } in.close(); out.close(); } </code></pre>
<p>I see no proof that it is not good practice. Yes, it may look like a mistake but that is easily remedied by judicious commenting. Take for instance:</p> <pre><code>if (x = processorIntensiveFunction()) { // declaration inside if intended alert(x); { </code></pre> <p>Why should that function be allowed to run a 2nd time with:</p> <pre><code>alert(processorIntensiveFunction()); </code></pre> <p>Because the first version LOOKS bad? I cannot agree with that logic.</p>
<p>If you were to refer to Martin Fowlers book <a href="http://rads.stackoverflow.com/amzn/click/0201485672" rel="nofollow">Refactoring improving the design of existing code </a>! Then there are several cases where it would be good practice eg. long complex conditionals to use a function or method call to assert your case:</p> <blockquote> <p>"Motivation</p> <p>One of the most common areas of complexity in a program lies in complex conditional logic. As you write code to test conditions and to do various things depending on various conditions, you quickly end up with a pretty long method. Length of a method is in itself a factor that makes it harder to read, but conditions increase the difficulty. The problem usually lies in the fact that the code, both in the condition checks and in the actions, tells you what happens but can easily obscure why it happens.</p> <p>As with any large block of code, you can make your intention clearer by decomposing it and replacing chunks of code with a method call named after the intention of that block of code. > With conditions you can receive further benefit by doing this for the conditional part and each of the alternatives. This way you highlight the condition and make it clearly what you > are branching on. You also highlight the reason for the branching."</p> </blockquote> <p>And yes his answer is also valid for Java implementations. It does not assign the conditional function to a variable though in the examples.</p>
<p>There is one case when you do it, with <code>while</code>-loops.<br> When reading files, you usualy do like this:</p> <pre><code>void readFile(String pathToFile) { // Create a FileInputStream object FileInputStream fileIn = null; try { // Create the FileInputStream fileIn = new FileInputStream(pathToFile); // Create a variable to store the current line's text in String currentLine; // While the file has lines left, read the next line, // store it in the variable and do whatever is in the loop while((currentLine = in.readLine()) != null) { // Print out the current line in the console // (you can do whatever you want with the line. this is just an example) System.out.println(currentLine); } } catch(IOException e) { // Handle exception } finally { try { // Close the FileInputStream fileIn.close(); } catch(IOException e) { // Handle exception } } } </code></pre> <p>Look at the <code>while</code>-loop at line 9. There, a new line is read and stored in a variable, and then the content of the loop is ran. I know this isn't an <code>if</code>-statement, but I guess a while loop can be included in your question as well.</p> <p>The reason to this is that when using a <code>FileInputStream</code>, every time you call <code>FileInputStream.readLine()</code>, it reads the next line in the file, so if you would have called it from the loop with just <code>fileIn.readLine() != null</code> without assigning the variable, instead of calling <code>(currentLine = fileIn.readLine()) != null</code>, and then called it from inside of the loop too, you would only get every second line. </p> <p>Hope you understand, and good luck!</p>
<p>you could do something like so:</p> <pre><code>if (value = /* sic */ some_function()){ use_value(value) } </code></pre>