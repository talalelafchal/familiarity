Javascript OR in an IF statement
<p>I am trying to make an if statement in javascript that will do something if the variable does not equal one of a few different things. I have been trying many different variations of the OR operator, but I cant get it to work.</p> <pre><code> if(var != "One" || "Two" || "Three"){ // Do Something } </code></pre> <p>Any ideas? Thanks!</p> <p><strong>Update:</strong></p> <p>I have tried this before:</p> <pre><code> if(var != "One" || var != "Two" || var != "Three"){ // Do Something } </code></pre> <p>For some reason it does not work. My variable is pulling information from the DOM i dont know if that would effect this.</p> <p><strong>Actual Code</strong></p> <pre><code>// Gets Value of the Field (Drop Down box) var itemtype = document.forms[0].elements['itemtype' + i]; if(itemtype.value != "Silverware" || itemtype.value != "Gold Coins" || itemtype.value != "Silver Coins"){ // Do Something } </code></pre>
<p>Alternate way using an array:</p> <pre><code>var selected = ['Silverware', 'Gold Coins', 'Silver Coins']; if ( selected.indexOf( el.value ) != -1 ) { // do something if it *was* found in the array of strings. } </code></pre> <p>Note: <code>indexOf isnt a native method, grab the snippet here for IE:</code></p> <ul> <li><a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array/IndexOf" rel="nofollow noreferrer">https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array/IndexOf</a></li> </ul>
<p>Assuming you mean "val does not equal One or Two or Three" then De Morgan's Theorem applies:</p> <pre> if ((val != "One") && (val != "Two") && (val != "Three")) { // Do something... } </pre>
<p>For a shorter way to do it, try this format (copied from <a href="http://snook.ca/archives/javascript/testing_for_a_v" rel="nofollow noreferrer">http://snook.ca/archives/javascript/testing_for_a_v</a>):</p> <pre><code>if(name in {'bobby':'', 'sue':'','smith':''}) { ... } </code></pre> <p>or</p> <pre><code>function oc(a) { var o = {}; for(var i=0;i&lt;a.length;i++) { o[a[i]]=''; } return o; } if( name in oc(['bobby', 'sue','smith']) ) { ... } </code></pre>
<p>Your expression is always true, you need:</p> <pre><code>if(!(myVar == "One" || myVar == "Two" || myVar == "Three")) { // myVar is not One, Two or Three } </code></pre> <p>Or:</p> <pre><code>if ((myVar != "One") &amp;&amp; (myVar != "Two") &amp;&amp; (myVar != "Three")) { // myVar is not One, Two or Three } </code></pre> <p>And, for shortness:</p> <pre><code>if (!/One|Two|Three/.test(myVar)) { // myVar is not One, Two or Three } // Or: if (!myVar.match("One|Two|Three")) { // ... } </code></pre> <p>More info:</p> <ul> <li><a href="http://en.wikipedia.org/wiki/De_Morgan%27s_laws" rel="nofollow noreferrer">De Morgan's Laws</a></li> </ul> <p><strong>Edit:</strong> If you go for the last approaches, since the code you posted <em>seems</em> to be part of a loop, I would recommend you to create the regular expression outside the loop, and use the <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/RegExp/Test" rel="nofollow noreferrer"><code>RegExp.prototype.test</code></a> method rather than <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:String:match" rel="nofollow noreferrer"><code>String.prototype.match</code></a>, also you might want to care about <em>word boundaries</em>, i.e. "noOne" will match "One" without them...</p>
<p>In addition to expanding the expression into three clauses, I think you'd better name your variable something other than <code>var</code>. In JavaScript, <code>var</code> is a keyword. Most browsers aren't going to alert you to this error.</p>
<p>The method mentioned by Mike will work fine for just 3 values, but if you want to extend it to <code>n</code> values, your <code>if</code> blocks will rapidly get ugly. Firefox 1.5+ and IE 8 have an <code>Array.indexOf</code> method you can use like so:</p> <pre><code>if(["One","Two","Test"].indexOf(myVar)!=-1) { //do stuff } </code></pre> <p>To support this method on IE&lt;=7, you could define a method called Array.hasElement() like so:</p> <pre><code>Array.prototype.hasElement = function hasElement(someElement) { for(var i=0;i&lt;this.length;i++) { if(this[i]==someElement) return true; } return false; } </code></pre> <p>And then call it like so:</p> <pre><code>if(!["One","Two","Three"].hasElement(myVar)) { //do stuff } </code></pre> <p>Note: only tested in Firefox, where this works perfectly.</p>