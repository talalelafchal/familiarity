How to execute shell command in Javascript
<p>I want to write a javascript function which will execute the system shell commands (<code>ls</code> for example) and return the value.</p> <p>How do I achieve this?</p>
<p>In java, depending on privileges:</p> <pre><code>Runtime run = Runtime.getRuntime(); Process pr = run.exec("ls"); pr.waitFor(); BufferedReader buf = new BufferedReader(new InputStreamReader(pr.getInputStream())); String line = ""; while ((line=buf.readLine())!=null) { System.out.println(line); } </code></pre> <p>In JavaScript you can't. They're really two quite separate things.</p> <p><strong>EDIT</strong></p> <p>My response was written when the question had the tags <code>java</code> <em>and</em> <code>javascript</code>. Since OP doesn't seem to make the distinction, I don't think I can say for sure which is being requested here.</p>
<p>What if the client you are executing this javascript is running Windows? This is to say that what you are trying to achieve is not possible. Javascript is a client scripting language and runs in a sandboxed environment often inside a web browser which prevents it from accessing resources on the computer.</p>
<p>This depends entirely on the JavaScript environment. Please elaborate.</p> <p>For example, in Windows Scripting, you do things like:</p> <pre><code>var shell = WScript.CreateObject("WScript.Shell"); shell.Run("command here"); </code></pre>
<p>This might be of interest: <a href="http://www.itjungle.com/mpo/mpo052302-story01.html" rel="nofollow noreferrer">JavaScript and the SHELL Command</a> </p> <p>In a nutshell:</p> <pre><code>// Instantiate the Shell object and invoke its execute method. var oShell = new ActiveXObject("Shell.Application"); var commandtoRun = "C:\\Winnt\\Notepad.exe"; if (inputparms != "") { var commandParms = document.Form1.filename.value; } // Invoke the execute method. oShell.ShellExecute(commandtoRun, commandParms, "", "open", "1"); </code></pre>
<p>Note: These answers are from a browser based client to a Unix based web server.</p> <p><strong>Run command on client</strong></p> <p>You essentially can't. Security says only run within a browser and its access to commands and filesystem is limited.</p> <p><strong>Run ls on server</strong></p> <p>You can use an AJAX call to retrieve a dynamic page passing in your parameters via a GET.</p> <p>Be aware that this also opens up a security risk as you would have to do something to ensure that mrs rouge hacker does not get your application to say run: /dev/null &amp;&amp; rm -rf / ......</p> <p>So in a nutshel, running from JS is just a bad, bad idea.... YMMV</p>
<p>Another post on this topic with a nice jQuery/Ajax/PHP solution:</p> <p><a href="http://stackoverflow.com/questions/5705361/shell-scripting-and-jquery">shell scripting and jQuery</a></p>
<p>Many of the other answers here seem to address this issue from the perspective of a JavaScript function running in the browser. I'll shoot and answer assuming that when the asker said "Shell Script" he meant a Node.js backend JavaScript. Possibly using <a href="https://github.com/commander-rb/commander" rel="nofollow" title="Commander.js">commander.js</a> to use frame your code :) </p> <p>You could use the <a href="http://nodejs.org/api/child_process.html" rel="nofollow">child_proccess</a> module from node's API. I pasted the example code below. </p> <pre><code>var exec = require('child_process').exec, child; child = exec('cat *.js bad_file | wc -l', function (error, stdout, stderr) { console.log('stdout: ' + stdout); console.log('stderr: ' + stderr); if (error !== null) { console.log('exec error: ' + error); } }); child(); </code></pre> <p>Hope this helps!</p>
<p>In IE, you can do this :</p> <pre><code>var shell = new ActiveXObject("WScript.Shell"); shell.run("cmd /c dir &amp; pause"); </code></pre>
<p>...few year later...</p> <p><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" rel="nofollow">ES6 has been accepted as a standard</a> and ES7 is around the corner so it deserves updated answer. We'll use ES6+async/await with nodejs+babel as an example, prerequisites are:</p> <ul> <li><a href="https://nodejs.org/download/" rel="nofollow">nodejs</a> with <a href="https://www.npmjs.com/" rel="nofollow">npm</a></li> <li><a href="http://babeljs.io/docs/setup/#babel_cli" rel="nofollow">babel</a></li> </ul> <p>Your example <code>foo.js</code> file may look like:</p> <pre><code>import { exec } from 'child_process'; /** * Execute simple shell command (async wrapper). * @param {String} cmd * @return {Object} { stdout: String, stderr: String } */ async function sh(cmd) { return new Promise(function (resolve, reject) { exec(cmd, (err, stdout, stderr) =&gt; { if (err) { reject(err); } else { resolve({ stdout, stderr }); } }); }); } async function main() { let { stdout } = await sh('ls'); for (let line of stdout.split('\n')) { console.log(`ls: ${line}`); } } main(); </code></pre> <p>Make sure you have babel:</p> <pre><code>npm i babel-cli -g </code></pre> <p>Install latest preset:</p> <pre><code>npm i babel-preset-latest </code></pre> <p>Run it via:</p> <pre><code>babel-node --presets latest foo.js </code></pre>
<p>Here is simple command that execute <code>ls</code> shell command of Linux</p> <pre><code>var process = require('child_process'); process.exec('ifconfig',function (err,stdout,stderr) { if (err) { console.log("\n"+stderr); } else { console.log(stdout); } }); </code></pre>
<p>With <a href="https://en.wikipedia.org/wiki/Nashorn_%28JavaScript_engine%29" rel="nofollow noreferrer">nashorn</a> you can write a script like this:</p> <pre><code>$EXEC('find -type f'); var files = $OUT.split('\n'); files.forEach(... ... </code></pre> <p>and run it:</p> <pre><code>jjs -scripting each_file.js </code></pre>
<p>With NodeJS is simple like that! And if you want to run this script at each boot of your server, you can have a look on the <a href="https://github.com/zapty/forever-service#prerequisite" rel="nofollow noreferrer">forever-service</a> application!</p> <pre><code>var exec = require('child_process').exec; exec('php main.php', function (error, stdOut, stdErr) { // do what you want! }); </code></pre>