Including a .js file within a .js file
<p>I'd like to know if it is possible to include a <code>.js</code> file within another <code>.js</code> file?</p> <p>The reason for me wanting to do this is to keep client includes to a minimum. I have several <code>.js</code> files already written with functions that are needed by the client. The client would have an html file which he/she manages with a <code>.js</code> file include (my <code>.js</code> file). </p> <p>I could re-write a new <code>.js</code> file with all the functions in it or, to avoid doing double work, figure out a way to write a <code>.js</code> file that includes other <code>.js</code> files.</p>
<p>A popular method to tackle the problem of reducing JavaScript references from HTML files is by using a concatenation tool like <a href="http://getsprockets.org/" rel="nofollow noreferrer">Sprockets</a>, which preprocesses and concatenates JavaScript source files together. </p> <p>Apart from reducing the number of references from the HTML files, this will also reduce the number of hits to the server.</p> <p>You may then want to run the resulting concatenation through a minification tool like <a href="http://www.crockford.com/javascript/jsmin.html" rel="nofollow noreferrer">jsmin</a> to have it minified.</p>
<p>The best solution for your browser load time would be to use a server side script to join them all together into one big .js file. Make sure to gzip/minify the final version. Single request - nice and compact.</p> <p>Alternatively, you can use DOM to create a <code>&lt;script&gt;</code> tag and set the src property on it then append it to the <code>&lt;head&gt;</code>. If you need to wait for that functionality to load, you can make the rest of your javascript file be called from the <code>load</code> event on that script tag.</p> <p>This function is based on the functionality of jQuery <code>$.getScript()</code> </p> <pre><code>function loadScript(src, f) { var head = document.getElementsByTagName("head")[0]; var script = document.createElement("script"); script.src = src; var done = false; script.onload = script.onreadystatechange = function() { // attach to both events for cross browser finish detection: if ( !done &amp;&amp; (!this.readyState || this.readyState == "loaded" || this.readyState == "complete") ) { done = true; if (typeof f == 'function') f(); // cleans up a little memory: script.onload = script.onreadystatechange = null; head.removeChild(script); } }; head.appendChild(script); } // example: loadScript('/some-other-script.js', function() { alert('finished loading'); finishSetup(); }); </code></pre>
<p>I basically do like this, create new element and attach that to <code>&lt;head&gt;</code></p> <pre><code>var x = document.createElement('script'); x.src = 'http://example.com/test.js'; document.getElementsByTagName("head")[0].appendChild(x); </code></pre> <p>You may also use <code>onload</code> event to each script you attach, but please test it out, I am not so sure it works cross-browser or not.</p> <pre><code>x.onload=callback_function; </code></pre>
<p>There is no straight forward way of doing this.</p> <p>What you can do is load the script on demand. (again uses something similar to what Ignacio mentioned,but much cleaner).</p> <p>Check this link out for multiple ways of doing this: <a href="http://ajaxpatterns.org/On-Demand_Javascript" rel="nofollow noreferrer">http://ajaxpatterns.org/On-Demand_Javascript</a></p> <p>My favorite is(not applicable always):</p> <pre><code>&lt;script src="dojo.js" type="text/javascript"&gt; dojo.require("dojo.aDojoPackage"); </code></pre> <p>Google's closure also provides similar functionality.</p>
<p>I use @gnarf's method, though I fall back on <code>document.writeln</code>ing a <code>&lt;script&gt;</code> tag for IE&lt;7 as I couldn't get DOM creation to work reliably in IE6 (and TBH didn't care enough to put much effort into it). The core of my code is:</p> <pre><code> if (horus.script.broken) { document.writeln('&lt;script type="text/javascript" src="'+script+'"&gt;&lt;/script&gt;'); horus.script.loaded(script); } else { var s=document.createElement('script'); s.type='text/javascript'; s.src=script; s.async=true; if (horus.brokenDOM) s.onreadystatechange= function () { if (this.readyState=='loaded' || this.readyState=='complete') horus.script.loaded(script); }; else s.onload=function () { horus.script.loaded(script) }; document.head.appendChild(s); } </code></pre> <p>where <code>horus.script.loaded()</code> notes that the javascript file is loaded, and calls any pending uncalled routines (saved by autoloader code).</p>