Destructuring assignment in generator expressions and array comprehensions
<p>Why does <code>for ([] in object);</code> work fine but <code>[void 0 for ([] in object)]</code> or <code>(void 0 for ([] in object))</code> throw a syntax error for invalid left-hand assignment?</p> <p>For example, I would expect the following code to work, but it doesn't (the assertion isn't even done due to the syntax error):</p> <pre><code>let ( i = 0, iterable = {__iterator__:function() { var i = 5; while (i--) yield i; } } ) { for ([] in iterable) i++; console.assertEquals([void 0 for ([] in iterable)].length, i); } </code></pre>
<p>I did a little digging in <code>jsparse.c</code> of SpiderMonkey (which I assume is the JS parser you're using for 1.8 features?)</p> <p>The <code>[code for (... in ...)]</code> format or <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Iterators_and_Generators#Generator_expressions" rel="nofollow noreferrer">generator expression</a> uses a <a href="http://mxr.mozilla.org/mozilla/source/js/src/jsparse.c#4132" rel="nofollow noreferrer">different parse function</a> than the <a href="http://mxr.mozilla.org/mozilla/source/js/src/jsparse.c#2411" rel="nofollow noreferrer">standard <code>for ([] in obj)</code></a> uses.</p> <p>Your LHS error is being <a href="http://mxr.mozilla.org/mozilla/source/js/src/jsparse.c#4200" rel="nofollow noreferrer">created here</a>: (jsparse.c line 4200)</p> <pre><code>4194 case TOK_LB: 4195 case TOK_LC: 4196 pn3 = DestructuringExpr(cx, &amp;data, tc, tt); 4197 if (!pn3) 4198 return NULL; 4199 4200 if (pn3-&gt;pn_type != TOK_RB || pn3-&gt;pn_count != 2) { 4201 js_ReportCompileErrorNumber(cx, ts, NULL, JSREPORT_ERROR, 4202 JSMSG_BAD_FOR_LEFTSIDE); 4203 return NULL; 4204 } </code></pre> <p>When it sees the <code>[</code> it finds the Destructuring Expression, and ensures the count of the parser node is at 2.</p> <p>Interestingly enough <code>[void 0 for ([a,b] in iterator)]</code> should work, although for reasons I don't care to go digging for, the <code>b</code> from <code>[a,b]</code> is always undefined:</p> <pre><code>js&gt; [[l1,typeof l2] for ([l1,l2] in {a:1, b:2})] a,undefined,b,undefined </code></pre> <hr> <p>For reference - The standard <code>for([] in {})</code> uses the following logic to determine the LHS validity:</p> <pre><code>2775 #if JS_HAS_DESTRUCTURING 2776 ((JSVERSION_NUMBER(cx) == JSVERSION_1_7 &amp;&amp; 2777 pn-&gt;pn_op == JSOP_FORIN) 2778 ? (pn1-&gt;pn_type != TOK_RB || pn1-&gt;pn_count != 2) 2779 : (pn1-&gt;pn_type != TOK_RB &amp;&amp; pn1-&gt;pn_type != TOK_RC)) &amp;&amp; 2780 #endif </code></pre> <p>Which seems to mean that versions other than 1.7 don't require 2 left hand values for this syntax. The generator expression might be using older parsing logic. This might be worth submitting as a report to the SpiderMonkey maintainers.</p>