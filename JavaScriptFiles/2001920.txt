Calling a class prototype method by a setInterval event
<p>I have a simple javascript class. </p> <p>One method of this class sets up a timer using setInterval function. The method that I want to call every time the event fires is defined inside the same class. </p> <p>The question is, how can I pass this method as a parameter to the setInterval function?</p> <p>One attempt was setInterval('this.showLoading(), 100). But doesn't work. This method access class properties, so I need the 'this' reference.</p> <p>This is the sample code:</p> <pre><code> function LoadingPicture(Id) { this.imgArray = null; this.currentImg = 0; this.elementId = Id; this.loadingTimer = null; } LoadingPicture.prototype.showLoading = function() { if(this.currentImg == imgArray.length) currentImg = 0; document.getElementById(this.elementId).src = imgArray[this.currentImg++].src; } LoadingPicture.prototype.StartLoading = function() { document.getElementById(this.elementId).style.visibility = "visible"; loadingTimer = setInterval("showLoading()", 100); } </code></pre>
<p>setInterval can take a function directly, not just a string. <a href="https://developer.mozilla.org/en/DOM/window.setInterval" rel="nofollow noreferrer">https://developer.mozilla.org/en/DOM/window.setInterval</a></p> <p>i.e.</p> <pre><code>loadingTimer = setInterval(showLoading, 100); </code></pre> <p>But, for optimal browser compatibility, you should use a closure with an explicit reference:</p> <pre><code> var t = this; loadingTimer = setInterval(function(){t.showLoading();}, 100); </code></pre>
<pre><code>loadingTimer = setInterval("this.showLoading()", 100); </code></pre> <p>Firstly, don't use string arguments to setInterval/Timeout. It's dodgy in the same way as using <code>eval</code>, and may similarly fail with CSP security restrictions in the future. So instead:</p> <pre><code>loadingTimer = setInterval(this.showLoading, 100); </code></pre> <p>However, as you say, this will lose the owner reference so the called function won't see the right <code>this</code>. In the future (the newly-defined ECMAScript Fifth Edition), you will be able to bind the function to its owner with <code>function.bind</code>:</p> <pre><code>loadingTimer = setInterval(this.showLoading.bind(this), 100); </code></pre> <p>and if you implement <code>function.bind</code> yourself for browsers that don't yet have it (see the bottom of <a href="http://stackoverflow.com/questions/1558065/#1558289">this answer</a>), you can use this syntax today.</p> <p>Otherwise, you will need to use an explicit closure, as in the example Computer Linguist just posted.</p>