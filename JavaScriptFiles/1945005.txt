Is JavaScript validation bad?
<p>It has been long time since we have been validating our forms using JavaScript. I am sure this must be the case with most other developers.</p> <p>Question:</p> <p>What if the user (or probably a bad guy) disables JavaScript?</p> <p>You are lost!</p> <ul> <li>Is JavaScript validation worth of it? </li> <li>Should we ever use it now? </li> <li>Are there any solutions to this?</li> </ul> <p>Correct me if I am wrong.</p>
<blockquote> <p>Is JavaScript validation worth of it?</p> </blockquote> <p>Yes, as it provides a better user experience and preserves bandwidth.</p> <blockquote> <p>Should we ever use it now?</p> </blockquote> <p>Yes, for the aforementioned reasons.</p> <blockquote> <p>Are there any solutions to this?</p> </blockquote> <p>Yes, use server-side validation as well.</p>
<p>Using JavaScript is not wrong. We've been using it since a long time. It is used for applying client-side validations.</p> <p>Still, we should implement server-side validation so that a <em>bad guy</em> would not be able to break the application.</p>
<blockquote> <p>What if the user (or probably a bad guy) disables javascript?</p> </blockquote> <p>As said before: Simply do not rely on the client. Never do so. Check everything on the server again.</p> <blockquote> <p>Should we ever use it now?</p> </blockquote> <p>Yes - so the user immediately sees what's wrong. Otherwise he had to post back the data first which may take a while. By the way you reduce traffic to your server.</p> <p>It's simply more inuitive.</p> <p>//EDIT: BTW: The ASP.NET ValidationRules contain both client-side and server validation as far as I know.</p>
<p>Client-side (Javascript) validation is about usability, nothing else. If the cost of implementing is not worth the perceived increase in usability, then don't spend the time on it. These days it's pretty easy to do though!</p> <p>I don't think you can do without server-side validation, however, since this is the only thing that provides you with any security.</p>
<p>If you're looking to save time, go with server-side only. If you want better performance and user experience, add client-side validation afterward. Never rely on client-side validation, for the reasons you state. All critical validation should occur on the server ... even if duplicated on the client.</p>
<p>Javascript validation is good because it provides a better user experience.</p> <p>You should however <strong><em>never</em></strong> rely on it and should validate on the server regardless.</p>
<p>In a multi-tiered / service orientated environment validation should exist on multiple levels to allow for better reuse while still maintaining a secure application. Validation on the client side, whether in a desktop app, or web site/application should be there for a better user experience to prevent postbacks to the server everytime for validation, hence costing more bandwidth and user time. If client-side validation cannot be moved entirely to the front end then consider using ajax for a partial postback to a server side validation routine, while retaining a better customer experience but allowing a programmer to maintain the validation rules centrally.</p> <p>Second to the client side, <em>but more importantly</em>, server side code should validate the data before persisting it via a data layer or passing it to another server side method/service, to employ business rules around the data and help prevent errors in data integrity. Lastly, the persistence layer itself (the immediate interface to the database or other storage mechanism) should validate the data being stored, again to prevent errors in data integrity and possibly further business rules. The last thing you want is a data store with useless data.</p> <p>Employing this method will keep you data secure and integrity in line. On reuse of either you persistence layer, your data layer or your front-end presentation thereafter, in your own site (or via a web service, desktop application or mobile app), if designed properly, these validation routines are already in place and can be re-employed. This should prove to be of great benefit to you alone, and your colleagues and your management, if you happen work in a team.</p>
<p>JavaScript is useful for client side validation. But you cannot rely only on them. You must use server-side validation against the posted data. JavaScript just prevents unnecessary posts to the server.</p>
<p>JavaScript improves user <a href="http://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction">interaction</a> for your product or service. Users interaction (user input and machine response or vice versa) is a vital characteristic of our applications. As we all experienced, products are getting more interactive ever than before. And this <a href="http://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction">interaction</a> part can (only) be crafted in JavaScript (<a href="http://en.wikipedia.org/wiki/ActionScript">ActionScript</a> for <a href="http://en.wikipedia.org/wiki/Adobe_Flash_Player">Flash Player</a>). We would all agree with this - there is always a calculated amount of work that can be transited to the client side (machine) to avoid calls without bothering them to send to the server(s). There are many many applications which are heavily dependent on client-script scripting. And if they found you do not allow required scripting they asked for it leaving a message in <code>noscript</code> tag. But I think everyone wants to have it enabled as we all fire up a tab with Gmail, Facebook, etc.</p> <p>However, this still should not be ignored as we are keen to grap every single opportunity (audience/customer) and work with is at least better than falling apart. It still works!</p> <p>As a Microsoft Development Platform user, there is a convenient solution on <code>.NET</code> platform. That don't require dual effort on such issues. Make use of your client-side validation while <a href="http://www.technipages.com/internet-explorer-7-enabledisable-javascript.html">scripting is disabled</a> by using <code>Page.Validate()</code> and <code>Page.IsValid</code>.</p> <pre><code>protected void Page_Load(object sender, EventArgs e) { if (Page.IsPostBack) { Page.Validate(); // If you missed, then you got the second chance ... } } protected void btnSubmit_Click(object sender, EventArgs e) { if (Page.IsValid) { // Confirm you do a proper validation before moving to perform any process Response.Write("Done!"); } } </code></pre> <p>I hope this will help.</p>
<p>You can make server and client-side validation pretty painless by using a framework that supports both. In the past, for ASP.NET I used the Peter Blum validators:</p> <p><a href="http://peterblum.com/" rel="nofollow">http://peterblum.com/</a></p> <p>With this, you drop the validation controls onto your page, hook them up to the inputs (textboxes, drop down lists etc), and specify the validation properties (minimum length, required, error message etc). When the page runs, the framework spits out equivalent code for both the client (JavaScript) and server (ASP.NET) to perform your validation.</p> <p>Without such a framework, as other posters have pointed out, validation can be laborious.</p> <p>I'd be interested to know of anything similar for PHP or other technologies.</p>
<p>If you learn only one thing from this topic, let it be this:</p> <p>Never — under any circumstances — trust data from the browser and always validate request data on the server-side.</p> <blockquote> <p>Should we ever use it now?</p> </blockquote> <p>Yes, definitely. You do not need to validate an empty field on the server side. It is not something like validating an email's availability (uniqueness of email). If you are going to reject that empty field anyway, there is no point of sending it to server and making server do extra work for it.</p>
<p>You have to validate it on sever-side, javascript is good to validate form, but people can disable javascript, or use another javascript to hack it, so validation on server-side is a must.</p>
<p>You should have multiple layers of validation. </p> <p><strong>Validation on the client Side</strong></p> <p>This is definitely useful because validation can be done without having to go to the server. Requests get to the server once they are validated - saves some traffic. </p> <p><strong>Validation on the server side</strong></p> <p>If javascript is disabled then the server should also incorporate a level of protection - validation in order to disallow erroneous requests. </p>
<pre><code>Is JavaScript validation worth of it? </code></pre> <p>well,yes it is .Buy using JavaScript validation you can easily take any kind information about client site more over JavaScript validation provides a better user experience</p> <pre><code> Should we ever use it now? </code></pre> <p>Yes you can because of user can see there error or what's they do wrong on real-time </p> <pre><code>Are there any solutions to this? </code></pre> <p>yes you can also use server-side validation.But sometime its take more time .it's also insecure</p>