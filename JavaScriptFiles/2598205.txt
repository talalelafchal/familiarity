Load page, wait, log any JavaScript errors to file?
<p>I would like to check a large number of HTML files with inline JavaScript for JavaScript errors. What I'm envisioning doing is this: Script a browser to load a given page, wait a few seconds, and finally check the browser logs. I'm unsure though both on how to script a browser to load a given page and on how to access the JavaScript error log. I think the type of errors I'm worried about should show up in any modern browser so I would just go with whatever makes it most convenient. I'd be working either under Mac OS X or Linux.</p> <p>Anybody already tackle a similar problem? I've thought a bit about hacking something together based on a unit testing framework -- generate a trivial (assertTrue(true)) test for each page and rely on the errors making it fail -- but I'm hoping for something more elegant. Thank you.</p>
<p>There are several routes you could take, though I'm not convinced that automation is really necessary in this case.</p> <p>If your Javascript wasn't inline, you could try something adventurous like <a href="http://ejohn.org/blog/bringing-the-browser-to-the-server/" rel="nofollow noreferrer">Rhino with DOM support</a>, and completely eschew the browser. I would heartily recommend separating your JS and your markup anyway.</p> <p>If you're dead-set on creating an automated solution for this, I would perhaps take a look at the <a href="http://seleniumhq.org/" rel="nofollow noreferrer">Selenium</a> plugin/testing framework for Firefox. It enables automated UI testing, and if you're thorough enough with it you should be able to uncover any error cases you would have run into in using the site. It should also be able to report JS errors to you. If not, using it in conjunction with a service like <a href="http://www.exceptionhub.com/" rel="nofollow noreferrer">ExceptionHub</a> or <a href="http://hoptoadapp.com/pages/home" rel="nofollow noreferrer">Hoptoad</a> will get you what you need.</p> <p>You shouldn't have to resort to trying to unit-test JS in the DOM. That's a recipe for complication.</p>