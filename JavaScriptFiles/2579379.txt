What is the Difference between onclick and href=&quot;javascript:function name?
<p>Is there any difference between</p> <pre><code>1 : &lt;a href="javascript:MyFunction()"&gt;Link1&lt;/a&gt; </code></pre> <p>and</p> <pre><code>2 : &lt;a href="#" onclick="MyFunction()"&gt;Link2&lt;/a&gt; </code></pre> <p>? Would one affect the page performance by any means ?</p>
<p>No performance difference.</p> <p>The first is crap because it will fail completely for users without JS enabled.</p> <p>The second is still crap, but would be better if the <code>href</code> pointed to a URL for users without JS enabled.</p>
<p>There is a difference in functionality, the first doesn't attempt to process a link. The second does. </p> <p>However, I agree with Coronatus - both methods are not ideal. I would suggest researching unobtrusive JavaScript (perhaps with <a href="http://jquery.com/" rel="nofollow noreferrer">jQuery</a>) as you could dynamically add a click event to the element.</p>
<p>If your element is not actually supposed to link the user someplace, <em>don't make it an anchor element</em>. If you're using <code>&lt;a&gt;</code> tags just to get the underline/cursor change - don't. Use CSS on a <code>&lt;span&gt;</code> (or other element) instead.</p> <pre><code>span.link { text-decoration: underline; color: blue; cursor: pointer; } </code></pre> <p>Keep your HTML semantic and use anchor elements only when you want to link the user somewhere.</p>
<p>The onclick version allows you pass 'this' as an argument, so you can refer back to the tag/object the click came from. Not possible with the protocol method:</p> <pre><code>&lt;a href="#" onclick="alert(this.innerHTML)"&gt;yo yo yo&lt;/a&gt; </code></pre> <p>will spit out an alert popup with "yo yo yo", whereas</p> <pre><code>&lt;a href="javascript:alert(this.innerHTML)"&gt;yo yo yo&lt;/a&gt; </code></pre> <p>will spit out 'undefined'.</p>
<p>An href="javascript: doSomething" means you do not have a url to fallback to if the user doesn't have js enabled.</p> <p>Therefore, setting href="something.html" and onclick="return doSomething()" is usually considered better because if js is disabled, you can navigate to a new page, but if js is enabled, you can return false to prevent navigation to the link and display something within the same page without a page refresh.</p> <p>Even better, don't add the onclick inline, just add js handlers when the page loads. That's the unobtrusive way</p>
<p>If your website requires Javascript in order to function correctly then Javascript in the href is best because it shows the link in the status bar and keeps the code compact. In the href also serves keyboard navigation without the mouse. If your website is required to function without Javascript then you have to use onclick so the href can have a link in it. Adding the action in a separate Javascript file fails to keep code &amp; data bound tightly. </p>