Can I register external JS files on a page via Javascript?
<p>In my CMS I add modules to the page via Javascript, these modules may include external JS files which get registered on page load into a collaborated external file. </p> <p>When the modules are added via JS these scripts are therefore not registered until the page is reloaded. </p> <p>Is there a way for me to register these scripts dynamically via the javascript calls in the mean time?</p>
<p>You can add a script tag to your page using the following code:</p> <pre><code>var head = document.documentElement.childNodes[0]; var sTag = document.createElement("script"); sTag.src = "/path/to/script.js"; sTag.type = "text/javascript"; head.appendChild(sTag); </code></pre> <p>You could also use <code>document.getElementsByTagName("head")[0]</code> for the <code>head</code> var. Alternatively, you could use <code>document.write</code>, like so:</p> <pre><code>document.write( '&lt;script src="path/to/script.js" type="text/javascript"&gt;&lt;\/script&gt;' ); </code></pre>
<p>I made the following function, inspired by the jQuery's <code>$.getScript</code> method, it takes an <code>url</code> and a <code>callback</code> argument.</p> <p>The callback is very useful, it is executed when the script has been loaded successfully, and you are ready to use it.</p> <p>This function also takes care of removing the <code>script</code> elements from the DOM to avoid well known <a href="http://ajaxian.com/archives/dynamic-script-generation-and-memory-leaks" rel="nofollow noreferrer">memory leaks</a>:</p> <pre><code>loadScript("myLib.js", function () { // myLib is loaded //.. }); function loadScript(url, callback) { var head = document.getElementsByTagName("head")[0], script = document.createElement("script"), done = false; script.src = url; // Attach event handlers for all browsers script.onload = script.onreadystatechange = function(){ if ( !done &amp;&amp; (!this.readyState || this.readyState == "loaded" || this.readyState == "complete") ) { done = true; callback(); // Execute callback function // Prevent memory leaks in IE script.onload = script.onreadystatechange = null; head.removeChild( script ); } }; head.appendChild(script); } </code></pre>