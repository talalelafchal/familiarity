Is it good practice to delete no longer used objects and variables in JavaScript?
<p>In my code I use an object and variables inside a function. When in that function I no longer use the object and variables I delete it:</p> <pre><code>delete myObject; delete myVar; </code></pre> <p>Is it good practice?<br> Does it give speed?</p> <p>My JavaScript is server-side on smart.joyent.com.</p>
<p>It is not generally considered necessary but in extreme, high memory situations is may be something you should look into. I do feel that its use prior to profiling and performance testing to be premature optimization. </p>
<p>I'm not sure what engine your server is using, but client-side engines typically employ garbage collection, and I wouldn't be surprised if your server environment does as well. Unless you have an extremely particular situation, most attempts of manual cleanup are probably going to be on par with (or working against) the garbage collector.</p> <p>In summary, I would bet you see absolutely no difference in performance. This is a good example of micro optimization.</p>
<blockquote> <p>Is it good practice?</p> </blockquote> <p>No. In fact it is disallowed in the new ECMAScript Fifth Edition ‘strict mode’:</p> <blockquote> <p>When a delete operator occurs within strict mode code, a SyntaxError is thrown if its UnaryExpression is a direct reference to a variable, function argument, or function name (11.4.1).</p> </blockquote> <p>If you really must, you can instead <code>=null</code> the variable to free up any object it referenced for garbage collection, but it's almost never going to result in any appreciable improvement in performance.</p> <p>Deleting properties of long-lived objects to free now-unused referenced objects can be a good idea, especially in the case of breaking DOM cycles to prevent memory leakage in IE. Deleting local variables inside a short-lived function isn't sensible.</p>
<p>And also instead of using delete method, It seems that Firefox 3 allows script to invoke garbage collector with:</p> <pre><code>Components.utils.forceGC </code></pre> <p>See <a href="https://developer.mozilla.org/En/Components.utils.forceGC" rel="nofollow noreferrer">https://developer.mozilla.org/En/Components.utils.forceGC</a></p> <p>Other browsers may provide similar functions too. (except IE, i don't think it provides.)</p>