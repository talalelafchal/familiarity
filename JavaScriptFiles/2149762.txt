Possible cases for Javascript error: &quot;Expected identifier, string or number&quot;
<p>Some users are reporting occasional JS errors on my site. The error message says "Expected identifier, string or number" and the line number is 423725915, which is just an arbitrary number and changes for each report when this occurs. This mostly happens with IE7/ Mozilla 4.0 browsers.</p> <p>I scanned my code a bunch of times and ran jslint but it didn't pick anything up - anyone know of the general type of JS problems that lead to this error message?</p>
<p>This sounds to me like a script that was pulled in with src, and loaded just halfway, causing a syntax error sine the remainder is not loaded.</p>
<p>Actually I got something like that on IE recently and it was related to JavaScript syntax "errors". I say error in quotes because it was fine everywhere but on IE. This was under IE6. The problem was related to JSON object creation and an extra comma, such as</p> <pre><code>{ one:1, two:2, three:3, } </code></pre> <p>IE6 really doesn't like that comma after 3. You might look for something like that, touchy little syntax formality issues.</p> <p>Yeah, I thought the multi-million line number in my 25 line JavaScript was interesting too.</p> <p>Good luck.</p>
<p>The cause of this type of error can often be a misplaced comma in an object or array definition:</p> <pre><code>var obj = { id: 23, name: "test", &lt;-- } </code></pre> <p>If it appears at a random line, maybe it's part of an object defintion you are creating dynamically.</p>
<p><strong>This is a definitive un-answer: eliminating a tempting-but-wrong answer to help others navigate toward correct answers.</strong></p> <p>It might seem like debugging would highlight the problem. However, the only browser the problem occurs in is IE, and in IE you can only debug code that was part of the original document. For dynamically added code, the debugger just shows the body element as the current instruction, and IE claims the error happened on a huge line number.</p> <p>Here's a sample web page that will demonstrate this problem in IE:</p> <pre><code>&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript debug test&lt;/title&gt; &lt;/head&gt; &lt;body onload="attachScript();"&gt; &lt;script type="text/javascript"&gt; function attachScript() { var s = document.createElement("script"); s.setAttribute("type", "text/javascript"); document.body.appendChild(s); s.text = "var a = document.getElementById('nonexistent'); alert(a.tagName);" } &lt;/script&gt; &lt;/body&gt; </code></pre> <p>This yielded for me the following error:</p> <pre><code>Line: 54654408 Error: Object required </code></pre>
<p>IE7 is much less forgiving than newer browsers, especially Chrome. I like to use <a href="http://www.jslint.com/" rel="nofollow">JSLint</a> to find these bugs. It will find these improperly placed commas, among other things. You will probably want to activate the option to ignore improper whitespace.</p> <p>In addition to improperly placed commas, at <a href="http://blog.favrik.com/2007/11/29/ie7-error-expected-identifier-string-or-number/" rel="nofollow">this blog</a> in the comments someone reported:</p> <blockquote> <p>I've been hunting down an error that only said "Expected identifier" only in IE (7). My research led me to this page. After some frustration, it turned out that the problem that I used a reserved word as a function name ("switch"). THe error wasn't clear and it pointed to the wrong line number.</p> </blockquote>
<p>As noted previously, having an extra comma threw an error.</p> <p>Also in IE 7.0, not having a semicolon at the end of a line caused an error. It works fine in Safari and Chrome (with no errors in console).</p>
<p>Using the word <strong>class</strong> as a key in a Javascript dictionary can also trigger the dreaded "Expected identifier, string or number" error because <strong>class</strong> is a reserved keyword in Internet Explorer.</p> <p>BAD</p> <pre><code>{ class : 'overlay'} // ERROR: Expected identifier, string or number </code></pre> <p>GOOD</p> <pre><code>{'class': 'overlay'} </code></pre> <p>When using a reserved keyword as a key in a Javascript dictionary, enclose the key in quotes.</p> <p>Hope this hint saves you a day of debugging hell.</p>
<p>Remove the unwanted , sign in the function. you will get the solution.</p> <p>Refer this</p> <p><a href="http://blog.favrik.com/2007/11/29/ie7-error-expected-identifier-string-or-number/" rel="nofollow">http://blog.favrik.com/2007/11/29/ie7-error-expected-identifier-string-or-number/</a></p>
<p><a href="http://closure-compiler.appspot.com/home" rel="nofollow">http://closure-compiler.appspot.com/home</a> will pick this error up with an accurate reference to the actual line number in the offending script.</p>
<p>IE7 has problems with arrays of objects</p> <pre><code>columns: [ { field: "id", header: "ID" }, { field: "name", header: "Name" , /* this comma was the problem*/ }, ... </code></pre>
<p>Another variation of this bug: I had a function named 'continue' and since it's a reserved word it threw this error. I had to rename my function 'continueClick'</p>
<p>This error occurs when we add or missed to remove a comma at the end of array or in function code. It is necessary to observe the entire code of a web page for such error.</p> <p>I got it in a Facebook app code while I was coding for a Facebook API.</p> <pre><code>&lt;div id='fb-root'&gt; &lt;script type='text/javascript' src='http://connect.facebook.net/en_US/all.js'&lt;/script&gt; &lt;script type='text/javascript'&gt; window.fbAsyncInit = function() { FB.init({appId:'".$appid."', status: true, cookie: true, xfbml: true}); FB.Canvas.setSize({ width: 800 , height: 860 , }); // ^ extra comma here }; &lt;/script&gt; </code></pre>
<p>Just saw the bug in one of my applications, as a catch-all, remember to enclose the name of all javascript properties that are the same as keyword.</p> <p>Found this bug after attending to a bug where an object such as:</p> <pre><code>var x = { class: 'myClass', function: 'myFunction'}; </code></pre> <p>generated the error (class and function are keywords) this was fixed by adding quotes</p> <pre><code>var x = { 'class': 'myClass', 'function': 'myFunction'}; </code></pre> <p>I hope to save you some time</p>
<p>Use '<a href="https://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCkQFjAA&amp;url=http://www.microsoft.com/en-in/download/details.aspx?id=18359&amp;ei=PwA_UpyKCpPzqwH6i4HYBA&amp;usg=AFQjCNHm1kcrl66oyF42litsO2yt9p9XdQ&amp;bvm=bv.52434380,d.aWM" rel="nofollow">IEDeveloper</a>' Tool and you can debug the error exactly and the tool even shows the line where the error is , try and enjoy</p>
<p>Maybe you've got an object having a method 'constructor' and try to invoke that one.</p>
<p>You may hit this problem while using Knockout JS. If you try setting class attribute like the example below it will fail:</p> <pre><code>&lt;span data-bind="attr: { class: something() }"&gt;&lt;/span&gt; </code></pre> <p>Escape the class string like this:</p> <pre><code>&lt;span data-bind="attr: { 'class': something() }"&gt;&lt;/span&gt; </code></pre> <p>My 2 cents.</p>
<p>I too had come across this issue. I found below two solutions. 1). Same as mentioned by others above, remove extra comma from JSON object. 2). Also, My JSP/HTML was having . Because of this it was triggering browser's old mode which was giving JS error for extra comma. When used it triggers browser's HTML5 mode(If supported) and it works fine even with Extra Comma just like any other browsers FF, Chrome etc.</p>
<p>Here is a easy technique to debug the problem: echo out the script/code to the console. Copy the code from the console into your IDE. Most IDE's perform error checking on the code and highlight errors. You should be able to see the error almost immediately in your JavaScript/HTML editor.</p>
<p>Had the same issue with a different configuration. This was in an angular factory definition, but I assume it could happen elsewhere as well:</p> <pre><code>angular.module("myModule").factory("myFactory", function(){ return { myMethod : function() // &lt;--- error showing up here { // method definition } } }); </code></pre> <p>Fix is very exotic:</p> <pre><code>angular.module("myModule").factory("myFactory", function(){ return { // &lt;--- notice the absence of the return line myMethod : function() { // method definition } } }); </code></pre>