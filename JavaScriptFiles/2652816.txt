What is the difference between document.location.href and document.location?
<p>What is the difference between <code>document.location.href</code> and <code>document.location</code>?</p> <p>Is it the same across browsers?</p>
<p>document.location is deprecated in favor of window.location, which can be accessed by just location, since it's a global object.</p> <p>The location object has multiple properties and methods. If you try to use it as a string then it acts like location.href. </p>
<p><code>document.location</code> is a synonym for <code>window.location</code> that has been deprecated for almost as long as JavaScript has existed. Don't use it.</p> <p><code>location</code> is a structured object, with properties corresponding to the parts of the URL. <code>location.href</code> is the whole URL in a single string. Assigning a string to either is defined to cause the same kind of navigation, so take your pick.</p> <p>(I consider writing to <code>location.href= something</code> to be marginally better as it's slightly more explicit about what it's doing. You'd generally want to avoid just <code>location= something</code> as it looks misleadingly like a variable assignment. <code>window.location= something</code> is fine though.)</p>
<p><code>document.location</code> is an object, while <code>document.location.href</code> is a string. But the former has a <code>toString</code> method, so you can read from it as if it was a string and get the same value as <code>document.location.href</code>.</p> <p>In some browsers - most modern ones, I think - you can also assign to <code>document.location</code> as if it were a string. According to the <a href="https://developer.mozilla.org/en/DOM/document.location" rel="nofollow noreferrer">Mozilla documentation</a> however, it is better to use <code>window.location</code> for this purpose as <code>document.location</code> was originally read-only and so may not be as widely supported.</p>
<p>The <code>document.location</code> is an object that contains properties for the current location.</p> <p>The <code>href</code> property is one of these properties, containing the complete URL, i.e. all the other properties put together.</p> <p>Some browsers allow you to assign an URL to the <code>location</code> object and acts as if you assigned it to the <code>href</code> property. Some other browsers are more picky, and requires you to use the <code>href</code> property. Thus, to make the code work in all browsers, you have to use the <code>href</code> property.</p> <p>Both the <code>window</code> and <code>document</code> objects has a <code>location</code> object. You can set the URL using either <code>window.location.href</code> or <code>document.location.href</code>. However, logically the <code>document.location</code> object should be read-only (as you can't change the URL of a document; changing the URL loads a new document), so to be on the safe side you should rather use <code>window.location.href</code> when you want to set the URL.</p>
<pre class="lang-js prettyprint-override"><code>typeof document.location; // 'object' typeof document.location.href; // 'string' </code></pre> <p>The <code>href</code> property is a string, while <code>document.location</code> itself is an object.</p>
<p>As of <strong>June 14th 2013</strong> (<em>HTML5</em>), there is a significant difference</p> <p><code>Browser : Chrome 27.X.X</code></p> <p><strong>References: <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.location" rel="nofollow">document.location</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.location" rel="nofollow">window.location</a></strong> (<em>MDN</em>)</p> <hr> <h1>document.location</h1> <p><code>type: Object</code></p> <p>The object when called by itself <code>document.location</code> return its <code>origin</code> + <code>pathname</code> properties concatenated.</p> <p>To retrieve just the URL as a string, the read-only <code>document.URL</code> property can be used.</p> <pre><code>ancestorOrigins: DOMStringList assign: function () { [native code] } hash: "" host: "stackoverflow.com" hostname: "stackoverflow.com" href: "http://stackoverflow.com/questions/2652816/what-is-the-difference-between-document-location-href-and-document-location?rq=1" origin: "http://stackoverflow.com" pathname: "/questions/2652816/what-is-the-difference-between-document-location-href-and-document-location" port: "" protocol: "http:" reload: function () { [native code] } replace: function () { [native code] } search: "?rq=1" toString: function toString() { [native code] } valueOf: function valueOf() { [native code] } </code></pre> <hr> <h1>document.location.href</h1> <p><code>type: string</code></p> <pre><code>http://stackoverflow.com/questions/2652816/what-is-the-difference-between-document-location-href-and-document-location?rq=1 </code></pre>
<p>Here is an example of the practical significance of the difference and how it can bite you if you don't realize it (document.location being an object and document.location.href being a string):</p> <p>We use MonoX Social CMS (<a href="http://mono-software.com" rel="nofollow">http://mono-software.com</a>) free version at <a href="http://social.ClipFlair.net" rel="nofollow">http://social.ClipFlair.net</a> and we wanted to add the language bar WebPart at some pages to localize them, but at some others (e.g. at discussions) we didn't want to use localization. So we made two master pages to use at all our .aspx (ASP.net) pages, in the first one we had the language bar WebPart and the other one had the following script to remove the /lng/el-GR etc. from the URLs and show the default (English in our case) language instead for those pages</p> <pre><code>&lt;script&gt; var curAddr = document.location; //MISTAKE var newAddr = curAddr.replace(new RegExp("/lng/[a-z]{2}-[A-Z]{2}", "gi"), ""); if (curAddr != newAddr) document.location = newAddr; &lt;/script&gt; </code></pre> <p>But this code isn't working, replace function just returns Undefined (no exception thrown) so it tries to navigate to say x/lng/el-GR/undefined instead of going to url x. Checking it out with Mozilla Firefox's debugger (F12 key) and moving the cursor over the curAddr variable it was showing lots of info instead of some simple string value for the URL. Selecting Watch from that popup you could see in the watch pane it was writing "Location -> ..." instead of "..." for the url. That made me realize it was an object</p> <p>One would have expected replace to throw an exception or something, but now that I think of it the problem was that it was trying to call some non-existent "replace" method on the URL object which seems to just give back "undefined" in Javascript.</p> <p>The correct code in that case is:</p> <pre><code>&lt;script&gt; var curAddr = document.location.href; //CORRECT var newAddr = curAddr.replace(new RegExp("/lng/[a-z]{2}-[A-Z]{2}", "gi"), ""); if (curAddr != newAddr) document.location = newAddr; &lt;/script&gt; </code></pre>