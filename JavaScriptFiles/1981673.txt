Persist javascript variables across pages?
<p>Is there a way we can persist javascript variables across various pages? Suppose in Page A I am setting <code>window.someVar = 5</code>. Then I move to Page B, via clicking a hyperlink in A, and do something like <code>alert(window.someVar)</code> -- I should get a message box displaying 5. Is there a technique to persist <code>someVar</code> as such...?</p>
<p>You could use the windowâ€™s name <code>window.name</code> to store the information. This is known as <a href="http://www.thomasfrank.se/sessionvars.html" rel="nofollow noreferrer">JavaScript session</a>. But it only works as long as the same window/tab is used.</p>
<p>Yes, using <a href="http://www.quirksmode.org/js/cookies.html" rel="nofollow noreferrer">Cookies</a>. But be careful, don't put too much in them (I think there is a limit at 4kb). But a few variables are ok.</p> <p>If you need to store considerably more than that, check out @Annie's great tips in the other answer. For small time data storage, I would say Cookies are the easiest thing.</p> <p>Note that cookies are stored client side. </p>
<p>You can persist values using HTML5 storage, Flash Storage, or Gears. The <a href="http://www.dojotoolkit.org/node/115" rel="nofollow noreferrer">dojo storage</a> library provides a nice wrapper for this.</p>
<p>For completeness, also look into the local storage capabilities &amp; sessionStorage of HTML5. These are supported in the latest versions of all modern browsers, and are much easier to use and less fiddly than cookies.</p> <p><a href="http://www.w3.org/TR/2009/WD-webstorage-20091222/" rel="nofollow noreferrer">http://www.w3.org/TR/2009/WD-webstorage-20091222/</a></p> <p>Here are some sample code for setting and getting the values using sessionStorage and localStorage : </p> <pre><code> // HTML5 session Storage sessionStorage.setItem("variableName","test"); sessionStorage.getItem("variableName"); //HTML5 local storage localStorage.setItem("variableName","Text"); // Receiving the data: localStorage.getItem("variableName"); </code></pre>
<p>I would recommend you to give a look to this library:</p> <ul> <li><a href="http://pablotron.org/?cid=1557" rel="nofollow noreferrer">PersistJS</a></li> </ul> <p>I really like it, it supports a variety of storage backends (from cookies to HTML5 storage, Gears, Flash, and more...), its usage is really <em>transparent</em>, you don't have to know or care which backend is used the library will choose the right storage backend depending on the browser capabilities.</p>
<p>I recommend web storage. Example:</p> <p><code>// Storing the data: localStorage.setItem("variableName","Text"); // Receiving the data: localStorage.getItem("variableName");</code></p> <p>Just replace <code>variable</code> with your variable name and <code>text</code> with what you want to store. According to W3Schools, it's better than cookies.</p>
<p>You can use <a href="http://rhaboo.org" rel="nofollow">http://rhaboo.org</a> as a wrapper around localStorage. It stores complex objects but doesn't merely stringify and parse the whole thing like most such libraries do. That's really inefficient if you want to store a lot of data and add to it or change it in small chunks. Also, JSON discards a lot of important stuff like non-numerical properties of arrays. </p> <p>In rhaboo you can write things like this:</p> <pre><code>var store = Rhaboo.persistent('Some name'); store.write('count', store.count ? store.count+1 : 1); var laststamp = store.stamp ? store.stamp.toString() : "never"; store.write('stamp', new Date()); store.write('somethingfancy', { one: ['man', 'went'], 2: 'mow', went: [ 2, { mow: ['a', 'meadow' ] }, {} ] }); store.somethingfancy.went[1].mow.write(1, 'lawn'); console.log( store.somethingfancy.went[1].mow[1] ); //says lawn </code></pre> <p>BTW, I wrote rhaboo</p>