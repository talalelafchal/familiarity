Override document.location.href is it possible in javascript?
<p>Is it possible to override somehow document.location.href ? </p> <p>need override getter, ex.: alert(document.location.href); should return lets say "www.example.com" while real document location is www.stackoverflow.com...</p> <p>don't know is it possible..</p>
<p>No. It is not possible for security reasons.</p>
<p>No, but...</p> <p>In Ecmascript 5, there is support for getters/setters and you can spoof the <code>document</code> reference if accessed from within a scope which redefines it.</p> <p>Proof:</p> <pre><code>(function (document) { alert(document); // -&gt; "spoofed document" })("spoofed document"); </code></pre> <p>Combined with <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Creating_New_Objects/Defining_Getters_and_Setters" rel="nofollow noreferrer">accessors</a> you can replace the document object. (Javascript 1.5 is needed for accessors.)</p>
<p>As others already have noted it is not possible to change the URL without reloading the page.</p> <p>Note that you can the change the fragment identifier, i.e. the part in the URL after the hash (#) using document.location.hash, but that is probably not good enough for you.</p>
<p>Swap out "document" to another variable, edit it, and swap it back in.</p> <pre><code>var d = {} for (var k in document) { d[k] = document[k]; } d["location"]="out of this world"; document = d; </code></pre>
<p>You can override it in IE7 or IE8 by making use of independent script tags (but not in modern Firefox or IE9+):</p> <pre><code>&lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;title&gt;Some title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; var _oldDoc = document; // IE &lt; 9 won't work with the code below unless we place it here in its own script tag &lt;/script&gt; &lt;script&gt; var document = {}; for (var k in _oldDoc) { if (navigator.appName == 'Microsoft Internet Explorer' || !k.match(/^(location|domain|body)$/) // Cause problems or errors in Mozilla, but Mozilla isn't really creating a new document object anyways ) { document[k] = _oldDoc[k]; } } // Causes problems in Mozilla as we can't get Mozilla to actually overwrite the object document["location"] = { href: "out of this world", toString: function () { return this.href; } }; alert(document.location.href); // "out of this world" in IE &lt; 9 alert(document.location); // "out of this world" in IE &lt; 9 alert(document.title); // 'Some title' &lt;/script&gt; &lt;script&gt; alert(document.location.href); // also "out of this world" in IE &lt; 9 alert(document.location); // also gives "out of this world" in IE &lt; 9 alert(document.title); // also 'Some title' &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; </code></pre>