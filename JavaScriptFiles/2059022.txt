Is there a benefit to defining variables together with a comma vs separately in JavaScript?
<p>Reading Crockfords <a href="http://javascript.crockford.com/style1.html" rel="nofollow noreferrer">The Elements of JavaScript Style</a> I notice he prefers defining variables like this:</p> <pre><code>var first='foo', second='bar', third='...'; </code></pre> <p>What, if any benefit does that method provide over this:</p> <pre><code>var first='foo'; var second='bar'; var third='...'; </code></pre> <p>Obviously the latter requires more typing but aside from aesthetics I'm wondering if there is a performance benefit gained by defining with the former style.</p>
<p>A statement like "var" is not minified/compressed.<br />Every time you place a var, instead of a comma you lose 4 chars, if I count right.</p>
<p>Since JavaScript is generally downloaded to the client browser, brevity is actually quite a valuable attribute. The more bytes you have to download, the slower it gets. So yes, there is a reason apart from aesthetics, if not a massive one.</p> <p>Similarly, you'll see people preferring shorter variable names to longer.</p> <p>Personally, I don't bother minimising whitespace, as there are minimisers that can do this sort of thing for you (for example in <a href="http://developer.yahoo.com/yui/" rel="nofollow noreferrer">YUI</a>), and lack of indentation and spacing leads to less maintainable code.</p>
<p>I believe that what he is going for is declaring all variables as abosultely the first statement in a function (You'll notice that JSLint complains about this if you use it and don't declare them on the first line). This is because of JavaScript's scope declaration limitations (or quirks). Crockford emphasizes this as good practice for maintainable JavaScript code. The second example declares them at the top, but not in the first execution statement. Personally, I see no reason as why to prefer the first over the second, but following the first does enforce that all variables are declared before doing anything else in the function. </p> <p>David is right that the larger the script the more time it will take to down load, but in this case the difference between the two is minimal and can be handled by using YUI compress etc. </p>
<p>It's a personal programming style choice.</p> <p>On the one hand there is <em>readability</em>, wherein placing each variable declaration on a separate line makes it more obvious what's going on.</p> <p>On the other hand, there is <em>brevity</em>, wherein you're eliminating transmitting a few extra bytes over the network. It's generally not enough to worry about, unless you're dealing with slow networks or limited memory on the client browser side.</p> <p><em>Brevity</em> is also known as <em>laziness</em> on the part of the programmer, which is one reason that many purists avoid it.</p>
<p>No difference in semantics and no measurable difference in performance. Write whichever is clearest.</p> <p>For simple examples like:</p> <pre><code>var first= 'foo', second= 'bar', third= 'bof'; </code></pre> <p>the concise single-statement construct is probably a win for readability. On the other hand you can take this much too far and start writing half your program inside a single var statement. Here's a random example plucked from the jQuery source:</p> <pre><code>var name = match[1], result = Expr.attrHandle[ name ] ? Expr.attrHandle[ name ]( elem ) : elem[ name ] != null ? elem[ name ] : elem.getAttribute( name ), value = result + "", type = match[2], check = match[4]; </code></pre> <p>I find this (by no means the worst example) a bit distasteful. Longer examples can get quite hard to read upwards (wait, I was in a var statement?) and you can end up counting the brackets to try to work out what's a multi-line expression and what's just an extended <code>var</code> block.</p>
<p>Aside of aesthetics, and download footprint, another reason could be that the <code>var</code> statement is subject to <em>hoisting</em>. This means that regardless of where a variable is placed within a function, it is moved to the top of the scope in which it is defined.</p> <p>E.g:</p> <pre><code>var outside_scope = "outside scope"; function f1() { alert(outside_scope) ; var outside_scope = "inside scope"; } f1(); </code></pre> <p>Gets interpreted into:</p> <pre><code>var outside_scope = "outside scope"; function f1() { var outside_scope; // is undefined alert(outside_scope) ; outside_scope = "inside scope"; } f1(); </code></pre> <p>Because of that, and the function-scope only that JavaScript has, is why Crockford recommends to declare all the variables at the <a href="http://www.jslint.com/lint.html#var" rel="nofollow noreferrer">top of the function</a> in a single <code>var</code> statement, to resemble what will really happen when the code is actually executed.</p>
<p>It all comes down to personal taste or a set of style-guides, your development team follows. If you are serving JavaScript yourself, you usually compress or minify your script(s) into one long string in one single file. So the whole <em>you-are-saving-bytes-and-your-scripts-download-faster argument</em> is, well, not an argument :)</p> <p>I usually declare my variables like this: (a style you didn't mention)</p> <pre><code>var something, somethingElse, evenMoreSomething, andAnotherThing; </code></pre>