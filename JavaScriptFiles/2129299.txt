Can someone help with this self invoking function stuff?
<p>I've been trying to debug this script all day and I got nothing any help would be greatly appreciated. </p> <p>I keep getting an error that it's missing a curly brace or a square brace or a parenthetical. And also when I try to get the value of my options it says x is undefined but when I input 0 as my index I can retrieve opts.value, my question is why is x undefined and what's missing from this script</p> <pre><code>prices= (function(){ table=document.getElementsByTagName("table"); selects=table[0].getElementsByTagName("select"); for(var x=0;x&lt;=10;x++){ opts=new Array(); opts=selects[x].getElementsByTagName("option")[selects[x].selectedIndex]; } return{ value: (function(){ val=new Array(); for(var i=0;i&lt;=5;i++){ val[i]=opts.value } return val; })();, total: (function(){} var num="$15.00" var t; for(var j=0;j&lt;=3;j++){ t+=num.slice(1).valueOf(); } return t })(); }; })(); var hello="hello" document.write("&lt;p&gt;hello&lt;/p&gt;");//line just test whether or not function is working document.write(opts.value); </code></pre>
<p>Well, if that script is in the <code>&lt;head&gt;</code> of your document, its trying to read DOM elements before they've been created, unless you're calling it via onload which you're not showing.</p> <p>Your other option would be to put the <code>&lt;script&gt; ... &lt;/script&gt;</code> at the bottom of your page right before the closing body. While I can't be 100% sure this is the problem because you haven't posted your HTML, this is a fair guess if you're getting undefined DOM elements.</p>
<p>It seems that <code>return t</code> is missing a semi-colon.</p> <p>Also, in the anon-function following <code>total:</code>, you seem to have paired-brackets <code>{}</code> followed by more body, which finally ends with a mismatched closed-bracket just before <code>return t</code>.</p> <p>If you fix those issues, I think you will be much further along towards having working code</p>
<p>I didn't so much check what your code does but tried to find an answer to your missing braces / syntactical errors. It seems there are quite a few. I reformatted your above code, using proper indenting, and came up with this:</p> <pre><code>var prices = (function() { table = document.getElementsByTagName("table"); selects = table[0].getElementsByTagName("select"); for (var x = 0; x &lt;= 10; x++) { opts = new Array(); opts = selects[x].getElementsByTagName("option")[selects[x].selectedIndex]; } return { value: (function() { var val = new Array(); for (var i = 0; i &lt;= 5; i++) { val[i] = opts.value; } return val; })() , total: (function() { var num = "$15.00"; var t; for(var j = 0; j &lt;= 3; j++) { t += num.slice(1).valueOf(); } return t; })() }; })(); </code></pre> <p>Some things to note here:</p> <ul> <li><p><code>(function() { ... })()</code> defines a function (the <code>function() { ... }</code> bit) and then immediately calls it (the terminating <code>()</code> bit). The whole expression has the value of whatever the function returns.</p></li> <li><p><code>return { value: ..., total: ... }</code> returns a dictionary, which can be referenced by the <code>prices</code> variable. Note that you were missing the <code>var</code> keyword before <code>prices = ...</code> (and also before <code>val</code>. Also, after <code>total: function()</code>, you need to remove the closing curly brace, since what follows belongs to that function.</p></li> <li><p>You assign twice to <code>opts</code> (for which the <code>var</code> keyword might also be missing, unless it's declared outside the function). Perhaps you should write <code>var opts = new Array()</code> outside the <code>for</code> loop and then assign to <code>opts[x]</code> inside the <code>for</code> loop?</p></li> </ul>
<h2>Closure Demo</h2> <p><strong>Sorry if I missed anything, I didn't try running it because I've kept the html scenario you were using. Because it's using document.write, it will return the <em>default</em> selected option values from 11 selects in first table on the page.</strong></p> <pre><code>// I've changed your "demo" to show the use of a "closure"... var prices = (function() { //maybe good to add var var table = document.getElementsByTagName("table"); //maybe good to add var var selects = table[0].getElementsByTagName("select"); //maybe good to add var var opts = new Array(); //pull it out of for loop and add var! FYI var opts = []; is equivalent. for (var x = 0; x &lt;= 10; x++) { //your test requires at least eleven selects in the first table. opts[x] = selects[x].options[selects[x].selectedIndex]; // maybe wanted 11 selected options in a closure? } return { // remove both anonymous wrappers from your object literal (function(){ ... })(); value: function() { var val = new Array(); //maybe very good to add var for (var i = 0; i &lt;= 5; i++) { val[i] = opts[i].value; //good to add ; read selected option.value x6 from opts array in closure! } return val; }, total: function() { // deleted an extra } var num = "$15.00"; //add ; var t; // must initialize to 0 since you're using += for (var j = 0; j &lt;= 3; j++) { t += num.slice(1).valueOf(); // null +=15.00 x3 } return t; // null, good to add ; } }; })(); // I'm guessing you've done too much work to have previously defined opts as a global, yes? document.write(prices.value().join('\r\n&lt;br /&gt;')); // selected values copied from the closure /* //using document.write so all this need to run at the bottom of a page var hello = "hello"; //good to add ; document.write("&lt;p&gt;hello&lt;/p&gt;"); //line just test whether or not function is working document.write(opts.value); */ </code></pre> <p>See the comments for help fixing up price.total etc.</p>