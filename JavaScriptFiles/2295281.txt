javascript function scope
<p>Who can explain why result are [20, 20, 10, 10] in this code:</p> <pre><code>var x = 10; var foo = { x: 20, bar: function () { var x = 30; return this.x; } }; console.log( foo.bar(), (foo.bar)(), (foo.bar = foo.bar)(), (foo.bar, foo.bar)() ); </code></pre> <p><strong>Links to specification are welcomed</strong></p>
<p>I think following <a href="http://stackoverflow.com/questions/2148451/help-this-is-confusing-me-in-javascript">question</a> will be helpful for this.</p>
<p>The first two function calls are equivalent. They are calling <code>foo</code>'s <code>bar</code> method within the context of <code>foo</code> â€“ therefore the value returned by <code>this.x</code> is the value of <code>foo</code>'s <code>x</code> property, which is <code>20</code>.</p> <p>The second two calls are both questionable/invalid syntax. Try running your code through <a href="http://www.jslint.com/" rel="nofollow noreferrer">JSLint</a> and you'll that it spits out several errors and then chokes entirely. My best guess as to why they return <code>10</code> is that it's attempting to parse your code in a case where it really shouldn't and is getting confused. <code>10</code> might be returned because the browser cannot figure out what you're trying to do and is defaulting to global (window) scope where the value of <code>x</code> is <code>10</code>. This would also explain Ramesh Vel's comment that the second two values appear as <code>undefined</code> in IE. Due to the fact that the syntax is invalid, different implementations of JavaScript are likely to handle them differently.</p>
<p>Can't point you at specification, but i can highly recommend reading <a href="http://rads.stackoverflow.com/amzn/click/0596517742" rel="nofollow noreferrer">Douglas Crockford's "Javascript: The good parts"</a>. This book will help you understand most of the weird but great features of JavaScript.</p> <p>As of your question:</p> <ol> <li>foo.bar(), <code>this</code> keyword in <code>bar</code> function is bound to <code>foo</code> object</li> <li>(foo.bar)() is the same as above, </li> <li><p>In javascript you can assign variables from right to left multiple times</p> <p>z = 3; x = (y = z); console.log(x); //3</p></li> </ol> <p>functions are variables as anything else. So you are assigning the function <code>foo.bar</code> to <code>foo.bar</code>, but the parenthesis causes the assigned function to be returned, and then executed.</p> <pre><code>(foo.bar = foo.bar)(); //is the same as var f = (foo.bar = foo.bar); f(); //and this also the same as: var f= foo.bar; f(); </code></pre> <p>The function returned from parenthesis is not bound to anything, so <code>this</code> will refer to global object, in case of browsers - to the <code>window</code> object. </p> <p>4.. The clause (foo.bar, foo.bar)() is just alike:</p> <pre><code>a = (3, 4); //last value is returned, first just parsed. //a contains 4 var f = (foo.bar, foo.bar); //f contains body of foo.bar function, f() // is executed in the context of `global` object, eg. `window`. </code></pre> <p>Please read about <code>binding</code> of functions in JavaScript.</p>