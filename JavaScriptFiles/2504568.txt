JavaScript Namespace Declaration
<p>I created a javascript class as follow:</p> <pre><code>var MyClass = (function() { function myprivate(param) { console.log(param); } return { MyPublic : function(param) { myprivate(param); } }; })(); MyClass.MyPublic("hello"); </code></pre> <p>The code above is working, but my question is, how if I want to introduce namespace to that class.</p> <p>Basically I want to be able to call the class like this:</p> <pre><code>Namespace.MyClass.MyPublic("Hello World"); </code></pre> <p>If I added Namespace.MyClass, it'll throw error "Syntax Error". I did try to add "window.Namespace = {}" and it doesn't work either.</p> <p>Thanks.. :)</p>
<p>A succinct way to do what you're asking is create "Namespace" as an object literal like this:</p> <pre><code>var Namespace = { MyClass : (function() { ... rest of your module })(); }; </code></pre> <p>This could cause conflicts if you wanted to attach other details to Namespace in other files, but you could get around that by always creating Namespace first, then setting members explicitly.</p>
<p>Usually I'd recommend doing this (assuming <code>Namespace</code> is not defined elsewhere):</p> <pre><code>var Namespace = {}; Namespace.MyClass = (function () { // ... }()); </code></pre> <p>A more flexible, but more complex, approach:</p> <pre><code>var Namespace = (function (Namespace) { Namespace.MyClass = function() { var privateMember = "private"; function myPrivateMethod(param) { alert(param || privateMember); }; MyClass.MyPublicMember = "public"; MyClass.MyPublicMethod = function (param) { myPrivateMethod(param); }; } return Namespace }(Namespace || {})); </code></pre> <p>This builds <code>Namespace.MyClass</code> as above, but doesn't rely on <code>Namespace</code> already existing. It will declare and create it if it does not already exist. This also lets you load multiple members of <code>Namespace</code> in parallel in different files, loading order will not matter.</p> <p>For more: <a href="http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth" rel="nofollow noreferrer">http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth</a></p>
<p>Checkout the <a href="http://github.com/jweir/namespace" rel="nofollow">namespace library</a>, it is very lightweight and easy to implement. </p> <pre><code>(function(){ namespace("MyClass", MyPublic); function MyPublic(x){ return x+1; } })(); </code></pre> <p>It supports automatically nesting as well</p> <pre><code>namespace("MyClass.SubClass.LowerClass", ....) </code></pre> <p>Would generate the necessary object hierarchy, if MyClass, SubClass did not already exist.</p>
<p>YUI has a nice method for declaring namespaces</p> <pre><code>if (!YAHOO) { var YAHOO = {}; } YAHOO.namespace = function () { var a = arguments, o = null, i, j, d; for (i = 0; i &lt; a.length; i = i + 1) { d = ("" + a[i]).split("."); o = YAHOO; for (j = (d[0] == "YAHOO") ? 1 : 0; j &lt; d.length; j = j + 1) { o[d[j]] = o[d[j]] || {}; o = o[d[j]]; } } return o; } </code></pre> <p>Place it above any function that you want to namespace like this:</p> <pre><code>YAHOO.namespace("MyNamespace.UI.Controls") MyNamespace.UI.Controls.MyClass = function(){}; MyNamespace.UI.Controls.MyClass.prototype.someFunction = function(){}; </code></pre> <p>This method is actually stand-alone and can easily be adapted to your application. <strong>Just find and replace "YAHOO" with your application's base namespace and you'll have something like MyOrg.namespace.</strong> The nice thing with this method is that you can declare namespaces at any depth without having to create object arrays in between, like for "UI" or "Controls" </p>
<p><a href="http://www.bobjs.com" rel="nofollow">bob.js</a> has nice syntax to define JavaScript namespace:</p> <pre><code>bob.ns.setNs('myApp.myMethods', { method1: function() { console.log('This is method 1'); }, method2: function() { console.log('This is method 2'); } }); //call method1. myApp.myMethods.method1(); //call method2. myApp.myMethods.method2(); </code></pre>
<p>Automating namespaces declaration in javascript is very simple as you can see:</p> <pre><code>var namespace = function(str, root) { var chunks = str.split('.'); if(!root) root = window; var current = root; for(var i = 0; i &lt; chunks.length; i++) { if (!current.hasOwnProperty(chunks[i])) current[chunks[i]] = {}; current = current[chunks[i]]; } return current; }; // ----- USAGE ------ namespace('ivar.util.array'); ivar.util.array.foo = 'bar'; alert(ivar.util.array.foo); namespace('string', ivar.util); ivar.util.string.foo = 'baz'; alert(ivar.util.string.foo); </code></pre> <p>Try it out: <a href="http://jsfiddle.net/stamat/Kb5xY/" rel="nofollow">http://jsfiddle.net/stamat/Kb5xY/</a> Blog post: <a href="http://stamat.wordpress.com/2013/04/12/javascript-elegant-namespace-declaration/" rel="nofollow">http://stamat.wordpress.com/2013/04/12/javascript-elegant-namespace-declaration/</a></p>
<p>This is the design pattern I use which allows for nested namespaces as well as adding to the namespace later (even from a separate JS file) so you don't pollute the global namespace:</p> <p>Example: <a href="http://jsfiddle.net/justincook/q9WWv/" rel="nofollow">JsFiddle</a></p> <pre><code>(function ($, MyObject, undefined) { MyObject.publicFunction = function () { console.log("public"); }; var privateFunction = function () { console.log("private"); }; var privateNumber = 0; MyObject.getNumber = function () { this.publicFunction(); privateFunction(); privateNumber++; console.log(privateNumber); }; // Nested namespace MyObject.nested = MyObject.nested || {}; MyObject.nested.test = function (text) { console.log(text); }; }(jQuery, window.MyObject = window.MyObject || {})); // Try it MyObject.getNumber(); MyObject.nested.test('Nested'); </code></pre> <p>Here is how to add to <code>MyObject</code> from another JavaScript file:</p> <pre><code>(function ($, MyObject, undefined) { MyObject.newFunction = function () { console.log("Added"); }; }(jQuery, window.MyObject = window.MyObject || {})); // Pass `jQuery` to prevent conflicts and `MyObject` so it can be added to, instead of overwritten </code></pre> <p>This resource helped me learn all about the different JS design patterns: <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" rel="nofollow">http://addyosmani.com/resources/essentialjsdesignpatterns/book/</a></p>
<pre><code>(function($){ var Namespace = { Register : function(_Name) { var chk = false; var cob = ""; var spc = _Name.split("."); for(var i = 0; i&lt;spc.length; i++) { if(cob!=""){cob+=".";} cob+=spc[i]; chk = this.Exists(cob); if(!chk){this.Create(cob);} } if(chk){ throw "Namespace: " + _Name + " is already defined."; } }, Create : function(_Src) { eval("window." + _Src + " = new Object();"); }, Exists : function(_Src) { eval("var NE = false; try{if(" + _Src + "){NE = true;}else{NE = false;}}catch(err){NE=false;}"); return NE; } } Namespace.Register("Campus.UI.Popup") Campus.UI.Popup=function(){ defaults={ action:'', ispartialaction:'', customcallback:'', confirmaction:'', controltoupdateid:'', width:500, title:'', onsubmit:function(id){ var popupid=id+"_popupholder"; if(this.ispartialaction){ $.ajax({ url:this.action, type:"Get", context:this, success:function(data){ $('#'+id).parents('body').find('form').append("&lt;div id'"+popupid+"'&gt;&lt;/div&gt;"); var ajaxContext=this; $("#"+popupid).dialog({ autoopen:false, model:true, width:this.width, title:this.title, buttons:{ "Confirm":function(){ if(ajaxContext.customcallback==''){ var popupform=$(this).find("form"); if(popupform.isValid()){ $.post(ajaxContext.confirmaction,popupform.serialize(),function(d){ if(d!='') { $.each(d.Data,function(i,j){ switch(j.Operation) { case 1: if($('#'+j.ControlClientID).is("select")) { $('#'+j.ControlClientID).val(j.Value); $('#'+j.ControlClientID).change(); } else if($('input[name="'+j.ControlClientID+'"]').length&gt;0) { $('input[name="'+j.ControlClientID+'"][value="'+j.Value+'"]').prop("checked",true); } break; case 2: if($('#'+j.ControlClientID).is("select")) { $('#'+j.ControlClientID).append("&lt;option selected='selected' value=\""+j.Value+"\"&gt;"+j.Text+"&lt;/option&gt;"); } else { var len=$('input[name="'+j.ControlClientID+'"]').length; $('#'+j.ControlClientID+"list").append('&lt;li&gt;&lt;input type="checkbox" name="'+j.ControlClientID+'" value="'+j.Value+'" id="ae'+j.ControlClientID+len+'"/&gt;&lt;label for "ae'+j.ControlClientID+len+'"&gt;'+j.Text+'&lt;/label&gt;'); } break; case 0: $('#'+j.ControlClientID).val(j.Value); breakl default:break; } }); popupform.parent().dialog("destroy").remove(); $("#"+ajaxContext.controltoupdateid).change(); } }); } } else { executeByFunctionName(ajaxContext.customcallback,window,new Array()); } }, "Cancel":function(){ $(this).dialog("close"); } } }); $("#"+popupid).dialog("open"); $("#"+popupid).empty().append(data); }, error:function(e) { alert(e); } }); } else { var frm=document.createElement("form"); frm.id="CampusForm"; frm.name="CampusForm"; frm.action=this.action; frm.method="post"; var arr=$($("#"+id).closest("body").find("form")).serializeArray(); $.each(arr,function(i,j){ var hidd=document.createElement("input"); hidd.type="hidden"; hidd.name=j.name; hidd.value=j.value; frm.appendChild(hidd);}); document.appendChild(frm); frm.submit(); } } }, clicksubmit=function(){ var opts=$(this).data("CampusPopup"); opts.onsubmit($(this).attr("id")); return false; }; return { init:function(opt){ var opts=$.extend({},defaults,opt||{}); $(this).data('CampusPopup',opts); $(this).bind("click",clicksubmit); }}; }(); $.extend({CampusPopup:Campus.UI.Popup.init}); })(jQuery) </code></pre>