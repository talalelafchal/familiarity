Replace selected text in Firefox
<p>How can I replace the selected text with another text using PURE javascript, in Firefox?</p> <p>This I use to get the selection:</p> <pre><code>var sel = this.getSelection(); var range = sel.getRangeAt(0); </code></pre> <p><strong>And also this important issue:</strong><br> I want to keep the original format of characters (of course the new string will have the right format )<br> The selection can be done "cross-elements" (by this I mean that the selection can contain some text from one element like div or table and some text from another elements). </p> <p>example, the document:</p> <pre><code>&lt;div&gt; this is a test &lt;/div&gt; &lt;div&gt; &lt;b&gt;still a test&lt;/b&gt; &lt;/div&gt; &lt;table style="width:100%;"&gt; &lt;tr&gt; &lt;td&gt; another word&lt;/td&gt; &lt;td&gt; stackoverflow&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; bump&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; </code></pre> <p>the user select the following text (via one selection):</p> <blockquote> <p>his is a test still a test anot</p> </blockquote> <p>So now I want to replace the text keeping the format, for instance replace every thing with new string =</p> <blockquote> <p>XXX XX X XXXX XXXXX X XXXX XXXX</p> </blockquote> <p>Final document (after replace) will be:</p> <pre><code>&lt;div&gt; tXXX XX X XXXX &lt;/div&gt; &lt;div&gt; &lt;b&gt;XXXXX X XXXX&lt;/b&gt; &lt;/div&gt; &lt;table style="width:100%;"&gt; &lt;tr&gt; &lt;td&gt; XXXXher word&lt;/td&gt; &lt;td&gt; stackoverflow&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; bump&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; </code></pre>
<p>Wooove, that was a pitty!</p> <p><strong>Javascript</strong></p> <pre><code>var sel, range, nodevalue, startFound, stop; function goThroughElements(el){ // If el is the start node, set startFound to true if(el.isSameNode(range.startContainer)) startFound = true; if(startFound){ // If this is the start node, replace the text like this: abcd[ef gh] --&gt; abcdxx xx if(el.isSameNode(range.startContainer)){ // \w stands for a word character nodevalue = el.nodeValue.substring(range.startOffset).replace(/\w/g, 'x'); el.nodeValue = el.nodeValue.substring(0, range.startOffset) + nodevalue; } // If this is the end node, replace the value like this: [abc def]gh ij -&gt; xxx xxxgh ij else if(el.isSameNode(range.endContainer)){ nodevalue = el.nodeValue.substring(0,range.endOffset).replace(/\w/g, 'x'); el.nodeValue = nodevalue + el.nodeValue.substring(range.endOffset); // Now we can stop stop = true; } // If this is just a text node, replace the value by xxxx else if(el.nodeType == 3){ el.nodeValue = el.nodeValue.replace(/\w/g, 'x') } } // Loop trough el's brothers while(el){ // Stop if we need to if(stop) return; // If this element has child nodes, call this function again with the first child node if(el.hasChildNodes()){ goThroughElements(el.childNodes[0]); } // Jump to el's brother, or quit the loop if(el.nextSibling) el = el.nextSibling; else break; } } $(document).ready(function() { $(this).mouseup(function(){ // Get the selection sel = window.getSelection(); range = sel.getRangeAt(0); // Stop must be false if the last selected text node isn't found, startFound must be false when the start isn't found stop = false; startFound = false; if(range.collapsed == false){ // Check if the selection takes place inside one text node element if(range.startContainer.isSameNode(range.endContainer)){ // ab[cdefg]h -&gt; aaxxxxxh nodevalue = range.startContainer.nodeValue; range.startContainer.nodeValue = nodevalue.substring(0, range.startOffset) + nodevalue.substring(range.startOffset, range.endOffset).replace(/\w/g, 'x') + nodevalue.substring(range.endOffset); } else { // If the start node of the selection isn't the same as the end node, loop through all elements goThroughElements(range.commonAncestorContainer.childNodes[0]); } // Collapse selection. range.collapse(true); } }); }); </code></pre> <p><strong>Example</strong></p> <p>You can <a href="http://harmen.no-ip.org/range/test.html" rel="nofollow noreferrer">try the code</a> of course</p> <p>Maybe it's not the optimal solution, since it starts searching for the start node from the root. It would be faster to search from the first common parent element of <code>range.startContainer</code> and <code>range.endContainer</code>, but I don't know how to do that...</p> <p><strong>Edit</strong></p> <p>I wrapped the to-X functions inside <code>if(range.collapsed == false)</code> and used <code>range.commonAncestorContainer.childNodes[0]</code> in order to start iterating through the elements from the first child of the common parent of the start and end position of the selection </p>