Convert an array into a separate argument strings
<p>How would I get this array to be passed in as a set of strings to the function? This code doesn't work, but I think it illustrates what I'm trying to do.</p> <pre><code>var strings = ['one','two','three']; someFunction(strings.join("','")); // someFunction('one','two','three'); </code></pre> <p>Thanks!</p>
<p>Use <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function/apply" rel="nofollow noreferrer"><code>apply()</code></a>.</p> <pre><code>var strings = ['one','two','three']; someFunction.apply(null, strings); // someFunction('one','two','three'); </code></pre> <p>If your function cares about object scope, pass what you'd want <code>this</code> to be set to as the first argument instead of <code>null</code>.</p>
<p>The solution is rather simple, each function in JavaScript has a method associated with it, called "apply", which takes the arguments you want to pass in as an array.</p> <p>So:</p> <pre><code>var strings = ["one", "two", "three"]; someFunction.apply(this, strings); </code></pre> <p>The 'this' in the apply indicates the scope, if its just a function in the page without an object, then set it to null, otherwise, pass the scope that you want the method to have when calling it. </p> <p>In turn, inside of the someFunction, you would write your code something like this:</p> <pre><code>function someFunction() { var args = arguments; // the stuff that was passed in for(var i = 0; i &lt; args; ++i) { var argument = args[i]; } } </code></pre>
<p>For ES6 javascript you can use an special 'destructuring' operator:</p> <pre><code>var strings = ["one","two","three"]; someFunction(...strings); </code></pre> <p>reference: <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator" rel="nofollow">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator</a> or <a href="http://www.2ality.com/2015/01/es6-destructuring.html" rel="nofollow">http://www.2ality.com/2015/01/es6-destructuring.html</a></p>