Optimize loop JavaScript
<p>ai up, look at this silly code. I want to pass either a string or an array and return the data. This code does work, but it sucks. What would you recommend as the best way to remove the duplication and optimizing it as much as possible? thanks :)</p> <pre><code>var getData = function (dataFile) { var ajaxResponse = [], loop, i; if(dataFile instanceof Array) { loop = dataFile.length; for(i = 0; i &lt; loop; i++) { $.ajax({ url: dataFile[i], type: "post", async: false, dataType: "json", success: function (data) { ajaxResponse[i] = data; } }); } } else { $.ajax({ url: dataFile, type: "post", async: false, dataType: "json", success: function (data) { ajaxResponse = data; } }); } return ajaxResponse; } </code></pre> <p>thanks people, I'll have to think about this. I could pass all the params as arrays if i wanted but that would cause me problems elsewhere. Basicaly i need to get the return values in the same way they came in, i.e. a single value or an array. The data being asked for is completely different. I could change it, but ill have to investigate which way is going to be better in the long run.</p>
<p>If i'm understanding the code correctly, this should work:</p> <pre><code>if(!(dataFile instanceof Array)) dataFile = [dataFile]; </code></pre> <p>i.e., if it's not an array, create an array that contains only that one item. Then always do the loop, although in some cases it will have only one iteration.</p> <p><strong>I should add</strong> that you want to look into your use of the <code>i</code> variable in the for loop. You should change the declaration to <code>for(var i...</code>, rather than just <code>for(i...</code>. Introducing a variable without the <code>var</code> keyword <em>will always make that variable global</em>. This means that that loop is very likely to change the value of <code>i</code> in a completely different for loop, in another function, and you'll have absoutely <em>no idea</em> what's going on.</p>
<p>I like the elegance of David Hedlund's solution, and I think using only arrays will make life easier for you in the long run. But if that doesn't suit your fancy, try something like this (and please change my silly function names):</p> <pre><code>var getOneDatum = function (dataFile) { var ajaxResponse; $.ajax({ url: dataFile, type: "post", async: false, dataType: "json", success: function (data) { ajaxResponse = data; } }); return ajaxResponse; } var singleOrArray = function (fn, input) { var output; if (input instanceof Array) { var loop = input.length; output = []; for (i = 0; i &lt; loop; i++) { output[i] = fn(input[i]); } } else { output = fn(input); } return output; } var getData = function (dataFile) { return singleOrArray(getOneDatum, dataFile); } </code></pre> <p>The benefit here is that this singleOrArray function is very general, so you can reuse it any time you want to handle data that may or may not be an array.</p>
<p>Good point, Patonza :)</p> <pre><code>var singleOrArray = function (fn, input) { var output; if (input instanceof Array) { var loop = input.length; output = []; for (i = 0; i &lt; loop; i++) { output[i] = fn(input[i]); } } else { output = fn(input); } return output; } var getData = function (dataFile) { return singleOrArray(function (dataFile) { var ajaxResponse; $.ajax({ url: dataFile, type: "post", async: false, dataType: "json", success: function (data) { ajaxResponse = data; } }); return ajaxResponse; }, dataFile); } </code></pre>
<p>If you have a really large array that you are looping thorough you can use the following loop syntax to make it slightly faster (Be careful though as IMO it makes it much harder read!)</p> <pre><code>for (var i = dataFile.length; i--;) { // Do loop stuff } </code></pre> <p>The reason this is slightly faster is the fact that the condition check and decrement are done in one operation as opposed to two.</p>