How do you access the main obj from obj.foo.bar in javascript?
<p>Objects in javascript throw me for a loop!</p> <p>In this set up...</p> <pre><code>var obj = { someVar: "my awesome variable", foo: { bar: function(){ alert(this.someVar); } } }; </code></pre> <p>How would I get obj.foo.bar to correctly alert the value of <code>someVar</code>?</p>
<p>Using a captured obj:</p> <pre><code>var obj = { someVar: "my awesome variable", foo: { bar: function(){ alert(obj.someVar); } } }; </code></pre>
<pre><code>alert(obj.someVar); </code></pre> <p>There's no clever way to walk up the ancestor chain. Objects don't know where they're contained, if you're looking for some type of <code>this.parent</code> type of notation. There's nothing to say that an object even has a single "parent".</p> <pre><code>foo.foo = new Object(); bar.bar = foo.foo; bar.bar.parent == ??? </code></pre>
<p>A function in Javascript is invoked only in the context of the object which the <code>.</code> operator was applied to. It is not possible to walk up the chain, since Javascript objects are not intrinsically aware of their parent objects.</p> <p>The only way to do this is to have a separate reference to <code>obj</code>. (Either as a property of <code>bar</code> or a separate variable)</p>
<p>Here's a generalized pattern I just cooked up for upwards traversal. Depending on your needs/assumptions, you can probably drop some complexity.</p> <pre><code>var obj = (function (parent) { var obj = { foo: "foo", up: function () { return parent; } }; obj.bar = (function (parent) { var obj = { baz: function () { alert(this.up().foo); }, up: function () { return parent; } }; return obj; }(obj)); return obj; }(window)); obj.bar.baz(); // "foo" </code></pre> <p>It's almost certainly more trouble than it's worth.</p>