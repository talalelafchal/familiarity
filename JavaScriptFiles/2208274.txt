How to add an event listener with a callback function that accepts attributes?
<p>And also, how to remove it then?</p>
<pre><code>// we're in some internal scope here var x = 10; var fn = function( e ) { wrappedFunction( e, x ); } //add o.addEventListener( 'click', fn, false ); // create remover var remover = function() { o.removeEventListener( 'click', fn, false ); } //save the remover for later or return it - when it's called from whatever scope the event is removed remover(); </code></pre>
<p>When you say "attributes", do you mean arguments/parameters?</p> <p>If so, you can dynamically assign an event handler that does accept arguments. In the example below, the argument <code>testValue</code> is passed to the dynamically assigned event handler:</p> <pre><code>&lt;html&gt; &lt;head&gt; &lt;title&gt;Test&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;input id="testInput" type="text"/&gt; &lt;script type="text/javascript"&gt; var testValue = "Success."; document.getElementById("testInput").onkeydown = function() { test(testValue); } function test(testValue) { alert(testValue); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; </code></pre> <p>To remove the event handler, you can assign it to <code>null</code>:</p> <pre><code>document.getElementById("testInput").onkeydown = null; </code></pre>