How to unbind a function from an event among multiple functions?
<p>Say for example, we don't know how many functions already binded to an event. In that case we can bind our own function like below</p> <pre><code>var old = (element.onclick) ? element.onclick : function () {}; element.onclick = function () {old(); myOwn()}; </code></pre> <p>Now how to unbind myOwn function alone without disturbing others?</p>
<p>When attaching multiple events to a DOM element, you should not change the "onfoo" attribute. Rather, use <code>addEventListener("foo")</code> (or <code>attachEvent("foo")</code> in IE). Similarly, you have <code>removeEventListener</code> (<code>detatchEvent</code> in IE) to remove events.</p> <pre><code>var myEventHandler = function (e) { alert("do stuff"); } var myDomElement = document.getElementById("my_id"); myDomElement.addEventListener("click", myEventHandler, true); myDomElement.attachEvent("click", myEventHandler); // IE myDomElement.removeEventListener("click", myEventHandler, true); myDomElement.detachEvent("click", myEventHandler); // IE </code></pre> <p>Replace "onfoo" with "foo". So when you do <code>element.onmouseup</code>, you should instead do <code>element.addEventListener("mouseup", ...)</code>.</p> <p>It is imperative that you use a function reference, since the internal object ID of the function is used for reference, and not it's contents. This will not work:</p> <pre><code>myDomElement.addEventListener("click", function () { alert("foo") }, true) myDomElement.removeEventListener("click", function () { alert("foo") }, true) </code></pre> <p>You can create a simple wrapper for cross browser compatibility.</p> <pre><code>var addEventListener = function (element, event, func) { if (element.addEventListener) { element.addEventListener(event, func, true); } else { element.attachEvent(event, func); } } </code></pre>