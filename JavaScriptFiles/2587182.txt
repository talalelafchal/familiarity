ANDing javascript objects together
<p>I ran across this chunk of code (modified) in our application, and am confused to how it works:</p> <pre><code> function someObject() { this.someProperty = {}; this.foo = { bar: { baz: function() { return "Huh?" } } }; this.getValue = function() { return (this.someProperty &amp;&amp; this.foo.bar &amp;&amp; this.foo.bar.baz &amp;&amp; this.foo.bar.baz()) || null; } } function test() { var o = new someObject(); var val = o.getValue(); alert(val); } </code></pre> <p>when you call the test() function, the text "Huh?" is alerted. I'm not sure how the result of getValue is returning that, I would've thought doing A &amp;&amp; B &amp;&amp; C &amp;&amp; D would have returned true, rather than the value of D.</p>
<p>That happens because the <a href="http://bclary.com/2004/11/07/#a-11.11" rel="nofollow noreferrer">Boolean Operators</a> in JavaScript can return an operand, and not necessarily a <code>Boolean</code> result, e.g.:</p> <p>The Logical AND operator (<code>&amp;&amp;</code>), will return the value of the second operand if the first is <em>truthy</em>:</p> <pre><code>true &amp;&amp; "foo"; // "foo" </code></pre> <p>And it will return the value of the first operand if it is by itself <em>falsy</em>:</p> <pre><code>NaN &amp;&amp; "anything"; // NaN 0 &amp;&amp; "anything"; // 0 </code></pre> <p>That's why in your example <code>"Huh?"</code> is returned, because all the preceding expressions are <em>truthy</em>:</p> <pre><code>alert("A" &amp;&amp; "B" &amp;&amp; "C" &amp;&amp; "Huh?"); // "Huh?" alert(true &amp;&amp; true &amp;&amp; true &amp;&amp; "Huh?"); // "Huh?" </code></pre> <hr> <p>The Logical OR operator (<code>||</code>) has a similar behavior, it will return the value of the second operand, if the first one is <em>falsy</em>:</p> <pre><code>false || "bar"; // "bar" </code></pre> <p>And it will return the value of the first operand if it is by itself non-falsy:</p> <pre><code>"foo" || "anything"; // "foo" </code></pre> <p>This behavior is often used to set <em>default values</em>, for example:</p> <pre><code>function test (arg1) { arg1 = arg1 || "default value"; } </code></pre> <p><strong>Note:</strong> Falsy values are those that coerce to <code>false</code> when used in a boolean context, and they are: <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>0</code>, zero-length string, and of course <code>false</code>. Anything else will coerce to <code>true</code>.</p>
<p>&amp;&amp; and || don't neccesarily produce a boolean value. </p> <p><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Operators/Logical_Operators" rel="nofollow noreferrer">https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Operators/Logical_Operators</a></p>