Initializing singleton javascript objects using the new operator?
<p>In javascript, what is the difference between:</p> <pre><code>var singleton = function(){ ... } </code></pre> <p>and </p> <pre><code>var singleton = new function(){ ... } </code></pre> <p>?</p> <p>Declaring priviliged functions as described by crockford (<a href="http://www.crockford.com/javascript/private.html" rel="nofollow noreferrer">http://www.crockford.com/javascript/private.html</a>) only works using the latter.</p>
<p>I think that a privileged function as described by crockford would look like this:</p> <pre><code>function Test() { this.privileged = function() { alert('apple'); } function anonymous() { alert('hello'); } anonymous(); } t = new Test; // hello t.privileged(); // apple // unlike the anonymous function, the privileged function can be accessed and // modified after its declaration t.privileged = function() { alert('orange'); } t.privileged(); // orange </code></pre>
<p>The difference is mainly that in your second example, you are using the Function Expression as a <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Object/Constructor" rel="nofollow noreferrer">Constructor</a>, the <code>new</code> operator will cause the function to be automatically executed, and the <code>this</code> value inside that function will refer to a newly created object.</p> <p>If you don't return anything (or you don't return a non-primitive value) from that function, the <code>this</code> value will be returned and assigned to your <code>singleton</code> variable.</p> <p>Privileged methods can also be used in your second example, a common pattern is to automatically invoke the function, creating a <a href="http://jibbering.com/faq/faq_notes/closures.html" rel="nofollow noreferrer">closure</a> where the <em>private</em> members are accessible, then you can return an object that contains your <em>public API</em>, e.g.:</p> <pre><code>var singleton = (function () { var privateVar = 1; function privateMethod () {/*...*/} return { // public API publicMethod: function () { // private members are available here } }; })(); </code></pre>