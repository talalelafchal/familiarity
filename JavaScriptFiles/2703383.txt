Is String.concat slower than Array approach to join strings
<p>Strings in JavaScript are immutable. Across the web and <a href="http://stackoverflow.com/questions/51185/are-javascript-strings-immutable-do-i-need-a-string-builder-in-js">here on Stack Overflow as well</a>, I came across the Array approach to concatenate strings:</p> <pre><code>var a = []; a.push(arg1,arg,2....); console.log(a.join('')); </code></pre> <p>I know that this approach is better than the simple</p> <pre><code>console.log(arg1 + arg2 +.....); </code></pre> <p>for reasons of skipping creating intermediate objects but how does it fair better against :</p> <pre><code>arg1.concat(arg2,arg3.....); </code></pre>
<p>For what it may count, I tried the following test:</p> <pre><code>var stringA = 'someStringA'; var stringB = 'someStringB'; var stringC = 'someStringC'; var arr = []; arr.push(stringA); arr.push(stringB); arr.push(stringC); // Testing the concat method i = 0; console.time('10k concat'); while (i &lt; 10000) { stringA.concat(stringB, stringC); i++; } console.timeEnd('10k concat'); // Testing the join method i = 0; console.time('10k join'); while (i &lt; 10000) { arr.join(''); i++; } console.timeEnd('10k join'); </code></pre> <p>Results in <strong>Firefox</strong> 3.6.3 on Mac OS X 10.6.2:</p> <pre><code>10k concat: 20ms 10k join: 15ms 10k concat: 20ms 10k join: 16ms 10k concat: 19ms 10k join: 15ms </code></pre> <p>Results in <strong>Chrome</strong> 5.0 on Mac OS X 10.6.2:</p> <pre><code>10k concat: 22ms 10k join: 14ms 10k concat: 20ms 10k join: 16ms 10k concat: 20ms 10k join: 16ms </code></pre> <hr> <p><strong>UPDATE:</strong></p> <p>If we were to count the array creation in the <code>join('')</code> test, we would see a different story. Testing:</p> <pre><code>var stringA = 'someStringA'; var stringB = 'someStringB'; var stringC = 'someStringC'; // Testing the concat method i = 0; console.time('10k concat'); while (i &lt; 10000) { stringA.concat(stringB, stringC); i++; } console.timeEnd('10k concat'); // Testing the join method i = 0; console.time('10k join'); while (i &lt; 10000) { var arr = []; arr.push(stringA); arr.push(stringB); arr.push(stringC); arr.join(''); i++; } console.timeEnd('10k join'); </code></pre> <p>Results in <strong>Firefox</strong> 3.6.3 on Mac OS X 10.6.2:</p> <pre><code>10k concat: 20ms 10k join: 40ms 10k concat: 21ms 10k join: 40ms 10k concat: 20ms 10k join: 42ms </code></pre> <p>Results in <strong>Chrome</strong> 5.0 on Mac OS X 10.6.2:</p> <pre><code>10k concat: 20ms 10k join: 55ms 10k concat: 22ms 10k join: 60ms 10k concat: 19ms 10k join: 60ms </code></pre>
<p>Your question asserts that using an array .join is faster than plain string concatenation. The short answer is: only in IE is this true.</p> <p>Other browsers have optimized the + operator such that using arrays or other methods is counter-productive.</p>