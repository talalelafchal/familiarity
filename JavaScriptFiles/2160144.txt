Writing properties to a cookie
<p>I was asked to create a function that writes the property of a "type" that is send through a function to a cookie. I have never used javascript enough to understand it and this particular request is really particular I have been looking for an explaination of similar code for over 8 hours.</p> <p>If I have the follow variable declared:</p> <pre><code>var types = { "sugar" : { "color" : "blue", "weight" : 1200, "decoration" : "frosting"}, "chocolate chip" : { "color" : "brown", "weight" : 12, "chocolateType" : "milk"} }; </code></pre> <p>And the following function which returns the weight of the product.</p> <pre><code>CookieBase.prototype.getWeight = function() { return this.weight; }; </code></pre> <p>How would I write to a cookie the properties of any type sent to the function, given it was actually declared. Would I be correct that the <strong>this</strong> in the getweight function is the types variable?</p> <p>Here is the entire code fragment:</p> <pre><code>function CookieBase() {} CookieBase.prototype.getWeight = function() { return this.weight; }; var CookieFactory = function(){ var types = { "sugar" : { "color" : "blue", "weight" : 1200, "decoration" : "frosting"}, "chocolate chip" : { "color" : "brown", "weight" : 12, "chocolateType" : "milk"} }; return {}; }(); </code></pre> <p>I am not looking for the code itself I would really like somebody to explain the concept to me. This is for a screening process for a job, so I want to give them my own code, but I am not familar with this concept.</p> <p>Here is the question and what they want exactly:</p> <blockquote> <p>In CookieFactory implement a public method named bakeCookie that takes a single parameter -- type. This method should create a cookie base instance with properties of the requested cookie type appended to it. If the type cannot be created return null. This code should not be more than about 10 lines long.</p> </blockquote>
<p>To set an arbitrary property on an object, you can use the bracket syntax:</p> <pre><code>thing.setProperty = function (type, val) { this[type] = val; } </code></pre> <p>You can also loop over the property names of an object using <code>for</code>:</p> <pre><code>var msg=''; for (p in thing) { msg += p + ': ' + thing[p] + '\n'; } if (console &amp;&amp; console.log) { console.log(msg); } else { alert(msg); } </code></pre> <p>Combine those and you can copy the properties of one object to another. This gets you most of the way to implementing <a href="http://en.wikipedia.org/wiki/Mixin" rel="nofollow noreferrer">mixins</a>, which sounds like what they're asking for.</p>
<p>By looking at the last comment you made to the answer by <a href="http://stackoverflow.com/questions/2160144/writing-properties-to-a-cookie/2160198#2160198">outis</a>, sounds like you want to implement a <em>CookieFactory</em> object like this:</p> <pre><code>// assuming that the CookieBase constructor is declared var CookieFactory = (function () { var types = { "sugar" : {"color" : "blue", "weight" : 1200, "decoration" : "frosting"}, "chocolate chip" : {"color" : "brown", "weight" : 12, "chocolateType" : "milk"} }; return { // public interface bakeCookie: function(type){ var cookie = new CookieBase(), cookieType = types[type]; if (!cookieType) return null; // no type found, return null for(var prop in cookieType) if (cookieType.hasOwnProperty(prop)) cookie[prop] = cookieType[prop]; return cookie; } }; })(); var myCookie = CookieFactory.bakeCookie('sugar'); // Object color=blue weight=1200 decoration=frosting alert(myCookie.getWeight()); // 1200 </code></pre> <p>As you notice the <code>bakeCookie</code> method will create a <code>CookieBase</code> object, and it will <em>copy</em> the properties of the object argument passed to it.</p> <p>Since the object returned was created with the <code>CookieBase</code> constructor, you can access all the properties declared in the <code>CookieBase.prototype</code> on that returned object.</p>