Is there a method I can overload to handle undefined properties in JavaScript?
<p>I'm looking for a way to handle calls to undefined methods and properties in JavaScript. </p> <p>These would be similar to the PHP magic methods __call, __callStatic, __get.</p> <p>An example of the code using this might be:</p> <pre><code>var myObject = {}; myObject.__call = function (called, args) { alert(called); alert(args); return(true); } myObject.meow("kitty", "miau"); </code></pre> <p>This would result in the first alert dialog displaying "meow" and the second to display "kitty, miau".</p>
<p>There is a magic function in Javascript called __noSuchMethod__. Here's an example:</p> <pre><code>var foo = { __noSuchMethod__ : function(name,params) { alert('invalid function call'); } } foo.bar(); </code></pre> <p><strong>EDIT:</strong> As @jldupont mentioned, this is actually only in Rhino and SpiderMonkey (Mozilla's JS engine); it is not supported in the ECMAScript standard. There are some requests that it be in ECMAScript 4.</p>
<p>I should add for people still looking for a solution, there is this:</p> <pre><code>var myObject = {}; myObject['dynamicMethod'] = new function (parameters) { alert(parameters); }; </code></pre> <p>The only difference here is that you may have to iterate over what you intend on adding. This is pre-generating the methods, instead of simply dynamically handling them.</p>
<p>If you just want something like PHP's features, read the following solution I came up with. I'm assuming that you'll be putting this functionality on your own objects. Well, as long as they're not functions, you can have the following convention for convenience, and it should work on all browsers:</p> <p>instead of myobj.foo or myobj['foo'], just use myobj('foo'), and make your object callable when you define it. But you'll have to avoid the use of "new" because "new" can never return a function in Javascript.</p> <pre><code>var NewFlexible = function() { var custom = {}; return function(prop) { if (!(prop in custom)) custom.prop = null; return custom.prop; }; }; </code></pre> <p>And then you can create objects like so: </p> <pre><code>myObj = NewFlexible(); </code></pre> <p>Using something similar to the Douglas Crockford pattern, you could create "classes" that extend this:</p> <pre><code>var NewDerived = function(options) { var result = {}; NewFlexible.apply(result, arguments); // parent constructor // go on to do what you have to do return result; }; </code></pre> <p>Or, to forget about constructors, you can just make a wrapper around objects:</p> <pre><code>var MakeFlexible = function (obj) { return function(prop) { if ('prop' in obj) return obj.prop; obj.prop = null; return obj.prop; }; } </code></pre> <p>You'll just have to publish this documentation for all users of your code. It's actually good to expose your functionality through this convention because you don't want to freak people out by using nonstandard javascript.</p>
<p>If you are looking specifically for a method, you will have to wait until ES7, because it looks they arent going to include it that way in harmony, anyway, there is a currently working-standard functionality on this, trought the built-in object Proxy, that is added in ES6, i wrote an answer, in <a href="http://stackoverflow.com/questions/2666602/is-there-a-way-to-catch-an-attempt-to-access-a-non-existant-property-or-method/28669059#28669059">this question</a>, that takes the problem in a wider manner. Basically involves wrapping the object into a proxy, an loading a handler</p> <pre><code>get: function(obj, propname) {custom handling} </code></pre> <p>into the proxy trought itÂ´s constructor, to handle, filter or implement <strong>all requests</strong> of properties into it.</p> <p>And it adds even more functionality.... For the complete answer, go into the link. </p>
<p><code>Proxy</code> can do it! Proxy can do EVERYTHING! An answer is given here: <a href="http://stackoverflow.com/questions/1529496/is-there-a-javascript-equivalent-of-pythons-getattr-method">Is there a javascript equivalent of python&#39;s __getattr__ method?</a> . To rephrase in my own words:</p> <pre><code>var myObject = new Proxy({},{get(target,name) { return function() { alert(name) console.log(arguments) // alerts are bleh return true } }}) myObject.meow("kitty", "miau") // alerts "meow", logs ["kitty","miau"] to the console, and returns true </code></pre> <p>Check out the MDN docs: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p> <p>Works in chrome, firefox, and node.js. Downsides: doesn't work in IE - freakin IE. Soon.</p>