Ways to improve performance of this javascript code?
<p>Don't be frightened, its a very basic code. Just wanted to check with you guys if you know any methods to make it faster ? (still learning) It looks so ugly :)</p> <p>Or, if you notice anything which could be made differently... Thanks!</p> <pre><code>function pic_form_function(form, nr, val) { document.getElementById("image_to_delete").value=0; var re = /\..+$/; var extension = val.match(re); if (extension==".jpg" || extension==".jpeg" || extension==".gif" || extension==".png" || extension==".bmp") { if (nr==1){ var ID_file1 = document.getElementById("pic_id_nr1").value; window.parent.document.getElementById("pic1_filename").value=ID_file1+extension; window.parent.document.getElementById("annonsera_nr_pics").value=1; window.parent.document.getElementById("iframe_upload_pic").style.height="180px"; document.getElementById("pic_target").style.height="160px"; document.getElementById("pic_target").style.display="block"; document.getElementById("remove_pic").value=0; document.getElementById("extra_pic_checkbox").style.display="inline"; document.getElementById("extra_pic_fnt").style.display="inline"; } else if (nr==2){ var ID_file2 = document.getElementById("pic_id_nr2").value; window.parent.document.getElementById("pic2_filename").value=ID_file2+extension; //Passing fileInputName to parent window... window.parent.document.getElementById("annonsera_nr_pics").value=2; document.getElementById("extrapic").value=2; document.getElementById("pic_file3").disabled=false; } else if (nr==3){ var ID_file3 = document.getElementById("pic_id_nr3").value; window.parent.document.getElementById("annonsera_nr_pics").value=3; window.parent.document.getElementById("pic3_filename").value=ID_file3+extension; document.getElementById("extrapic").value=3; document.getElementById("pic_file4").disabled=false; } else if (nr==4){ var ID_file4 = document.getElementById("pic_id_nr4").value; window.parent.document.getElementById("annonsera_nr_pics").value=4; window.parent.document.getElementById("pic4_filename").value=ID_file4+extension; document.getElementById("extrapic").value=4; document.getElementById("pic_file5").disabled=false; } else if (nr==5){ var ID_file5 = document.getElementById("pic_id_nr5").value; window.parent.document.getElementById("annonsera_nr_pics").value=5; window.parent.document.getElementById("pic5_filename").value=ID_file5+extension; document.getElementById("extrapic").value=5; } } if (extension!=".jpg" &amp;&amp; extension!=".jpeg" &amp;&amp; extension!=".gif" &amp;&amp; extension!=".png" &amp;&amp; extension!=".bmp") { window.parent.document.getElementById("annonsera_imagenotvalid_error").style.display="block"; } else { window.parent.document.getElementById("annonsera_imagenotvalid_error").style.display="none"; form.submit(); } } </code></pre>
<p>If me, I will define following on the top.</p> <pre><code>$=function(x){return document.getElementById(x);} </code></pre> <p>will replace all the <code>document.getElementById</code> to <code>$</code> first.</p> <p>or better user <a href="http://jquery.com" rel="nofollow noreferrer">jQuery</a>.</p>
<p>There isn't any special computation being done beside traversing elements and assigning their attributes some values. So the code is not performing much to try to improve its performance.</p> <p>On the other hand, you should use a library like jQuery for the kind of work you are doing. You might be able to cut short many traversals because you can have jQuery reuse the object it found and continue further from this point to look for other objects... </p>
<p><strong>About performance:</strong></p> <p>To extract the file extension you can use the <code>String.substring</code> method instead of a <code>RegExp</code>, the <em>performance improvement</em> would be <strong>negligible</strong> but I think it gains readability:</p> <pre><code>var extension = val.substring(val.lastIndexOf('.')); </code></pre> <p><strong>About the code:</strong></p> <ol> <li><p>You could have only one <code>ID_file</code> variable declared at the top of your function, and use it in the <code>if</code> blocks.</p></li> <li><p>The <code>else if</code> blocks where <code>nr==2</code>, <code>3</code>, and <code>4</code> are really similar, and you could do the same for those three cases:</p></li> </ol> <p></p> <pre><code>//.. else if (nr &gt;= 2 &amp;&amp; nr &lt;= 4){ ID_file = document.getElementById("pic_id_nr"+nr).value; // point #1 assumed window.parent.document.getElementById("pic"+nr+"_filename").value=ID_file+extension; window.parent.document.getElementById("annonsera_nr_pics").value = nr; document.getElementById("extrapic").value = nr; document.getElementById("pic_file"+(+nr+1)).disabled=false; } </code></pre> <p><strong>About readability:</strong></p> <p>You could define shorthands to common and verbose function calls at the beginning as <a href="http://stackoverflow.com/questions/1807021/ways-to-improve-performance-of-this-javascript-code/1807067#1807067">S.Mark</a> also suggests:</p> <pre><code>var el = document.getElementById, parentEl = window.parent.document.getElementById; </code></pre>
<ul> <li>Continuing what CMS did with code repetition, you can refactor the common code outside the sequence of <code>else if</code> blocks. </li> <li>The <code>switch</code> statement was made to replace a sequence of <code>if</code>s.</li> <li>Instead of the above two suggestions, you could define functions do to the same tasks for a more readable implementation.</li> <li>If you continue to use regexps (I personally find them very readable), remember that <code>match</code> returns an array.</li> <li>Also, the <code>.+</code> will greedily match all characters after the first period. Better to only match non-periods with <code>[^.]+</code>.</li> <li><p>Instead of the long sequence of string comparisons, you can use objects as associative arrays:</p> <pre><code>var imageExtensions = {'.jpg': 1, '.jpeg': 1, '.gif': 1, '.png': 1, '.bmp': 1}; if (imageExtensions[extension]) { </code></pre></li> <li><p>The last <code>if ... else ...</code> is unnecessary, considering that the condition checks for the negation of the condition in the first <code>if</code>. Just move the <code>else</code> block to the end of the first <code>if</code> and turn the last <code>if (...)</code> to an <code>else</code>.</p></li> <li>Personally, I find short error handling code more readable when placed next to the <code>if</code> statement that detected the error, rather than after a long block handling the non-error case. After the previous refactor, let's swap the <code>if</code> block with the <code>else</code> block and negate the conditional.</li> </ul> <p>Taking all the above together, we get:</p> <pre><code>function pic_form_function(form, nr, val) { document.getElementById("image_to_delete").value=0; var extension = val.match(/\.[^.]+$/); if (extension) { extension = extension[0]; } var imageExtensions = {'.jpg': 1, '.jpeg': 1, '.gif': 1, '.png': 1, '.bmp': 1}; if (! imageExtensions[extension]) { window.parent.document.getElementById("annonsera_imagenotvalid_error").style.display="block"; } else { var ID_file = document.getElementById("pic_id_nr" + nr).value; window.parent.document.getElementById("pic"+nr+"_filename").value=ID_file+extension; window.parent.document.getElementById("annonsera_nr_pics").value=nr; switch (nr) { case 1: window.parent.document.getElementById("iframe_upload_pic").style.height="180px"; document.getElementById("pic_target").style.height="160px"; document.getElementById("pic_target").style.display="block"; document.getElementById("remove_pic").value=0; document.getElementById("extra_pic_checkbox").style.display="inline"; document.getElementById("extra_pic_fnt").style.display="inline"; break; case 2: // FALLTHRU case 3: // FALLTHRU case 4: document.getElementById("pic_file"+nr).disabled=false; // FALLTHRU case 5: document.getElementById("extrapic").value=nr; break; } window.parent.document.getElementById("annonsera_imagenotvalid_error").style.display="none"; form.submit(); } } </code></pre> <p>which is shorter, but could be more readable.</p> <p>Note that if the <code>$</code> wrapper is defined in 'window.parent', you should be able to call it as <code>window.parent.$</code> in the child:</p> <pre><code>window.parent.$("annonsera_imagenotvalid_error").style.display="none"; </code></pre>
<p>You should cache your dom lookups e.g.</p> <pre><code>var pic_target = document.getElementById("pic_target"); </code></pre> <p>You can then use this variable to to apply the style and it only does the dom lookup once. I think this is a key thing to speeding up the js</p>