JavaScript: Asynchronously loaded scripts, are those evaluated &quot;in parallel&quot; (Race conditions)?
<p>given I asynchronously(!!) load several JavaScript files with an asynchronous script loader (that writes a script tag into the document's head that then will download the file), are these scripts evaluated in parallel?</p> <pre><code>&lt;script&gt; var script = document.createElement('script'); script.src = "library1.js"; document.getElementsByTagName('head')[0].appendChild(script); &lt;/script&gt; &lt;!-- Other Markup --&gt; &lt;script&gt; var script = document.createElement('script'); script.src = "library2.js"; document.getElementsByTagName('head')[0].appendChild(script); &lt;/script&gt; &lt;!-- Other Markup --&gt; &lt;script&gt; var script = document.createElement('script'); script.src = "library3.js"; document.getElementsByTagName('head')[0].appendChild(script); &lt;/script&gt; </code></pre> <p>"Normally", when having a standard script tag in the HTML document (body and head!?) the browser will stop/complete all other activites (downloading/page rendering) and only process the single script tag that it encountered. This leads to a "serialized" execution that does not lead to any "race conditions". </p> <p>But by using the asynchronous loader technique, will the inserted script tag (in the head) also lead (in the end) to a serialized rendering (that when downloaded) only "the current" script will be evaluated or is there the chance that other asynchronously loaded script files will be evaluated in parallel and therefor are prone to race conditions?</p> <p>Thank you very much!! Tim </p>
<p>Although scripts will be downloaded in parallel, the order in which they are <em>executed</em> is not deterministic. <strong>IE will execute them in the order they finish downloading in, whereas Firefox executes them in the order they are attached in the DOM.</strong></p> <p>This is a problem. For example, say script A and script B are added using that technique. Now imagine script A is jQuery, and script B does this:</p> <pre><code>$(document).ready(function(){...}) </code></pre> <p>In IE you're screwed if for whatever reason (eg, network traffic, cache miss) script B finishes downloading before script A, because it will be executed before jQuery has been loaded.</p> <p>See <a href="http://blogs.msdn.com/kristoffer/archive/2006/12/22/loading-javascript-files-in-parallel.aspx" rel="nofollow noreferrer">this article</a> for a better explanation.</p> <p>As for a solution, you can instead <a href="http://developer.yahoo.com/performance/rules.html#js%5Fbottom" rel="nofollow noreferrer">place the <code>&lt;script&gt;</code> elements as far down the page as possible</a> (eg before the closing <code>&lt;/body&gt;</code> element. Although this does not guarantee parallel downloads, it does help alleviate the "blocking" problem your solution is addressing.</p>
<p>As <a href="http://stackoverflow.com/questions/161783/is-javascript-single-threaded-if-not-how-do-i-get-synchronized-access-to-shared">this StackOverflow question</a> says, Javascript is executed by a single thread. Therefore, it's not possible for your scripts to be executed in parallel. As Crescent Fresh's answer notes, you can't rely on the <strong>order</strong> in which they're executed, but you can rely on one executing completely before the next one starts, <strong>as long as nothing in the script does a setTimeout or anything else asynchronous.</strong></p>