javascript add prototype method to all functions?
<p>Is there a way to add a method to all javascript functions without using the prototype library?</p> <p>something along the lines of :</p> <pre><code>Function.prototype.methodName = function(){ return dowhateverto(this) }; </code></pre> <p>this is what i tried so far but it didnt work. Perhaps it is a bad idea also if so could you please tell me why?</p> <p>if so can I add it to a set of functions i choose </p> <p>something like :</p> <pre><code>MyFunctions.prototype.methodName = function(){ return dowhateverto(this) }; </code></pre> <p>where MyFunctions is an array of function names</p> <p>thank you</p>
<pre><code>function one(){ alert(1); } function two(){ alert(2); } var myFunctionNames = ["one", "two"]; for(var i=0; i&lt;myFunctionNames.length; i++) { // reference the window object, // since the functions 'one' and 'two are in global scope Function.prototype[myFunctionNames[i]] = window[myFunctionNames[i]]; } function foo(){} foo.two(); // will alert 2 </code></pre>
<p>Sure. Functions are objects:</p> <pre><code>var foo = function() {}; Function.prototype.bar = function() { alert("bar"); }; foo.bar(); </code></pre> <p>Will alert "bar"</p>
<p>Changing JS built-in objects can give you some surprises.<br /> If you add external libraries or changing the version of one of them, you are never sure that they won't overwrite your extension.</p>
<p>Try Object.prototype instead:</p> <pre><code>Object.prototype.methodName = function(){ return dowhateverto(this) }; </code></pre> <p>But also heed the warning that extending native objects is not always a good idea.</p> <p>Function.prototype can't really be manipulated reliably in Javascript; it isn't a real object, because Function() constructor needs to return a function, not an object. But, you can't treat it like a normal function either. Its behaviour when you try to access its 'properties' may be undefined and vary between browsers. See also <a href="http://stackoverflow.com/questions/383172/javascript-correct-prototype-chain-for-function">this question</a>.</p>