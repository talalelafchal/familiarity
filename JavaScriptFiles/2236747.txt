Use of the JavaScript 'bind' method
<p>What is the use of <code>bind()</code> in JavaScript?</p>
<p>Bind creates a new function that will have <code>this</code> set to the first parameter passed to <code>bind()</code>.</p> <p>Here's an example that shows how to use <code>bind</code> to pass a member method around that has the correct <code>this</code>:</p> <pre><code>var Button = function(content) { this.content = content; }; Button.prototype.click = function() { console.log(this.content + ' clicked'); } var myButton = new Button('OK'); myButton.click(); var looseClick = myButton.click; looseClick(); // not bound, 'this' is not myButton - it is the global object var boundClick = myButton.click.bind(myButton); boundClick(); // bound, 'this' is myButton </code></pre> <p>Which prints out:</p> <pre><code>OK clicked undefined clicked OK clicked </code></pre> <p>You can also add extra parameters after the 1st (<code>this</code>) parameter and <code>bind</code> will pass in those values to the original function. Any additional parameters you later pass to the bound function will be passed in after the bound parameters:</p> <pre><code>// Example showing binding some parameters var sum = function(a, b) { return a + b; }; var add5 = sum.bind(null, 5); console.log(add5(10)); </code></pre> <p>Which prints out:</p> <pre><code>15 </code></pre> <p>Check out <a href="http://www.javascripture.com/Function#bind" rel="nofollow noreferrer">JavaScript Function bind</a> for more info and interactive examples.</p>
<p>The bind function creates a new function with the same function body as the function it is calling .It is called with the this argument .why we use bind fun. : when every time a new instance is created and we have to use first initial instance then we use bind fun.We can't override the bind fun.simply it stores the initial object of the class.</p> <p>setInterval(this.animate_to.bind(this), 1000/this.difference);</p>
<p><a href="http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/">bind</a> allows-</p> <ul> <li>set the value of "this" to an specific object. This becomes very helpful as sometimes <a href="http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/">this</a> is not what is intended.</li> <li>reuse methods</li> <li>curry a function</li> </ul> <p>For example, you have a function to deduct monthly club fees</p> <pre><code>function getMontlhlyFee(fee){ var remaining = this.total - fee; this.total = remaining; return this.name +' remaining balance:'+remaining; } </code></pre> <p>Now you want to reuse this function for a different club member. Note that the monthly fee will vary from member to member. </p> <p>Let's imagine Rachel has a balance of 500, and a monthly membership fee of 90.</p> <pre><code>var rachel = {name:'Rachel Green', total:500}; </code></pre> <p>Now, create a function that can be used again and again to deduct the fee from her account every month</p> <pre><code>//bind var getRachelFee = getMontlhlyFee.bind(rachel, 90); //deduct getRachelFee();//Rachel Green remaining balance:410 getRachelFee();//Rachel Green remaining balance:320 </code></pre> <p>Now, the same getMonthlyFee function could be used for another member with a different membership fee. For Example, Ross Geller has a 250 balance and a monthly fee of 25</p> <pre><code>var ross = {name:'Ross Geller', total:250}; //bind var getRossFee = getMontlhlyFee.bind(ross, 25); //deduct getRossFee(); //Ross Geller remaining balance:225 getRossFee(); //Ross Geller remaining balance:200 </code></pre>
<p>The simplest use of <strong><em>bind()</em></strong> is to make a function that, no matter how it is called, is called with a particular this value.</p> <pre><code>x = 9; var module = { x: 81, getX: function () { return this.x; } }; module.getX(); // 81 var getX = module.getX; getX(); // 9, because in this case, "this" refers to the global object // create a new function with 'this' bound to module var boundGetX = getX.bind(module); boundGetX(); // 81 </code></pre> <p>Please refer this link for more information </p> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</a></p>
<p>As mentioned, <code>Function.bind()</code> lets you specify the context that the function will execute in (that is, it lets you pass in what object the <code>this</code> keyword will resolve to in the body of the function.</p> <p>A couple of analogous toolkit API methods that perform a similar service:</p> <p><a href="http://api.jquery.com/jquery.proxy/" rel="nofollow">jQuery.proxy()</a></p> <p><a href="https://dojotoolkit.org/reference-guide/1.9/dojo/_base/lang.html#dojo-base-lang-hitch" rel="nofollow">Dojo.hitch()</a></p>
<p>I will explain bind theoretically as well as practically</p> <p>bind in javascript is a method -- Function.prototype.bind . bind is a method. It is called on function prototype. This method creates a function whose body is similar to the function on which it is called but the 'this' refers to the first parameter passed to the bind method. Its syntax is</p> <pre><code> var bindedFunc = Func.bind(thisObj,optionsArg1,optionalArg2,optionalArg3,...); </code></pre> <p>Example:--</p> <pre><code> var checkRange = function(value){ if(typeof value !== "number"){ return false; } else { return value &gt;= this.minimum &amp;&amp; value &lt;= this.maximum; } } var range = {minimum:10,maximum:20}; var boundedFunc = checkRange.bind(range); //bounded Function. this refers to range var result = boundedFunc(15); //passing value console.log(result) // will give true; </code></pre>
<pre><code>/** * Bind is a method inherited from Function.prototype same like call and apply * It basically helps to bind a function to an object's context during initialisation * * */ window.myname = "Jineesh"; var foo = function(){ return this.myname; }; //IE &lt; 8 has issues with this, supported in ecmascript 5 var obj = { myname : "John", fn:foo.bind(window)// binds to window object }; console.log( obj.fn() ); // Returns Jineesh </code></pre>
<p>From <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"><strong>the MDN docs</strong></a> on <code>Function.prototype.bind()</code> :</p> <blockquote> <p>The <strong>bind()</strong> method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</p> </blockquote> <p>So, what does that mean?!</p> <p>Well, let's take a function that looks like this :</p> <pre><code>var logProp = function(prop) { console.log(this[prop]); }; </code></pre> <p>Now, let's take an object that looks like this :</p> <pre><code>var Obj = { x : 5, y : 10 }; </code></pre> <p>We can bind our function to our object like this :</p> <pre><code>Obj.log = logProp.bind(Obj); </code></pre> <p>Now, we can run <code>Obj.log</code> anywhere in our code :</p> <pre><code>Obj.log('x'); // Output : 5 Obj.log('y'); // Output : 10 </code></pre> <p>This works, because we bound the value of <code>this</code> to our object <code>Obj</code>. </p> <hr> <p>Where it really gets interesting, is when you not only bind a value for <code>this</code>, but also for its argument <code>prop</code> :</p> <pre><code>Obj.logX = logProp.bind(Obj, 'x'); Obj.logY = logProp.bind(Obj, 'y'); </code></pre> <p>We can now do this :</p> <pre><code>Obj.logX(); // Output : 5 Obj.logY(); // Output : 10 </code></pre> <p>Unlike with <code>Obj.log</code>, we do not have to pass <code>x</code> or <code>y</code>, because we passed those values when we did our binding.</p>