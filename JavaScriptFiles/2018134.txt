Questions about capability of Javascript
<p>Many years back, I was told that Javascript was harmful, and I remember being annoyed with endless popup when I right-clicked an image to download it.</p> <p>Now it seems suddenly that Javascript is great, and you can do a lot of things with it to let users have native-like web application experience.</p> <p>I admit I have missed 6-7 years of Javascript literature, so I hope to start anew with SO kickstarting me to understand the following:</p> <ol> <li>Is Javascript mainly concerned about user interface i.e. smoothen interaction between application and users and not about logic processing, number crunching or form processing etc.?</li> <li>Can Javascript write to local hard drive (besides cookies)?</li> <li>Can Javascript web application run with Javascript capabilities in browsers turned off? (I would think outright no, but an article on Adaptive Path said 'maybe')</li> <li>Is AJAX illegal to use due to Eolas patent claim? Is it worth it spending effort learning it when the future is not secure? (I know AJAX is not Javascript)</li> </ol> <p>Thanks. Hoping for enlightenment.</p>
<ol> <li><p>It's <em>mainly</em> for UI, but it can be used to save server-time on some operations (for example, <a href="http://mathoverflow.net/">Mathoverflow</a> uses it to render LaTeX) and it's becoming popular to do so. But when you do this, you need to be respectful of the end-users time, because JavaScript <em>can</em> hold up some browsers, while it runs. But in general, it's a good and interesting idea.</p></li> <li><p>Not without permission</p></li> <li><p>If it's written correctly, it can. It's called "Graceful degredation" (some other variant terms exist, but the idea is the same). The basic idea is that you have it such that the JavaScript fails 'gracefully', and links that would normally get handled via JavaScript (i.e. to do some inline next-paging) will navigate to a 'backup' page that shows the relevant content.</p></li> <li><p>I don't know about that, but AJAX can be implemented in different ways, XMLHTTPRequest is just one of them :) (And the most common, and suitable). Generally you like a library do this for you anyway (jQuery, or otherwise) but you can do it yourself for fun.</p></li> </ol>
<ol> <li>Yes. JavaSscript is usually used to enhance the user's experience and make the site easier to use. It is also possible to delegate validation tasks and the like to JavaScript, however (though this should never absolve the server of its responsibility to check input).</li> <li>No.</li> <li>That depends on how the application is written. If it's done properly, then the JavaScript will merely enhance the interface, and the application will still work without it; this is called progressive enhancement.</li> <li>Not at all. AJAX is used extensively on this very site!</li> </ol> <p>One reason for the resurgence of popularity for JavaScript lately is the emergence of several frameworks. These make the process of writing JavaScript much, much easier, allowing tasks that would previously have been horribly complex to be implemented with minimal time and effort. The most popular of these is <a href="http://jquery.com/" rel="nofollow noreferrer">jQuery</a>, which is a good place to start if you're intending to get in on the action.</p> <p>Overall, JavaScript is a very powerful tool that allows you to create very rich interfaces. Well worth learning.</p>
<ol> <li>Yes, Javascript is all about client side processing, but also about AJAX where it calls back to the server asynchronously so that users do not see pages reloading.</li> <li>No</li> <li>No, but there are ways to gracefully degrade the experience for non javascript users. It requires carefult planning however.</li> <li>No, that lawsuit was just about the browser technology that enables it. As a developer you dont have to worry about that.</li> </ol>
<ol> <li>Yes, in my experience JavaScript is generally used to create a streamlined interface and relays information from the client to a server application for processing.</li> <li>Yes, if the browser is configured to allow this (most aren't by default since this can be <em>very</em> dangerous).</li> <li>No, JavaScript will not run if the browser is configured to have JavaScript disabled.</li> <li>I wouldn't forgo learning JavaScript for this reason - as for the legality of the whole thing I wouldn't feel comfortable advising you about this. Still I think JavaScript is worth learning in spite of this situation.</li> </ol>
<p>Partial answers:</p> <p>I think all the security vulnerabilities associated with javascript have been fixed? IIRC the problems weren't with javascript, they were with particular browser's implementation of javascript.</p> <p>I wouldn't worry about any patent claims on the AJAX technology. Patent sueing and counter-sueing is common place in the software world and invariably ends up with the affected parties licencing each other's technology. AJAX is not going anywhere :)</p>
<blockquote> <p>Can Javascript write to local hard drive (besides cookies)?</p> </blockquote> <p>Not really. However, as HTML5 support becomes more widespread you'll be able to use things like <a href="http://www.w3.org/TR/2009/WD-webstorage-20091222/" rel="nofollow noreferrer">Web Storage</a> and <a href="http://dev.w3.org/cvsweb/~checkout~/html5/webdatabase/Overview.html?rev=1.51&amp;content-type=text/html;%20charset=iso-8859-1" rel="nofollow noreferrer">Web SQL</a>. You won't be able to write arbitrary files on the user's hard drive, but using those two technologies you'll be able to persistently store and access data.</p> <blockquote> <p>Can Javascript web application run with Javascript capabilities in browsers turned off? (I would think outright no, but an article on Adaptive Path said 'maybe')</p> </blockquote> <p>It really depends on how you define "web application." You can write web apps without using Javascript for anything but UI candy, in which case you can degrade gracefully without without it. However, it's also possible to write web apps that rely heavily (entirely, even) on Javascript, which will utterly fail without it.</p> <blockquote> <p>Is AJAX illegal to use due to Eolas patent claim? Is it worth it spending effort learning it when the future is not secure?</p> </blockquote> <p>I'm not a lawyer, but I'd agree with the other answers -- you shouldn't worry about it. I'm certainly still writing AJAX stuff :)</p> <blockquote> <p>Is Javascript mainly concerned about user interface i.e. smoothen interaction between application and users and not about logic processing, number crunching or form processing etc.?</p> </blockquote> <p>It's about both. And more than that.</p> <p>Javascript has really come into its own in the past few years. Browsers have gotten a <em>lot</em> faster at executing it quickly, and people have been figuring out new ways to use the language itself to its full potential. You can really start using Javascript like a full-out application programming language, and not just to write little scripts that animate something or validate input.</p> <p>If you're just getting back into the language and haven't read Crockford yet, I would highly recommend it. It's a great starting point to realizing the full potential of Javascript.</p> <p><strong>Edit:</strong> Some good Crockford Links</p> <p><a href="http://javascript.crockford.com/javascript.html" rel="nofollow noreferrer">Javascript: The World's Most Misunderstood Programming Language</a></p> <p><a href="http://googlecode.blogspot.com/2009/03/doug-crockford-javascript-good-parts.html" rel="nofollow noreferrer">Javascript: The Good Parts</a> (This is a presentation. Crockford also wrote a book by the same name that I haven't read myself, but I hear it's quite excellent.)</p>
<p>The Eolas patent covers the embedding of objects in a HTML document (see US patent 5,838,906 titled "Distributed hypermedia method for automatically invoking external application providing interaction and display of embedded objects within a hypermedia document") ... this scope would not seem to include AJAX as a suite of technologies (being essentially scripting in a document to load content elements).</p>