Javascript function to add X months to a date
<p>I'm looking for the easiest, cleanest way to add X month to a Javascript date.</p> <p>I'd rather not <a href="http://www.codeguru.com/forum/showthread.php?t=458137" rel="nofollow noreferrer">handle the rolling over of the year</a> or have to <a href="http://www.vbknowledgebase.com/?Id=80&amp;Desc=Javascript-Date-functions-for-VB-DateDiff-DateAdd" rel="nofollow noreferrer">write my own function</a>.</p> <p>Is there something built in that can do this?</p>
<p>I think this should do it:</p> <pre><code>var x = 12; //or whatever offset var CurrentDate = new Date(); CurrentDate.setMonth(CurrentDate.getMonth() + x); </code></pre> <p>I believe it should automatically handle incrementing to the appropriate year and mod-ing to the appropriate month.</p> <p>try it</p>
<pre><code>d = new Date(); alert(d.getMonth()+1); </code></pre> <p>Months have a 0-based index, it should alert(4) which is 5 (may);</p>
<p>The following is an example of how to calculate a future date based on date input (membershipssignup_date) + added months (membershipsmonths) via form fields.</p> <p>The membershipsmonths field has a default value of 0</p> <p>Trigger link (can be an onchange event attached to membership term field):</p> <pre><code>&lt;a href="#" onclick="calculateMshipExp()"; return false;"&gt;Calculate Expiry Date&lt;/a&gt; function calculateMshipExp() { var calcval = null; var start_date = document.getElementById("membershipssignup_date").value; var term = document.getElementById("membershipsmonths").value; // Is text value var set_start = start_date.split('/'); var day = set_start[0]; var month = (set_start[1] - 1); // January is 0 so August (8th month) is 7 var year = set_start[2]; var datetime = new Date(year, month, day); var newmonth = (month + parseInt(term)); // Must convert term to integer var newdate = datetime.setMonth(newmonth); newdate = new Date(newdate); //alert(newdate); day = newdate.getDate(); month = newdate.getMonth() + 1; year = newdate.getFullYear(); // This is British date format. See below for US. calcval = (((day &lt;= 9) ? "0" + day : day) + "/" + ((month &lt;= 9) ? "0" + month : month) + "/" + year); // mm/dd/yyyy calcval = (((month &lt;= 9) ? "0" + month : month) + "/" + ((day &lt;= 9) ? "0" + day : day) + "/" + year); // Displays the new date in a &lt;span id="memexp"&gt;[Date]&lt;/span&gt; // Note: Must contain a value to replace eg. [Date] document.getElementById("memexp").firstChild.data = calcval; // Stores the new date in a &lt;input type="hidden" id="membershipsexpiry_date" value="" name="membershipsexpiry_date"&gt; for submission to database table document.getElementById("membershipsexpiry_date").value = calcval; } </code></pre>
<pre><code>var a=new Date(); a.setDate(a.getDate()+5); </code></pre> <p>As above stated method, you can add month to <code>Date</code> function.</p>
<pre><code>addDateMonate : function( pDatum, pAnzahlMonate ) { if ( pDatum === undefined ) { return undefined; } if ( pAnzahlMonate === undefined ) { return pDatum; } var vv = new Date(); var jahr = pDatum.getFullYear(); var monat = pDatum.getMonth() + 1; var tag = pDatum.getDate(); var add_monate_total = Math.abs( Number( pAnzahlMonate ) ); var add_jahre = Number( Math.floor( add_monate_total / 12.0 ) ); var add_monate_rest = Number( add_monate_total - ( add_jahre * 12.0 ) ); if ( Number( pAnzahlMonate ) &gt; 0 ) { jahr += add_jahre; monat += add_monate_rest; if ( monat &gt; 12 ) { jahr += 1; monat -= 12; } } else if ( Number( pAnzahlMonate ) &lt; 0 ) { jahr -= add_jahre; monat -= add_monate_rest; if ( monat &lt;= 0 ) { jahr = jahr - 1; monat = 12 + monat; } } if ( ( Number( monat ) === 2 ) &amp;&amp; ( Number( tag ) === 29 ) ) { if ( ( ( Number( jahr ) % 400 ) === 0 ) || ( ( Number( jahr ) % 100 ) &gt; 0 ) &amp;&amp; ( ( Number( jahr ) % 4 ) === 0 ) ) { tag = 29; } else { tag = 28; } } return new Date( jahr, monat - 1, tag ); } testAddMonate : function( pDatum , pAnzahlMonate ) { var datum_js = fkDatum.getDateAusTTMMJJJJ( pDatum ); var ergebnis = fkDatum.addDateMonate( datum_js, pAnzahlMonate ); app.log( "addDateMonate( \"" + pDatum + "\", " + pAnzahlMonate + " ) = \"" + fkDatum.getStringAusDate( ergebnis ) + "\"" ); }, test1 : function() { app.testAddMonate( "15.06.2010", 10 ); app.testAddMonate( "15.06.2010", -10 ); app.testAddMonate( "15.06.2010", 37 ); app.testAddMonate( "15.06.2010", -37 ); app.testAddMonate( "15.06.2010", 1234 ); app.testAddMonate( "15.06.2010", -1234 ); app.testAddMonate( "15.06.2010", 5620 ); app.testAddMonate( "15.06.2010", -5120 ); } </code></pre>
<p>Just to add on to the accepted answer and the comments.</p> <pre><code>var x = 12; //or whatever offset var CurrentDate = new Date(); //For the very rare cases like the end of a month //eg. May 30th - 3 months will give you March instead of February var date = CurrentDate.getDate(); CurrentDate.setDate(1); CurrentDate.setMonth(CurrentDate.getMonth()+X); CurrentDate.setDate(date); </code></pre>
<p>As demonstrated by many of the complicated, ugly answers presented, Dates and Times can be a nightmare for programmers using any language. My approach is to convert dates and 'delta t' values into Epoch Time (in ms), perform any arithmetic, then convert back to "human time."</p> <pre><code>// Given a number of days, return a Date object // that many days in the future. function getFutureDate( days ) { // Convert 'days' to milliseconds var millies = 1000 * 60 * 60 * 24 * days; // Get the current date/time var todaysDate = new Date(); // Get 'todaysDate' as Epoch Time, then add 'days' number of mSecs to it var futureMillies = todaysDate.getTime() + millies; // Use the Epoch time of the targeted future date to create // a new Date object, and then return it. return new Date( futureMillies ); } // Use case: get a Date that's 60 days from now. var twoMonthsOut = getFutureDate( 60 ); </code></pre> <p>This was written for a slightly different use case, but you should be able to easily adapt it for related tasks.</p> <p>EDIT: Full source <a href="https://github.com/dan-ahlquist/Date/blob/master/promo-date.js" rel="nofollow">here</a>!</p>
<p>Sometimes useful create date by one operator like in BIRT parameters</p> <p>I made 1 month back with:</p> <pre><code>new Date(new Date().setMonth(new Date().getMonth()-1)); </code></pre>
<p>As most of the answers highlighted, we could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth" rel="nofollow">setMonth()</a> method together with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth" rel="nofollow">getMonth()</a> method to add specific number of months to a given date.</p> <p>Example: (as mentioned by @ChadD in his answer. ) </p> <blockquote> <pre><code>var x = 12; //or whatever offset var CurrentDate = new Date(); CurrentDate.setMonth(CurrentDate.getMonth() + x); </code></pre> </blockquote> <p>But we should carefully use this solution as we will get trouble with edge cases. </p> <p>To handle edge cases, answer which is given in following link is helpful. <br/><br/> <a href="http://stackoverflow.com/a/13633692/3668866">http://stackoverflow.com/a/13633692/3668866</a></p>
<p>All these seem way too complicated and I guess it gets into a debate about what exactly adding "a month" means. Does it mean 30 days? Does it mean from the 1st to the 1st? From the last day to the last day?</p> <p>If the latter, then adding a month to Feb 27th gets you to March 27th, but adding a month to Feb 28th gets you to March 31st (except in leap years, where it gets you to March 28th). Then subtracting a month from March 30th gets you... Feb 27th? Who knows...</p> <p>For those looking for a simple solution, just add milliseconds and be done.</p> <pre><code>function getDatePlusDays(dt, days) { return new Date(dt.getTime() + (days * 86400000)); } </code></pre> <p>or</p> <pre><code>Date.prototype.addDays = function(days) { this = new Date(this.getTime() + (days * 86400000)); }; </code></pre>
<p>I'm using <a href="http://momentjs.com/">moment.js</a> library for <a href="http://momentjs.com/docs/#/manipulating/">date-time manipulations</a>. Sample code to add one month:</p> <pre><code>var startDate = new Date(...); var endDateMoment = moment(startDate); // moment(...) can also be used to parse dates in string format endDateMoment.add(1, 'months'); </code></pre>
<p>From the answers above, the only one that handles the edge cases (bmpasini's from datejs library) has an issue:</p> <pre><code>var date = new Date("03/31/2015"); var newDate = date.addMonths(1); console.log(newDate); // VM223:4 Thu Apr 30 2015 00:00:00 GMT+0200 (CEST) </code></pre> <p>ok, but:</p> <pre><code>newDate.toISOString() //"2015-04-29T22:00:00.000Z" </code></pre> <p>worse :</p> <pre><code>var date = new Date("01/01/2015"); var newDate = date.addMonths(3); console.log(newDate); //VM208:4 Wed Apr 01 2015 00:00:00 GMT+0200 (CEST) newDate.toISOString() //"2015-03-31T22:00:00.000Z" </code></pre> <p>This is due to the time not being set, thus reverting to 00:00:00, which then can glitch to previous day due to timezone or time-saving changes or whatever...</p> <p>Here's my proposed solution, which does not have that problem, and is also, I think, more elegant in that it does not rely on hard-coded values.</p> <pre><code>/** * @param isoDate {string} in ISO 8601 format e.g. 2015-12-31 * @param numberMonths {number} e.g. 1, 2, 3... * @returns {string} in ISO 8601 format e.g. 2015-12-31 */ function addMonths (isoDate, numberMonths) { var dateObject = new Date(isoDate), day = dateObject.getDate(); // returns day of the month number // avoid date calculation errors dateObject.setHours(20); // add months and set date to last day of the correct month dateObject.setMonth(dateObject.getMonth() + numberMonths + 1, 0); // set day number to min of either the original one or last day of month dateObject.setDate(Math.min(day, dateObject.getDate())); return dateObject.toISOString().split('T')[0]; }; </code></pre> <p>Unit tested successfully with:</p> <pre><code>function assertEqual(a,b) { return a === b; } console.log( assertEqual(addMonths('2015-01-01', 1), '2015-02-01'), assertEqual(addMonths('2015-01-01', 2), '2015-03-01'), assertEqual(addMonths('2015-01-01', 3), '2015-04-01'), assertEqual(addMonths('2015-01-01', 4), '2015-05-01'), assertEqual(addMonths('2015-01-15', 1), '2015-02-15'), assertEqual(addMonths('2015-01-31', 1), '2015-02-28'), assertEqual(addMonths('2016-01-31', 1), '2016-02-29'), assertEqual(addMonths('2015-01-01', 11), '2015-12-01'), assertEqual(addMonths('2015-01-01', 12), '2016-01-01'), assertEqual(addMonths('2015-01-01', 24), '2017-01-01'), assertEqual(addMonths('2015-02-28', 12), '2016-02-28'), assertEqual(addMonths('2015-03-01', 12), '2016-03-01'), assertEqual(addMonths('2016-02-29', 12), '2017-02-28') ); </code></pre>
<p>Simple solution: <code>2678400000</code> is 31 day in milliseconds</p> <pre><code>var oneMonthFromNow = new Date((+new Date) + 2678400000); </code></pre> <p><strong>Update:</strong></p> <p>Use this data to build our own function:</p> <ul> <li><code>2678400000</code> - 31 day</li> <li><code>2592000000</code> - 30 days</li> <li><code>2505600000</code> - 29 days</li> <li><code>2419200000</code> - 28 days</li> </ul>
<p>This function handles edge cases and is fast:</p> <pre><code>function addMonthsUTC (date, count) { if (date &amp;&amp; count) { var m, d = (date = new Date(+date)).getUTCDate() date.setUTCMonth(date.getUTCMonth() + count, 1) m = date.getUTCMonth() date.setUTCDate(d) if (date.getUTCMonth() !== m) date.setUTCDate(0) } return date } </code></pre> <p>test:</p> <pre><code>&gt; d = new Date('2016-01-31T00:00:00Z'); Sat Jan 30 2016 18:00:00 GMT-0600 (CST) &gt; d = addMonthsUTC(d, 1); Sun Feb 28 2016 18:00:00 GMT-0600 (CST) &gt; d = addMonthsUTC(d, 1); Mon Mar 28 2016 18:00:00 GMT-0600 (CST) &gt; d.toISOString() "2016-03-29T00:00:00.000Z" </code></pre> <p><strong>Update for non-UTC dates:</strong> (by A.Hatchkins)</p> <pre><code>function addMonths (date, count) { if (date &amp;&amp; count) { var m, d = (date = new Date(+date)).getDate() date.setMonth(date.getMonth() + count, 1) m = date.getMonth() date.setDate(d) if (date.getMonth() !== m) date.setDate(0) } return date } </code></pre> <p>test:</p> <pre><code>&gt; d = new Date(2016,0,31); Sun Jan 31 2016 00:00:00 GMT-0600 (CST) &gt; d = addMonths(d, 1); Mon Feb 29 2016 00:00:00 GMT-0600 (CST) &gt; d = addMonths(d, 1); Tue Mar 29 2016 00:00:00 GMT-0600 (CST) &gt; d.toISOString() "2016-03-29T06:00:00.000Z" </code></pre>
<p>Taken from <a href="http://stackoverflow.com/a/29399462/513570">@bmpsini</a> and <a href="http://stackoverflow.com/a/13633692/513570">@Jazaret</a> responses, but not extending prototypes: using plain functions (<a href="http://stackoverflow.com/questions/14034180/why-is-extending-native-objects-a-bad-practice">Why is extending native objects a bad practice?</a>):</p> <pre><code>function isLeapYear(year) { return (((year % 4 === 0) &amp;&amp; (year % 100 !== 0)) || (year % 400 === 0)); } function getDaysInMonth(year, month) { return [31, (isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]; } function addMonths(date, value) { var d = new Date(date), n = date.getDate(); d.setDate(1); d.setMonth(d.getMonth() + value); d.setDate(Math.min(n, getDaysInMonth(d.getFullYear(), d.getMonth()))); return d; } </code></pre> <p>Use it:</p> <pre><code>var nextMonth = addMonths(new Date(), 1); </code></pre>
<p>Considering none of these answers will account for the current year when the month changes, you can find one I made below which should handle it:</p> <p>The method:</p> <pre><code>Date.prototype.addMonths = function (m) { var d = new Date(this); var years = Math.floor(m / 12); var months = m - (years * 12); if (years) d.setFullYear(d.getFullYear() + years); if (months) d.setMonth(d.getMonth() + months); return d; } </code></pre> <p>Usage:</p> <pre><code>return new Date().addMonths(2); </code></pre>
<p>I like what another poster showed with adding a month. This function takes that example and corrects the value if it is =&lt; 0 or > 12.</p> <pre><code>getMonth(5); getMonth(-8); function getMonth(incr) { d = new Date(); //Zero based getMonth() so +1 first var newMo = ( (d.getMonth() + 1) + incr); var returnMo = newMo; //newMo = 13,14... if (newMo &gt; 12) returnMo = (newMo - 12); //newMo is 0 or &lt; 0 if (newMo &lt;= 0 ) returnMo = (12 + newMo); console.log('newMo ' + newMo); console.log('returnMo ' + returnMo); return returnMo; </code></pre> <p>}</p>