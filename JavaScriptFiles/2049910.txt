Confusion about window.onload in javascript
<p>I have one paragraph of javascript code. And i don't understand it very well. Can you expain it line by line for me? Thanks a lot. </p> <pre><code> function addLoadEvent(func) { var oldonload = window.onload; if (typeof window.onload != 'function') { window.onload = func; } else { window.onload = function() { oldonload(); func(); } } } </code></pre> <p>And here is what i'm thinking: </p> <pre><code> function addLoadEvent(func) { //define a function with a parameter 'func' var oldonload = window.onload; //assign window.onload event to variable oldonload if (typeof window.onload != 'function') { //if window.onload is not a function, then... window.onload = func; //assign 'func' to window.onload event. what does func mean? } else { //if window.onlad is a function window.onload = function() { //don't understand oldonload(); //call function oldonload() func(); //call function func() } } } </code></pre> <p>Confusions: </p> <p>window.onload is already an event, and why do we use typeof?</p> <p>function addLoadEvent(func) , window.onload = func, func(). What's the difference among these funcs? </p> <p>I'm sorry for posting a novice problem. But thanks to anyone who gives me some guidance?</p> <p>Edit:</p> <p>This is improved original code by Simon Willison. </p> <pre><code>function addLoadEvent(func) { var oldonload = window.onload; if (typeof window.onload != 'function') { window.onload = func; } else { window.onload = function() { if (oldonload) { oldonload(); } func(); } } } </code></pre>
<p>Its very simple. </p> <p>You check if there is already an onload function registered. </p> <p>if there isnt one, 1. assign 'func' the function you pass in to the onload</p> <p>if there is one, create a new onload function, that will:</p> <ol> <li>call the old onload function</li> <li>call your 'func' that you pass in</li> </ol> <p>and:</p> <blockquote> <p>window.onload is already an event, and why do we use typeof?</p> </blockquote> <p>window.onload can be a function, but if one isnt set, it will be 'undefined' we need to check its type to see what it is. </p> <blockquote> <p>function addLoadEvent(func) , window.onload = func, func(). What's the difference among these funcs?</p> </blockquote> <p>functions are a variable in javascript. so you can refer to the function as</p> <p>func</p> <p>you can call it as</p> <p>func()</p> <p>in your case: function addLoadEvent(func) is the current function defintion. it takes one param, and that param should be a function</p> <p>window.onload = func assigns the function you passed in to the onload event</p> <p>func()</p> <p>calls the function you passed in</p> <p>here is the line by line correction:</p> <pre><code>function addLoadEvent(func) { //define a new function called addLoadEvent which takes in one param which should be function var oldonload = window.onload; //assign window.onload event to variable oldonload if (typeof window.onload != 'function') { //if window.onload is not a function, and thus has never been defined before elsewhere window.onload = func; //assign 'func' to window.onload event. set the function you passed in as the onload function } else { //if window.onlad is a function - thus already defined, we dont want to overwrite it so we will.. window.onload = function() { //define a new onload function that does the following: oldonload(); //do whatever the old onload function did func(); //and then do whatever your new passed in function does } } } //then call it like this: addLoadEvent(function() { alert("hi there"); }); addLoadEvent(function() { alert("this will be alerted after hi there"); }); //or like this: var fn = function(){ alert("this will be the last thing alerted"); }; addLoadEvent(fn); </code></pre>
<blockquote> <p>Can you expain it line by line for me?</p> </blockquote> <p>I'm too lazy, but the nutshell is:</p> <ul> <li>Copy onload to another variable</li> <li>If onload if a function, set it to a new function that runs the passed function then the old function</li> <li>If it isn't, just make the passed function run onload</li> </ul> <blockquote> <p>window.onload = func; //assign 'func' to window.onload event. what does func mean?</p> </blockquote> <p>func is the variable defined as the first argument to the function (function addLoadEvent(func)). Functions are first class objects in JavaScript â€” you can pass them around, just like any other variable.</p> <blockquote> <p>window.onload is already an event, and why do we use typeof?</p> </blockquote> <p>It isn't an event. It is a property that might be a function or undefined. The event is 'something that happens' which causes that function to be run.</p> <blockquote> <p>function addLoadEvent(func) , window.onload = func, func(). What's the difference among these funcs? </p> </blockquote> <p>The first defines a function named addLoadEvent. The second assigns a function named func to onload. The third calls a function named func.</p> <p>As an aside, don't use this. Use <a href="http://www.quirksmode.org/js/events_advanced.html" rel="nofollow noreferrer">addEventListener/attachEvent</a> or a library that normalises them across browsers such as <a href="http://developer.yahoo.com/yui/event/" rel="nofollow noreferrer">YUI</a> or <a href="http://docs.jquery.com/Events" rel="nofollow noreferrer">jQuery</a>.</p>
<p>The defined function <code>addLoadEvent(func)</code> is designed to add an additional function to the already existing <code>window.onLoad</code> event. So, the first thing it does is check to see if the <code>window.onLoad</code> event is <strong><em>not</em></strong> a function. If not, it simply assigns the passed in function to the <code>window.onLoad</code> event.</p> <p>If however, the <code>window.onload</code> is already defined, it resets it to call the original <code>onload</code> function as well as the function that you passed in (func).</p> <p>You would use it like so to add your own event to the "stack":</p> <pre><code>addLoadEvent(function() { alert('Hello! I run after the original window.onload event if it exists!'); }); </code></pre> <p>This passes an anonymous function to the addLoadEvent function. This is what is happening in the <code>window.onload = function() { ... }</code> in your code above. You could also define the function beforehand and pass it in like so:</p> <pre><code>var myOnloadEvent = function() { alert('Hello! I run after the original window.onload event if it exists!'); }; addLoadEvent(myOnloadEvent); </code></pre>
<p>In javascript a "function" is a primitive variable type that a variable can take on. Javascript is also loosely typed, so a variable's value depends on the last thing that was assigned to it. "event" is just a member variable of the window object. As such you can assign it to whatever you like. If it has never been assigned to anything it will take on the primitive value of "undefined" in javascipt. So the check for:</p> <pre><code>if (typeof window.onload != 'function') { </code></pre> <p>is realy checking to see whether or not the window.onload event handler has been defined yet or not.</p> <p>If it has not been defined yet, then this function is assigning func to the window.onload event handler (i.e func will be called when the window loads).</p> <p>If it has been defined previously, then this function will create a new function that calls the existing onload handler followed by func when the window loads. This example is also using a property/language-feature of javascript called 'closure' so that the newly defined 'compose' function has access to the variables above its scope that persist after the outer function loses scope.</p> <p>Perhaps a more meaningful check would be:</p> <pre><code>if (typeof window.onload === 'undefined') { </code></pre>