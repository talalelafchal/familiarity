JS variable scope missunderstanding
<p>I have a little problem: slideHelpers.total = 4</p> <pre><code>for (i=1;i &lt;= slideHelpers.total; i++) { $('&lt;a href="#"&gt;' + i + '&lt;/a&gt;').bind('click', function(){ alert('go to the ' + i + ' slide')}).appendTo('.slideaccess') } </code></pre> <p>the alert gives out 5 what is logic, because when the function click triggers i is actually 5. But i would like to have the same i as in my <code>&lt;a&gt;</code> tag. What is the best way to handle this?</p> <p>I could put i in the data() of the <code>&lt;a&gt;</code> tag for example but i am sure there is a easier way. </p>
<p>You could use the <a href="http://api.jquery.com/bind/" rel="nofollow noreferrer">eventData</a> of the bind function:</p> <pre><code>for (var i = 1; i &lt;= slideHelpers.total; i++) { $('&lt;a href="#"&gt;' + i + '&lt;/a&gt;').bind('click', { index: i }, function(arg) { alert('go to the ' + arg.data.index + ' slide'); }).appendTo('.slideaccess'); } </code></pre>
<pre><code>for (i=1;i &lt;= slideHelpers.total; i++) { $('&lt;a href="#"&gt;' + i + '&lt;/a&gt;').bind('click', (function(i){ // Capture i in closure return function(){ alert('go to the ' + i + ' slide') }; })(i) ).appendTo('.slideaccess') } </code></pre> <p>Optimised:</p> <pre><code>var ary = [], i = 0, n = slideHelpers.total, open = '&lt;a class="index" href="#"&gt;', close = '&lt;/a&gt;'; // Fill array with numbers: 1,2,3,4,5... while (++i &lt; n) ary[i] = i + 1; $('.slideaccess').append( open + ary.join(close + open) + close ).delegate('a.index', 'click', function() { var index = $.text(this); alert('go to the ' + index + ' slide'); }); </code></pre>
<p>You can use an additional function that returns your function:</p> <pre><code>for (i=1;i &lt;= slideHelpers.total; i++) { $('&lt;a href="#"&gt;' + i + '&lt;/a&gt;').bind('click', (function(i) { return function() { alert('go to the ' + i + ' slide'); }; })(i) ).appendTo('.slideaccess'); } </code></pre> <p>With this additional function, the inner <code>i</code> in your <code>alert</code> refers to the argument <code>i</code> of that function and not to the <code>i</code> of the outer scope.</p>
<p>You need to create a new scope, otherwise every function will reference the same <code>i</code>. In JavaScript variables are scoped to functions.</p> <pre><code>var make_alert_message = function make_alert_message(num) { return function () { alert('go to the ' + num + ' slide'); }; } for (var i = 1; i &lt;= slideHelpers.total; i++) { $('&lt;a href="#"&gt;' + i + '&lt;/a&gt;').bind( 'click', make_alert_message(i) ).appendTo('.slideaccess') } </code></pre>
<p>In your code example <code>i</code> is basically a global variable. By the time the <code>alert()</code> code executes, <code>i</code> has the maximum value of the for loop. The standard way to fix this problem in JavaScript is to create a new function which has its own <a href="http://www.digital-web.com/articles/scope_in_javascript/" rel="nofollow noreferrer">scope</a> to "hold" the variable around. Take for instance this code which returns your event handling function:</p> <pre><code>(function(i) { // using i as an argument here 'scopes' it var something = i; // also within this function scope. // inside here, both i and something will only ever reference the "local scope" return function() { alert(i); }; })(i); // and here we are calling that function with i = 1,2,3,... </code></pre>