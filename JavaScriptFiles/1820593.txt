Search a JavaScript object
<p>I have a JavaScript object like this:</p> <pre><code>[{ name : "soccer", elems : [ {name : "FC Barcelona"}, {name : "Liverpool FC"} ] }, { name : "basketball", elems : [ {name : "Dallas Mavericks"} ] }] </code></pre> <p>Now I want to search on this JavaScript object in the browser. The search for "FC" should give me something like this:</p> <pre><code>[ {name : "FC Barcelona"}, {name : "Liverpool FC"} ] </code></pre> <p>How to do this fast? Are there any JavaScript libs for this? </p>
<p>Although you could do it in straight JavaScript, <a href="http://documentcloud.github.com/underscore/" rel="nofollow noreferrer">underscore.js</a> is a good library to handle this stuff. You could probably get it going with "pluck" and "each."</p> <p>Nice thing about underscore.js is that it uses the browser's built-in calls when they exist.</p>
<p>The straightforward way to do this is simply to iterate over every property of the object and apply a test function to them (in this case, <code>value.contains("FC")</code>).</p> <p>If you want it to go faster, you'd either need to implement some kind of caching (which could be eagerly populated in the background ahead of any queries), or perhaps precalculate the result of various popular test functions.</p>
<p>You might like using jLinq (personal project)</p> <p><a href="http://Hugoware.net/Projects/jLinq" rel="nofollow noreferrer" ><a href="http://Hugoware.net/Projects/jLinq" rel="nofollow noreferrer">http://Hugoware.net/Projects/jLinq</a></a></p> <p>Works like LINQ but for JSON and it allows you to extend it and modify it however you want to. There is already a bunch of prebuilt methods to check values and ranges.</p>
<p>You could do this with regular expressions performed against a serialized JSON string:</p> <pre><code>var jsonString = "[{ name : \"soccer\", elems : [ {name : \"FC Barcelona\"}" +", {name : \"Liverpool FC\"}]},{name : \"basketball\",elems : [" +"{name : \"Dallas Mavericks\"} ]}]"; var pattern = /\s*([\w\d_]+)\s*:\s*((\"[^\"]*(your pattern here)[^\"]*\")|(\'[^\']*(your pattern here)[^\']*\'))\s*/g; var foundItems = []; var match; while(match = pattern.exec(jsonString)){ foundItems.push(match[0]); } var foundJSON = "[{" + foundItems.join("}, {") + "}]"; var foundArray = eval(foundJSON);</code></pre> <p>I haven't tested the loop part of this, but the Regex seems to be working well for me with simple tests in firebug.</p>
<p>Try jOrder. <a href="http://github.com/danstocker/jorder" rel="nofollow noreferrer">http://github.com/danstocker/jorder</a></p> <p>It's optimized for fast O(logn) search and sorting on large (thousands of rows) tables in JS.</p> <p>As opposed to array iteration, which most of the answers here are based on, jOrder uses indexes to filter data. Just to give you an idea, free-text search on a 1000-row table completes about 100 times faster than iteration. The bigger the table, the better ratio you get.</p> <p>However jOrder can't process the format of your sample data. But if you re-format it like this:</p> <pre><code>var teams = [ { sport : "soccer", team: "FC Barcelona" }, { sport : "soccer", team: "Liverpool FC" }, { sport : "basketball", team : "Dallas Mavericks"} ] </code></pre> <p>You can get the desired results by first setting up a jOrder table:</p> <pre><code>var table = jOrder(teams) .index('teams', ['team'], { grouped: true, ordered: true, type: jOrder.text }); </code></pre> <p>And then running a search on it:</p> <pre><code>var hits = table.where([{ team: 'FC' }], { mode: jOrder.startof }); </code></pre> <p>And you'll get exactly the two rows you needed. That's it.</p>
<p>In regards to AngularJS, you can do this:</p> <pre><code>var item = "scope-ng-model"; (angular.element('form[name="myForm"]').scope())[item] = newVal; </code></pre>
<p>Seeing as though the only helpful answers have been referencing third party libraries - here's your native javascript solution. For anyone that only wants a few lines of code rather than a stack:</p> <p>The function:</p> <pre><code>Array.prototype.findValue = function(name, value){ var array = map(this, function(v,i){ var haystack = v[name]; var needle = new RegExp(value); // check for string in haystack // return the matched item if true, or null otherwise return needle.test(haystack) ? v : null; }); return array; } </code></pre> <p>A native <code>.map()</code> function:</p> <pre><code>map = function(array, mapFunction) { var newArray = new Array(array.length); for(var i = 0; i &lt; array.length; i++) { newArray[i] = mapFunction(array[i]); } return newArray; } </code></pre> <p>Your object: </p> <p>(skimmed from your posted abject):</p> <pre><code>myObject = { name : "soccer", elems : [ {name : "FC Barcelona"}, {name : "Liverpool FC"} ] }, { name : "basketball", elems : [ {name : "Dallas Mavericks"} ] } </code></pre> <p>For usage:</p> <p>(This will search your myObject.elems array for a 'name' matching 'FC')</p> <pre><code>var matched = myObject.elems.findValue('name', 'FC'); console.log(matched); </code></pre> <p>The result - check your console:</p> <pre><code>[Object, Object, findValue: function] 0: Object name: "FC Barcelona" __proto__: Object 1: Object name: "Liverpool FC" __proto__: Object length: 2 __proto__: Array[0] </code></pre>