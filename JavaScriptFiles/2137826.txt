Is there any reason to wrap anonymous JavaScript functions in braces?
<pre><code>var a = function(){ return 'test'; }(); console.log(a); </code></pre> <p>Answer in First Case : test</p> <pre><code>var a = (function(){ return 'test'; })(); console.log(a); </code></pre> <p>Answer in Second Case : test</p> <p>I am using the the first approach to create self-executing functions. However, I have seen the second approach as well. Is there any difference in the two approaches ? The result is obviously the same.</p>
<p>Yes, the first one sets the variable a as an anonymous variable, while the second one sets the variable a to the result of the function.</p> <p>Edit: I read the first code wrong. The answer is no.</p>
<p>The first syntax is only valid if you assign the result of the function execution to a variable, If you just want to execute the function, this form would be a syntax error:</p> <pre><code>function(){ return 'test'; }(); </code></pre> <p>The other form is still valid, though:</p> <pre><code>(function(){ return 'test'; })(); </code></pre> <p>Therefore the second version is more flexible and can be used more consistently.</p> <p>(The first form is not valid syntax to <a href="http://stackoverflow.com/questions/670623/why-this-kind-of-function-invocation-is-wrong-in-javascript">avoid ambiguities in the Javascript grammar</a>.)</p>
<p>It is good practice (but not required) to wrap IIFEs (Immediately Invoked Function Expressions) in parenthesis for readability. If your function is long and the reader cannot see the end, the opening parenthesis calls the readers attention to the fact that there is something special about this function expression and forces them to look at the bottom to find out what it is.</p>