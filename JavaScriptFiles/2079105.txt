Prevent from type converting of &quot;this&quot; during a call to a function with apply
<p>Servus Ninjas,</p> <p>this is what ecmascript 5 spec. (page 118) in the section <code>Function.prototype.apply(thisArg, argArray)</code> says:</p> <blockquote> <p>NOTE: The thisArg value is passed without modification as the this value. This is a change from Edition 3, where a undefined or null thisArg is replaced with the global object and <strong>ToObject</strong> is applied to all other values and that result is passed as the this value.</p> </blockquote> <p>This sounds promising, but this spec isn't implemented yet in any of the modern browsers so we have to deal with the 3rd spec implementation. </p> <p>My question now is „<strong>How to get the <code>typeof</code> statement become TRUE?</strong>“</p> <pre><code>var foo = function (arg1, arg2) { alert(typeof this == "string"); }; foo.apply("bar", ["arg1", "arg2"]); </code></pre> <p>any ideas?</p>
<p>There's 2 types of strings in JavaScript.</p> <p>The ones with typeof string</p> <pre><code>"hello" </code></pre> <p>and the ones with typeof object</p> <pre><code>new String("hello"); </code></pre> <p><code>apply</code> will always wrap any value you pass as an object since you need to use it through the <code>this</code> keyword.</p>
<p>Either use <code>this instanceof String</code> (same window-only) or use <code>Object.prototype.toString.call(this) === "[object String]"</code> (works across windows).</p>
<p>The one and only thing at the moment is to check the type </p> <p>with <code>Object.prototype.toString.call(string) == "[object String]";</code> and convert <code>this</code> back to String like: </p> <pre><code> var isString = function(string) { return Object.prototype.toString.call(string) == "[object String]"; }; var isNumber = function(number) { return Object.prototype.toString.call(number) == "[object Number]"; }; var toRightType = function(mess) { if(isString(mess)) { mess = mess+""; } if(isNumber(mess)) { mess = mess+0; } return mess; }; var foo = function () { var _this = toRightType(this); }; foo.apply("bar"); </code></pre> <p>This is on of the sad chapters in javascript :(</p>