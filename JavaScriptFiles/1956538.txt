string =&gt; number conversion in JS
<p>I have a URL, that I am parsing after the hash. The content after the hash is a math equation (eg. <a href="http://example.com/something#5+1" rel="nofollow noreferrer">http://example.com/something#5+1</a>) which I would like to find the sum of (or the result of any other equation like a product, division, etc)</p> <p>I can retrieve the numbers using:</p> <pre><code>var url = (window.location.hash).substr(1) // returns "5+1" as a string </code></pre> <p>Although I find if I try to convert this to a number it doesn't actually do the math. It cuts it down to 5, instead of showing the sum of 8.</p> <p>Is this kind of conversion possible?</p> <p>thanks!</p>
<p>To execute a string see <a href="http://www.w3schools.com/jsref/jsref_eval.asp" rel="nofollow noreferrer">eval</a> and some reasons not to do this are at <a href="http://stackoverflow.com/questions/86513/why-is-using-javascript-eval-function-a-bad-idea">why-is-using-javascript-eval-function-a-bad-idea</a>.</p> <p>This means in code of any importance&mdash;with data that is coming from an untrusted source (e.g. the internet)&mdash;you should parse out the numbers and the mathematical operation...and not accept any other types of input.</p>
<pre><code>var code = "5+1"; var result = window.eval(code); </code></pre> <p>But as in all languages that has eval, be careful with what you eval.</p>
<p><code>eval()</code> is the easiest way to perform the calculation, but you'll definitely want to verify that your input is sane:</p> <pre><code>var input = window.location.hash.substr(1); var result = null; try { // Make sure the input is only numbers and supported operators. if (/^[-+*/.()0-9]+$/.test(input)) result = eval(input); } catch (ex) { // Insert error handling here... } </code></pre> <p>This regex should filter out any dangerous input.</p>
<p><strong>Do not <code>eval()</code> arbitrary code from the URL</strong> as it can easily be exploited for XSS. I have created a library called <a href="http://github.com/eligrey/jsandbox" rel="nofollow noreferrer">JSandbox</a> that can sandbox JavaScript code execution, but it requires support for web workers. It would not be a good idea to use fake worker support for IE as then the safety of the sandbox is gone.</p> <p>Your code would go as follows:</p> <pre><code>JSandbox.eval("with(Math){" + location.hash.substr(1) + "}", function (res) { // handle the results here }); </code></pre> <p>Use this to also handle errors:</p> <pre><code>JSandbox.eval("with(Math){" + location.hash.substr(1) + "}", function (res) { // handle the results here }, null, function (err) { // handle errors here }); </code></pre> <p>I included a <code>with (Math) { ... }</code> wrapper so the hash code has short access to Math functions. (eg. <code>abs(..)</code> instead of <code>Math.abs(..)</code>)</p>
<pre><code>function CalculateString(hash) { var ReturnValue; var patt = '([\d*+-/.%])'; ReturnValue = hash.match(patt)[1]; ReturnValue = eval(ReturnValue); if (ReturnValue &gt; 0) { return parseInt(ReturnValue,10); } else { return 0; } } </code></pre> <p>So you can do like this:</p> <pre><code>var Hash = (window.location.hash).substr(1); var Calculation = CalculateString(Hash); // Retinerer result of the calculation if it is valid, otherwise it will give you 0. </code></pre>
<p>To really do this correctly, you need to write a simple parser for your mathematical expression language. This is allegedly not very hard, but I myself have never been able to do it. This is the only way to get the javascript to evaluate and interpret the math expression correctly, without also opening pandoras box, and letting all kinds of nasty stuff through like a simple (and stupid) call to eval() will.</p> <p>Or you can just have a bit of a look around and find someone who has already done this such as here:</p> <p><a href="http://silentmatt.com/math/evaluator.php" rel="nofollow noreferrer">http://silentmatt.com/math/evaluator.php</a></p>