What's with the random Javascript errors?
<p>I'm developing a site in javascript and jquery. Sometimes when I refresh I just get different random errors in firebug. What's the deal?</p> <p>edit: I'm getting errors like a variable isn't defined, when clearly it is and working, and when i refresh again, the error is gone..</p> <p>using Firefox V3.5.5 Firebug V.1.5.3 and I'm primarily working with jQuery 1.4.2</p>
<p>Most common cause is that you're trying to execute Javascript <em>before</em> the DOM is loaded and thus before all HTML elements are available in the DOM tree, which in turn may cause that simple calls like <code>document.getElementById(id)</code> and jQuery's <code>$(selector)</code> may return undefined elements. That it sometimes works is pure coincidence and a matter of timing.</p> <p>You need to ensure that any Javascript/jQuery code which is supposed to be executed during page load and relies on the availability of the elements in the DOM tree, also really get executed <em>after</em> the DOM is loaded. In plain vanilla JS you can do so:</p> <pre><code>window.onload = function() { document.getElementById(someId); } </code></pre> <p>and in jQuery:</p> <pre><code>$(document).ready(function() { $(someSelector); }); </code></pre>
<p>OK. While it's more or less impossible to give a reasonable solution to such a general question, I'll just add my 2 cents' worth:</p> <p>One possible source of <em>"undefined variable"</em> errors comes from including several scripts, which may or may not always load and execute in the same order. If you define a variable in one script (let's call that script <code>declare.js</code>) and use it in another (let's say <code>use.js</code>), and <code>use.js</code> is executed before <code>declare.js</code>, then you will get such an error. If the scripts execute the other way around, everything will appear fine.</p> <p>If you're interested in this very topic, have a look at e.g. Steve Souders' book <em><a href="http://www.stevesouders.com/blog/2009/04/23/even-faster-web-sites/" rel="nofollow noreferrer">Even faster web sites</a></em>, published by O'Reilly. More specifically, look at the chapter about non-blocking script loading.</p>