Javascript: Using object's field's value to determine another object literal's field's name
<p>I want to use object's field's value while creating another object using literal notation:</p> <pre><code>var T = { fieldName : 'testField' }; /* // Doesn't work. var test = { T.fieldName : 'value' }; */ // Does work. var test = []; test[T.fieldName] = 'value'; alert(test.testField); // test </code></pre> <p>But it doesn't work.<br> Is there a way to solve this issue or using square brackets is the only way out?</p> <p><strong>Upd.:</strong> Removed non-working code.</p>
<pre><code>var T = { fieldName : 'testField' }; var dummy = T.fieldName; // dummy variable var test = { dummy : 'value' }; alert(test.testField); // test </code></pre> <p>That should not work. The value 'value' will be stored in test.dummy, not test.testField. The way to do it would be:</p> <pre><code>var T = { fieldName : 'testField' }; // Does work. var test = {}; test[T.fieldName] = 'value'; alert(test.testField); // alerts "value" </code></pre> <p>Which is what you already have</p>
<p>Your "test" variable is Array, not Object.</p> <p>You should create "test" like "= {}" instead of "= []".</p>
<p>One possible way is.</p> <pre><code>var T={ testField : 'testField' }; eval ('var test = {' + T.testField + ':' + value + '}'); </code></pre> <p>And you make this generic, something like this</p> <pre><code>function MakeVar(varName,fieldToUse,valueToPass) { var res = 'var ' +varName+ '= {' + T.testField + ':' + value + '}' eval(res); } var T={ testField : 'testField' }; MakeVar('test',T.testField,'value'); var outt=test.testField; </code></pre> <p>Hope this helps</p>