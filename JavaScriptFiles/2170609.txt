Why do I need to escape the '/' character in JavaScript?
<p>What exactly needs to be escaped in javascript strings. Or, more specifically, why does </p> <pre><code>var snaphtml = '&lt;script src="http://seadragon.com/embed/lxe.js?width=auto&amp;height=400px"&gt;&lt;/script&gt;'; </code></pre> <p>give a syntax error? Escaping the final <code>&lt;\/script&gt;</code> seems to fix the syntax error, but this doesn't make sense to me as a javascript beginner.</p>
<p>The problem may be that the web browser sees the "<code>&lt;/script&gt;</code>" sequence and decides that's the end of the script block.</p> <p>Another way to fix the problem aside from using an escape sequence like you did is to break it apart into 2 strings that are concatenated:</p> <pre><code>"&lt;" + "/script&gt;" </code></pre> <p>The behavior you're seeing isn't a bug n the part of the browser. </p> <p>Browsers don't "look inside" a script block, they just pass the content to the script engine. The "<code>&lt;/script&gt;</code>" sequence is how they know they've come to the end of the block, and since the browser doesn't interpret the contents of the block, it has no way to know that it's in the context of a literal string in the script code.</p> <p>Remember that browsers can support more script languages than just Javascript, even if it's not commonly seen. Internet Explorer supports VBscript (and I think any scripting language that can be run by a windows script host, but I'm not sure about that). And when the ability to have script blocks was put into browsers way back when, no one could be sure that Javascript would end up being so universal.</p>
<p>The HTML parser will interpret the end of tag token (ETAGO delimiter <code>&lt;/</code>) in your string, as the end of the current script tag, giving you the <em>unterminated string</em> <code>SyntaxError</code>.</p> <p>There are several workarounds, including the use of <code>CDATA</code> blocks, but the simplest way is to escape that character, or make a string concatenation:</p> <pre><code>var snaphtml = '&lt;script src="..."&gt;\x3C/script&gt;'; var snaphtml = '&lt;script src="..."&gt;&lt;' + '/script&gt;'; </code></pre> <p>And of course, you can also create your <code>script</code> element programmatically and append it to the head:</p> <pre><code>var newScript = document.createElement("script"); newScript.src = "..."; //... </code></pre>
<p>You're actually running into an html-escaping issue: the browser interprets <code>&lt;/script&gt;</code> in your string as the close-tag for the <code>script</code> element in which your javascript is embedded -- so to the browser, your line looks like it's missing the close single-quote:</p> <pre><code>var snaphtml = '&lt;script src="http://seadragon.com/embed/lxe.js?width=auto&amp;height=400px"&gt; </code></pre> <p>To fix it, as you've found, you just need to change <code>&lt;/script&gt;</code> to anything else, like <code>&lt;\/script&gt;</code> or <code>\074/script&gt;</code>, etc.</p> <p>The only characters you normally need to worry about in a javascript string are double-quote (if you're quoting the string with a double-quote), single-quote (if you're quoting the string with a single-quote), backslash, carriage-return (\r), or linefeed (\n).</p>
<p>See <em><a href="http://mathiasbynens.be/notes/etago" rel="nofollow">Everything you always wanted to know about <code>&lt;/</code>, aka. the end-tag open (ETAGO) delimiter</a></em> for a detailed explanation. TL;DR there’s no need for crazy hacks like string concatenation or char literal escapes — just escape it as such:</p> <pre><code>var snaphtml = '&lt;\/script&gt;'; </code></pre> <p>Also, note that this is only necessary for inline scripts.</p>