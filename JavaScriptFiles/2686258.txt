JavaScript inheritance extend function
<p>I'm having some trouble understanding the IF clause at the end of this function from Pro JavaScript Design Patterns:</p> <pre><code>function extend(subClass, superClass) { var F = function() {}; F.prototype = superClass.prototype; subClass.prototype = new F(); subClass.prototype.constructor = subClass; subClass.superclass = superClass.prototype; if(superClass.prototype.constructor == Object.prototype.constructor) { superClass.prototype.constructor = superClass; } } </code></pre> <p>The book explains that these lines ensure that the superclass's constructor attribute is correctly set, even if the superclass is the Object class itself. Yet, if I omit those three lines and do the following:</p> <pre><code>function SubClass() {}; extend(SubClass, Object); alert(Object.prototype.constructor == Object); </code></pre> <p>The alert says 'true', which means the superclass's constructor is set correctly even without those last three lines. Under what conditions, then, does this IF statement do something useful?</p> <p>Thanks.</p>
<p>The problem that those two lines try to avoid, is generally produced when you replace the <code>prototype</code> property of a Constructor Function, for example:</p> <pre><code>function Foo () {}; Foo.prototype = { bar: 'baz' }; var foo = new Foo(); foo.constructor === Object; // true, but `constructor` should refer to Foo </code></pre> <p>When <a href="http://bclary.com/2004/11/07/#a-13.2" rel="nofollow noreferrer">functions objects are created</a>, the <code>prototype</code> property is initialized with a new object, which contains a <code>constructor</code> property that refers to the function itself, e.g.:</p> <pre><code>function Bar () {}; var bar = new Bar(); bar.constructor === Bar; // true </code></pre> <p>When you replace the <code>prototype</code> property with another object, this object has it's own <code>constructor</code> property, generally inherited from other constructor, or from <code>Object.prototype</code>.</p> <pre><code>var newObj = {}; newObj.constructor === Object; </code></pre> <p>Recommended articles:</p> <ul> <li><a href="http://joost.zeekat.nl/constructors-considered-mildly-confusing.html" rel="nofollow noreferrer">Constructors considered mildly confusing</a></li> <li><a href="http://www.3site.eu/doc/" rel="nofollow noreferrer">JavaScript Prototypal Inheritance</a></li> </ul>