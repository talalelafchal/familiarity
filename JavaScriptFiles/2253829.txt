Representation of number sequence in JavaScript
<p>can this array of numbers sequence be represented in less characters (excluding whitespace) than this?</p> <pre><code>i = [0,1,2,3,4,5,6,7,8,0,3,6,1,4,7,2,5,8,0,4,8,6,4,2]; </code></pre> <p>(52 chars)</p> <p>or a function i which returns the same values in under 52 chars</p> <p>the aim is to reduce the number of characters used to represent the code.</p>
<p>i='012345678036147258048642'.split('');</p>
<p><strong><em>I don't necessarily recommend this</em></strong>... (because I don't think you should "wreck" the String object) but in theory <em>you could</em> do this:</p> <pre><code>&lt;script&gt; String.prototype.toNumericalArray = function(){ var arr = this.split(''); for(var i=0;i&lt;arr.length;i++){ arr[i] = 0+i; } return arr; } &lt;/script&gt; </code></pre> <p>Then when you want it, all you need is:</p> <pre><code>&lt;script&gt; s='012345678036147258048642'; n = s.toNumericalArray(); alert(typeof(n[3]));//number alert(typeof(n[7]));//number alert(typeof(n[9]));//number &lt;/script&gt; </code></pre> <p>And if you are really worried about the number of characters, you can minify all the variables / method name</p> <pre><code>i='012345678036147258048642'.x(); </code></pre> <p>(thus if you exclude the initial prototype, any future calls would be 33 characters (for the same size list))</p>
<p>I would always go with the comma separated array,</p> <p>it's less overhead than any conversion process.</p> <p>But the idea of a quick method to turn a string of digits</p> <p>into an array of numbers appealed to my evil twin...</p> <pre><code>String.prototype.dA= function digitArray(){ return eval('['+this.replace(/(\d)/g,'+$1,')+']'); } </code></pre> <p><strong>i='012345678036147258048642'.dA();</strong> (34 characters)</p> <pre><code>// test i for(var j= 0, L= i.length; j&lt;L;j++){ i[j]= i[j]+' ('+typeof i[j]+')'; } i.join(', ') </code></pre> <p>/* returned value: 0 (number), 1 (number), 2 (number), 3 (number), 4 (number), 5 (number), 6 (number), 7 (number), 8 (number), 0 (number), 3 (number), 6 (number), 1 (number), 4 (number), 7 (number), 2 (number), 5 (number), 8 (number), 0 (number), 4 (number), 8 (number), 6 (number), 4 (number), 2 (number) */</p>