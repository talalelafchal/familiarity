word decoder by javascript?
<p>Implement the “Word Decoder” game. This game will present the player with a series of scrambled words (up to 20 words) and challenge him/her to attempt to unscramble them. Each time a new word is displayed, and a text input is provided for the user to write the unscrambled word. Once the player thinks the word has been properly decoded, he clicks on the “Check answer” button. If the player’s answer is correct, his score is increased by one. If his answer is not correct, he is notified and he is then given a different word.</p> <p>i understood the Question , but i dont know how to generate it , or even how to start it!! any help please?</p>
<p>Look into loading a dictionary via XHR.<br> there are tons of those available online [<a href="http://www.mieliestronk.com/wordlist.html" rel="nofollow noreferrer">http://www.mieliestronk.com/wordlist.html</a> NOTE: it contains some swear words, if you're going to be doing this for academic purposes, since its your homework, you should look for a "clean" list]... </p> <p>For scrambling the word: make your string into a char array, then find an array shuffle function [they are simple to write, I wrote one for my implementation of Bogosort]... </p> <pre><code>function shuffle(b) { var a = b.concat([]); //makes a copy of B, b won't be changed... var final = []; while(a.length != 0) { //0 -&gt; a length-1 var targIndex = Math.round((a.length-1)*(Math.random())); var value = a[targIndex] a.remove(targIndex); final.push(value); } return final; } </code></pre> <p>When the user is done inputting, simply compare input with the answer [case insensitive, ignore spaces] As stated in comments, there are also the possibility of anagrams, so be sure to check for those... perhaps, you could simply verify the word exists in the dictionary.</p>
<p>To start, try breaking down the problem into things you'll need; think nouns and verbs. This is simply rewriting the problem in new terms. You need:</p> <ul> <li>word: just a string, but it's a noun you'll need, so list it.</li> <li>dictionary: a collection of words to choose from (during testing, you don't need many)</li> <li>display: these become HTML elements, since you're working with JS <ul> <li>scrambled word</li> <li>text input</li> <li>submit button to check answer</li> <li>score</li> <li>"wrong answer" notifier</li> </ul></li> <li>to scramble a word</li> <li>to compare words: how can you compare two words to see if one is a permutation of the other? Do it right and anagrams aren't a problem.</li> <li>to check an answer</li> <li>to increment score</li> <li>to notify user of incorrect answer</li> <li>to present a new scrambled word</li> </ul> <p>Any item beginning with "to" is a verb; anything else is a noun. Nouns become objects, verbs become methods/functions.</p> <p>The above is mostly a <a href="http://www.labri.fr/perso/strandh/Teaching/Langages-Enchasses/Common/Strandh-Tutorial/top-down-programming.html" rel="nofollow noreferrer">top-down</a> approach, in contrast with <a href="http://www.paulgraham.com/progbot.html" rel="nofollow noreferrer">bottom-up</a> (note that top-down vs bottom-up isn't an either-or proposition). Other approaches that might help with not knowing where to start are <a href="http://www.google.com/search?q=test+driven+development" rel="nofollow noreferrer">test driven development</a> or its offshoot, <a href="http://dannorth.net/introducing-bdd" rel="nofollow noreferrer">behavior driven development</a>. With these you start by defining, in code, what the program should do, then fill in the details to make it do that.</p> <p>A hint on comparing words: the problem is basically defining an <a href="http://www.math.csusb.edu/notes/rel/node3.html" rel="nofollow noreferrer">equivalence class</a>—two strings are equivalent if one is a permutation of the other. The permutations of a string, taken together, form the equivalence class for that string; two strings are in the same equivalence class if the strings are equivalent. As the linked document points out, equivalence classes are well represented by picking a single element of the class as the class representative. Lastly, you can turn the equivalence class definition around: two strings are permutations of each other if they are in the same equivalence class.</p>
<p>This what i get from you guys! i generate another code ,, but it's not write im trying to figure out the right solution..</p> <p> Assignment 1 : Task 3</p> <pre><code> &lt;script type="text/javascript"&gt; function check() { var correctArray = new Array ("cat", "car"); correctArray[0]= 0; var wrong = new Array("tac", "rac"); var score = 0; if( correctArray().index.length == wrong().index.length){ alert("This is correct:" , correctArray()); }else{ alert(" please try again "); } return correctArray++, score++; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form&gt; &lt;h3&gt; Words Decoder &lt;/h3&gt; The scrambled word is: &lt;input type="text" name="showlabel" value="" disabled="disabled" onclick='check().getElementById("wrong")' /&gt; &lt;br/&gt;&lt;br/&gt; Please enter the unscrambeld word: &lt;input type="text" name="userInput" value="" /&gt; &lt;input type="submit" value="Check" onclick="check()" /&gt;&lt;br/&gt;&lt;br/&gt; The Score is : &lt;input type="text" name="score" value="" disabled="disabled" /&gt;&lt;br/&gt;&lt;br/&gt; &lt;/form&gt; &lt;/body&gt; </code></pre> <p></p> <p>it should be like for example: </p> <p>The word “tac” is displayed. The user inputs “cat”. The answer is correct, and the user’s score is 1. The word “niol” is then displayed. The user inputs “oinl”. The answer is not correct, the user is alerted, and the score stays the same. The game then displays the next word and so on. After the last word, the final score is given to the player.</p>