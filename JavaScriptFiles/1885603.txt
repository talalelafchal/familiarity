Difference between JavaScript function declarations?
<p>Why does calling my JavaScript function throw an error when I call it like this</p> <pre><code>wysiwyg2(); var wysiwyg2 = function() { alert(1); } </code></pre> <p>but work when I do this?</p> <pre><code>wysiwyg2(); function wysiwyg2 () { alert(1); } </code></pre>
<p>When entering a new <em>execution context</em> (which is either a function call or global code), JavaScript first goes through a variable instantiation phase during which all variable declarations and function declarations within the global code or function body are examined and create as properties of the current <em>variable object</em>, which is effectively a collection of all the objects that are in the current scope. In particular, any <em>function declaration</em> such as</p> <pre><code>function wysiwyg2 () { alert(1); } </code></pre> <p>... is fully created during this phase, while any variable declaration such as</p> <p><code>var a = 2;</code></p> <p>... only leads to the creation of a variable called <code>a</code> with a value of <code>undefined</code> during this phase. This is also true of a variable declaration with an assignment to a <em>function expression</em>, such as</p> <pre><code>var wysiwyg2 = function() { alert(1); } </code></pre> <p>Only the variable instantiation takes place at this point. Once this phase is complete the rest of the code (including variable assignment) is executed sequentially.</p>
<p>You need to define your function variable first, i.e.</p> <pre><code>var wysiwyg2 = function() { alert(1); } wysiwyg2(); </code></pre> <p>For a good explanation of the difference, see <a href="http://stackoverflow.com/questions/261599/why-can-i-use-a-function-before-its-defined-in-javascript">Why can I use a function before itâ€™s defined in Javascript?</a></p>
<p>In the first snippet, you're trying to invoke a variable before the variable is defined.</p> <p>You'd get the same problem from the following code:</p> <pre><code>test.toString(); var test = new Date; </code></pre> <p>In the second snippet, you're declaring the function without assigning it to a variable, and this results in a global declaration that is usable in earlier code.</p>
<p>In the first one, you're declaring a function and assigning it to a variable. Thus you won't be able to call it through that variable until it's actually assigned to it.</p> <p>In the second, you're declaring a named function. And can call that function from wherever (as long as it's in scope).</p>
<p>You can think of your javascript as though it's evaluated in two passes. The first pass builds all the objects and names (and remember: functions are objects), and places them "in scope", so to speak. It's kind of like a compilation step. Then the second pass executes the code. </p> <p>So your second sample works because the first pass built and "scoped" the function before execution. The first sample does not work because the function object is created as part of a variable assignment, and so it's not in scope yet when you try to call it.</p> <p>You mention another situation in the comments, where the function call and definition are separated into two script blocks. That doesn't work because the engine completes both steps of one block before moving on to the next, and you tried to call the function in a block that is executed before the block where it's defined. You can call function across script blocks, but not until they are defined.</p>