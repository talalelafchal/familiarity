Simple JavaScript String.replace.call results in &quot;InternalError: too much recursion&quot;
<p>Given the following JavaScript "class" definition:</p> <pre><code>var Quota = function(totalMinutes){ this.totalMinutes = parseInt(totalMinutes || 0, 10); }; Quota.prototype.valueOf = function(){ return this.totalMinutes; }; Quota.prototype.toString = function(format){ format = format || "hh:mm"; return format.replace.call(this, /hh?|mm?/g, function(match){ switch (match) { case "hh": return this.totalMinutes * 60; case "mm": return this.totalMinutes; } }); }; </code></pre> <p>Can you please explain exactly why the below call to <code>toString()</code>...</p> <pre><code>var q1 = new Quota(60); console.log( q1.toString() ); </code></pre> <p>...results in the following error being raised:</p> <blockquote> <p><strong>InternalError</strong>: too much recursion { message="too much recursion", more...}</p> </blockquote> <p>I'm running the code (Firefox 3.5.7 + Firebug 1.5) in the Firebug Console. Ideally I'd like to know where is the recursive call back to <code>toString()</code> and your suggestions for how the replace function could be executed here via <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function/call" rel="nofollow noreferrer"><code>call</code></a> or <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Function/Apply" rel="nofollow noreferrer"><code>apply</code></a></p>
<pre><code>return format.replace.call(this, /hh?|mm?/g, function(match) </code></pre> <p><code>format.replace</code> tries to call <code>this.toString</code>, which ends in an infinite recursion. As requested, here's a proof this happens: <a href="http://jsbin.com/eweli/" rel="nofollow noreferrer">http://jsbin.com/eweli/</a>:</p> <pre><code>var Quota = function(totalMinutes){ this.totalMinutes = parseInt(totalMinutes || 0, 10); }; Quota.prototype.toString = function(format){ alert ("Quota.prototype.toString is called"); }; var q1 = new Quota(60); var a = "string".replace.call(q1,'hello','world'); </code></pre> <p>Try this instead:</p> <pre><code>return format.replace(/hh?|mm?/g, function(match) </code></pre> <h2>Edit</h2> <p>Problems aside, the best way I've found to allow the function to access the current quota is to create a variable outside it's closure:</p> <pre><code>Quota.prototype.toString = function(format){ format = format || "hh:mm"; var quota = this; return format.replace(/hh|mm/g, function(match){ switch (match) { case "hh": return quota.totalMinutes / 60; case "mm": return quota.totalMinutes; } return match; }); }; </code></pre>