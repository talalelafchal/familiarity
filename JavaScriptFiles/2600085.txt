hasOwnProperty in javascript
<pre><code>function Shape() { this.name = "Generic"; this.draw = function() { return "Drawing " + this.name + " Shape"; }; } function welcomeMessage() { var shape1 = new Shape(); //alert(shape1.draw()); alert(shape1.hasOwnProperty(name)); //this is returning false } </code></pre> <p><code>.welcomeMessage</code> called on the <code>body.onload</code> event.</p> <p>I expected <code>shape1.hasOwnProperty(name)</code> to return true, but its returning false. </p> <p>What is the correct behavior?</p>
<p><code>hasOwnProperty</code> is a normal Javascript function that takes a string argument.</p> <p>When you call <code>shape1.hasOwnProperty(name)</code> you are passing it the value of the <code>name</code> variable (which doesn't exist), just as it would if you wrote <code>alert(name)</code>.</p> <p>You need to call <code>hasOwnProperty</code> with a string containing <code>name</code>, like this: <code>shape1.hasOwnProperty("name")</code>.</p>
<p>Try this:</p> <pre> function welcomeMessage() { var shape1 = new Shape(); //alert(shape1.draw()); alert(shape1.hasOwnProperty("name")); } </pre> <p>When working with reflection in JavaScript, member objects are always refered to as the name as a string. For example:</p> <p><code>for(i in obj) { ... }</code></p> <p>The loop iterator i will be hold a string value with the name of the property. To use that in code you have to address the property using the array operator like this:</p> <pre> for(i in obj) { alert("The value of obj." + i + " = " + obj[i]); } </pre>
<p><code>hasOwnProperty</code> expects the property name as a string, so it would be <code>shape1.hasOwnProperty("name")</code></p>
<blockquote> <p>For variable:-</p> </blockquote> <pre><code>var lol; console.log(window.hasOwnProperty("lol"));//true console.log("lol" in window);//true </code></pre> <blockquote> <p>For object:-</p> </blockquote> <pre><code>var object = { key: "value" }; console.log(object.hasOwnProperty("key"));// true console.log("key" in object);// true console.log(object.key); // undefined </code></pre>