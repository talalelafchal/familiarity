What is the difference between JavaScript class definitions styles?
<p>I am not clear on the actual difference between these two styles of "class" definitions in JavaScript.</p> <p>Method a:</p> <p><code>function myclass() {}</code></p> <p>Method b:</p> <pre><code>myclass = function() {} </code></pre> <p>Is there any difference?</p>
<p>The latter is a closure which you are assigning to a variable. As soon as the variable is deleted (or is assigned a different value) you won't be able to call the function anymore. Besides that both are pretty much the same as functions are first class citizens in Javascript.</p>
<p>Those are functions, the first one is a <em>function declaration</em>, the second is a variable assignment with a <em>function expression</em>.</p> <p>The main difference is that the function declarations are <em>hoisted</em> up in the current scope at parse time, they behave like if you declared them at the top of its enclosing scope.</p> <p>The grammar of both is very similar, the only grammatical difference is that the name <em>function expressions</em> is optional, the parser knows which one you are using based on the "context" where you use it, e.g. your first example is a <em>function declaration</em> because the function itself is defined on a <code>Program</code> (technically a place outside of any function, in the global scope), or in <code>FunctionBody</code> (inside a function).</p> <p>A <em>function expression</em> is created when it is evaluated itself in <em>expression context</em>, e.g.:</p> <pre><code>function foo () {} // function declaration (function foo() {}); // function expression </code></pre> <p>In the above example the second one is interpreted as a function expression because is surrounded by parentheses, and parentheses can only hold <em>expressions</em>...</p> <p>I highly recommend you the following in-depth article about the topic:</p> <ul> <li><a href="http://yura.thinkweb2.com/named-function-expressions/" rel="nofollow noreferrer">Named function expressions demystified</a></li> </ul>
<p>Firstly, you're defining functions, not classes.</p> <p>Secondly, the second definition will put the <code>myclass</code> into the global namespace, whereas the first will not (it would be defined in function scope instead). However, so far as I'm aware, the following are roughly equivalent:</p> <pre><code>function myclass() {} </code></pre> <p>and</p> <pre><code>var myclass = function() {} </code></pre> <p>There are some small differences, which are <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Functions" rel="nofollow noreferrer">explored over on developer.mozilla.org</a>. Having said that, I've never noticed any of the differences.</p>
<p>In the second case, you are declaring the function as a variable. It is particularly useful for something like this in OOP:</p> <pre><code>var myObject = new Object(); myObject.add = function(a,b) { return a + b; }; myObject.add(1, 2); </code></pre>