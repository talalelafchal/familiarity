Javascript: Call function, pass array of arguments, similar to setTimout()'s functionality
<p>I want to do what setTimout does, manually, with no timeout.</p> <pre><code>setTimeout(function,0,args); </code></pre> <p>Just call a function and pass it an array of arguments, without knowing or caring how many arguments were there.</p> <p>Basically I want to proxy the function call through another function.</p> <p>I'm bad with terminology, sorry.</p>
<pre><code>function f(a, b, c) { return a + b + c; } alert(f.apply(f, ['hello', ' ', 'world'])); </code></pre>
<p>Sounds like you want a function with variable arguments as an argument. The best way to do this is either an explicit Array or object in general.</p> <pre><code>myFunction(callbackFunction, count, arrayOfOptions); myFunction(callbackFunction, count, objectOfOptions); </code></pre>
<p>Take a look at javascript's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments" rel="nofollow noreferrer">arguments</a> variable. This is an array of all arguments passed in to the function.</p> <p>So you can create your core function like this: </p> <pre><code>f = function () { for (arg in arguments) { // do stuff } } </code></pre> <p>Then, create a new function with the right arguments: </p> <pre><code>f2 = function () { return f(arg1, arg2, arg3 /* etc. */); } </code></pre> <p>And pass this function to setTimeout: </p> <pre><code>setTimeout(f2, 0); </code></pre>
<p>In ES6:</p> <pre><code>function myFunc(a, b, c){ console.log(a, b, c); } var args = [1, 2, 3]; myFunc(...args); </code></pre>