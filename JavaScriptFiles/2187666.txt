Help with JS and functions parameters
<p>Does JS support two functions with the same name and different parameters ?</p> <pre><code>function f1(a, b) { // a and b are numbers } function f1(a, b, c) { // a is a string //b and c are numbers } </code></pre> <p>Can I use those JS function for IE7, FF, Opera with no problem?</p>
<p>Javascript only uses the function that was defined last.</p> <p><a href="http://weblogs.asp.net/jgalloway/archive/2005/10/02/426345.aspx" rel="nofollow noreferrer">http://weblogs.asp.net/jgalloway/archive/2005/10/02/426345.asp</a>x</p> <p>You will need to implement your own logic inside the function to determine which parameters were passed in.</p>
<p>No, you can't use function overloading in JS.</p> <p>But, you can declare just the version with 3 parameters, and then check whether the third argument <code>=== undefined</code>, and provide differentiated behaviour on that basis.</p>
<p>No, that will not work, only the 2nd function will be defined on your page. <a href="http://weblogs.asp.net/jgalloway/archive/2005/10/02/426345.aspx" rel="nofollow noreferrer">Here</a>'s a source.</p>
<p>No you can't do that ... unless it is OK with you to only have your last definition hold.</p>
<p>JavaScript doesn't support what you would call in other languages <em>method overloading</em>, but there are multiple workarounds, like using the <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Functions/arguments" rel="nofollow noreferrer"><code>arguments</code></a> object, to check with how many arguments a function has been invoked:</p> <pre><code>function f1(a, b, c) { if (arguments.length == 2) { // f1 called with two arguments } else if (arguments.length == 3) { // f1 called with three arguments } } </code></pre> <p>Additionally you could type-check your arguments, for Number and String <em>primitives</em> is safe to use the <code>typeof</code> operator:</p> <pre><code>function f1(a, b, c) { if (typeof a == 'number' &amp;&amp; typeof b == 'number') { // a and b are numbers } else if (typeof a == 'string' &amp;&amp; typeof b == 'number' &amp;&amp; typeof c == 'number') { // a is a string, b and c are numbers } } </code></pre> <p>And there are much more sophisticated techniques like the one in the following article, that takes advantage of some JavaScript language features like closures, function application, etc, to mimic <em>method overloading</em>:</p> <ul> <li><a href="http://ejohn.org/blog/javascript-method-overloading/" rel="nofollow noreferrer">JavaScript method overloading</a></li> </ul>
<p>You can also use instanceof, example with basic polymorphism.</p> <p>First create a superclass (ball)</p> <pre><code>// superclass function Ball() { this.play = function() { alert("Ball throw"); }; } </code></pre> <p>and now for some subclasses (types of balls)</p> <pre><code>// subclass function Basketball() { this.play = function() { alert("basketball throw"); }; } // subclass function Soccerball() { this.play = function() { alert("soccer ball kick/throw"); console.debug("here"); }; } // subclass function Baseball() { this.play = function() { alert("strike 3 you're out"); console.debug("here"); }; } </code></pre> <p>Give them Ball functionality, aka set their superclass via prototype</p> <pre><code>// set subclass functionality Basketball.prototype = new Ball(); Soccerball.prototype = new Ball(); Baseball.prototype = new Ball(); </code></pre> <p>Some polymorphism (create a bunch of balls and play with them all, but play based on type)</p> <pre><code>var bunchOfBalls = [new Baseball(), new Soccerball(), new Basketball()]; for (var i = 0; i &lt; bunchOfBalls.length; i++) { bunchOfBalls[i].play(); } </code></pre> <p>Now write a function that takes a ball but only want to to work for specific type of balls (mimic function overloading, more or less)</p> <pre><code>//overloading dependent upon type function BasketbalOrBaseballOnlyPlay(aBall) { if (aBall instanceof Basketball) { //special basketball function } if (aBall instanceof Baseball) { //special baseball function } } </code></pre> <p>If aBall is a Basketball so <code>aBall = new Basketball();</code> then <code>aBall instanceof Basketball</code> would return true for Basketball and false for baseball but true for Ball.</p> <p>So <code>aBall instanceof Ball</code> would return true because a Basketball is a Ball. </p> <p><a href="http://jsfiddle.net/kLCPB/" rel="nofollow">See code live at <a href="http://jsfiddle.net/kLCPB/" rel="nofollow">http://jsfiddle.net/kLCPB/</a></a></p>