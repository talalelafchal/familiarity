Why does this JS code fail?
<pre><code>259 function isNumeric(strString) { 260 var strValidChars = "0123456789"; 261 var strChar; 262 var blnResult = true; 263 264 if (strString.length == 0) { 265 return false; 266 } 267 268 // Test strString consists of valid characters listed above 269 for (i = 0; i &lt; strString.length &amp;&amp; blnResult == true; i++) 270 { 271 strChar = strString.charAt(i); 272 if (strValidChars.indexOf(strChar) == -1) 273 { 274 blnResult = false; 275 } 276 } 277 return blnResult; 278 } </code></pre> <p>Firefox crashes on line 264 with the following message:</p> <blockquote> <p>strString is undefined</p> </blockquote> <p>Why does this code fail? strString is a formal parameter of the isNumeric function, so it should always be defined.</p>
<p>The code calling your function is not providing a defined value for that variable.</p>
<p>I"m not sure, but looking at what the function does I'd say this is the perfect spot for a regular expression. Why aren't you <a href="http://www.techfeed.net/blog/index.cfm/2006/2/23/JavaScript-isNumeric-function" rel="nofollow noreferrer">using one</a>? It looks more capable than the function you took from Code Toad.</p>
<p>You are probably passing an undefined value to your function from the calling code. The length property is only defined for strings and arrays, therefore the error message. You could test for undefined like this:</p> <pre><code>if (typeof strString == "undefined") { return false; } </code></pre>
<p>Replace</p> <pre><code>if (strString.length == 0) { </code></pre> <p>with</p> <pre><code>if (strString == null || strString.length == 0) { </code></pre>
<p>Re-create the error like so...</p> <pre><code>javascript:alert(isNumeric(undefinded)); </code></pre> <p>And fix it like so...</p> <pre><code>function isNumeric(strString) { strString = strString + ""; </code></pre> <p>But why not use a regular expression?</p> <pre><code>function isNumeric(val) { return /^[0-9]+$/.test(val); } </code></pre>
<p>Why do you say it's a <em>formal paramater</em>?</p> <p>JavaScript is very flexible with parameters; it doesn't throw any warnings when the number of parameters you pass are different from the definition. This is rather flexible but also confusing for people that come from a C/C++ background.</p>