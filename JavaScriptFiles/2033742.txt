How to insert external stylesheet in JavaScript (dynamically)
<p>...with right path.</p> <p>For example. I have script called foo.js. I'd like to insert stylesheet declaration which I can do with following instruction:</p> <pre><code>$('head').append('&lt;link rel="stylesheet" href="/template/foo.css" type="text/css" /&gt;'); </code></pre> <p><strong>Problem</strong>: I have to put full path to the stylesheet file. So instead of /template/foo.css I have to put: <a href="http://hostname/directory/template/foo.css" rel="nofollow noreferrer">http://hostname/directory/template/foo.css</a>. I can't set it statically beacause script can be placed in different servers and different locations. So it can be: <a href="http://foo.com/bar/foo.css" rel="nofollow noreferrer">http://foo.com/bar/foo.css</a> or <a href="http://foo.com/foo.css" rel="nofollow noreferrer">http://foo.com/foo.css</a>. </p> <p>It would be very useful if I can get path of foo.js file on the server. That would be good enough beacause then I could set stylesheet location based on the javascrpt's file.</p>
<p>You can use <code>window.location</code> and obtain the path from that. For example for this page it is:</p> <pre><code>&gt;&gt;&gt; window.location http://stackoverflow.com/questions/2033742/how-to-insert-external-stylesheet-in-javascript-dynamically </code></pre>
<p>I've always done:</p> <pre><code>$('body').append('&lt;link rel="stylesheet" href="/template/foo.css" type="text/css" /&gt;'); </code></pre> <p>instead of <strong>head</strong></p> <p>Ahh... sorry I just realised what your problem is. One strategy is to extract the path of the script from the DOM itself:</p> <pre><code>$('script').each(function(i,el){ var path = el.src.match(/^(.+)\/foo.js$/); if (path) { $('body').append('&lt;link rel="stylesheet" ' + 'href="' + path[1] + '/foo.css" ' + 'type="text/css" /&gt;' ); } }) </code></pre>
<p>This is a common technique that I use to get the current script url:</p> <pre><code>var scriptUrl = (function() { var scripts = document.getElementsByTagName('script'), script = scripts[scripts.length - 1]; return script.src; })(); </code></pre> <p>It works basically because when the script is being executed, it is the last <code>script</code> tag on the DOM.</p>