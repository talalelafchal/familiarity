Difference between the javascript String Type and String Object?
<p>I've been messing around with the ECMA-262 standard <em>(ECMAScript Language Specification, 3rd edition, if it matters for this - I have not found any difference between the 3rd and 5h edition on String Type / String Object)</em>.</p> <p>There's one thing that baffles me, the difference between the String Type and the String Object, yes I know the difference in the sense that the <em>String Type</em> is a sequence of 16 bit UTF-16 units and the <em>String Object</em> is a built in object with its internal <em>Class</em> property set to "String" and its internal <em>Value</em> property set to a value of the <em>String Type</em>.</p> <p>But reading the specification, the string type does not seem to expose any methods, aka. it's just a value without any additional properties. Take this code, everything is exactly as expected:</p> <pre><code>document.writeln(typeof "foo"); // 'string' document.writeln(typeof new String("foo")); // 'object' </code></pre> <p>The first type of the actual <em>String Type</em> and the second is the <em>Object Type</em> (it's an object of class <em>String</em>, but it's data type is object). However, looking at this:</p> <pre><code>"foo".charAt(0); fooStrObj = new String("Foo"); fooStrObj.charAt(0); </code></pre> <p>They both seem to expose the same functions, but there are no functions on the <em>String Type</em> defined in the ECMA-262 standard, all the functions it exposes are from the String.prototype object (and I can see no reference to the fact that the <em>String Type</em> magically exposes all the properties and functions of the String.prototype object in the ECMA-262 standard). So are the values of type <em>String Type</em> automatically promoted to a <em>String Object</em> with the original <em>String Type</em> value as it's internal <em>Value</em> property?</p> <p>And if they are treated exactly the same (which for all intents and purposes they seem to be) why do two different ways to represent a <em>String</em>.</p>
<p>It's analogous to the difference between <code>int</code> and <code>Integer</code> in Java.</p> <p>According to the standard, strings are automatically converted to <code>String</code> objects when you try to call a method. See <a href="http://bclary.com/2004/11/07/#a-11.2.1" rel="nofollow noreferrer">ECMA 262-3 section 11.2.1</a>; step 5 calls <a href="http://bclary.com/2004/11/07/#a-9.9" rel="nofollow noreferrer">ToObject</a>.</p> <p>As a specification technique, this is a hack to explain how strings can appear to have methods even though they're not really objects.</p> <p>Apart from that, the wrapper objects are not very useful. I don't know why they're in the language. I rather wish they weren't. :)</p>
<p>Strings are a value type in JS, so they can't have any properties attached to them, no prototype, etc. Any attempt to access a property on them is technically performing the JS [[ToObject]] conversion (in essence new String).</p> <p>Easy way of distinguishing the difference is (in a browser)</p> <pre><code>a = "foo" a.b = "bar" alert("a.b = " + a.b); //Undefined A = new String("foo"); A.b = "bar"; alert("A.b = " + A.b); // bar </code></pre> <p>Additionally while</p> <pre><code>"foo" == new String("foo") </code></pre> <p>is true, it is only true due to the implicit type conversions of the == operator</p> <pre><code>"foo" === new String("foo") </code></pre> <p>will fail.</p>