How to break an functional-style iteration?
<p>I'm experimenting with functional-style Javascript and have encountered an interesting situation. I have a foreach function that takes a collection and function object:</p> <pre><code>var Utils = {}; // Applies a functor to each item in a collection. Utils.foreach = function(collection, functor) { for (var i = 0; i &lt; collection.length; i++) { functor(collection[i]); } }; </code></pre> <p>This is cool. However now I want to implement another function: </p> <pre><code>// Checks if a collection contains an item. Utils.has = function(collection, item) { Utils.foreach(collection, function(obj) { if (item === obj) { return true; // How to force a return from the foreach function? } }); return false; }; </code></pre> <p>As you can see I can't implement the "has" function because my return statement doesn't break the iteration.</p> <p>Can someone recommend a solution for this problem?</p>
<p>I guess what you want is not actually <code>forEach</code>, but rather <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/some" rel="nofollow noreferrer"><code>some</code></a> (other languages call it <code>any</code>). The couterpart is <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/every" rel="nofollow noreferrer"><code>every</code></a> (or <code>all</code> in other languages). You'll find an example implementation on MDC.</p>
<p>Here is something real quick and untested ( it is friday 4:50 time to go home). I'll try to test and update this post later. see if this helps:</p> <pre><code>Utils = {}; Utils.foreach = function(collection, functor) { loop: for (var i in collection) { if (functor(collection[i])) { alert("breaking the loop!"); break loop; } } }; Utils.has = function(collection, item) { var bolReturn = false; Utils.foreach(collection, function(obj) { if (item === obj) { bolReturn = true; return true; } return false; }); return bolReturn; }; Utils.has({"test":""}, ""); </code></pre>
<p>You need a modification to each.</p> <p>Start by modifying <code>has</code>:</p> <pre><code>Utils.has = function (collection, item) { var found = false; Utils.foreach(collection, function (obj) { if (item === obj) { found = true; return false; } }); return found; }; </code></pre> <p>Then you need to modify <code>forEach</code> to end early when it gets <code>false</code></p> <pre><code>Utils.foreach = function (collection, functor) { var prop; for (prop in collection) { if (prop.hasOwnProperty(prop)) { if (functor(collection[prop]) === false) { return; } } } }; </code></pre>
<p>I don't think you need to abandon your structure- why not throw and catch an error to break out of the loop?</p> <pre><code> Utils.has= function(collection, item){ try{ ControlCenter.foreach(collection, function(obj){ if(item=== obj){ throw 'found it!' } }); } catch(er){ if(er== 'found it!') return true; } return false; }; </code></pre>