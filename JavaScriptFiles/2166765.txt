Search an array for matching attribute
<p>I have an array, I need to return a restaurant's name, but I only know the value of its "food" attribute (not it's index number).</p> <p>For example, how could I return "KFC" if I only knew "chicken"?</p> <pre><code>restaurants = [ {"restaurant" : { "name" : "McDonald's", "food" : "burger" }}, {"restaurant" : { "name" : "KFC", "food" : "chicken" }}, {"restaurant" : { "name" : "Pizza Hut", "food" : "pizza" }} ]; </code></pre>
<pre><code>for(var i = 0; i &lt; restaurants.length; i++) { if(restaurants[i].restaurant.food == 'chicken') { return restaurants[i].restaurant.name; } } </code></pre>
<p>Must be too late now, but the right version would be: </p> <pre><code>for(var i = 0; i &lt; restaurants.restaurant.length; i++) { if(restaurants.restaurant[i].food == 'chicken') { return restaurants.restaurant[i].name; } } </code></pre>
<pre><code>for (x in restaurants) { if (restaurants[x].restaurant.food == 'chicken') { return restaurants[x].restaurant.name; } } </code></pre>
<p>In this case i would use the ECMAscript 5 Array.filter. The following solution requires array.filter() that doesn't exist in all versions of IE. </p> <p>Shims can be found here: <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter">MDN Array.filter</a> or <a href="https://github.com/kriskowal/es5-shim">ES5-shim</a></p> <pre><code>var result = restaurants.filter(function (chain) { return chain.restaurant.food === "chicken"; })[0].restaurant.name; </code></pre>
<p>you can use ES5 some. Its pretty first by using callback</p> <pre><code>function findRestaurent(foodType) { var restaurant; restaurants.some(function (r) { if (r.food === id) { restaurant = r; return true; } }); return restaurant; } </code></pre>
<p>@Chap - you can use this javascript lib, DefiantJS (<a href="http://defiantjs.com" rel="nofollow">http://defiantjs.com</a>), with which you can filter matches using XPath on JSON structures. To put it in JS code:</p> <pre><code>var data = [ { "restaurant": { "name": "McDonald's", "food": "burger" } }, { "restaurant": { "name": "KFC", "food": "chicken" } }, { "restaurant": { "name": "Pizza Hut", "food": "pizza" } } ]. res = JSON.search( data, '//*[food="pizza"]' ); console.log( res[0].name ); // Pizza Hut </code></pre> <p>DefiantJS extends the global object with the method "search" and returns an array with matches (empty array if no matches were found). You can try out the lib and XPath queries using the XPath Evaluator here:</p> <p><a href="http://www.defiantjs.com/#xpath_evaluator" rel="nofollow">http://www.defiantjs.com/#xpath_evaluator</a></p>
<p>you can also use the <code>Array.find</code> feature of <code>es6</code>. the doc is <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="nofollow">here</a></p> <pre><code>return restaurants.find(item =&gt; { return item.restaurant.food == 'chicken' }) </code></pre>