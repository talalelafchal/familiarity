simplest way to write programs in javascript on desktop?
<p>I'm looking for way to write Javascript programs / scripts on desktop, not inside browser. I want it to run like Python - from the command line, to be able to read files, write files etc. All solutions I find mentioned (Rhino, spidermonkey, V8) are for embedding. Has anyone done simple implementation for just writing standalone programs with full capabilities of OS access etc.? </p> <p>For windows preferably, or maybe Linux</p>
<p>There is <a href="http://github.com/ry/node" rel="nofollow noreferrer">Node.js</a> that allows you to write server side JavaScript. Node.js can only work on Posix systems (e.g. Linux or Mac).It also has a really good REPL so you can start it up on from your terminal to write JavaScript and see how it works.</p>
<p><a href="http://live.gnome.org/Seed" rel="nofollow noreferrer">Seed</a> works on the GNOME platform. <a href="http://www.adobe.com/products/air/" rel="nofollow noreferrer">Adobe AIR</a> would be another approach. See this question: <a href="http://stackoverflow.com/questions/109399/can-you-do-desktop-development-using-javascript">Can you do Desktop Development using JavaScript?</a>.</p>
<p>If you have Windows, then you already have Windows Script Host. You can use that to execute javascript programs within Windows.</p> <p><a href="http://msdn.microsoft.com/en-us/library/9bbdkx3k(VS.85).aspx" rel="nofollow noreferrer">http://msdn.microsoft.com/en-us/library/9bbdkx3k(VS.85).aspx</a></p>
<p>Hans mentioned the Windows Script Host already, but there's a cool compiler for JScript and you probably already have it installed (it comes with .NET). You can write your JavaScript using any of the .NET libraries and compile it to a Windows .exe file. See <a href="http://msdn.microsoft.com/en-us/library/7435xtz6.aspx" rel="nofollow noreferrer">this link</a> for an introduction to compiling with jsc. You should be able to find more from there.</p> <p>This doesn't let you run from the command line like a script without compiling first, but you might be interested in it anyway since it gives you access to so many libraries.</p> <p>Here's a barebones test program. jsc is already on my path, type jsc in a command prompt to see if it's on yours.</p> <p>test.js:</p> <pre><code>import System.io; import System; function test() { Console.WriteLine("test"); }; function test2(arg) { Console.WriteLine(arg); }; test(); test2("argtest"); </code></pre> <p>Compiling and running:</p> <pre><code>C:\test&gt;jsc test.js Microsoft (R) JScript Compiler version 8.00.50727 for Microsoft (R) .NET Framework version 2.0.50727 Copyright (C) Microsoft Corporation 1996-2005. All rights reserved. C:\test&gt;dir Volume in drive C has no label. Directory of C:\test 03/05/2010 09:19 AM &lt;DIR&gt; . 03/05/2010 09:19 AM &lt;DIR&gt; .. 03/05/2010 09:26 AM 5,120 test.exe 03/05/2010 09:23 AM 178 test.js 2 File(s) - bytes 3 Dir(s) - bytes free C:\test&gt;test.exe test argtest C:\test&gt; </code></pre> <p>There seem to be some severe limitations that I ran into immediately in making that test program. For example, functions appear to be more strongly typed than in the browser environment. I couldn't call <code>test()</code> and pass an argument unless I defined that parameter as part of the function definition. If you're familiar with browser-hosted JavaScript you know that you can define a function with any number of parameters and call it with any number of arguments.</p> <p>So it appears that writing applications in JavaScript on the desktop will be quite a different experience if there are a lot more disparities with how you're used to using it.</p>
<p>The simplet way to develop desktop applications is to use Node Webkit -- <a href="https://github.com/rogerwang/node-webkit" rel="nofollow">https://github.com/rogerwang/node-webkit</a></p> <p>Good luck!</p>