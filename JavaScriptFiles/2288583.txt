Javascript Image object without instantiating
<p>This question is about javascript performance. Consider 3 examples for illustration:</p> <pre><code>function loadImgA() { new Image().src="http://example.com/image.gif" } function loadImgA1() { Image().src="http://example.com/image.gif" } function loadImgB() { var testImg = new Image(); testImg.src="http://example.com/image.gif" } </code></pre> <p>Now the point is I don't really need to manipulate the the image object after it was created, hence loadImgA(). The question is, what happens if nothing is assigned to the return value of the new Image() constructor - in that case I can actually skip the 'new' keyword as in loadImgA1()? Does the object then live outside the function or somehow affects memory usage? Other implications, differences? I reckon not, as no real instance was actually created?</p> <p>To put this into perspective, I only need to get the http request for image through. No preloading or other advanced image manipulation. What would be the preferred method from the above?</p>
<p>Using <code>Image()</code> without the <code>new</code> keyword will throw an error. In your examples <code>loadImgA()</code> and <code>loadImgB()</code> will have the same end result as nothing is returned from the function and no closure is created to make use of the <code>testImg</code> variable.</p> <p>With regards to memory usage, <code>new Image()</code> is an alias for <code>document.createElement("img")</code>. When a DOM element is created in the scope of a function and not added to the document, when all closures are complete the element should be marked for garbage collection and removed from memory. An instance <em>is actually created</em>, just not added to the DOM so it is destroyed when no longer in use.</p> <p>The only real problem I could see arising from this is that when the image object is destroyed, any current http requests on them might be destroyed. If that's the case, you might need to use the <code>onload</code> or <code>onerror</code> event handler to clean up after the image is loaded or if there is a problem.</p>