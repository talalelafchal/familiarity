How is it legal to use a function name as the argument to another function in JavaScript?
<p>I was gearing up for Javascript, reading the tutorials at <a href="http://w3schools.com" rel="nofollow noreferrer">W3Schools</a> and came across this code:</p> <pre><code>function sortNumber(a, b) { return a - b; } var n = ["10", "5", "40", "25", "100", "1"]; document.write(n.sort(sortNumber)); </code></pre> <p>It sorts the elements in the Array, pretty simple. But how can we pass <code>sortNumber</code> ( a function name) as a parameter to the sort function?<br /><br /> <a href="http://w3schools.com/jsref/tryit.asp?filename=tryjsref_sort2" rel="nofollow noreferrer">The original example</a></p>
<p>You're actually passing a reference to the function itself, not its name. If you were passing its name, you would enclose it in quotes like this: "sortNumber".</p> <p><a href="http://www.w3schools.com/jsref/jsref_sort.asp" rel="nofollow noreferrer">sort() (as the documentation says)</a> takes an optional argument which specifies the sorting function.</p>
<p><code>But how can we pass sortNumber ( a function name) as a parameter to the sort function?</code></p> <p>Functions are <a href="http://en.wikipedia.org/wiki/First-class_object" rel="nofollow noreferrer">first-class objects</a> in JS and can be passed around as parameters or variables. Are you clear how the sort itself is working?</p>
<p>If you look at the <a href="http://www.w3schools.com/jsref/jsref_sort.asp" rel="nofollow noreferrer">documentation</a> for the <code>sort</code> function within Javascript, the parameter that it accepts, which is optional is a function that can be used to determine the sort.</p> <p>The function returns a positive, negative or zero value allowing the sort function to determine where everything needs to go.</p>
<p>The answer is available on W3Schools as well : <a href="http://www.w3schools.com/jsref/jsref_sort.asp" rel="nofollow noreferrer">http://www.w3schools.com/jsref/jsref_sort.asp</a></p> <p>the Array sort() method takes one parameter which is a function handler.</p>
<p>A variable in javascript can contain a anytype of value, that includes functions. If you use the name of the function without the parenthesis, your referencing the function, and not actually calling it. </p>
<p>Functions are first class citizens in javascript. </p> <p>Sort can take an optional paramater, a function that returns a -1, 0 or 1(whether a greater, equal to or lessthan b)</p> <p>Using a-b returns a positive, zero or negative number, to do this.</p>
<p>Surprisingly, JavaScript has its roots in a language called Scheme.</p> <p>Scheme allows certain functions (called 'lambda functions') to be passed around as though they were a variable.</p> <p>JavaScript handles functions in much the same way scheme did. (Some people say that "functions are first-class-citizens in JavaScript.")</p> <p>For example, you can write:</p> <pre><code>// Assign a function to foo var foo = function () { alert('bar'); }; // Call foo like a function foo(); </code></pre> <p>The result would be that the message 'bar' is shown.</p> <p>The classic example of lambdas is the "Adder" example:</p> <pre><code>adder = function (x) { return function (y) { x + y } }; add5 = adder(5); add5(1); // == 6 </code></pre> <p>Hope this helps.</p>