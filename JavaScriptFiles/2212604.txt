Javascript check Mouse clicked inside the Circle or Polygon
<p>Any one know how to check that wheter a mouse is clicked inside the circle or polygon. My problem is I want to check that if mouse has been clciked inside the circle or polygon. circle or polygon coordinates has been stored inside an array. Any help is really appreciated</p>
<p>Circles are easy, just check that the distance from the point to the center of the circle is less than the radius of the circle using the <a href="http://en.wikipedia.org/wiki/Pythagorean_theorem" rel="nofollow noreferrer">Pythagorean theorem</a> (see also <a href="http://stackoverflow.com/questions/1105269/finding-a-coordinate-in-a-circle">this question</a>).</p> <p>Polygons are <a href="http://en.wikipedia.org/wiki/Point_in_polygon" rel="nofollow noreferrer">more challenging</a>. That article links to C code to do it, which should be translate-able to JavaScript.</p>
<p>For the circle case it is very easy, just just check if the distance from the point to the center is less than (oet) the radius:</p> <pre><code>function intersects(x, y, cx, cy, r) { var dx = x-cx var dy = y-cy return dx*dx+dy*dy &lt;= r*r } </code></pre> <hr> <p>For the polygon, the easiest way is to imagine a line going straight up form the point. If this line crosses an odd number of polygon borders, your point is inside the polygon. (It would just cross one polygon border for a simple convex polygon)</p> <p>You might also be able to find a third party geometry library, but it will likely take you more time than, than coding it yourself.</p>
<p>As suggested by <a href="http://stackoverflow.com/questions/2212604/javascript-check-mouse-clicked-inside-the-circle-or-polygon/2212618#2212618">some other answers</a>, I followed some links and <a href="http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html" rel="nofollow noreferrer">found the c code here</a>. Here is the JavaScript translation for finding whether a point is in a polygon</p> <blockquote> <p>Copyright (c) 1970-2003, Wm. Randolph Franklin</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <ol> <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.</li> <li>Redistributions in binary form must reproduce the above copyright notice in the documentation and/or other materials provided with the distribution.</li> <li>The name of W. Randolph Franklin may not be used to endorse or promote products derived from this Software without specific prior written permission. </li> </ol> <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </p> </blockquote> <pre><code>function pnpoly( nvert, vertx, verty, testx, testy ) { var i, j, c = false; for( i = 0, j = nvert-1; i &lt; nvert; j = i++ ) { if( ( ( verty[i] &gt; testy ) != ( verty[j] &gt; testy ) ) &amp;&amp; ( testx &lt; ( vertx[j] - vertx[i] ) * ( testy - verty[i] ) / ( verty[j] - verty[i] ) + vertx[i] ) ) { c = !c; } } return c; } </code></pre> <blockquote> <p><em>nvert</em> - Number of vertices in the polygon. Whether to repeat the first vertex at the end is discussed below.<br> <em>vertx, verty</em> - Arrays containing the x- and y-coordinates of the polygon's vertices.<br> <em>testx, testy</em> - X- and y-coordinate of the test point. </p> </blockquote>
<p>I assembled an example with the above function: <a href="http://jsfiddle.net/jcspader/Vz6ka/" rel="nofollow">http://jsfiddle.net/jcspader/Vz6ka/</a></p> <pre><code>var gDrawingContext = $("canvas")[0].getContext("2d"); gDrawingContext.beginPath(); gDrawingContext.arc(50, 50, 10, 0, Math.PI*2, false); gDrawingContext.closePath(); gDrawingContext.strokeStyle = "red"; gDrawingContext.stroke(); gDrawingContext.beginPath(); gDrawingContext.arc(55, 55, 10, 0, Math.PI*2, false); gDrawingContext.closePath(); gDrawingContext.strokeStyle = "blue"; gDrawingContext.stroke(); function intersects(x, y, cx, cy, r) { var dx = x-cx var dy = y-cy return dx*dx+dy*dy &lt;= r*r } console.clear(); $("canvas").on("click", function (e){ if (intersects(e.pageX, e.pageY, 55, 55, 10)) console.info(e.pageX + ", " + e.pageY ); }); </code></pre>
<p>I'd have a look at the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.isPointInPath" rel="nofollow">isPointInPath</a> method.</p> <p>It will require you to plot the path onto a 'canvas' element, but there's a good chance that you want to be doing that anyway to render it. If you don't need to render your polygon on a canvas you can create an invisible canvas element (create it but never add it to the DOM).</p> <pre><code>var canvas = document.getElementById('canvas'); // Or document.createElement('canvas'); var ctx = canvas.getContext('2d'); ctx.beginPath(); for (var i = 0; i &lt; coords.length; i++) { ctx.lineTo(coords[i].x, coords[i].y); } ctx.isPointInPath(50,50); </code></pre> <p>Assuming you have an array of coordinate objects with x and y properties on them the above code should tell you if the point (50, 50) lies within the bounds of your shape.</p>