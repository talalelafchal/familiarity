passing a local variable within the function
<p>By clicking on the following DIV, nothing happens. Where is the error ?</p> <pre><code>&lt;div onclick="function dummy(that) { alert(that.toString())}" class="next"&gt;&gt;&lt;/div&gt; </code></pre> <p>Please help.</p>
<p>You are defining <code>dummy</code> but not calling it. I don't think it works that way, not in the HTML <code>onclick</code> property anyway.</p> <p>I suggest you move dummy() into a separate code block:</p> <pre><code>&lt;script type='text/javascript'&gt; function dummy(that) { alert(that.toString())} &lt;/script&gt; </code></pre> <p>and then: </p> <pre><code>&lt;div onclick="dummy(this);" class="next"&gt;&gt;&lt;/div&gt; </code></pre> <p>or attach the function programmatically like so:</p> <pre><code>document.getElementById("myDummyDIV").onclick = function(event) { ..... } </code></pre>
<p>This should do the trick:</p> <pre><code>&lt;div onclick="dummy(this);" class="next"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; function dummy(that) { alert(that.toString()); } &lt;/script&gt; </code></pre>
<p>This is a function declaration, not invocation.</p> <p>You could do something like this:</p> <p><code>(function dummy(that) { alert(that.toString())}) (event);</code></p> <p>and the complete HTML would be:</p> <p><code>&lt;div onclick="(function dummy(that) { alert(that.toString())})(event);" class="next"&gt;&gt;&lt;/div&gt;</code></p>
<p>you dont create function here you can just write the following </p> <pre><code>&lt;div onclick="alert(that.toString())" class="next"&gt;&gt;&lt;/div&gt; </code></pre>
<p>This is silly actually. The function you've declared is unusable as a function unless you intend to do some more fantastic stuff and call the click event of this link from other methods elsewhere. However, if you're hell-bent-for-leather intent on putting the function declaration in the onclick event, it can be done this way:</p> <pre><code>&lt;div onclick="(function dummy(that) { alert(that.toString())})();" class="next"&gt;&gt;&lt;/div&gt; </code></pre> <p>You end up putting the function in it's own block and then the () at the end tells the parser to do it.</p>