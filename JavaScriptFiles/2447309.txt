Javascript removeChild() and appendChild() VS display=none and display=block|inline
<p>I'm developing a web application that shows some controls and descriptions dynamically (I don't want to use jQuery or other libraries).</p> <p>At this moment i make appear and disappear controls using:</p> <pre><code>element.setAttribute("style", "display : inline"); </code></pre> <p>and</p> <pre><code>element.setAttribute("style", "display : none"); </code></pre> <p>but i'm thinking about using:</p> <pre><code>element.appendChild(childRef); </code></pre> <p>and</p> <pre><code>element.removeChild(childRef); </code></pre> <p>So, which one is the best solution in terms of system speed and elegance of the code? Or is there a better way to go about this?</p>
<p>Definitely go on using display properties. They are much faster than removing/appending children, but most important they work very well in every browsers.</p> <p>I know appendChild/removeChild are supposed to be well supported in IE, but sometimes on my IE7 a still get things moving around after a new element is appended (this is only my personal experience).</p> <p>Regarding the way you change the display properties I would simply do a more easy and cross-browser (setAttribute is not well supported by IE6/7 an also IE8 when in IE7 mode):</p> <pre><code>element.style.display = 'none'; //for hiding an element element.style.display = ''; //for showing that element again using its default way of displaying </code></pre> <p><strong>Showing an element by using display = 'inline' is wrong</strong> because the element might have by default a display block way of showing like DIV tags and you are changing its way of showing to inline wich is not correct and might lead to elements in your page moving out from the places you expect them to be.</p>
<p>The first approach is better i think which just hides and displayes but does not remove from the DOM and add again.</p>
<p><code>element.appendChild(childRef);</code> and <code>element.removeChild(childRef);</code> both make the browser to manipulate the DOM tree while changing CSS just changes one of the attributes. </p> <p>So, changing CSS is faster.</p> <hr> <p><a href="http://dev.opera.com/articles/view/efficient-javascript/?page=3" rel="nofollow noreferrer">Dev Opera</a> says</p> <blockquote> <p>When an element has its display style set to none, it will not need to repaint, even if its contents are changed, since it is not being displayed. This can be used as an advantage. If several changes need to be made to an element or its contents, and it is not possible to combine these changes into a single repaint, the element can be set to display:none, the changes can be made, then the element can be set back to its normal display.</p> <p>This will trigger two extra reflows, once when the element is hidden, and once when it is made to appear again, but the overall effect can be much faster</p> </blockquote> <hr> <p><a href="http://www.ajaxlines.com/ajax/stuff/article/css_performance_making_your_javascript_slow.php" rel="nofollow noreferrer">Another relevant article</a> explains about <code>reflow</code> and <code>repaint</code></p>
<p>I would think that performance is better just updating the style. </p> <p>The answer will depend on what you are using the elements for. If it is very dynamic whether they should be shown or not, it might be a solution to add/remove from DOM, but if there are a static set of elements, it might be easier to set the style. Setting the style, you also have more control of the position in the document. Adding/removing from DOM, you need to be sure it is added at the right place. </p> <p><strong>Note:</strong><br> Instead of <code>element.setAttribute("style", "display:none");</code> you can use <code>element.style.display= "none";</code> If you use the first approach, you will remove any other style settings on the element.</p>
<p>I doubt there's much in it one way or the other, and even if there is, I bet it varies by implementation (IE vs. Chrome vs. Firefox vs. ...). Both will cause reflow events in the tree.</p> <p>Showing and hiding is simple and straightforward. Adding and removing can have its uses, but for the most part is probably overkill. For one thing, you have to keep a reference to it so you can add it back later, and you have to remember where you need to add it back.</p> <p>But (and this is a bit off-topic) your mechanism for showing and hiding has some issues:</p> <ol> <li><p>With your example code, things can only be <code>inline</code>, not <code>inline-block</code> or <code>block</code>, which would be somewhat...limiting.</p></li> <li><p>Your code also completely replaces the style information on the element (and may not work on IE; see David's comment on your question), so all other styles directly applied to the element will get blown away; consider using the <code>style</code> property of the element instead: <code>childRef.style.display = 'none";</code> and <code>childRef.style.display = "inline";</code> (or <code>block</code>, or...). That way, you don't bludgeon any other styles on the element.</p></li> </ol> <p>Completely removing a child from the tree (while keeping a reference to it so you can put it back later) definitely has its uses, though. For instance, when it's not in the tree, it won't be found when you're walking the tree with selectors for doing this, that, and the other; which may be helpful.</p>
<p>I think editing the style of an element will be faster, but which is better hide the element or remove it from dom, this depends on your needs, if you need to just hide the element or remove it.<br> May be you don't need the user see the element but you need to do some js logic on it, so hide here will be the best.</p>
<p>A small aside: if you happen to be dealing with user editable elements in IE (i.e. inside a document with <code>designMode</code> "on" or inside an element with <code>contenteditable</code> true), setting the CSS <code>display</code> property to <code>none</code> won't have any effect, and you'll need to remove the elements from the DOM to hide them.</p>