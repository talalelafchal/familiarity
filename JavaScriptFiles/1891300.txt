window.event.srcElement.options NOT Work on FF
<p><code>window.event.srcElement.options(window.event.srcElement.selectedIndex).value</code> works in Internet Explorer (and Chrome) but not in FireFox. How to make this work in FireFox as well?</p>
<pre><code>var addEvent = (function() { function addEventIE(el, ev, fn) { return el.attachEvent('on' + ev, function(e) { return fn.call(el, e); }); } function addEventW3C(el, ev, fn) { return el.addEventListener(ev, fn, false); } return window.addEventListener ? addEventW3C:addEventIE; })(); var domRef = document.getElementById('foo'); addEvent( domRef, 'change', function(e) { e = e || window.event; var el = e.target ? e.target : e.srcElement, value = el.value; alert( value ) }); </code></pre> <p>in IE, <code>event</code> is a property of window, in modern DOM supporting browsers it's passed as the first argument.</p>
<p>There are two approaches: Assume there is markup</p> <pre><code>&lt;SELECT name="ddlQuery" id="ddlQuery" style="width:273px;" onchange="GetDropDownValue(event)"&gt; ... </code></pre> <p>on HTML.</p> <p>One using js function:</p> <pre><code>function GetDropDownValue(e) { var rtnVal = ""; var sel = document.getElementById(getTargetID(e)); for (var i = 0; i &lt; sel.options.length; ++i) { if (sel.options[i].selected == true) { rtnVal = sel.options[i].value; break; } } alert(rtnVal); return rtnVal; } function getTargetID(e) { if (!e) { var e = window.event; } var objTarget = e.srcElement ? e.srcElement : e.target; return objTarget.id; } </code></pre> <p>another using jQuery:</p> <pre><code>$('#ddlQuery').val() </code></pre>
<p><code>event.target.options[event.target.selectedIndex].value</code>. Though as always with events you'd have to have passed the event object into a function, so eg.:</p> <pre><code>&lt;script&gt; function selectChanged(event) { var target= event.target || event.srcElement; doSomethingWith(target.options[target.selectedIndex].value); }; &lt;/script&gt; &lt;select onchange="selectChanged(event)"&gt;...&lt;/select&gt; </code></pre> <p>Setting the handler directly and using <code>this</code> may be easier:</p> <pre><code>&lt;select id="x"&gt;...&lt;/select&gt; &lt;script&gt; document.getElementById('x').onchange= function() { doSomethingWith(this.options[this.selectedIndex].value); }; &lt;/script&gt; </code></pre> <p>Note that looking at <code>options[selectedIndex]</code> is for compatibility with older browsers. These days you can usually just get away with saying <code>select.value</code>.</p>
<p>There is no global <code>event</code> object in Firefox. Events are passed to their handlers as an argument. Also, instead of <code>srcElement</code>, you look for <code>target</code>.</p> <p>If you use a javascript library like jQuery, all the browser specific quirks are handled for you.</p> <p>Otherwise, I suggest you to read these articles</p> <ul> <li><a href="http://www.quirksmode.org/js/introevents.html" rel="nofollow noreferrer">http://www.quirksmode.org/js/introevents.html</a></li> <li><a href="http://www.quirksmode.org/js/events_properties.html" rel="nofollow noreferrer">http://www.quirksmode.org/js/events_properties.html</a></li> </ul>
<p>IE uses <code>srcElement</code> where most other browsers (including Firefox) use <code>target</code>.</p> <p>Also, Firefox passes around event objects, whereas IE just populates the global event object w/the current event's data.</p> <p>You'll have to handle both in your code. How you handle the 2nd one will depend on how you're assigning the handler.</p> <p>But here's one way.</p> <pre><code>function changeHanlder( event ) { var elem = event.target || event.srcElement; alert( elem.options[elem.selectedIndex].value ); } </code></pre> <p>It's also worth noting that all the modern javascirpt libraries handle this abstraction for you.</p>
<p>Firefox uses e.htmlEvent.target.nodeName</p> <p>you can use <strong>try/catch</strong> to handle both browsers. </p>