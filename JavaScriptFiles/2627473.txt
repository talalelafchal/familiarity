How to calculate the number of days between two dates using JavaScript? 
<p>I am calculating the number of days between the 'from' and 'to' date. For example, if the from date is 13/04/2010 and the to date is 15/04/2010 the result should be 2. How do I get the result using JavaScript? </p>
<p><a href="http://www.mcfedries.com/JavaScript/DaysBetween.asp" rel="nofollow noreferrer">Here's a function</a> that does this:</p> <pre><code>function days_between(date1, date2) { // The number of milliseconds in one day var ONE_DAY = 1000 * 60 * 60 * 24 // Convert both dates to milliseconds var date1_ms = date1.getTime() var date2_ms = date2.getTime() // Calculate the difference in milliseconds var difference_ms = Math.abs(date1_ms - date2_ms) // Convert back to days and return return Math.round(difference_ms/ONE_DAY) } </code></pre>
<p>Googling "number of days between two dates javascript" produces <a href="http://www.vijayjoshi.org/2008/10/24/faq-calculate-number-of-days-between-two-dates-in-javascript/" rel="nofollow noreferrer">this great snippet</a> (actually all the top results are relevant to your question):</p> <pre><code>var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds var firstDate = new Date(2008,01,12); var secondDate = new Date(2008,01,22); var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime())/(oneDay))); </code></pre>
<p>Adjusted to allow for daylight saving differences. try this:</p> <pre><code> function daysBetween(date1, date2) { // adjust diff for for daylight savings var hoursToAdjust = Math.abs(date1.getTimezoneOffset() /60) - Math.abs(date2.getTimezoneOffset() /60); // apply the tz offset date2.addHours(hoursToAdjust); // The number of milliseconds in one day var ONE_DAY = 1000 * 60 * 60 * 24 // Convert both dates to milliseconds var date1_ms = date1.getTime() var date2_ms = date2.getTime() // Calculate the difference in milliseconds var difference_ms = Math.abs(date1_ms - date2_ms) // Convert back to days and return return Math.round(difference_ms/ONE_DAY) } // you'll want this addHours function too Date.prototype.addHours= function(h){ this.setHours(this.getHours()+h); return this; } </code></pre>
<p>I have written this solution for another post who asked, how to calculate the difference between two dates, so I share what I have prepared:</p> <pre><code>// Here are the two dates to compare var date1 = '2011-12-24'; var date2 = '2012-01-01'; // First we split the values to arrays date1[0] is the year, [1] the month and [2] the day date1 = date1.split('-'); date2 = date2.split('-'); // Now we convert the array to a Date object, which has several helpful methods date1 = new Date(date1[0], date1[1], date1[2]); date2 = new Date(date2[0], date2[1], date2[2]); // We use the getTime() method and get the unixtime (in milliseconds, but we want seconds, therefore we divide it through 1000) date1_unixtime = parseInt(date1.getTime() / 1000); date2_unixtime = parseInt(date2.getTime() / 1000); // This is the calculated difference in seconds var timeDifference = date2_unixtime - date1_unixtime; // in Hours var timeDifferenceInHours = timeDifference / 60 / 60; // and finaly, in days :) var timeDifferenceInDays = timeDifferenceInHours / 24; alert(timeDifferenceInDays); </code></pre> <p>You can skip some steps in the code, I have written it so to make it easy to understand.</p> <p>You'll find a running example here: <a href="http://jsfiddle.net/matKX/" rel="nofollow">http://jsfiddle.net/matKX/</a></p>
<p>Here's what I use. If you just subtract the dates, it won't work across the Daylight Savings Time Boundary (eg April 1 to April 30 or Oct 1 to Oct 31). This drops all the hours to make sure you get a day and eliminates any DST problem by using UTC.</p> <pre><code>var nDays = ( Date.UTC(EndDate.getYear(), EndDate.getMonth(), EndDate.getDate()) - Date.UTC(StartDate.getYear(), StartDate.getMonth(), StartDate.getDate())) / 86400000; </code></pre>
<p>From my little date difference calculator:</p> <pre><code>var startDate = new Date(2000, 1-1, 1); // 2000-01-01 var endDate = new Date(); // Today // Calculate the difference of two dates in total days function diffDays(d1, d2) { var ndays; var tv1 = d1.valueOf(); // msec since 1970 var tv2 = d2.valueOf(); ndays = (tv2 - tv1) / 1000 / 86400; ndays = Math.round(ndays - 0.5); return ndays; } </code></pre> <p>So you would call:</p> <pre><code>var nDays = diffDays(startDate, endDate); </code></pre> <p>(Full source at <a href="http://david.tribble.com/src/javascript/jstimespan.html" rel="nofollow">http://david.tribble.com/src/javascript/jstimespan.html</a>.)</p> <p><strong>Addendum</strong></p> <p>The code can be improved by changing these lines:</p> <pre><code> var tv1 = d1.getTime(); // msec since 1970 var tv2 = d2.getTime(); </code></pre>
<p>Here is my implementation:</p> <pre><code>function daysBetween(one, another) { return Math.round(Math.abs((+one) - (+another))/8.64e7); } </code></pre> <p><code>+&lt;date&gt;</code> does the type coercion to the integer representation and has the same effect as <code>&lt;date&gt;.getTime()</code> and <code>8.64e7</code> is the number of milliseconds in a day. </p>