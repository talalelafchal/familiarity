`find &lt;dir&gt; type -f` Equivalent for Swift-Cocoa?
I am currently porting a C++ command line tool I made over to the Cocoa-Application format as to make it more convenient and bundle it with several other utilities and applets I have made recently. The tool in question needs to search a particular directory and all of it's subdirectories so that it can create a list of existing files to reference for the remainder of it's execution. In C++ I was able to do this easily by calling a bash script that ran the commands: files=$(find <dir> type -f); echo "$files" > ./<reference file>. Now I am wondering if there is any equivalent to that command so that I can do the same thing in swift, saving the file in the bundle, or running the script from the "Resources" directory so that I don't have to convolute things by installing a binary to a set location, and then using Swift to call that binary to call the script. It would also work just as well to be able to run that command directly from inside Swift with a system call if at all possible. BTW I am using Swift 3.0 on XCode 8.0 if it is relevant. Thanks!
You can do something similar to this: import Foundation for arg in CommandLine.arguments.dropFirst() { let fileManager = FileManager() let en=fileManager.enumerator(atPath: arg) while let fileName = en?.nextObject() as? String { // if fileName.hasSuffix("txt") { // if you want to test for file extension print(arg+"/"+fileName) // } } }
The way to run subprocesses in Swift is the class NSTask and the shell script can be in resources in the bindle and use NSBundle to find its path. However better to rewrite that command in Swift using NSFileManager to fgo through the file system