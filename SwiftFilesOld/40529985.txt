Assigning value to a variable inside an If else block in swift 3
This thing is so basic I am sure its been asked but I can't find it. I am experimenting in swift 3 playgrounds and I want to run this code: import UIKit var optionalVariable: Int? = 32 var anotherVariable: Int if optionalVariable != nil{ print("This executed") anotherVariable = 32 } print(anotherVariable) It fails to run and I am getting this error: Playground execution failed: error: chapter4.playground:5:7: error: variable 'anotherVariable' used before being initialized print(anotherVariable) So what's wrong? Why can't I use the value of anotherVariable when I have assigned a value to it? If I comment out the last line print(anotherVariable), the code runs and the output is printed as This executed.
Compiler see that there is a path where the anotherVariable is not initialized (when optionalVariable is nil). This could happen if e.g. another thread sets this optional variable to nil. It won't happen in your code but the compiler can't know this. You have to initialize the anotherVariable at some point before you pass it to a function.
There's an iron rule in Swift: Any variable must be initialized before using its value. The line var anotherVariable: Int declares the variable but doesn't initialize it. If optionalVariable is nil, anotherVariable doesn't get initialized and will cause a crash. The compiler can detect that at compile time and displays an error message. Either assign a default value, change the declaration line to var anotherVariable = 10 // or 0 or whatever or add an else clause var optionalVariable: Int? = 32 var anotherVariable: Int if optionalVariable != nil{ print("This executed") anotherVariable = 32 } else { anotherVariable = 10 } print(anotherVariable)
Your variable is declared an an Int var anotherVariable: Int The problem is that when you print the variable it can be uninitialized (when optionalVariable is nil). An Int must have a value and the compiler doesn't set a default value for you unless it's an optional type. Any type or class should have a value before it's first use, that's the reason you had no error when you commented your print line. There's two choices to fix that. Make sure that anotherVariable is initialized at some point, by initializing at declaration var anotherVariable: Int = 0 or by doing so in an else case if optionalVariable != nil{ print("This executed") anotherVariable = 32 } else { anotherVariable = 0 } or make anotherVariable optional (declare it as a Int?) var anotherVariable: Int? That way it's nil by default. That's the same as var anotherVariable: Int? = nil If you come from C, it's to prevent some edge cases where variable contains values from previous allocations.