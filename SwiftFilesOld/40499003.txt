Facebook pop - view not responding after animation
I am using Facebook Pop as an animation engine. But after my animation my view stops responding. I can't click inside it on the textfields, or press any buttons! Here is my Animation Engine.swift code: class AnimationEngine { class var offScreenRightPosition: CGPoint { return CGPoint(x: UIScreen.main.bounds.width,y: UIScreen.main.bounds.midY) } class var offScreenLeftPosition: CGPoint{ return CGPoint(x: -UIScreen.main.bounds.width,y: UIScreen.main.bounds.midY) } class var offScreenTopPosition: CGPoint{ return CGPoint(x: UIScreen.main.bounds.midX,y: -UIScreen.main.bounds.midY) } class var screenCenterPosition: CGPoint { return CGPoint(x: UIScreen.main.bounds.midX, y: UIScreen.main.bounds.midY) } let ANIM_DELAY : Int = 1 var originalConstants = [CGFloat]() var constraints: [NSLayoutConstraint]! init(constraints: [NSLayoutConstraint]) { for con in constraints { originalConstants.append(con.constant) con.constant = AnimationEngine.offScreenRightPosition.x } self.constraints = constraints } func animateOnScreen(_ delay: Int) { let time = DispatchTime.now() + Double(Int64(Double(delay) * Double(NSEC_PER_SEC))) / Double(NSEC_PER_SEC) DispatchQueue.main.asyncAfter(deadline: time) { var index = 0 repeat { let moveAnim = POPSpringAnimation(propertyNamed: kPOPLayoutConstraintConstant) moveAnim?.toValue = self.originalConstants[index] moveAnim?.springBounciness = 12 moveAnim?.springSpeed = 12 if (index < 0) { moveAnim?.dynamicsFriction += 10 + CGFloat(index) } let con = self.constraints[index] con.pop_add(moveAnim, forKey: "moveOnScreen") index += 1 } while (index < self.constraints.count) } } class func animateToPosisition(_ view: UIView, position: CGPoint, completion: ((POPAnimation?, Bool) -> Void)!) { let moveAnim = POPSpringAnimation(propertyNamed: kPOPLayerPosition) moveAnim?.toValue = NSValue(cgPoint: position) moveAnim?.springBounciness = 8 moveAnim?.springSpeed = 8 moveAnim?.completionBlock = completion view.pop_add(moveAnim, forKey: "moveToPosition") } } I have a close button, that sends the view off the screen, this is my code in the view's viewcontroller called EmailLogin.swift: private let closeButton = CustomButton(type: .custom) override func viewDidLoad() { super.viewDidLoad() if let image = UIImage(named: "exit.png") { closeButton.setImage(image, for: .normal) } closeButton.addTarget(self, action: #selector(closeAction(sender:)), for: .touchUpInside) view.addSubview(closeButton) closeButton.translatesAutoresizingMaskIntoConstraints = false closeButton.heightAnchor.constraint(equalToConstant: 20).isActive = true closeButton.widthAnchor.constraint(equalToConstant: 20).isActive = true closeButton.leadingAnchor.constraint( equalTo: view.readableContentGuide.trailingAnchor, constant: -25).isActive = true closeButton.bottomAnchor.constraint( equalTo: view.topAnchor, constant: 25).isActive = true } func closeAction(sender: AnyObject) { AnimationEngine.animateToPosisition(self.view, position: AnimationEngine.offScreenRightPosition, completion: { (POPAnimation, Bool) in self.view.layoutIfNeeded() }) } to bring the view back ON the screen I use this in my LoginVC (I have different view controllers because I have a view inside my LoginVC, and that view has a class named EmailLoginVC. I do have outlets and all that) @IBAction func emailTapped(_ sender: AnyObject) { AnimationEngine.animateToPosisition(emailLoginVCView, position: CGPoint(x: UIScreen.main.bounds.midX, y: UIScreen.main.bounds.midY - 75), completion: { (POPAnimation, Bool) in self.view.layoutIfNeeded() self.emailLoginVCView.layoutIfNeeded() }) } Conclusion: After any of these animations my view doesn't do anything, but it does animate the FIRST TIME.