Swift - Prevent timer duplicating
I have a timer that runs in viewDidLoad _ = Timer.scheduledTimer(timeInterval: 10, target: self, selector: #selector(timerFired), userInfo: nil, repeats: true) The timer works fine, the issue is because viewDidLoad is called multiple times, the timer is duplicated. Is there any way to ensure that my timer is only ever running once?
The viewDidLoad method is only called once in the lifetime of your view controller. If you have multiple timers running then you probably have multiple instances of your view controller. Otherwise you would likely crash when you popped your view controller off the navigation stack and your timer tried to call it again. You need to balance things you create in viewDidLoad by freeing them. EDIT: Normally you balance things you create in viewDidLoad by putting cleanup code in a deinit method. However, it looks like a running timer keeps a strong reference to it's target. Thus if your view controller is the target of a running timer then it's deinit method won't be called. I would suggest creating your timer in viewWillAppear and invalidating it in viewWillDisappear: weak var timer: Timer? override func viewWillAppear(_ animated: Bool) { super.viewWillAppear(animated) timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(timerFired(timer:)), userInfo: nil, repeats: true) } override func viewWillDisappear(_ animated: Bool) { super.viewWillDisappear(animated) timer?.invalidate() } EDIT #2: Alternately, you could use the new-to-iOS 10 version of scheduledTimer() that takes a block rather than a target/selector. FINALLY Apple created this function. it's about d*amned time! weak var timer: Timer? override func viewDidLoad() { super.viewDidLoad() timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { [weak self] timer in //Your timer code here } deinit { timer?.invalidate() }
You need to keep a reference to your timer so you can invalidate it when your viewController disappears. Otherwise it will just keep running and new timers will be spawned every time another viewController is created. var timer:Timer? override func viewDidLoad() { super.viewDidLoad() timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(timerFired), userInfo: nil, repeats: true) } override func viewWillDisappear(_ animated: Bool) { super.viewDidDisappear(animated) if let timer = timer { timer.invalidate() } } Depending on your navigation logic viewWillDisappear may get called multiple times before the view is deallocated, you'll have to decide the best way to handle this yourself.