Swift: UICollectionView locked to one cell after resizing custom cells
I'm making a custom attending button by using a UICollectionView with two custom cells as this: You can either click or drag to choose your status. When you click a cell, the cells expands to the screen width, but only the cell that you clicked is visible. You can swipe to i'm out if you change your mind. This funcitonality works. I want to implement that the buttons allow swiping as follows: When the swipe of the button is above a threshold, the button snaps to your status. However, after the snap, I am not able to swipe to the other cell anymore... I can only see a small portion of it when I swipe: The snap functionality is done by just resizing the sizes of the cells. I tried to use reloadData() followed by a scrollTo the item that you swiped to. But it is not possible to change cell. Anyone know how to do this? Thanks. My code - interesting part in scrollViewDidScroll: class testcontroller: UIViewController, UIGestureRecognizerDelegate, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{ var attendingCollectionView: UICollectionView! var imInCell: imInCustomCollectionCell = imInCustomCollectionCell() var imOutCell: imOutCustomCollectionCell = imOutCustomCollectionCell() var hasNotRespondedYet = true var attendingStatus = false var attendingButtonWidths = UIScreen.main.bounds.width var attendingButtonHeight = 100 override func viewDidLoad() { super.viewDidLoad() setUpCollectionView() } func setUpCollectionView(){ let flowLayout = UICollectionViewFlowLayout() flowLayout.scrollDirection = .horizontal flowLayout.minimumLineSpacing = 0 self.attendingCollectionView = UICollectionView(frame: CGRect(x: 0, y: UIScreen.main.bounds.height-self.attendingButtonHeight, width: UIScreen.main.bounds.width, height: self.attendingButtonHeight), collectionViewLayout: flowLayout) self.attendingCollectionView.delegate = self self.attendingCollectionView.dataSource = self self.attendingCollectionView.isPagingEnabled = true self.attendingCollectionView.register(imInCustomCollectionCell.self, forCellWithReuseIdentifier: "imInCell") self.attendingCollectionView.register(imOutCustomCollectionCell.self, forCellWithReuseIdentifier: "imOutCell") self.attendingCollectionView.isUserInteractionEnabled = true self.attendingCollectionView.showsHorizontalScrollIndicator = false view.addSubview(self.attendingCollectionView) //never responeded before if self.hasNotRespondedYet { self.attendingCollectionView.isScrollEnabled = true self.attendingButtonWidths = self.attendingButtonWidths/2 self.attendingCollectionView.alwaysBounceHorizontal = true } } func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return 2 } func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell { if indexPath.row == 0 { let custom = attendingCollectionView.dequeueReusableCell(withReuseIdentifier: "imInCell", for: indexPath) as! imInCustomCollectionCell imInCell = custom return custom } else { let custom = attendingCollectionView.dequeueReusableCell(withReuseIdentifier: "imOutCell", for: indexPath) as! imOutCustomCollectionCell imOutCell = custom return custom } } func scrollViewDidScroll(_ scrollView: UIScrollView) { let screenWidth = UIScreen.main.bounds.width let delta = scrollView.contentOffset.x/screenWidth if delta <= 0{ if delta < -0.15 { UIView.animate(withDuration: 0.3, delay: 0, options: .curveEaseInOut, animations: { let cell1 = self.imInCell let cell2 = self.imOutCell cell1.frame = CGRect(x: 0, y: 0, width: self.attendingButtonWidths*2, height: self.attendingButtonHeight) cell1.imInLabel.frame = CGRect(x: screenWidth/2-cell1.imInLabel.frame.width/2, y: cell1.imInLabel.frame.minY, width: cell1.imInLabel.frame.width, height: cell1.imInLabel.frame.height) cell2.frame = CGRect(x: UIScreen.main.bounds.width, y:0,width: self.attendingButtonWidths*2,height: self.attendingButtonHeight) cell2.imOutLabel.frame = CGRect(x: 10, y: cell2.imOutLabel.frame.minY, width: cell2.imOutLabel.frame.width, height: cell2.imOutLabel.frame.height) cell1.imInLabel.textColor = UIColor.white }, completion: { (f) in self.attendingCollectionView.isScrollEnabled = true self.attendingCollectionView.isPagingEnabled = true self.hasNotRespondedYet = false }) } } } func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize{ if self.hasNotRespondedYet { return CGSize(width: self.attendingButtonWidths, height: attendingCollectionView.frame.size.height) } else { return CGSize(width: self.attendingButtonWidths, height: attendingCollectionView.frame.size.height) } } } class imInCustomCollectionCell: UICollectionViewCell { var imInLabel: UILabel! override init(frame: CGRect){ super.init(frame: frame) self.imInLabel = UILabel(frame: self.frame) self.imInLabel.text = "I'm in" self.imInLabel.sizeToFit() self.imInLabel.frame = CGRect(x: self.frame.width/2-self.imInLabel.frame.width/2, y: self.frame.height/2-self.imInLabel.frame.height/2, width: self.imInLabel.frame.width, height: self.imInLabel.frame.height) addSubview(self.imInLabel) } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } } class imOutCustomCollectionCell: UICollectionViewCell {}//similar logic as above