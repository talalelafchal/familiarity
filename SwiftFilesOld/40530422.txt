Creating UICollectionView Programatically
I am learning how to create a UICollectionView programatically. I want to create a grid of pictures collected from the user in another part of the app. Will this sample code help me accomplish this? Also, how do I configure the data to emit the image I want? My Image file is shown below, so is the source code for the UICollectionView. UICollectionView:  class PhotosViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource { override func viewDidLoad() { super.viewDidLoad() let imageStore = ImageStore() } override func viewWillAppear(animated: Bool) { super.viewWillAppear(animated) let layout: UICollectionViewFlowLayout = UICollectionViewFlowLayout() layout.sectionInset = UIEdgeInsets(top: 20, left: 10, bottom: 10, right: 10) layout.itemSize = CGSize(width: 100, height: 100) let myCollectionView:UICollectionView = UICollectionView(frame: self.view.frame, collectionViewLayout: layout) myCollectionView.dataSource = self myCollectionView.delegate = self myCollectionView.registerClass(RDCellCollectionViewCell.self, forCellWithReuseIdentifier: "MyCell") myCollectionView.backgroundColor = UIColor.whiteColor() self.view.addSubview(myCollectionView) } func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return images.count } var images: [UIImage] = [ ] func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell { let myCell = collectionView.dequeueReusableCellWithReuseIdentifier("MyCell", forIndexPath: indexPath) as! RDCellCollectionViewCell myCell.imageView.image = images[indexPath.item] myCell.backgroundColor = UIColor.grayColor() return myCell } func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) { print("User tapped on item \(indexPath.row)") } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } } ImageStore.Swift:  class ImageStore: NSObject { let cache = NSCache() func setImage(image: UIImage, forKey key: String) { cache.setObject(image, forKey: key) let imageURL = imageURLForKey(key) if let data = UIImageJPEGRepresentation(image, 0.5) { data.writeToURL(imageURL, atomically: true) } } func imageForKey(key: String) -> UIImage? { if let existingImage = cache.objectForKey(key) as? UIImage { return existingImage } let imageURL = imageURLForKey(key) guard let imageFromDisk = UIImage(contentsOfFile: imageURL.path!) else { return nil } cache.setObject(imageFromDisk, forKey: key) return imageFromDisk } func deleteImageForKey(key: String) { cache.removeObjectForKey(key) let imageURL = imageURLForKey(key) do { try NSFileManager.defaultManager().removeItemAtURL(imageURL) } catch let deleteError { print("Error removing the image from disk: \(deleteError)") } } func imageURLForKey(key: String) -> NSURL { let documentsDirectories = NSFileManager.defaultManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask) let documentDirectory = documentsDirectories.first! return documentDirectory.URLByAppendingPathComponent(key) } }
If the task is to add an image, you should use something like this in cellForItemAtIndexPath: let myCell = collectionView.dequeueReusableCellWithReuseIdentifier("MyCell", forIndexPath: indexPath) myCell.backgroundColor = UIColor.blueColor() let imageView = UIImageView(frame: cell.contentView.frame) cell.contentView.addSubview(imageView) imageView.image = //Here you should get right UIImage like ImageStore().imageForKey("YOUR_KEY") return myCell Or you can use custom UICollectionViewCell subclass as Joshua Kaden wrote.
You're on the right track. You'll need to create a subclass of UICollectionViewCell that contains a UIImageView; this will let you plug the correct UIImage into it in cellForItemAtIndexPath. This describes how to hook up your custom cell: Create UICollectionViewCell programmatically without nib or storyboard As for getting the correct image, you'll need to map the index path to your image store somehow, so that an item number corresponds to the correct image key.