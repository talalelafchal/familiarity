Custom protocols
Im getting this error "Class declaration cannot close over value 'viewcontainer' defined in outer scope" I created a procotol called NetworkResponse which have two methods on sucessResponse and onErrorResponse. Then I have a class called Callback that extends from NetworkResponse and forced to implement that methods. Here is my function :  public func login (callback : Callback, viewController : UIViewController) { let callbackInstance: NetworkResponse = { class callback : Callback { override func onSucessResponse(response : NSDictionary){ viewController.dismiss(animated: true, completion: nil) } override func onErrorResponse(message : String, code : Int){ print("error") } } return callback() }() postPath(callback: callbackInstance as? Callback) } I want to dismiss the controller from the anonymous class. Any recomendation ?
No need to define a protocol and Callback class. Closure is just what you need. import UIKit public class TestInnerClass: UIViewController { public func login(successCallback: ((response: NSDictionary) -> Void), errorCallback: ((message: String, code: Int) -> Void)) { let success = false let response = NSDictionary() // // Make your login request here, and change the `success` value depends on your response // let response = ... // // If you are making a async request to login, then put the following codes inside your request callback closure. // if success { successCallback(response: response) } else { errorCallback(message: "error occurred", code: -1) } } override public func viewDidLoad() { super.viewDidLoad() login({ (response) in // Get Called when success self.dismissViewControllerAnimated(true, completion: nil) }, errorCallback: ({ // Get called when failed (message, code) in print(message) })) } } I have written some sample codes for your case in my Github repo, and this example is using Alamofire to make network request, Just for your reference. PS: Since I still using Xcode 7.3.1, so you may need to do some changes to the above code to adopt the swift 3 syntax requirement.