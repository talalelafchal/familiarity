Simple getJSON() function
SwiftyJSON is an extremely useful add-on for Swift, importable via various methods (CocoaPods, Carthage, etc.) and I use it within many of my projects as they commonly require JSON files. So I wanted a nice simple function that I could call with necessary arguments and get my raw String value from my JSON file.
Step 1. We will create one protocol with one constructor method in it and Model class protocol JSONable { init?(parameter: JSON) } class Style: JSONable { let ID :String! let name :String! required init(parameter: JSON) { ID = parameter["id"].stringValue name = parameter["name"].stringValue } /* JSON response format { "status": true, "message": "", "data": [ { "id": 1, "name": "Style 1" }, { "id": 2, "name": "Style 2" }, { "id": 3, "name": "Style 3" } ] } */ } Step 2. We will create extension of JSON which will convert JSON to model class type object extension JSON { func to<T>(type: T?) -> Any? { if let baseObj = type as? JSONable.Type { if self.type == .array { var arrObject: [Any] = [] for obj in self.arrayValue { let object = baseObj.init(parameter: obj) arrObject.append(object!) } return arrObject } else { let object = baseObj.init(parameter: self) return object! } } return nil } } Step 3. Use code with Alamofire or other code. Alamofire.request(.GET, url).validate().responseJSON { response in switch response.result { case .success(let value): let json = JSON(value) var styles: [Style] = [] if let styleArr = json["data"].to(type: Style.self) { styles = styleArr as! [Style] } print("styles: \(styles)") case .failure(let error): print(error) } } I hope this will be useful. Please refer to this link for more information on this. https://github.com/SwiftyJSON/SwiftyJSON/issues/714
Here is the function I created, feel free to use it yourself (does of course require SwiftJSON to be correctly integrated within your Xcode Swift project)... func getJSON(value: [String], fileName: String) -> String{ guard let path = Bundle.main.path(forResource: fileName, ofType: "json"), let jsonData = NSData(contentsOfFile: path) else{ print("Couldn't find the file on disk or failed to read it") return "ERR." } let jsonObject = JSON(data: jsonData as Data) guard let jsonValue = jsonObject[value].string else{ print("FAILED to find JSON object") return "ERR." } return jsonValue } An example usage of this function would be let myJsonValue = getJSON(value: ["people","person1"], fileName: "database") which would get the value person1 from the people group in the JSON file named database.json. So, if the database.json file looked something like this { "people" : { "person1" : "Bob", "person2" : "Steve", "person3" : "Alan", } } the function would return a value of "Bob" Hope this is a help to anyone, or if you have any suggestions for it then please let me know! Constructive criticism appreciated always.