Lock only one ViewController's orientation to landscape, and the remaining to portrait
I want to lock orientation in all ViewControllers to portrait, except on one of them, when it is pushed always to be in landscapeRight. I've tried many solutions, using extensions for UINavigationController, overriding supportedInterfaceOrientations and shouldAutorotate but no luck.
I've found the solution, which for now it is working. On every view controller you should put this code for supporting only the desired rotation (landscapeRight in the example): override var shouldAutorotate: Bool { return true } override var supportedInterfaceOrientations: UIInterfaceOrientationMask { return UIInterfaceOrientationMask.landscapeRight } override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation { return .landscapeRight } On the other implement the same methods but with portrait orientation. Create an extension for UINavigationController open override var supportedInterfaceOrientations: UIInterfaceOrientationMask { return (self.topViewController?.supportedInterfaceOrientations)! } open override var shouldAutorotate: Bool { return true } Note: Also in Project's target enable all desired supported orientations. The only one controller that I wanted to show in landscape mode i presented modally.
You will run into confusion if you use the navigation controller to present views. For example, we usually leverage the navigation controller to handle adding views by calling navigation controller instance functions like performSegueWithIdentifier:sender: or pushViewController:animated:. Pushing is not going to work like you want it to. And segues will probably not work either, especially if in IB you created the segue off the navigation controller! Anyway, if you somehow succeeded in overriding the "parent" navigation controller's orientation, you risk running into edge cases down the line and you are probably using something sketchy that may lose support with any update. That said, the workaround I have found is: Step 1 Use presentViewController:animated:completion: to present landscapeRight view controller: // assuming you're using IB and Main bundle let storyboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil) let landscapeViewController = storyboard.instantiateViewController(withIdentifier: "LandscapeViewControllerStoryboardID") self.present(landscapeViewController, animated: true, completion: { print("landscapeViewController presented") }) Step 2 Adding the following override to your landscapeViewController actually works now: /* override the preferredInterfaceOrientationForPresentation for a view controller that is intended to be presented full screen in a specific orientation. https://developer.apple.com/reference/uikit/uiviewcontroller */ override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation { return .landscapeRight } Step 3 (Optional) With all this working, there is still some weirdness when you dismiss your landscapeViewController: It is in landscape orientation now as well. This is because the navigation controller is playing nice. In other words, now it's the navigation controller's turn to try to force an orientation change, force it back to the way it was. In order to do this, you need to store the orientation of the device before you present the landscapeViewController. In the view controller from which you present the landscapeViewController, I stored it in an instance variable: let ratio = self.view.bounds.width / self.view.bounds.height if (ratio > 1) { // horizontal/landscape self.currentOrientationIsPortrait = false // read by navigation controller when dismissing full screen view player } else { self.currentOrientationIsPortrait = true // read by navigation controller when dismissing full screen view player } Then, I test that view controller instance's value in my navigationController class' preferred orientation override. Let's say the view controller from which I present the landscapeViewController is called presentingViewController: // execution order: during visibileViewController's dismissal override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation { get { if visibleViewController != nil { // check if landscapeViewController is being dismissed if (visibleViewController as? LandscapeViewController) != nil { // check if the top view controller is one that tracks its orientation (currently only presentingViewController) if let presentingViewController = self.viewControllers.last as? PresentingViewController { if presentingViewController.currentOrientationIsPortrait { return .portrait // TODO should we not support portraitUpsideDown? } } } // otherwise, return whatever return visibleViewController!.preferredInterfaceOrientationForPresentation } // otherwise, return whatever return super.preferredInterfaceOrientationForPresentation } } And, bingo. (Hopefully) EDIT Also don't forget to put this code in others ViewControllers: override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation { return .portrait }