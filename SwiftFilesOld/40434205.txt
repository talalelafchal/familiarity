how to avoid memory leak with alamofire get request?
I have the following code that makes a get request to Google Places API Web Service. The function is declared within another static function in a public struct containing functions of similar nature. private static func GSearchRequest(_ url: URLConvertible, parameters: Parameters? = nil, parser: @escaping (Array<[String:NSObject]>?) -> Void) { let queue = DispatchQueue(label: "com.cnoon.response-queue", qos: .utility, attributes: [.concurrent]) Alamofire.request(url, method: .get, parameters: parameters, encoding: URLEncoding.default) .responseJSON(queue: queue, completionHandler: { response in print(response) }) } Below is the function where the above is called static func GSearh(_ query: String, location: CLLocation?, parser: @escaping (Array<[String:NSObject]>?)->Void, host: UIViewController?) { if let current_vc = host { if !Reachability.isConnected() { current_vc.view.offlineViewAppear() } } let coordinate: CLLocationCoordinate2D? if let manager: CLLocation = location { coordinate = manager.coordinate if let coords = coordinate { if let apiKey = appDelegate?.getApiKey() { let latitude = coords.latitude let longitude = coords.longitude let params: Parameters = ["location":"\(latitude),\(longitude)", "rankby":"distance", "type":"\(query)", "key":"\(apiKey)"] GSearchRequest(URL, parameters: params, parser: parser) } } } } I am still learning swift and I am aware strong references can be captured within closures. The problem I am facing is a memory leak caused by the response returned from Alamofire request. I have used the leaks instrument to find that the leaked objects are _NativeDictionaryStorageOwner and _NativeDictionaryStorageImpl. Once the memory that was malloced is released, several calls to release are made for an object that possibly no longer exists. I have no clue how to fix this, and I have looked for alternatives but those alternatives cause more leaks. Can someone please explain what exactly is going on? How do I fix this memory leak?
It's going to be pretty hard to diagnose the leak from just this bit of code, but a great new tool for finding the cause of memory leaks and retain cycles is the "Debug Memory Graph" tool. While your application is running, click this button and it will show you all the objects in memory and what has references to them.