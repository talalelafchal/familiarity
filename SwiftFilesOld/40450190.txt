What is the fastest Char-By-Char-Reader in Swift
i have to write a real fast char by char reader in swift. This is my solution so far. For a 1.4mb file i get it in 0m0.932s. For a 150mb file it took 1m42.931s Do you know a faster solution? import Foundation class CharReader { let encoding : String.Encoding let chunkSize : Int var fileHandle : FileHandle! let buffer : NSMutableData! var atEof : Bool = false var characterPointer: UnsafeMutablePointer<Character> var startPointer: UnsafeMutablePointer<Character> var stored_cnt: Int = 0; var stored_idx: Int = 0; init?(path: String, encoding: String.Encoding = String.Encoding.utf8, chunkSize : Int = 1024) { self.chunkSize = chunkSize self.encoding = encoding characterPointer = UnsafeMutablePointer<Character>.allocate(capacity: chunkSize) startPointer = characterPointer if let fileHandle = FileHandle(forReadingAtPath: path), let buffer = NSMutableData(capacity: chunkSize){ self.fileHandle = fileHandle self.buffer = buffer } else { self.fileHandle = nil self.buffer = nil return nil } } deinit { self.close() } func nextChar() -> Character? { if atEof { return nil } if stored_cnt > (stored_idx + 1) { stored_idx += 1 let char = characterPointer.pointee characterPointer = characterPointer.successor() return char } let tmpData = fileHandle.readData(ofLength: (chunkSize)) if tmpData.count == 0 { atEof = true return nil } if let s = NSString(data: tmpData, encoding: encoding.rawValue) as String! { stored_idx = 0 let characters = s.characters stored_cnt = characters.count characterPointer = startPointer characterPointer.initialize(from: characters) let char = characterPointer.pointee characterPointer = characterPointer.successor() return char } return nil; } /// Close the underlying file. No reading must be done after calling this method. func close() -> Void { fileHandle?.closeFile() fileHandle = nil } } please let me know. I test the class with this main.swfit: import Foundation if CommandLine.arguments.count < 2 { print("Too less arguments.") exit(0) } let file = CommandLine.arguments[1] if let aCharReader = CharReader(path: file) { defer { aCharReader.close() } while let char = aCharReader.nextChar() { continue } } The Project is on GitHub: https://github.com/petershaw/charsinfile Thanks a lot, ps
i updated the repository with both versions in it: https://github.com/petershaw/charsinfile With help from Martin I fix the mistake in Rob's code. I tested a bunch of different files and both versions worked fine. Rob Napier's code is more efficient! Thanks a lot, Rob. Thanks all of you both to help me figuring out the fastest solution. It's gerate to have a so wonderful and polite community for swift and cocoa related stuff here an so. Have a great week! ps