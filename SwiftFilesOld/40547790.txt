How can I securely transmit a unique customer QR code to business scanner?
There are two apps. One is for the customer that has their QR code under their profile (which at the moment is simply their unique customer id) and the other is for the business employee to scan the QR code. I am worried that customers can potentially copy another customer's QR code and get the employee to scan a picture of it. I do not know much when it comes to security but the first thing that comes to mind is to maybe have the customer app and scanner app have a secret key to sign the QR code. The following is an answer credit to David Schwartz, unfortunately, I'm not really sure how to implement it on a Swift level or if it even applies to my case: QR code security Sign the QR code data with a private key. The readers will need the public key to verify the QR code, but the public key need not be kept secret. If you use an ECDSA Secp256K1 key, the signature will only add about 68 bytes to the QR code data. Include the date of issue in the QR code as well. The reader will need a local clock to check that the QR code isn't too old. If the reader doesn't have a clock, you can at least keep track of the newest valid code you have ever seen. Any code issued more than a year before that date is definitely invalid. Both BouncyCastle and OpenSSL contain implementations of the code you'll need. If it's okay for the code readers/verifiers to contain all the information needed to generate a fake QR code, then you can use HMAC instead of ECDSA. That's simpler and an HMAC can be as little as 16-bytes and still do the job. I am very new to security so even the process confuses me a bit but from what I understand, my customer app should be able to "sign" the QR code information with a key, and the scanner app should somehow be able to decode the signed QR code information? Another thing that comes to mind.. if I store something private in an app on the App Store like a key would someone be able to crack into my code and find that? And if so how should I actually hide my "key" in app? Thank you very much.
You have posted a couple of question. I will answer the one regarding the actual QR code security. I will not give you an answer on how to store your key in the app securely or how to implement any of this in Swift. The text you linked as far as I understand it is concerned about generating the QR code which is not the problem your are facing. You can make the generation of the QR code as complex and as secure as you wish - the final output always is an image you can copy. Therefore I would have two ideas: 1. Make the QR code dynamic Simple idea: include the current timestamp alongside the customer id in the qr code and have the server verify that the timestamp is close to the current timestamp. That effectively prevents someone from simply copying your qr code since a copy would only be valid a fews seconds. BUT someone could just analyze what data is inside the code and create a custom one which always outputs the code of someone else with their customer number along with the timestamp. That boils down to make the generation of the code safe / secure, which is basically what the linked text is for. 2. Use some kind of two-way authorization As soon as the business employee scans the code, send a confirmation push message to the client. If the client presses okay or uses some other kind of confirmation you can be sure that the qr code was really the qr code of the user standing in front of the employee. The workflow would be client shows qr code business employee scans code, the app contacts the server server sends push notification to client's phone client receives push notification, confirms it by calling the server business employee receives confirmation from server and is good to go I would recommend the second option because it seems very logical and pretty straight forward and easily understandable. I do however not guarantee in the slightest that it really is secure since I am far from a security engineer.