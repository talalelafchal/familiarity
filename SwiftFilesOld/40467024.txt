cannot convert value of type '(_) -&gt; ()' to expected argument type 'Date'
How do I use the failureReason in passed in curly braces to the method launch, then set the failureReason in the method? I get this error when calling the launch method: cannot convert value of type '(_) -> ()' to expected argument type 'Date' firstFalcon.launch() { failureReason in } func launch(date: Date = Date()) { self.launchDate = date.description var failureReason = "" if (fuelType == FuelType.water) { failureReason = "too much fuel in fuel tank" } }
You need to add it as a parameter to your launch method. Right now your launch method only expects a date...of type Date, and you have given that a default value so you don't have to pass it along. Adding Just a String I'm not sure I understand your question correctly, but it seems that the failureReason you define in your launch method is just a String var failureReason = "" If that is the case, then you should just add another parameter to your launch method like so: func launch(date: Date = Date(), failureReason: String) And you can then invoke it like so: launch(failureReason: "boom") Adding a Callback Function If however, you'd would like to pass in a callback function that you can use in your launch method, maybe with a failureReason, then you would do it like so: func launch(date: Date = Date(), callback: (String) -> Void) Here you define a function which takes a date and a callback function as parameters. The function then takes a String as input parameter. In your launch function you do what ever you need to do, and once done, you invoke the callback function with a string, so maybe something like: func launch(date: Date = Date(), callback: (String)-> Void) { self.launchDate = date.description var failureReason = "" if (fuelType == FuelType.water) { failureReason = "too much fuel in fuel tank" } callback(failureReason) } And you can then call that like this: launch() { failureCode in print("failed with: \(failureCode)") } Notice that when your closure/callback is the last parameter in a function you can call it "outside" the parameter list when calling it as I've done above. This is called a "trailing closure" and you can read about it in The Swift Programming Language Hope I have understood you correctly.