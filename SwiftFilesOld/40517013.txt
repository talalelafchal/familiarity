scope from class root, to inside init, to then inside touchesBegan?
Inside this, I'm not seeing goesTo getting assigned to nextScene. I assume this is a scope problem, but don't know enough to resolve it: // import SpriteKit class MenuButton: SKLabelNode { var goesTo: SKScene? override init() { super.init() print("test... did this get called? WTF? HOW/WHY/WHERE?") } convenience init(text: String, color: SKColor, destination: SKScene){ self.init() self.text = text self.fontColor = color goesTo = destination self.isUserInteractionEnabled = true print("gooing tooooo....", text, goesTo!) // WORKS!!! } override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) { if let nextScene = goesTo { self.scene?.view?.presentScene(nextScene, transition: SKTransition.doorsOpenVertical(withDuration: 0.25)) print("going to", nextScene) // This is NIL! SO NEVER GETS CALLED! } } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } }
You code is correct, you can simply test it making for example a: GameScene.swift import SpriteKit class GameScene: SKScene { override func didMove(to view: SKView) { print("- \(type(of:self))") let helloScene = HelloScene.init() helloScene.name = "helloScene" let button1 = MenuButton.init(text: "HELLO", color: .red, destination: helloScene) addChild(button1) button1.position = CGPoint(x:self.frame.midX,y:self.frame.midY) } } and you will see a red label in the middle of the screen with "HELLO". As you can see also your prints looks good for both of your methods. HelloScene.swift import Foundation import SpriteKit class HelloScene: SKScene { override func didMove(to view: SKView) { print("- \(type(of:self))") self.backgroundColor = .blue } } Debug console: