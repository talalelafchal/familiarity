Firebase: Access to different sections depending on user
This is my approach on how to allow specific users to access their allocated 'shop' object. func shopFetch() { self.shop.removeAll() let shopRef = FIRDatabase.database().reference().child("shop").child(someIDforShop).child("menu") shopRef.observe(.childAdded, with: { (snapshot) in if let dictionary = snapshot.value as? [String: AnyObject] { let something1 = dictionary["some1"] let something2 = dictionary["some2"] let shopper = Shop(some1: something1, some2: something2) self.shop.insert(shopper, at: 0) self.collection.reloadData() } }, withCancel: nil) } These are my security rules rules: { "users": { "$uid": { ".read": "auth != null || auth.uid == $uid", ".write": "auth != null && auth.uid == $uid", "$yourShop": { ".read": "true" } }, "shop": { "$yourShop": { ".read": "root.child('users').child(auth.uid).child($yourShop).val() == true", ".write": "root.child('users').child(auth.uid).child($yourShopManager).val() == true || root.child('users').child(auth.uid).child('isAdmin').val() == true" } }, } Let's say I have this in my Database: <app-name>: { "shop": { "shop1": { "menu": { "some1": "thing1", "some2": "thing2" } }, "shop2": { "menu": { "some1": "thing1", "some2": "thing2" } }, "shop3": { "menu": { "some1": "thing1", "some2": "thing2" } }, "users": { "K4of4ofp32kfoE": { "shop": { "shop1": true } }, "fj3i53ogF34oGf329ieQ": { "shop": { "shop2": true } }, } What should I write in let shopRef in someIDforShop? Doing this, will allow each user to access his/her 'shop'. I tried with childByAutoID(), assuming it will fetch the data relative to the user, as specified in the rules. But shopFetch() returns nothing when I ask to print(snapshot)
I figured out a way to get the variable name of each shop for each user. import UIKit import Firebase let shopVar = "" override func viewDidLoad() { super.viewDidLoad() let userReference = DataService.instance.REF_USERS.child((user?.uid)!).child("shop") userReference.observe(.value, with: { (snapshot) in if let dict = snapshot.value as? [String:AnyObject] { let shopName = dict["name"] as! String print(shopName) self.shopVar = shopName } }, withCancel: nil) } Rules change "users": { "K4of4ofp32kfoE": { "shop": { "name": "coolShop" } }, "fj3i53ogF34oGf329ieQ": { "shop": { "name": "fancyShop" } }, } Then I replace shopVar -> someIDforShop in shopFetch() Now every user receives his/her own personal 'shop' items.