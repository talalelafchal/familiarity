Examples of Delegates in Swift 3
I am kind of new to Swift, and I have been recently been trying to learn how delegation with protocols works. I get everything, but I can't think of when one would use delegation other than when using table views and possibly scroll views. Can someone please help me understand when delegation is used. Thank you so much.
Delegation is used when you want to pass some information or state of object A to another object B. Usually object B is the object that created object A. I will list some situations where you would use delegation. Yes you're right. table views and scroll views use delegates because they want to tell whoever is interested (usuall your view controller) that "someone selected a row!" or "someone scrolled the scroll view!". Not only do scroll views and table views use delegates, UITextField and UIDatePicker and a lot of other views use delegates too! View Controllers also have delegates. For example, UIImagePickerController. The reason why is roughly the same as above - because the UIImagePickerController wants to tell you messages like "an image has been selected!". Another example would be UIPopoverControllerDelegate. This delegate tells you things like "the popover has been dismissed!" Other classes that use delegates include CLLocationManager. This delegate tells you things like "the user's location has been detected" or "failed to detect the user's location". You can use delegation in your code when a certain view controller of yours wants to send messages to other view controllers. If it is a settings view controller, it might send messages like "the font size setting has been changed!" and the view controller that cares about the font size setting changing will know and change the font size of a label or something.
What is delegation? First of all, you should know that Delegation Pattern is not exclusive for iOS world: In software engineering, the delegation pattern is a design pattern in object-oriented programming that allows object composition to achieve the same code reuse as inheritance. But working with delegation in the iOS world is so common, I assume that you can see many of classes that you are working with provide a delegation/datasource for giving the ability to provide properties or behaviors. It's one of main mechanisms of how objects talk to each other. When to use delegation? However, as mentioned, delegation is not the only way to let objects talk to each others, you might want to know that there are: NotificationCenter. Key-Value Observing. Completion handlers/Callbacks (using closures). Target-Action. Check this in case if you are interested in comparing between them. So why should I use delegation instead of those options? I will try to make it simple; You should use delegation when you have one to one relationship between tow objects. Just to make it clearer, the goal of talking a little bit about the NotificationCenter is to trying to make sense when to use delegations: NotificationCenter represents one to many relationship. Simply, It works like: posting a notification on a specific event and any object can observe this notification; Logically speaking, that's what one to many relationship means. What about a real-world example? Imagine that you are building an application that related to playing audios, some of viewControllers should have a view of an audio player, in the simplest case, we assume that it should has a play/pause button and let's say a button for showing a playlist. So far so good, the audio player view has its separated UIView class and .xib file, in the wanted viewController you loaded it and added as a subview But now, how could you add functionality to the both buttons? you might think of: "Simply, I will add an IBAction in the view class and that's it", well at the first look, it might sounds ok, but after thinking about it, you will recognize that it is a bad idea if you are trying to handle the event of tapping the button at the controller layer level, in other words, what if each viewController should does a different event for -for example- playlist button? let's do delegation: Audio Player View: // here is the protocol for creating the delegation: protocol AudioPlayerDelegate { func playPauseDidTap() func playlistDidTap() } class AudioPlayerView: UIView { //MARK:- IBOutlets @IBOutlet weak private var btnPlayPause: UIButton! @IBOutlet weak private var btnPlaylist: UIButton! // MARK:- Delegate var delegate:AudioPlayerDelegate? // IBActions @IBAction private func playPauseTapped(_ sender: AnyObject) { delegate?.playPauseDidTap() } @IBAction private func playlistTapped(_ sender: AnyObject) { delegate?.playlistDidTap() } } View Controller: class ViewController: UIViewController { } extension ViewController: AudioPlayerDelegate { func playPauseDidTap() { print("play/pause tapped!!") } func playlistDidTap() { // note that is should do a different behavior in each viewController... print("list tapped!!") } } I hope this helped.