Pinning PublicKey with AlamoFire
I've been trying to perform a public key pinning for my application. And I did the following steps: 1) First I used openssl to extract the server cert in der format openssl s_client -showcerts -connect my.server.com:443 < /dev/null | openssl x509 -outform DER > serverCert.der 2) Loaded publicKey from cert:  func getPubKey() -> SecKey? { let certificateData = NSData(contentsOfURL:NSBundle.mainBundle().URLForResource("serverCert", withExtension: "der")!) let certificate = SecCertificateCreateWithData(nil, certificateData!) var trust: SecTrustRef? let policy = SecPolicyCreateBasicX509() let status = SecTrustCreateWithCertificates(certificate!, policy, &trust) var key: SecKey? if status == errSecSuccess { key = SecTrustCopyPublicKey(trust!)!; print("NetworkImplementation :: getPubKey :: success") } return key } 3) added my serverTrustPolicy to Alamofireâ€™s Manager:  let key: SecKey? = self.getPubKey() self.serverTrustPolicy = ServerTrustPolicy.PinPublicKeys(publicKeys: [key!], validateCertificateChain: true, validateHost: true) self.serverTrustPolicies = [ "*.my.server.com": self.serverTrustPolicy! ] self.afManager = Manager(configuration: NSURLSessionConfiguration.defaultSessionConfiguration(), serverTrustPolicyManager: ServerTrustPolicyManager(policies: self.serverTrustPolicies)) print("NetworkImplementation :: init :: success") 4) When I want to perform a request I do this: self.afManager .request(almethod, url, parameters: alparams, encoding: encoding, headers: alheaders) .validate() .response { //... } Then I tried to check if it was not trusting a self signed certificate, to do that I used Charles and the iOS Simulator. After installing Charles, added my server domain to the SSL Proxy configuration on port 443 and clicked Help -> SSL Proxying -> Install on simulators. I was able to see the request and response content of my application inside the Charles UI and the request connection status was not an error. What am I missing?