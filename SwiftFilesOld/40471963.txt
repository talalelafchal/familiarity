Swift Adding objects from on array to another array correctly?
So I have 2 NSMutableArrays, one called testArray and the other called jsonArray. jsonArray gets its objects from a mysql server using json and php. Then those same objects in jsonArray are inserted in testArray. I did print(jsonArray, testArray) and what showed in the logs were this. I also have a NSObject class called Test, if that helps.. For the jsonArray  { testName = GreenCorn; testStatus1 = 12; testStatus2 = 13; testURL = ""; id = 1; } For the testArray "<CustomCellSwift.Test: 0x17414df70>" Now I'm new to iOS Swift but I don't know if I inserted the jsonArray into testArray correctly. Here is the code I used. Also, I'm using a custom tableview and its supposed to show testArray.count, its empty cells but its showing the several rows that I have in jsonArray. var followedArray: NSMutableArray = [] var testArray: NSMutableArray = [] var jsonArray: NSMutableArray = [] var filteredArray: NSArray = [] var isFiltered: Bool = false // Number of Rows in Section internal func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { if !isFiltered { if section == 0 { return followedArray.count } else if section == 1 { return testArray.count } } return filteredArray.count } internal func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell { let CellIdentifier = "Cell" var cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier) as! CustomCell if cell != cell { cell = CustomCell(style: UITableViewCellStyle.default, reuseIdentifier: CellIdentifier) } // Coloring TableView myTableView.backgroundColor = UIColor.white // Configuring the cell var testObject: Test print("before ifFiltered") if !isFiltered { if indexPath.section == 0 { print("isFiltered if") testObject = followedArray[indexPath.row] as! Test cell.populateCell(testObject, isFollowed: true, indexPath: indexPath, parentView: self) } else if indexPath.section == 1 { print("isFiltered if 2") testObject = testArray[indexPath.row] as! Test cell.populateCell(testObject, isFollowed: false, indexPath: indexPath, parentView: self) } } else { print("isFiltered else") testObject = filteredArray[indexPath.row] as! Test cell.populateCell(testObject, isFollowed: false, indexPath: indexPath, parentView: self) } return cell } // Retrieving Data from Server func retrieveData() { let getDataURL = "http://exampleip.org/json.php" let url: NSURL = NSURL(string: getDataURL)! do { let data: Data = try Data(contentsOf: url as URL) jsonArray = try JSONSerialization.jsonObject(with: data, options: .mutableContainers) as! NSMutableArray // Setting up testArray let testArray: NSMutableArray = [] // Looping through jsonArray for i in 0..<jsonArray.count { // Create Test Object let tID: String = (jsonArray[i] as AnyObject).object(forKey: "id") as! String let tName: String = (jsonArray[i] as AnyObject).object(forKey: "testName") as! String let tStatus1: String = (jsonArray[i] as AnyObject).object(forKey: "testStatus1") as! String let tStatus2: String = (jsonArray[i] as AnyObject).object(forKey: "testStatus2") as! String let tURL: String = (jsonArray[i] as AnyObject).object(forKey: "testURL") as! String // Add Test Objects to Test Array testArray.add(Test(testName: tName, andTestStatus1: tStatus1, andTestStatus2: tStatus2, andTestURL: tURL, andTestID: tID)) print("retrieveData") print(jsonArray, testArray) } } catch { print("Error: (Retrieving Data)") } myTableView.reloadData() } Am I doing this correctly? Why does my tableview have empty cells?
First, your networking/serialization code shouldn't be in your ViewController, but this is a better way to do things: func retrieveData() { let getDataURL = "http://exampleip.org/json.php" let url: NSURL = NSURL(string: getDataURL)! do { let data: Data = try Data(contentsOf: url as URL) guard let jsonArray = try JSONSerialization.jsonObject(with: data, options: .mutableContainers) as? [[String : AnyObject]] else { print("Error Retrieving Data") return } let testArray = jsonArray.flatMap(Test.init) // make sure the add the result in your viewController self.myTableView.models = testArray } catch { print("Error: (Retrieving Data)") } myTableView.reloadData() } extension Test { convenience init?(with jsonDictionary: [String : AnyObject]) { guard let tID = jsonDictionary["id"] as? String, let tName = jsonDictionary["testName"] as? String, let tStatus1 = jsonDictionary["testStatus1"] as? String, let tStatus2 = jsonDictionary["testStatus2"] as? String, let tURL = jsonDictionary["testURL"] as? String else { return nil } self(testName: tName, andTestStatus1: tStatus1, andTestStatus2: tStatus2, andTestURL: tURL, andTestID: tID) } } I couldn't really test it so there may be some errors, but that should point you in the right direction.
Removing this line of code worked. let testArray: NSMutableArray = []