How can I get indexPath.row in cell.swift
I have 2 files. myTableViewController.swift myTableCell.swift Can I get the indexPath.row in myTabelCell.swift function? Here is myTableCell.swift import UIKit import Parse import ActiveLabel class myTableCell : UITableViewCell { //Button @IBOutlet weak var commentBtn: UIButton! @IBOutlet weak var likeBtn: UIButton! @IBOutlet weak var moreBtn: UIButton! override func awakeFromNib() { super.awakeFromNib() } @IBAction func likeBtnTapped(_ sender: AnyObject) { //declare title of button let title = sender.title(for: UIControlState()) //I want get indexPath.row in here! } Here is myTableViewController.swift class myTableViewController: UITableViewController { //Default func override func viewDidLoad() { super.viewDidLoad() //automatic row height tableView.estimatedRowHeight = 450 tableView.rowHeight = UITableViewAutomaticDimension } // cell config override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell { //define cell let cell = tableView.dequeueReusableCell(withIdentifier: "myTableCell", for: indexPath) as! myTableCell } As you can see... I'm trying to get indexPath.row in myTableCell, liktBtnTapped function. Could you let me know how can I access or get IndexPath.row?
Easy.. You can do like this inside button action: let section = 0 let row = sender.tag let indexPath = IndexPath(row: row, section: section) let cell: myTableCell = self.feedTableView.cellForRow(at: indexPath) as! myTableCell And afterwards in cellForRowAtIndexPath: // add the row as the tag cell.button.tag = indexPath.row
Create a property indexPath in the cell class and set it in cellForRowAtIndexPath when the cell is reused. But there is a caveat: Some table view methods to rearrange the cells don't call cellForRowAtIndexPath. You have to consider this case. But if you use always only reloadData() it's safe and pretty easy. Another way is to put the code regarding controlling things back in the controller class and run it via callback closures capturing the index path.
A neat little extension that adds an indexPath property to a UITableViewCell. import UIKit extension UITableViewCell { var indexPath: IndexPath? { return (superview as? UITableView)?.indexPath(for: self) } } Here's an example of how you would use it: @IBAction func likeBtnTapped(_ sender: AnyObject) { guard let indexPath = indexPath else { return } //declare title of button let title = sender.title(for: UIControlState()) //I want get indexPath.row in here! print(indexPath) }
Heres another way of doing it import UIKit import Parse import ActiveLabel class myTableCell : UITableViewCell { //Button @IBOutlet weak var commentBtn: UIButton! @IBOutlet weak var likeBtn: UIButton! @IBOutlet weak var moreBtn: UIButton! override func awakeFromNib() { super.awakeFromNib() } } class myTableViewController: UITableViewController { //Default func //assuming you have an array for your table data source var arrayOfTitles = [String]() override func viewDidLoad() { super.viewDidLoad() //automatic row height tableView.estimatedRowHeight = 450 tableView.rowHeight = UITableViewAutomaticDimension } // cell config override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell { //define cell let cell = tableView.dequeueReusableCell(withIdentifier: "myTableCell", for: indexPath) as! myTableCell cell.commentBtn.tag = indexPath.row cell.commentBtn.addTarget(self, action: #selector(likeBtnTapped(_:), forControlEvents:.TouchUpInside) //cell config end @IBAction func likeBtnTapped(sender: UIButton) { let btn = sender let indexP = NSIndexPath(forItem: btn.tag, inSection: 0) let cell = tableView.dequeueReusableCell(withIdentifier: "myTableCell", for: indexP) as! myTableCell //I want get indexPath.row in here! let title = arrayOfTitles[indexP.row] //declare title of button cell.commentBtn.setTitle(title, forState: UIControlState.Normal) } }