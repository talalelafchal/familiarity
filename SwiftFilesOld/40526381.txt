Hot to add a View to a Scrollview programmatically using layout constraints
I'm triying to instert programatically a view inside an UIScrollView, but it doesn't appear here is my code: mainScrollView.translatesAutoresizingMaskIntoConstraints = false self.view.addSubview(mainScrollView) //Add Trailing let trailingConstraint = NSLayoutConstraint(item: mainScrollView, attribute: .trailing, relatedBy: .equal, toItem: self.view, attribute: .trailing, multiplier: 1, constant: 0) self.view.addConstraint(trailingConstraint) //Add Leading let leadingConstraint = NSLayoutConstraint(item: mainScrollView, attribute: .leading, relatedBy: .equal, toItem: self.view, attribute: .leading, multiplier: 1, constant: 0) self.view.addConstraint(leadingConstraint) //Add Top let topConstraint = NSLayoutConstraint(item: mainScrollView, attribute: .top, relatedBy: .equal, toItem: self.view, attribute: .top, multiplier: 1, constant: 0) self.view.addConstraint(topConstraint) //Add Bottom let bottomConstraint = NSLayoutConstraint(item: mainScrollView, attribute: .bottom, relatedBy: .equal, toItem: self.view, attribute: .bottom, multiplier: 1, constant: 0) self.view.addConstraint(bottomConstraint) let contentView = UIView() contentView.translatesAutoresizingMaskIntoConstraints = false contentView.backgroundColor = .blue mainScrollView.addSubview(contentView) //Add Trailing let trailingConstraintContent = NSLayoutConstraint(item: contentView, attribute: .trailing, relatedBy: .equal, toItem: mainScrollView, attribute: .trailing, multiplier: 1, constant: 0) mainScrollView.addConstraint(trailingConstraintContent) //Add Leading let leadingConstraintContent = NSLayoutConstraint(item: contentView, attribute: .leading, relatedBy: .equal, toItem: mainScrollView, attribute: .leading, multiplier: 1, constant: 0) mainScrollView.addConstraint(leadingConstraintContent) //Add Top let topConstraintContent = NSLayoutConstraint(item: contentView, attribute: .top, relatedBy: .equal, toItem: mainScrollView, attribute: .top, multiplier: 1, constant: 0) mainScrollView.addConstraint(topConstraintContent) //Add Bottom let bottomConstraintContent = NSLayoutConstraint(item: contentView, attribute: .bottom, relatedBy: .equal, toItem: mainScrollView, attribute: .bottom, multiplier: 1, constant: 0) mainScrollView.addConstraint(bottomConstraintContent) The first ScrollView is inserted because I added a background color and I can see it, but I cant see the contentview added as background color blue. Any help? UPDATE I have tried the following to and no success: mainScrollView.translatesAutoresizingMaskIntoConstraints = false let contentView = UIView() contentView.translatesAutoresizingMaskIntoConstraints = false mainScrollView.backgroundColor = .red contentView.backgroundColor = .blue self.view.addSubview(mainScrollView) mainScrollView.addSubview(contentView) let viewsDictionary = ["mainScrollView": mainScrollView, "contentView": contentView] let mainScrollViewVerticalConstraint = NSLayoutConstraint.constraints(withVisualFormat: "V:|[mainScrollView]|", options: [], metrics: nil, views: viewsDictionary) let mainScrollViewHorizontalConstraint = NSLayoutConstraint.constraints(withVisualFormat: "H:|[mainScrollView]|", options: [], metrics: nil, views: viewsDictionary) self.view.addConstraints(mainScrollViewVerticalConstraint) self.view.addConstraints(mainScrollViewHorizontalConstraint) let contentViewVerticalConstraint = NSLayoutConstraint.constraints(withVisualFormat: "V:|[contentView]|", options: [], metrics: nil, views: viewsDictionary) let contentViewHorizontalConstraint = NSLayoutConstraint.constraints(withVisualFormat: "H:|[contentView]|", options: [], metrics: nil, views: viewsDictionary) mainScrollView.addConstraints(contentViewVerticalConstraint) mainScrollView.addConstraints(contentViewHorizontalConstraint)
When adding sub views the important thing to remember is to pin them in a way to make it possible for Auto Layout to evaluate the height, this is because the scroll view determines the content size by determining the sum of heights sub views (in case of vertical). So you should specify the height in VFL . eg. let contentViewVerticalConstraint=NSLayoutConstraint.constraints(withVisualFormat: "V:|[contentView(300)]", options: [], metrics: nil, views: viewsDictionary)
Create a custom view using .xib file Apply the constraints for the custom view child components in .xib (auto layout) Create a custom view instant MyView *myview = [[[NSBundle mainBundle] loadNibNamed:@"nibName" owner:nil options:nil] objectAtIndex:0]; Set its frame for screen width as CGRect screenSize = [UIScreen mainScreen].bounds.size; myView = CGRectMake(0.0, 0.0, screenSize.width, 100.0); Add to parent view [parentView addSubView:myView];