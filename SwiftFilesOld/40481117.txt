String subscript takes long time
I read a String from plist file, the string have 105625 chars, which as 325 x 325 grid node information, I use loop to fetch the char: for x in 1...325{ for y in 1...325{ let char = string[string.index(string.startIndex, offsetBy: x * y)] .... } } but it is very slow, why?
I solved this problem with another method. Instead with string subscript, I use this : for char in string.characters{ doing some thing } Above solution is much faster than string[string.index(string.startIndex, offsetBy: x * y - 1)]
You can try using a bit of threading via this method to speed things up, can just put the whole thing inside a normal dispatch_async if nothing needs to wait for it to finish  dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)) { //put all lengthy calculations here dispatch_async(dispatch_get_main_queue()) { //do any UI updates here } } if you actually want to speed up the calculation though, you will have to break up the for loops to do loops on different threads  let group = dispatch_group_create(); let queue = dispatch_queue_create("processStuff", DISPATCH_QUEUE_CONCURRENT) for x in 1...325{ dispatch_group_async(group,queue,{ for y in 1...325{ //do stuff } }) } //dispatch_group_wait(group,DISPATCH_TIME_FOREVER); // use this if you want to wait here, blocking the main thread dispatch_group_notify(group,dispatch_get_main_queue(),{ //use this if you want to be notified when all the groups have finished without blocking the main thread }) warning: if you calculations in each inner for loop depend on other iterations of the other for loop iterations or variables of the outside for loop, your calculations could mess up, so be careful.