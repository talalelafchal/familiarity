Segue w/ Tab View Controller Keeps Passing Value
I am working on an iOS application that is built around a Tab View Controller. I have created a "Contacts" tab, where a user can find and select a contact from a list. When the user selects the contact, it takes the contact's name and passes it to a different tab. That function is being done like so:  func passName(name: String) { let navTab = self.tabBarController!.viewControllers![2] as! UINavigationController let homeTab = navTab.viewControllers[0] as! MainController homeTab.passedName = name tabBarController?.selectedIndex = 2 } Everything works as it should so far (name is loaded into text field). My issue is that the value seems to keep coming back every time I change tabs and then go back to my Home tab. For example, if I select "John" from my contacts, it will take me to the Home Tab and put John's name in a textfield. Let's say I delete the last two letters of the name, so now it is "Jo". If I load a different tab and come back, the name field has been reset to "John". It's as if the value gets re-passed every time I open the Home Tab. Also, every time I load the Home Tab after passing a name, my console prints: "Name Passed: John", so it shows that this is being processed every single time the tab appears. Here is my code for processing the name:  var passedName: String! override func viewWillAppear(animated: Bool) { super.viewWillAppear(animated) //Checks if name was passed to controller if let validName = passedName { print("Name passed: \(validName)") nameTextField.text = validName } } Am I passing the data incorrectly? I was thinking it might be because I have the above code being called in the viewWillAppear method, but that doesn't make sense, as essentially the data is only being passed one time from the Contacts tab. Thanks!
The problem is that you're not actually passing the value back to the original view. Apple's recommendation for passing information between classes is to use the delegate pattern. This allows the modal view to call the delegate class's function, which changes the name local to the original view because that function is declared in the original view's viewController. You can read more about the pattern in this tutorial, but I've also included a brief example relevant to your use case below. mainViewController: class namesTableViewController: UITableViewController, editNameDetailsViewControllerDelegate { var name : String @IBAction func editButtonPressed(_ sender: UIBarButtonItem) { performSegue(withIdentifier: "editPerson", sender: self) } override func prepare(for segue: UIStoryboardSegue, sender: Any?) { if segue.identifier == "editPerson" { //Modal segue let navController = segue.destination as! UINavigationController let controller = navController.topViewController as! editNameViewController controller.delegate = self if let person = sender as? Person { print("Sending person to edit") controller.personToEdit = person } } else { super.prepare(for: segue, sender: sender) } } //Protocol function func changeName(n: String, controller: UIViewController) { name = n dismiss(animated: true, completion: nil) } } editNameViewController: class editNameViewController: UIViewController { @IBOutlet weak var personNameTextField: UITextField! var personToEdit : Person? weak var delegate : PersonTableViewController? override func viewDidLoad() { super.viewDidLoad() if personToEdit != nil { personNameTextField.text = personToEdit?.name } } // Button Actions @IBAction func saveButtonPressed(_ sender: UIBarButtonItem) { delegate?.personDetailsView(n: personNameTextField.text, controller: self) } } Finally, the protocol class : protocol editNameDetailsViewControllerDelegate : class { func personDetailsView(n: String, controller: UIViewController) } Hope this helps.
The problem is "passedName" variable doesn't changed its value every time you edit it in your UITextField. Keep in mind that every time you change tabs, the UIViewController will call viewWillAppear and viewDidAppear. So your UITextField will always show passedName value once you select other tab and return. I suggest that every time you edit the textfield you should update passedName value. Sorry for my bad english.